// $ANTLR 3.4 CSharpAngular.g 2016-10-03 22:02:52

package com.hcl.atma.converter.parsers;

import java.util.LinkedList;

import com.hcl.atma.converter.util.*;
import com.hcl.atma.converter.generator.*;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;
import java.util.HashMap;
@SuppressWarnings({"all", "warnings", "unchecked"})
public class CSharpAngular extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "AMP", "AS", "ASSIGNMENT", "Asterisks", "Available_identifier", "BACK_SLASH", "BANG", "BASE", "BITWISE_OR", "BOOL", "BREAK", "BYTE", "CARET", "CASE", "CATCH", "CHAR", "CHARACTER_LITERAL", "CHECKED", "CLASS", "CLOSE_BRACE", "CLOSE_BRACKET", "CLOSE_PARENS", "COLON", "COMMA", "CONST", "CONTINUE", "Character", "Combining_character", "Conditional_symbol", "Connecting_character", "DECIMAL", "DECIMAL_DIGIT", "DEFAULT", "DELEGATE", "DELIMITED_COMMENT", "DELIMITED_DOC_COMMENT", "DIV", "DO", "DOT", "DOUBLE", "DOUBLEQUOTED_STRING", "DOUBLE_BACK_SLASH", "DOUBLE_COLON", "DOUBLE_QUOTE", "Decimal_digit_character", "Decimal_digits", "Decimal_integer_literal", "Delimited_comment_section", "ELSE", "ENDCOMMENT", "ENUM", "EVENT", "EXPLICIT", "EXTERN", "Exponent_part", "FALSE", "FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", "File_name", "File_name_character", "File_name_characters", "Formatting_character", "GOTO", "GT", "HEX_DIGIT", "Hex_digits", "Hexadecimal_escape_sequence", "Hexadecimal_integer_literal", "IDENTIFIER", "IF", "IMPLICIT", "IN", "INT", "INTEGER_LITERAL", "INTERFACE", "INTERNAL", "INTERR", "IS", "Identifier_or_keyword", "Identifier_part_character", "Identifier_start_character", "Input_character", "Input_characters", "Integer_type_suffix", "LOCK", "LONG", "LT", "Letter_character", "Line_indicator", "LiteralAccess", "MINUS", "NAMESPACE", "NEW", "NEW_LINE", "NEW_LINE_CHARACTER", "NULL", "Not_number_sign", "Not_slash_or_asterisk", "OBJECT", "OPEN_BRACE", "OPEN_BRACKET", "OPEN_PARENS", "OPERATOR", "OP_ADD_ASSIGNMENT", "OP_AND", "OP_AND_ASSIGNMENT", "OP_COALESCING", "OP_DEC", "OP_DIV_ASSIGNMENT", "OP_EQ", "OP_GE", "OP_INC", "OP_LE", "OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_MOD_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_NE", "OP_OR", "OP_OR_ASSIGNMENT", "OP_PTR", "OP_SUB_ASSIGNMENT", "OP_XOR_ASSIGNMENT", "OUT", "OVERRIDE", "PARAMS", "PERCENT", "PLUS", "PRIVATE", "PROTECTED", "PUBLIC", "Pp_and_expression", "Pp_conditional", "Pp_declaration", "Pp_diagnostic", "Pp_directive", "Pp_elif_section", "Pp_else_section", "Pp_end_region", "Pp_endif", "Pp_equality_expression", "Pp_expression", "Pp_if_section", "Pp_line", "Pp_message", "Pp_new_line", "Pp_or_expression", "Pp_pragma", "Pp_pragma_text", "Pp_primary_expression", "Pp_region", "Pp_start_region", "Pp_unary_expression", "QUOTE", "Quote_escape_sequence", "READONLY", "REAL_LITERAL", "REF", "RETURN", "Real_type_suffix", "Regular_string_literal", "Regular_string_literal_character", "SBYTE", "SEALED", "SEMICOLON", "SHARP", "SHORT", "SINGLE_LINE_COMMENT", "SINGLE_LINE_DOC_COMMENT", "SIZEOF", "STACKALLOC", "STAR", "STATIC", "STRING", "STRING_LITERAL", "STRUCT", "SWITCH", "Sign", "Simple_escape_sequence", "Single_character", "Single_regular_string_literal_character", "Single_verbatim_string_literal_character", "SkiPped_characters", "SkiPped_section_part", "THIS", "THROW", "TILDE", "TRUE", "TRY", "TYPEOF", "Tokens", "UINT", "ULONG", "UNCHECKED", "UNICODE_CLASS_CF", "UNICODE_CLASS_LL", "UNICODE_CLASS_LM", "UNICODE_CLASS_LO", "UNICODE_CLASS_LT", "UNICODE_CLASS_LU", "UNICODE_CLASS_MC", "UNICODE_CLASS_MN", "UNICODE_CLASS_ND", "UNICODE_CLASS_NL", "UNICODE_CLASS_PC", "UNICODE_CLASS_ZS", "UNSAFE", "USHORT", "USING", "Unicode_escape_sequence", "VIRTUAL", "VOID", "VOLATILE", "Verbatim_string_literal", "Verbatim_string_literal_character", "WHILE", "WHITESPACE", "Whitespace_character", "Whitespace_characters"
    };

    public static final int EOF=-1;
    public static final int ABSTRACT=4;
    public static final int AMP=5;
    public static final int AS=6;
    public static final int ASSIGNMENT=7;
    public static final int Asterisks=8;
    public static final int Available_identifier=9;
    public static final int BACK_SLASH=10;
    public static final int BANG=11;
    public static final int BASE=12;
    public static final int BITWISE_OR=13;
    public static final int BOOL=14;
    public static final int BREAK=15;
    public static final int BYTE=16;
    public static final int CARET=17;
    public static final int CASE=18;
    public static final int CATCH=19;
    public static final int CHAR=20;
    public static final int CHARACTER_LITERAL=21;
    public static final int CHECKED=22;
    public static final int CLASS=23;
    public static final int CLOSE_BRACE=24;
    public static final int CLOSE_BRACKET=25;
    public static final int CLOSE_PARENS=26;
    public static final int COLON=27;
    public static final int COMMA=28;
    public static final int CONST=29;
    public static final int CONTINUE=30;
    public static final int Character=31;
    public static final int Combining_character=32;
    public static final int Conditional_symbol=33;
    public static final int Connecting_character=34;
    public static final int DECIMAL=35;
    public static final int DECIMAL_DIGIT=36;
    public static final int DEFAULT=37;
    public static final int DELEGATE=38;
    public static final int DELIMITED_COMMENT=39;
    public static final int DELIMITED_DOC_COMMENT=40;
    public static final int DIV=41;
    public static final int DO=42;
    public static final int DOT=43;
    public static final int DOUBLE=44;
    public static final int DOUBLEQUOTED_STRING=45;
    public static final int DOUBLE_BACK_SLASH=46;
    public static final int DOUBLE_COLON=47;
    public static final int DOUBLE_QUOTE=48;
    public static final int Decimal_digit_character=49;
    public static final int Decimal_digits=50;
    public static final int Decimal_integer_literal=51;
    public static final int Delimited_comment_section=52;
    public static final int ELSE=53;
    public static final int ENDCOMMENT=54;
    public static final int ENUM=55;
    public static final int EVENT=56;
    public static final int EXPLICIT=57;
    public static final int EXTERN=58;
    public static final int Exponent_part=59;
    public static final int FALSE=60;
    public static final int FINALLY=61;
    public static final int FIXED=62;
    public static final int FLOAT=63;
    public static final int FOR=64;
    public static final int FOREACH=65;
    public static final int File_name=66;
    public static final int File_name_character=67;
    public static final int File_name_characters=68;
    public static final int Formatting_character=69;
    public static final int GOTO=70;
    public static final int GT=71;
    public static final int HEX_DIGIT=72;
    public static final int Hex_digits=73;
    public static final int Hexadecimal_escape_sequence=74;
    public static final int Hexadecimal_integer_literal=75;
    public static final int IDENTIFIER=76;
    public static final int IF=77;
    public static final int IMPLICIT=78;
    public static final int IN=79;
    public static final int INT=80;
    public static final int INTEGER_LITERAL=81;
    public static final int INTERFACE=82;
    public static final int INTERNAL=83;
    public static final int INTERR=84;
    public static final int IS=85;
    public static final int Identifier_or_keyword=86;
    public static final int Identifier_part_character=87;
    public static final int Identifier_start_character=88;
    public static final int Input_character=89;
    public static final int Input_characters=90;
    public static final int Integer_type_suffix=91;
    public static final int LOCK=92;
    public static final int LONG=93;
    public static final int LT=94;
    public static final int Letter_character=95;
    public static final int Line_indicator=96;
    public static final int LiteralAccess=97;
    public static final int MINUS=98;
    public static final int NAMESPACE=99;
    public static final int NEW=100;
    public static final int NEW_LINE=101;
    public static final int NEW_LINE_CHARACTER=102;
    public static final int NULL=103;
    public static final int Not_number_sign=104;
    public static final int Not_slash_or_asterisk=105;
    public static final int OBJECT=106;
    public static final int OPEN_BRACE=107;
    public static final int OPEN_BRACKET=108;
    public static final int OPEN_PARENS=109;
    public static final int OPERATOR=110;
    public static final int OP_ADD_ASSIGNMENT=111;
    public static final int OP_AND=112;
    public static final int OP_AND_ASSIGNMENT=113;
    public static final int OP_COALESCING=114;
    public static final int OP_DEC=115;
    public static final int OP_DIV_ASSIGNMENT=116;
    public static final int OP_EQ=117;
    public static final int OP_GE=118;
    public static final int OP_INC=119;
    public static final int OP_LE=120;
    public static final int OP_LEFT_SHIFT=121;
    public static final int OP_LEFT_SHIFT_ASSIGNMENT=122;
    public static final int OP_MOD_ASSIGNMENT=123;
    public static final int OP_MULT_ASSIGNMENT=124;
    public static final int OP_NE=125;
    public static final int OP_OR=126;
    public static final int OP_OR_ASSIGNMENT=127;
    public static final int OP_PTR=128;
    public static final int OP_SUB_ASSIGNMENT=129;
    public static final int OP_XOR_ASSIGNMENT=130;
    public static final int OUT=131;
    public static final int OVERRIDE=132;
    public static final int PARAMS=133;
    public static final int PERCENT=134;
    public static final int PLUS=135;
    public static final int PRIVATE=136;
    public static final int PROTECTED=137;
    public static final int PUBLIC=138;
    public static final int Pp_and_expression=139;
    public static final int Pp_conditional=140;
    public static final int Pp_declaration=141;
    public static final int Pp_diagnostic=142;
    public static final int Pp_directive=143;
    public static final int Pp_elif_section=144;
    public static final int Pp_else_section=145;
    public static final int Pp_end_region=146;
    public static final int Pp_endif=147;
    public static final int Pp_equality_expression=148;
    public static final int Pp_expression=149;
    public static final int Pp_if_section=150;
    public static final int Pp_line=151;
    public static final int Pp_message=152;
    public static final int Pp_new_line=153;
    public static final int Pp_or_expression=154;
    public static final int Pp_pragma=155;
    public static final int Pp_pragma_text=156;
    public static final int Pp_primary_expression=157;
    public static final int Pp_region=158;
    public static final int Pp_start_region=159;
    public static final int Pp_unary_expression=160;
    public static final int QUOTE=161;
    public static final int Quote_escape_sequence=162;
    public static final int READONLY=163;
    public static final int REAL_LITERAL=164;
    public static final int REF=165;
    public static final int RETURN=166;
    public static final int Real_type_suffix=167;
    public static final int Regular_string_literal=168;
    public static final int Regular_string_literal_character=169;
    public static final int SBYTE=170;
    public static final int SEALED=171;
    public static final int SEMICOLON=172;
    public static final int SHARP=173;
    public static final int SHORT=174;
    public static final int SINGLE_LINE_COMMENT=175;
    public static final int SINGLE_LINE_DOC_COMMENT=176;
    public static final int SIZEOF=177;
    public static final int STACKALLOC=178;
    public static final int STAR=179;
    public static final int STATIC=180;
    public static final int STRING=181;
    public static final int STRING_LITERAL=182;
    public static final int STRUCT=183;
    public static final int SWITCH=184;
    public static final int Sign=185;
    public static final int Simple_escape_sequence=186;
    public static final int Single_character=187;
    public static final int Single_regular_string_literal_character=188;
    public static final int Single_verbatim_string_literal_character=189;
    public static final int SkiPped_characters=190;
    public static final int SkiPped_section_part=191;
    public static final int THIS=192;
    public static final int THROW=193;
    public static final int TILDE=194;
    public static final int TRUE=195;
    public static final int TRY=196;
    public static final int TYPEOF=197;
    public static final int Tokens=198;
    public static final int UINT=199;
    public static final int ULONG=200;
    public static final int UNCHECKED=201;
    public static final int UNICODE_CLASS_CF=202;
    public static final int UNICODE_CLASS_LL=203;
    public static final int UNICODE_CLASS_LM=204;
    public static final int UNICODE_CLASS_LO=205;
    public static final int UNICODE_CLASS_LT=206;
    public static final int UNICODE_CLASS_LU=207;
    public static final int UNICODE_CLASS_MC=208;
    public static final int UNICODE_CLASS_MN=209;
    public static final int UNICODE_CLASS_ND=210;
    public static final int UNICODE_CLASS_NL=211;
    public static final int UNICODE_CLASS_PC=212;
    public static final int UNICODE_CLASS_ZS=213;
    public static final int UNSAFE=214;
    public static final int USHORT=215;
    public static final int USING=216;
    public static final int Unicode_escape_sequence=217;
    public static final int VIRTUAL=218;
    public static final int VOID=219;
    public static final int VOLATILE=220;
    public static final int Verbatim_string_literal=221;
    public static final int Verbatim_string_literal_character=222;
    public static final int WHILE=223;
    public static final int WHITESPACE=224;
    public static final int Whitespace_character=225;
    public static final int Whitespace_characters=226;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public CSharpAngular(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public CSharpAngular(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected StringTemplateGroup templateLib =
  new StringTemplateGroup("CSharpAngularTemplates", AngleBracketTemplateLexer.class);

public void setTemplateLib(StringTemplateGroup templateLib) {
  this.templateLib = templateLib;
}
public StringTemplateGroup getTemplateLib() {
  return templateLib;
}
/** allows convenient multi-value initialization:
 *  "new STAttrMap().put(...).put(...)"
 */
public static class STAttrMap extends HashMap {
  public STAttrMap put(String attrName, Object value) {
    super.put(attrName, value);
    return this;
  }
  public STAttrMap put(String attrName, int value) {
    super.put(attrName, new Integer(value));
    return this;
  }
}
    public String[] getTokenNames() { return CSharpAngular.tokenNames; }
    public String getGrammarFileName() { return "CSharpAngular.g"; }


    // the following methods are only used for debug purposes
    private List<String> errors = new LinkedList<String>();

    @Override
    public void displayRecognitionError(String[] tokenNames, RecognitionException e) {
        super.displayRecognitionError(tokenNames, e);
        String hdr = getErrorHeader(e);
        String msg = getErrorMessage(e, tokenNames);
    //    errors.add(hdr + " " + msg);
    //    System.err.println("Error--");
        
    }

    public List<String> getErrors() {
        return errors;
    }

    private void next(int n) {
      System.err.print("next: ");
      for (int i=1; i<=n; i++) {
    //    System.err.print(" | " + input.LT(i).getType() + "=" + input.LT(i).getText());
      }
    //  System.err.println("Error--");
    }

    private String className;

    public String getClassName() {
        return className;
    }
      
    public void setClassName(String className) {
        this.className = className;
    }
      
    private String updateClassName(String className){
      setClassName(className);
      return "";
    }

    private String idName;

    public String getIdName() {
        return idName;
    }
      
    public void setIdName(String idName) {
        this.idName = idName;
    }
      
    private String updateIdName(String idName){
      setIdName(idName);
      return "";
    }

    private String expressionStmt;

    public String getExpressionStmt() {
        return expressionStmt;
    }
      
    public void setExpressionStmt(String expressionStmt) {
        this.expressionStmt = expressionStmt;
    }

    private String updateExpressionStmt(String expressionStmt){
      setExpressionStmt(expressionStmt);
      return "";
    }

    private String expressionStmt2;

    public String getExpressionStmt2() {
        return expressionStmt2;
    }
      
    public void setExpressionStmt2(String expressionStmt2) {
        this.expressionStmt2 = expressionStmt2;
    }

    private String updateExpressionStmt2(String expressionStmt2){
      setExpressionStmt2(expressionStmt2);
      return "";
    }

    private boolean isLinq;

    public boolean isLinq() {
        return isLinq;
      }

    public void setLinq(boolean isLinq) {
        this.isLinq = isLinq;
      } 
      
    private String updateLinqStatus(boolean isLinq){
      setLinq(isLinq);
      return "";
    }
      


    public static class cSharpAngular_return extends ParserRuleReturnScope {
        public String javaContent;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "cSharpAngular"
    // CSharpAngular.g:124:1: cSharpAngular returns [String javaContent] : module EOF ;
    public final CSharpAngular.cSharpAngular_return cSharpAngular() throws RecognitionException {
        CSharpAngular.cSharpAngular_return retval = new CSharpAngular.cSharpAngular_return();
        retval.start = input.LT(1);


        CSharpAngular.module_return module1 =null;


        try {
            // CSharpAngular.g:125:3: ( module EOF )
            // CSharpAngular.g:126:3: module EOF
            {
            pushFollow(FOLLOW_module_in_cSharpAngular92);
            module1=module();

            state._fsp--;
            if (state.failed) return retval;

            match(input,EOF,FOLLOW_EOF_in_cSharpAngular94); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
                retval.javaContent = (module1!=null?module1.st:null).toString();
              }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cSharpAngular"


    public static class module_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "module"
    // CSharpAngular.g:135:1: module : cb= compilation_unit -> createClass(classBody=cb);
    public final CSharpAngular.module_return module() throws RecognitionException {
        CSharpAngular.module_return retval = new CSharpAngular.module_return();
        retval.start = input.LT(1);


        CSharpAngular.compilation_unit_return cb =null;


        try {
            // CSharpAngular.g:136:3: (cb= compilation_unit -> createClass(classBody=cb))
            // CSharpAngular.g:137:3: cb= compilation_unit
            {
            pushFollow(FOLLOW_compilation_unit_in_module116);
            cb=compilation_unit();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 138:3: -> createClass(classBody=cb)
              {
                  retval.st = templateLib.getInstanceOf("createClass",new STAttrMap().put("classBody", cb));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "module"


    public static class namespace_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_name"
    // CSharpAngular.g:141:1: namespace_name : nms= namespace_or_type_name -> namespaceName(value=nms);
    public final CSharpAngular.namespace_name_return namespace_name() throws RecognitionException {
        CSharpAngular.namespace_name_return retval = new CSharpAngular.namespace_name_return();
        retval.start = input.LT(1);


        CSharpAngular.namespace_or_type_name_return nms =null;


        try {
            // CSharpAngular.g:142:2: (nms= namespace_or_type_name -> namespaceName(value=nms))
            // CSharpAngular.g:143:2: nms= namespace_or_type_name
            {
            pushFollow(FOLLOW_namespace_or_type_name_in_namespace_name145);
            nms=namespace_or_type_name();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 144:3: -> namespaceName(value=nms)
              {
                  retval.st = templateLib.getInstanceOf("namespaceName",new STAttrMap().put("value", nms));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "namespace_name"


    public static class type_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_name"
    // CSharpAngular.g:146:1: type_name : nmsName= namespace_or_type_name -> typeName(value=nmsName);
    public final CSharpAngular.type_name_return type_name() throws RecognitionException {
        CSharpAngular.type_name_return retval = new CSharpAngular.type_name_return();
        retval.start = input.LT(1);


        CSharpAngular.namespace_or_type_name_return nmsName =null;


        try {
            // CSharpAngular.g:147:2: (nmsName= namespace_or_type_name -> typeName(value=nmsName))
            // CSharpAngular.g:148:2: nmsName= namespace_or_type_name
            {
            pushFollow(FOLLOW_namespace_or_type_name_in_type_name179);
            nmsName=namespace_or_type_name();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 149:2: -> typeName(value=nmsName)
              {
                  retval.st = templateLib.getInstanceOf("typeName",new STAttrMap().put("value", nmsName));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_name"


    public static class namespace_or_type_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_or_type_name"
    // CSharpAngular.g:158:1: namespace_or_type_name : (id= observableCollection_contextual_keyword typArg= type_argument_list_opt (nmsTypChld1+= namespace_or_type_name_Chld )* -> namespaceOrTypeName(firstPart=CSharpAngularHelper.replaceJavaType(id.st.toString().trim())argList=typArgsecondPart=$nmsTypChld1)|fstPrt= qualified_alias_member (nmsTypChld2+= namespace_or_type_name_Chld )* -> namespaceOrTypeName2(firstPart=$fstPrt.textsecondPart=$nmsTypChld2));
    public final CSharpAngular.namespace_or_type_name_return namespace_or_type_name() throws RecognitionException {
        CSharpAngular.namespace_or_type_name_return retval = new CSharpAngular.namespace_or_type_name_return();
        retval.start = input.LT(1);


        List list_nmsTypChld1=null;
        List list_nmsTypChld2=null;
        CSharpAngular.observableCollection_contextual_keyword_return id =null;

        CSharpAngular.type_argument_list_opt_return typArg =null;

        CSharpAngular.qualified_alias_member_return fstPrt =null;

        RuleReturnScope nmsTypChld1 = null;
        RuleReturnScope nmsTypChld2 = null;
        try {
            // CSharpAngular.g:159:3: (id= observableCollection_contextual_keyword typArg= type_argument_list_opt (nmsTypChld1+= namespace_or_type_name_Chld )* -> namespaceOrTypeName(firstPart=CSharpAngularHelper.replaceJavaType(id.st.toString().trim())argList=typArgsecondPart=$nmsTypChld1)|fstPrt= qualified_alias_member (nmsTypChld2+= namespace_or_type_name_Chld )* -> namespaceOrTypeName2(firstPart=$fstPrt.textsecondPart=$nmsTypChld2))
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==IDENTIFIER) ) {
                int LA3_1 = input.LA(2);

                if ( (LA3_1==DOUBLE_COLON) ) {
                    alt3=2;
                }
                else if ( (LA3_1==EOF||(LA3_1 >= AMP && LA3_1 <= AS)||(LA3_1 >= BITWISE_OR && LA3_1 <= BOOL)||(LA3_1 >= BYTE && LA3_1 <= CARET)||LA3_1==CHAR||(LA3_1 >= CLOSE_BRACE && LA3_1 <= COMMA)||LA3_1==DECIMAL||(LA3_1 >= DOT && LA3_1 <= DOUBLE)||LA3_1==FLOAT||LA3_1==GT||LA3_1==IDENTIFIER||LA3_1==INT||(LA3_1 >= INTERR && LA3_1 <= IS)||(LA3_1 >= LONG && LA3_1 <= LT)||(LA3_1 >= OBJECT && LA3_1 <= OPERATOR)||LA3_1==OP_AND||LA3_1==OP_COALESCING||(LA3_1 >= OP_EQ && LA3_1 <= OP_GE)||LA3_1==OP_LE||(LA3_1 >= OP_NE && LA3_1 <= OP_OR)||LA3_1==SBYTE||LA3_1==SEMICOLON||LA3_1==SHORT||LA3_1==STAR||LA3_1==STRING||LA3_1==THIS||(LA3_1 >= UINT && LA3_1 <= ULONG)||LA3_1==USHORT||LA3_1==VOID) ) {
                    alt3=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 3, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // CSharpAngular.g:160:3: id= observableCollection_contextual_keyword typArg= type_argument_list_opt (nmsTypChld1+= namespace_or_type_name_Chld )*
                    {
                    pushFollow(FOLLOW_observableCollection_contextual_keyword_in_namespace_or_type_name213);
                    id=observableCollection_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_type_argument_list_opt_in_namespace_or_type_name217);
                    typArg=type_argument_list_opt();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharpAngular.g:160:77: (nmsTypChld1+= namespace_or_type_name_Chld )*
                    loop1:
                    do {
                        int alt1=2;
                        int LA1_0 = input.LA(1);

                        if ( (LA1_0==DOT) ) {
                            int LA1_2 = input.LA(2);

                            if ( (LA1_2==IDENTIFIER) ) {
                                alt1=1;
                            }


                        }


                        switch (alt1) {
                    	case 1 :
                    	    // CSharpAngular.g:160:78: nmsTypChld1+= namespace_or_type_name_Chld
                    	    {
                    	    pushFollow(FOLLOW_namespace_or_type_name_Chld_in_namespace_or_type_name223);
                    	    nmsTypChld1=namespace_or_type_name_Chld();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_nmsTypChld1==null) list_nmsTypChld1=new ArrayList();
                    	    list_nmsTypChld1.add(nmsTypChld1.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    break loop1;
                        }
                    } while (true);


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 161:3: -> namespaceOrTypeName(firstPart=CSharpAngularHelper.replaceJavaType(id.st.toString().trim())argList=typArgsecondPart=$nmsTypChld1)
                      {
                          retval.st = templateLib.getInstanceOf("namespaceOrTypeName",new STAttrMap().put("firstPart", CSharpAngularHelper.replaceJavaType(id.st.toString().trim())).put("argList", typArg).put("secondPart", list_nmsTypChld1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:162:4: fstPrt= qualified_alias_member (nmsTypChld2+= namespace_or_type_name_Chld )*
                    {
                    pushFollow(FOLLOW_qualified_alias_member_in_namespace_or_type_name251);
                    fstPrt=qualified_alias_member();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharpAngular.g:162:34: (nmsTypChld2+= namespace_or_type_name_Chld )*
                    loop2:
                    do {
                        int alt2=2;
                        int LA2_0 = input.LA(1);

                        if ( (LA2_0==DOT) ) {
                            int LA2_2 = input.LA(2);

                            if ( (LA2_2==IDENTIFIER) ) {
                                alt2=1;
                            }


                        }


                        switch (alt2) {
                    	case 1 :
                    	    // CSharpAngular.g:162:35: nmsTypChld2+= namespace_or_type_name_Chld
                    	    {
                    	    pushFollow(FOLLOW_namespace_or_type_name_Chld_in_namespace_or_type_name256);
                    	    nmsTypChld2=namespace_or_type_name_Chld();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_nmsTypChld2==null) list_nmsTypChld2=new ArrayList();
                    	    list_nmsTypChld2.add(nmsTypChld2.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    break loop2;
                        }
                    } while (true);


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 163:3: -> namespaceOrTypeName2(firstPart=$fstPrt.textsecondPart=$nmsTypChld2)
                      {
                          retval.st = templateLib.getInstanceOf("namespaceOrTypeName2",new STAttrMap().put("firstPart", (fstPrt!=null?input.toString(fstPrt.start,fstPrt.stop):null)).put("secondPart", list_nmsTypChld2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "namespace_or_type_name"


    public static class observableCollection_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "observableCollection_contextual_keyword"
    // CSharpAngular.g:166:1: observableCollection_contextual_keyword : ({...}? IDENTIFIER -> text(value=$IDENTIFIER.text)|{...}? IDENTIFIER -> text(value=\"List\"));
    public final CSharpAngular.observableCollection_contextual_keyword_return observableCollection_contextual_keyword() throws RecognitionException {
        CSharpAngular.observableCollection_contextual_keyword_return retval = new CSharpAngular.observableCollection_contextual_keyword_return();
        retval.start = input.LT(1);


        Token IDENTIFIER2=null;

        try {
            // CSharpAngular.g:167:3: ({...}? IDENTIFIER -> text(value=$IDENTIFIER.text)|{...}? IDENTIFIER -> text(value=\"List\"))
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==IDENTIFIER) ) {
                int LA4_1 = input.LA(2);

                if ( ((!input.LT(1).getText().equals("ObservableCollection"))) ) {
                    alt4=1;
                }
                else if ( ((input.LT(1).getText().equals("ObservableCollection"))) ) {
                    alt4=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 4, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;

            }
            switch (alt4) {
                case 1 :
                    // CSharpAngular.g:167:5: {...}? IDENTIFIER
                    {
                    if ( !((!input.LT(1).getText().equals("ObservableCollection"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "observableCollection_contextual_keyword", "!input.LT(1).getText().equals(\"ObservableCollection\")");
                    }

                    IDENTIFIER2=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_observableCollection_contextual_keyword290); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 168:5: -> text(value=$IDENTIFIER.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IDENTIFIER2!=null?IDENTIFIER2.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:169:4: {...}? IDENTIFIER
                    {
                    if ( !((input.LT(1).getText().equals("ObservableCollection"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "observableCollection_contextual_keyword", "input.LT(1).getText().equals(\"ObservableCollection\")");
                    }

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_observableCollection_contextual_keyword309); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 170:5: -> text(value=\"List\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "List"));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "observableCollection_contextual_keyword"


    public static class namespace_or_type_name_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_or_type_name_Chld"
    // CSharpAngular.g:173:1: namespace_or_type_name_Chld : ( ( ( DOT IDENTIFIER OPEN_PARENS )=> DOT id= IDENTIFIER argLst= type_argument_list_opt ) -> namespaceOrTypeNameChld1(identifier=$id.textargumentList=argLst)| ( ( DOT IDENTIFIER LT )=> DOT id= IDENTIFIER argLst= type_argument_list_opt ) -> namespaceOrTypeNameChld1(identifier=$id.textargumentList=argLst)| DOT id= IDENTIFIER argLst= type_argument_list_opt -> namespaceOrTypeNameChld(identifier=$id.textargumentList=argLst));
    public final CSharpAngular.namespace_or_type_name_Chld_return namespace_or_type_name_Chld() throws RecognitionException {
        CSharpAngular.namespace_or_type_name_Chld_return retval = new CSharpAngular.namespace_or_type_name_Chld_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharpAngular.type_argument_list_opt_return argLst =null;


        try {
            // CSharpAngular.g:174:3: ( ( ( DOT IDENTIFIER OPEN_PARENS )=> DOT id= IDENTIFIER argLst= type_argument_list_opt ) -> namespaceOrTypeNameChld1(identifier=$id.textargumentList=argLst)| ( ( DOT IDENTIFIER LT )=> DOT id= IDENTIFIER argLst= type_argument_list_opt ) -> namespaceOrTypeNameChld1(identifier=$id.textargumentList=argLst)| DOT id= IDENTIFIER argLst= type_argument_list_opt -> namespaceOrTypeNameChld(identifier=$id.textargumentList=argLst))
            int alt5=3;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==DOT) ) {
                int LA5_1 = input.LA(2);

                if ( (LA5_1==IDENTIFIER) ) {
                    int LA5_2 = input.LA(3);

                    if ( (synpred1_CSharpAngular()) ) {
                        alt5=1;
                    }
                    else if ( (synpred2_CSharpAngular()) ) {
                        alt5=2;
                    }
                    else if ( (true) ) {
                        alt5=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 5, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 5, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;

            }
            switch (alt5) {
                case 1 :
                    // CSharpAngular.g:175:3: ( ( DOT IDENTIFIER OPEN_PARENS )=> DOT id= IDENTIFIER argLst= type_argument_list_opt )
                    {
                    // CSharpAngular.g:175:3: ( ( DOT IDENTIFIER OPEN_PARENS )=> DOT id= IDENTIFIER argLst= type_argument_list_opt )
                    // CSharpAngular.g:175:4: ( DOT IDENTIFIER OPEN_PARENS )=> DOT id= IDENTIFIER argLst= type_argument_list_opt
                    {
                    match(input,DOT,FOLLOW_DOT_in_namespace_or_type_name_Chld351); if (state.failed) return retval;

                    id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_namespace_or_type_name_Chld355); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_argument_list_opt_in_namespace_or_type_name_Chld359);
                    argLst=type_argument_list_opt();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 176:3: -> namespaceOrTypeNameChld1(identifier=$id.textargumentList=argLst)
                      {
                          retval.st = templateLib.getInstanceOf("namespaceOrTypeNameChld1",new STAttrMap().put("identifier", (id!=null?id.getText():null)).put("argumentList", argLst));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:178:3: ( ( DOT IDENTIFIER LT )=> DOT id= IDENTIFIER argLst= type_argument_list_opt )
                    {
                    // CSharpAngular.g:178:3: ( ( DOT IDENTIFIER LT )=> DOT id= IDENTIFIER argLst= type_argument_list_opt )
                    // CSharpAngular.g:178:4: ( DOT IDENTIFIER LT )=> DOT id= IDENTIFIER argLst= type_argument_list_opt
                    {
                    match(input,DOT,FOLLOW_DOT_in_namespace_or_type_name_Chld396); if (state.failed) return retval;

                    id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_namespace_or_type_name_Chld400); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_argument_list_opt_in_namespace_or_type_name_Chld404);
                    argLst=type_argument_list_opt();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 179:3: -> namespaceOrTypeNameChld1(identifier=$id.textargumentList=argLst)
                      {
                          retval.st = templateLib.getInstanceOf("namespaceOrTypeNameChld1",new STAttrMap().put("identifier", (id!=null?id.getText():null)).put("argumentList", argLst));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:181:3: DOT id= IDENTIFIER argLst= type_argument_list_opt
                    {
                    match(input,DOT,FOLLOW_DOT_in_namespace_or_type_name_Chld428); if (state.failed) return retval;

                    id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_namespace_or_type_name_Chld432); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_argument_list_opt_in_namespace_or_type_name_Chld436);
                    argLst=type_argument_list_opt();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 182:3: -> namespaceOrTypeNameChld(identifier=$id.textargumentList=argLst)
                      {
                          retval.st = templateLib.getInstanceOf("namespaceOrTypeNameChld",new STAttrMap().put("identifier", (id!=null?id.getText():null)).put("argumentList", argLst));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "namespace_or_type_name_Chld"


    public static class type_argument_list_opt_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_argument_list_opt"
    // CSharpAngular.g:187:1: type_argument_list_opt : ( ( ( type_argument_list )=>tal= type_argument_list ) -> typeArgumentListOpt(argList=tal)| -> typeArgumentListOpt(argList=null));
    public final CSharpAngular.type_argument_list_opt_return type_argument_list_opt() throws RecognitionException {
        CSharpAngular.type_argument_list_opt_return retval = new CSharpAngular.type_argument_list_opt_return();
        retval.start = input.LT(1);


        CSharpAngular.type_argument_list_return tal =null;


        try {
            // CSharpAngular.g:188:3: ( ( ( type_argument_list )=>tal= type_argument_list ) -> typeArgumentListOpt(argList=tal)| -> typeArgumentListOpt(argList=null))
            int alt6=2;
            alt6 = dfa6.predict(input);
            switch (alt6) {
                case 1 :
                    // CSharpAngular.g:189:3: ( ( type_argument_list )=>tal= type_argument_list )
                    {
                    // CSharpAngular.g:189:3: ( ( type_argument_list )=>tal= type_argument_list )
                    // CSharpAngular.g:189:4: ( type_argument_list )=>tal= type_argument_list
                    {
                    pushFollow(FOLLOW_type_argument_list_in_type_argument_list_opt479);
                    tal=type_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 190:3: -> typeArgumentListOpt(argList=tal)
                      {
                          retval.st = templateLib.getInstanceOf("typeArgumentListOpt",new STAttrMap().put("argList", tal));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:192:3: 
                    {
                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 192:3: -> typeArgumentListOpt(argList=null)
                      {
                          retval.st = templateLib.getInstanceOf("typeArgumentListOpt",new STAttrMap().put("argList", null));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_argument_list_opt"


    public static class type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type"
    // CSharpAngular.g:203:1: type : bTyp= base_type ( ( typeChld )=> (chld+= typeChld ) )* -> dattype(firstType=bTyplist=$chld);
    public final CSharpAngular.type_return type() throws RecognitionException {
        CSharpAngular.type_return retval = new CSharpAngular.type_return();
        retval.start = input.LT(1);


        List list_chld=null;
        CSharpAngular.base_type_return bTyp =null;

        RuleReturnScope chld = null;
        try {
            // CSharpAngular.g:204:3: (bTyp= base_type ( ( typeChld )=> (chld+= typeChld ) )* -> dattype(firstType=bTyplist=$chld))
            // CSharpAngular.g:205:3: bTyp= base_type ( ( typeChld )=> (chld+= typeChld ) )*
            {
            pushFollow(FOLLOW_base_type_in_type527);
            bTyp=base_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:205:18: ( ( typeChld )=> (chld+= typeChld ) )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==OPEN_BRACKET) ) {
                    int LA7_5 = input.LA(2);

                    if ( (synpred4_CSharpAngular()) ) {
                        alt7=1;
                    }


                }
                else if ( (LA7_0==INTERR) ) {
                    int LA7_15 = input.LA(2);

                    if ( (synpred4_CSharpAngular()) ) {
                        alt7=1;
                    }


                }
                else if ( (LA7_0==STAR) && (synpred4_CSharpAngular())) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // CSharpAngular.g:205:19: ( typeChld )=> (chld+= typeChld )
            	    {
            	    // CSharpAngular.g:205:33: (chld+= typeChld )
            	    // CSharpAngular.g:205:34: chld+= typeChld
            	    {
            	    pushFollow(FOLLOW_typeChld_in_type539);
            	    chld=typeChld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_chld==null) list_chld=new ArrayList();
            	    list_chld.add(chld.getTemplate());


            	    }


            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 206:3: -> dattype(firstType=bTyplist=$chld)
              {
                  retval.st = templateLib.getInstanceOf("dattype",new STAttrMap().put("firstType", bTyp).put("list", list_chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type"


    public static class typeChld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "typeChld"
    // CSharpAngular.g:209:1: typeChld : (inter= INTERR -> typeChld(value=\"\")|rnkSp= rank_specifier -> typeChld(value=rnkSp)|st= STAR -> typeChld(value=$STAR.text));
    public final CSharpAngular.typeChld_return typeChld() throws RecognitionException {
        CSharpAngular.typeChld_return retval = new CSharpAngular.typeChld_return();
        retval.start = input.LT(1);


        Token inter=null;
        Token st=null;
        CSharpAngular.rank_specifier_return rnkSp =null;


        try {
            // CSharpAngular.g:210:3: (inter= INTERR -> typeChld(value=\"\")|rnkSp= rank_specifier -> typeChld(value=rnkSp)|st= STAR -> typeChld(value=$STAR.text))
            int alt8=3;
            switch ( input.LA(1) ) {
            case INTERR:
                {
                alt8=1;
                }
                break;
            case OPEN_BRACKET:
                {
                alt8=2;
                }
                break;
            case STAR:
                {
                alt8=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }

            switch (alt8) {
                case 1 :
                    // CSharpAngular.g:211:3: inter= INTERR
                    {
                    inter=(Token)match(input,INTERR,FOLLOW_INTERR_in_typeChld575); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 211:27: -> typeChld(value=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("typeChld",new STAttrMap().put("value", ""));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:212:5: rnkSp= rank_specifier
                    {
                    pushFollow(FOLLOW_rank_specifier_in_typeChld602);
                    rnkSp=rank_specifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 212:27: -> typeChld(value=rnkSp)
                      {
                          retval.st = templateLib.getInstanceOf("typeChld",new STAttrMap().put("value", rnkSp));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:213:5: st= STAR
                    {
                    st=(Token)match(input,STAR,FOLLOW_STAR_in_typeChld619); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 213:27: -> typeChld(value=$STAR.text)
                      {
                          retval.st = templateLib.getInstanceOf("typeChld",new STAttrMap().put("value", (st!=null?st.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeChld"


    public static class base_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "base_type"
    // CSharpAngular.g:217:1: base_type : (simpType= simple_type -> baseType(type=simpType)|cType= class_type -> baseType(type=cType)| VOID STAR -> text(value=\" void *\"));
    public final CSharpAngular.base_type_return base_type() throws RecognitionException {
        CSharpAngular.base_type_return retval = new CSharpAngular.base_type_return();
        retval.start = input.LT(1);


        CSharpAngular.simple_type_return simpType =null;

        CSharpAngular.class_type_return cType =null;


        try {
            // CSharpAngular.g:218:3: (simpType= simple_type -> baseType(type=simpType)|cType= class_type -> baseType(type=cType)| VOID STAR -> text(value=\" void *\"))
            int alt9=3;
            switch ( input.LA(1) ) {
            case BOOL:
            case BYTE:
            case CHAR:
            case DECIMAL:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SBYTE:
            case SHORT:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt9=1;
                }
                break;
            case IDENTIFIER:
            case OBJECT:
            case STRING:
                {
                alt9=2;
                }
                break;
            case VOID:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }

            switch (alt9) {
                case 1 :
                    // CSharpAngular.g:219:3: simpType= simple_type
                    {
                    pushFollow(FOLLOW_simple_type_in_base_type660);
                    simpType=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 220:3: -> baseType(type=simpType)
                      {
                          retval.st = templateLib.getInstanceOf("baseType",new STAttrMap().put("type", simpType));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:221:5: cType= class_type
                    {
                    pushFollow(FOLLOW_class_type_in_base_type688);
                    cType=class_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 222:3: -> baseType(type=cType)
                      {
                          retval.st = templateLib.getInstanceOf("baseType",new STAttrMap().put("type", cType));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:223:5: VOID STAR
                    {
                    match(input,VOID,FOLLOW_VOID_in_base_type721); if (state.failed) return retval;

                    match(input,STAR,FOLLOW_STAR_in_base_type723); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 223:35: -> text(value=\" void *\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", " void *"));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "base_type"


    public static class simple_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "simple_type"
    // CSharpAngular.g:238:1: simple_type : (numType= numeric_type -> simpleType(type=numType)|boolType= BOOL -> simpleType(type=$BOOL.text));
    public final CSharpAngular.simple_type_return simple_type() throws RecognitionException {
        CSharpAngular.simple_type_return retval = new CSharpAngular.simple_type_return();
        retval.start = input.LT(1);


        Token boolType=null;
        CSharpAngular.numeric_type_return numType =null;


        try {
            // CSharpAngular.g:239:2: (numType= numeric_type -> simpleType(type=numType)|boolType= BOOL -> simpleType(type=$BOOL.text))
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==BYTE||LA10_0==CHAR||LA10_0==DECIMAL||LA10_0==DOUBLE||LA10_0==FLOAT||LA10_0==INT||LA10_0==LONG||LA10_0==SBYTE||LA10_0==SHORT||(LA10_0 >= UINT && LA10_0 <= ULONG)||LA10_0==USHORT) ) {
                alt10=1;
            }
            else if ( (LA10_0==BOOL) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;

            }
            switch (alt10) {
                case 1 :
                    // CSharpAngular.g:240:2: numType= numeric_type
                    {
                    pushFollow(FOLLOW_numeric_type_in_simple_type772);
                    numType=numeric_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 240:33: -> simpleType(type=numType)
                      {
                          retval.st = templateLib.getInstanceOf("simpleType",new STAttrMap().put("type", numType));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:241:4: boolType= BOOL
                    {
                    boolType=(Token)match(input,BOOL,FOLLOW_BOOL_in_simple_type797); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 241:33: -> simpleType(type=$BOOL.text)
                      {
                          retval.st = templateLib.getInstanceOf("simpleType",new STAttrMap().put("type", (boolType!=null?boolType.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_type"


    public static class numeric_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "numeric_type"
    // CSharpAngular.g:243:1: numeric_type : (intType= integral_type -> numericType(type=intType)|fpType= floating_point_type -> numericType(type=fpType)|dec= DECIMAL -> numericType(type=$DECIMAL.text));
    public final CSharpAngular.numeric_type_return numeric_type() throws RecognitionException {
        CSharpAngular.numeric_type_return retval = new CSharpAngular.numeric_type_return();
        retval.start = input.LT(1);


        Token dec=null;
        CSharpAngular.integral_type_return intType =null;

        CSharpAngular.floating_point_type_return fpType =null;


        try {
            // CSharpAngular.g:244:2: (intType= integral_type -> numericType(type=intType)|fpType= floating_point_type -> numericType(type=fpType)|dec= DECIMAL -> numericType(type=$DECIMAL.text))
            int alt11=3;
            switch ( input.LA(1) ) {
            case BYTE:
            case CHAR:
            case INT:
            case LONG:
            case SBYTE:
            case SHORT:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt11=1;
                }
                break;
            case DOUBLE:
            case FLOAT:
                {
                alt11=2;
                }
                break;
            case DECIMAL:
                {
                alt11=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;

            }

            switch (alt11) {
                case 1 :
                    // CSharpAngular.g:245:2: intType= integral_type
                    {
                    pushFollow(FOLLOW_integral_type_in_numeric_type835);
                    intType=integral_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 245:33: -> numericType(type=intType)
                      {
                          retval.st = templateLib.getInstanceOf("numericType",new STAttrMap().put("type", intType));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:246:4: fpType= floating_point_type
                    {
                    pushFollow(FOLLOW_floating_point_type_in_numeric_type859);
                    fpType=floating_point_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 246:33: -> numericType(type=fpType)
                      {
                          retval.st = templateLib.getInstanceOf("numericType",new STAttrMap().put("type", fpType));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:247:4: dec= DECIMAL
                    {
                    dec=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_numeric_type876); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 247:33: -> numericType(type=$DECIMAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("numericType",new STAttrMap().put("type", (dec!=null?dec.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "numeric_type"


    public static class integral_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "integral_type"
    // CSharpAngular.g:250:1: integral_type : ( SBYTE -> text(value=$SBYTE.text)| BYTE -> text(value=$BYTE.text)| SHORT -> text(value=$SHORT.text)| USHORT -> text(value=$USHORT.text)| INT -> text(value=$INT.text)| UINT -> text(value=$UINT.text)| LONG -> text(value=$LONG.text)| ULONG -> text(value=$ULONG.text)| CHAR -> text(value=$CHAR.text));
    public final CSharpAngular.integral_type_return integral_type() throws RecognitionException {
        CSharpAngular.integral_type_return retval = new CSharpAngular.integral_type_return();
        retval.start = input.LT(1);


        Token SBYTE3=null;
        Token BYTE4=null;
        Token SHORT5=null;
        Token USHORT6=null;
        Token INT7=null;
        Token UINT8=null;
        Token LONG9=null;
        Token ULONG10=null;
        Token CHAR11=null;

        try {
            // CSharpAngular.g:251:2: ( SBYTE -> text(value=$SBYTE.text)| BYTE -> text(value=$BYTE.text)| SHORT -> text(value=$SHORT.text)| USHORT -> text(value=$USHORT.text)| INT -> text(value=$INT.text)| UINT -> text(value=$UINT.text)| LONG -> text(value=$LONG.text)| ULONG -> text(value=$ULONG.text)| CHAR -> text(value=$CHAR.text))
            int alt12=9;
            switch ( input.LA(1) ) {
            case SBYTE:
                {
                alt12=1;
                }
                break;
            case BYTE:
                {
                alt12=2;
                }
                break;
            case SHORT:
                {
                alt12=3;
                }
                break;
            case USHORT:
                {
                alt12=4;
                }
                break;
            case INT:
                {
                alt12=5;
                }
                break;
            case UINT:
                {
                alt12=6;
                }
                break;
            case LONG:
                {
                alt12=7;
                }
                break;
            case ULONG:
                {
                alt12=8;
                }
                break;
            case CHAR:
                {
                alt12=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }

            switch (alt12) {
                case 1 :
                    // CSharpAngular.g:252:2: SBYTE
                    {
                    SBYTE3=(Token)match(input,SBYTE,FOLLOW_SBYTE_in_integral_type915); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 253:2: -> text(value=$SBYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SBYTE3!=null?SBYTE3.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:254:4: BYTE
                    {
                    BYTE4=(Token)match(input,BYTE,FOLLOW_BYTE_in_integral_type929); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 255:2: -> text(value=$BYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BYTE4!=null?BYTE4.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:256:4: SHORT
                    {
                    SHORT5=(Token)match(input,SHORT,FOLLOW_SHORT_in_integral_type943); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 257:2: -> text(value=$SHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SHORT5!=null?SHORT5.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:258:4: USHORT
                    {
                    USHORT6=(Token)match(input,USHORT,FOLLOW_USHORT_in_integral_type957); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 259:2: -> text(value=$USHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (USHORT6!=null?USHORT6.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:260:4: INT
                    {
                    INT7=(Token)match(input,INT,FOLLOW_INT_in_integral_type971); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 261:2: -> text(value=$INT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INT7!=null?INT7.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:262:4: UINT
                    {
                    UINT8=(Token)match(input,UINT,FOLLOW_UINT_in_integral_type985); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 263:2: -> text(value=$UINT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UINT8!=null?UINT8.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:264:4: LONG
                    {
                    LONG9=(Token)match(input,LONG,FOLLOW_LONG_in_integral_type999); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 265:2: -> text(value=$LONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (LONG9!=null?LONG9.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:266:4: ULONG
                    {
                    ULONG10=(Token)match(input,ULONG,FOLLOW_ULONG_in_integral_type1013); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 267:2: -> text(value=$ULONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ULONG10!=null?ULONG10.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:268:4: CHAR
                    {
                    CHAR11=(Token)match(input,CHAR,FOLLOW_CHAR_in_integral_type1027); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 269:2: -> text(value=$CHAR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CHAR11!=null?CHAR11.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "integral_type"


    public static class floating_point_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "floating_point_type"
    // CSharpAngular.g:273:1: floating_point_type : ( FLOAT -> text(value=$FLOAT.text)| DOUBLE -> text(value=$DOUBLE.text));
    public final CSharpAngular.floating_point_type_return floating_point_type() throws RecognitionException {
        CSharpAngular.floating_point_type_return retval = new CSharpAngular.floating_point_type_return();
        retval.start = input.LT(1);


        Token FLOAT12=null;
        Token DOUBLE13=null;

        try {
            // CSharpAngular.g:274:2: ( FLOAT -> text(value=$FLOAT.text)| DOUBLE -> text(value=$DOUBLE.text))
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==FLOAT) ) {
                alt13=1;
            }
            else if ( (LA13_0==DOUBLE) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }
            switch (alt13) {
                case 1 :
                    // CSharpAngular.g:275:2: FLOAT
                    {
                    FLOAT12=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_floating_point_type1052); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 276:2: -> text(value=$FLOAT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FLOAT12!=null?FLOAT12.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:277:3: DOUBLE
                    {
                    DOUBLE13=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_floating_point_type1066); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 278:2: -> text(value=$DOUBLE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DOUBLE13!=null?DOUBLE13.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "floating_point_type"


    public static class nullable_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "nullable_type"
    // CSharpAngular.g:280:1: nullable_type : val= non_nullable_value_type INTERR -> nullableType(value=valkwd=\"\");
    public final CSharpAngular.nullable_type_return nullable_type() throws RecognitionException {
        CSharpAngular.nullable_type_return retval = new CSharpAngular.nullable_type_return();
        retval.start = input.LT(1);


        CSharpAngular.non_nullable_value_type_return val =null;


        try {
            // CSharpAngular.g:281:2: (val= non_nullable_value_type INTERR -> nullableType(value=valkwd=\"\"))
            // CSharpAngular.g:282:2: val= non_nullable_value_type INTERR
            {
            pushFollow(FOLLOW_non_nullable_value_type_in_nullable_type1090);
            val=non_nullable_value_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,INTERR,FOLLOW_INTERR_in_nullable_type1092); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 283:2: -> nullableType(value=valkwd=\"\")
              {
                  retval.st = templateLib.getInstanceOf("nullableType",new STAttrMap().put("value", val).put("kwd", ""));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nullable_type"


    public static class non_nullable_value_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "non_nullable_value_type"
    // CSharpAngular.g:291:1: non_nullable_value_type : btype= base_type ( ( rank_specifier )=> rank_specifier | STAR )* -> nonnullablevaluetype(basetype=btype);
    public final CSharpAngular.non_nullable_value_type_return non_nullable_value_type() throws RecognitionException {
        CSharpAngular.non_nullable_value_type_return retval = new CSharpAngular.non_nullable_value_type_return();
        retval.start = input.LT(1);


        CSharpAngular.base_type_return btype =null;


        try {
            // CSharpAngular.g:292:2: (btype= base_type ( ( rank_specifier )=> rank_specifier | STAR )* -> nonnullablevaluetype(basetype=btype))
            // CSharpAngular.g:292:4: btype= base_type ( ( rank_specifier )=> rank_specifier | STAR )*
            {
            pushFollow(FOLLOW_base_type_in_non_nullable_value_type1121);
            btype=base_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:293:5: ( ( rank_specifier )=> rank_specifier | STAR )*
            loop14:
            do {
                int alt14=3;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==OPEN_BRACKET) && (synpred5_CSharpAngular())) {
                    alt14=1;
                }
                else if ( (LA14_0==STAR) ) {
                    alt14=2;
                }


                switch (alt14) {
            	case 1 :
            	    // CSharpAngular.g:293:7: ( rank_specifier )=> rank_specifier
            	    {
            	    pushFollow(FOLLOW_rank_specifier_in_non_nullable_value_type1135);
            	    rank_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;
            	case 2 :
            	    // CSharpAngular.g:294:7: STAR
            	    {
            	    match(input,STAR,FOLLOW_STAR_in_non_nullable_value_type1143); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 296:6: -> nonnullablevaluetype(basetype=btype)
              {
                  retval.st = templateLib.getInstanceOf("nonnullablevaluetype",new STAttrMap().put("basetype", btype));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "non_nullable_value_type"


    public static class reference_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "reference_type"
    // CSharpAngular.g:311:1: reference_type : ( simple_type | class_type | VOID STAR ) ( ( STAR | INTERR )* rank_specifier )* ({...}? ( STAR | INTERR )* rank_specifier ) ;
    public final CSharpAngular.reference_type_return reference_type() throws RecognitionException {
        CSharpAngular.reference_type_return retval = new CSharpAngular.reference_type_return();
        retval.start = input.LT(1);


        boolean oneOrMore = false;
        try {
            // CSharpAngular.g:313:3: ( ( simple_type | class_type | VOID STAR ) ( ( STAR | INTERR )* rank_specifier )* ({...}? ( STAR | INTERR )* rank_specifier ) )
            // CSharpAngular.g:313:5: ( simple_type | class_type | VOID STAR ) ( ( STAR | INTERR )* rank_specifier )* ({...}? ( STAR | INTERR )* rank_specifier )
            {
            // CSharpAngular.g:313:5: ( simple_type | class_type | VOID STAR )
            int alt15=3;
            switch ( input.LA(1) ) {
            case BOOL:
            case BYTE:
            case CHAR:
            case DECIMAL:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SBYTE:
            case SHORT:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt15=1;
                }
                break;
            case IDENTIFIER:
            case OBJECT:
            case STRING:
                {
                alt15=2;
                }
                break;
            case VOID:
                {
                alt15=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;

            }

            switch (alt15) {
                case 1 :
                    // CSharpAngular.g:313:7: simple_type
                    {
                    pushFollow(FOLLOW_simple_type_in_reference_type1186);
                    simple_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) {oneOrMore=true;}

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:314:7: class_type
                    {
                    pushFollow(FOLLOW_class_type_in_reference_type1196);
                    class_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:315:7: VOID STAR
                    {
                    match(input,VOID,FOLLOW_VOID_in_reference_type1204); if (state.failed) return retval;

                    match(input,STAR,FOLLOW_STAR_in_reference_type1206); if (state.failed) return retval;

                    if ( state.backtracking==0 ) {oneOrMore=true;}

                    }
                    break;

            }


            // CSharpAngular.g:316:5: ( ( STAR | INTERR )* rank_specifier )*
            loop17:
            do {
                int alt17=2;
                alt17 = dfa17.predict(input);
                switch (alt17) {
            	case 1 :
            	    // CSharpAngular.g:316:6: ( STAR | INTERR )* rank_specifier
            	    {
            	    // CSharpAngular.g:316:6: ( STAR | INTERR )*
            	    loop16:
            	    do {
            	        int alt16=2;
            	        int LA16_0 = input.LA(1);

            	        if ( (LA16_0==INTERR||LA16_0==STAR) ) {
            	            alt16=1;
            	        }


            	        switch (alt16) {
            	    	case 1 :
            	    	    // CSharpAngular.g:
            	    	    {
            	    	    if ( input.LA(1)==INTERR||input.LA(1)==STAR ) {
            	    	        input.consume();
            	    	        state.errorRecovery=false;
            	    	        state.failed=false;
            	    	    }
            	    	    else {
            	    	        if (state.backtracking>0) {state.failed=true; return retval;}
            	    	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	    	        throw mse;
            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop16;
            	        }
            	    } while (true);


            	    pushFollow(FOLLOW_rank_specifier_in_reference_type1224);
            	    rank_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);


            // CSharpAngular.g:317:5: ({...}? ( STAR | INTERR )* rank_specifier )
            // CSharpAngular.g:317:6: {...}? ( STAR | INTERR )* rank_specifier
            {
            if ( !((oneOrMore)) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "reference_type", "oneOrMore");
            }

            // CSharpAngular.g:317:19: ( STAR | INTERR )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==INTERR||LA18_0==STAR) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // CSharpAngular.g:
            	    {
            	    if ( input.LA(1)==INTERR||input.LA(1)==STAR ) {
            	        input.consume();
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);


            pushFollow(FOLLOW_rank_specifier_in_reference_type1244);
            rank_specifier();

            state._fsp--;
            if (state.failed) return retval;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "reference_type"


    public static class class_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_type"
    // CSharpAngular.g:321:1: class_type : (typName= type_name -> classType(value=typName)|obj= OBJECT -> classType(value=\"Object\")|dck= dynamic_contextual_keyword -> classType(value=dck)|str= STRING -> classType(value=\"String\"));
    public final CSharpAngular.class_type_return class_type() throws RecognitionException {
        CSharpAngular.class_type_return retval = new CSharpAngular.class_type_return();
        retval.start = input.LT(1);


        Token obj=null;
        Token str=null;
        CSharpAngular.type_name_return typName =null;

        CSharpAngular.dynamic_contextual_keyword_return dck =null;


        try {
            // CSharpAngular.g:322:2: (typName= type_name -> classType(value=typName)|obj= OBJECT -> classType(value=\"Object\")|dck= dynamic_contextual_keyword -> classType(value=dck)|str= STRING -> classType(value=\"String\"))
            int alt19=4;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
                {
                int LA19_1 = input.LA(2);

                if ( (!(((input.LT(1).getText().equals("dynamic"))))) ) {
                    alt19=1;
                }
                else if ( ((input.LT(1).getText().equals("dynamic"))) ) {
                    alt19=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 1, input);

                    throw nvae;

                }
                }
                break;
            case OBJECT:
                {
                alt19=2;
                }
                break;
            case STRING:
                {
                alt19=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }

            switch (alt19) {
                case 1 :
                    // CSharpAngular.g:323:2: typName= type_name
                    {
                    pushFollow(FOLLOW_type_name_in_class_type1264);
                    typName=type_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 323:37: -> classType(value=typName)
                      {
                          retval.st = templateLib.getInstanceOf("classType",new STAttrMap().put("value", typName));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:324:4: obj= OBJECT
                    {
                    obj=(Token)match(input,OBJECT,FOLLOW_OBJECT_in_class_type1296); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 324:37: -> classType(value=\"Object\")
                      {
                          retval.st = templateLib.getInstanceOf("classType",new STAttrMap().put("value", "Object"));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:325:4: dck= dynamic_contextual_keyword
                    {
                    pushFollow(FOLLOW_dynamic_contextual_keyword_in_class_type1339);
                    dck=dynamic_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 325:37: -> classType(value=dck)
                      {
                          retval.st = templateLib.getInstanceOf("classType",new STAttrMap().put("value", dck));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:326:4: str= STRING
                    {
                    str=(Token)match(input,STRING,FOLLOW_STRING_in_class_type1356); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 326:37: -> classType(value=\"String\")
                      {
                          retval.st = templateLib.getInstanceOf("classType",new STAttrMap().put("value", "String"));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_type"


    public static class interface_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_type"
    // CSharpAngular.g:330:1: interface_type : typName= type_name -> interfaceType(value=typName);
    public final CSharpAngular.interface_type_return interface_type() throws RecognitionException {
        CSharpAngular.interface_type_return retval = new CSharpAngular.interface_type_return();
        retval.start = input.LT(1);


        CSharpAngular.type_name_return typName =null;


        try {
            // CSharpAngular.g:331:2: (typName= type_name -> interfaceType(value=typName))
            // CSharpAngular.g:332:2: typName= type_name
            {
            pushFollow(FOLLOW_type_name_in_interface_type1404);
            typName=type_name();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 332:27: -> interfaceType(value=typName)
              {
                  retval.st = templateLib.getInstanceOf("interfaceType",new STAttrMap().put("value", typName));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_type"


    public static class delegate_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_type"
    // CSharpAngular.g:336:1: delegate_type : typName= type_name -> text(value=typName);
    public final CSharpAngular.delegate_type_return delegate_type() throws RecognitionException {
        CSharpAngular.delegate_type_return retval = new CSharpAngular.delegate_type_return();
        retval.start = input.LT(1);


        CSharpAngular.type_name_return typName =null;


        try {
            // CSharpAngular.g:337:2: (typName= type_name -> text(value=typName))
            // CSharpAngular.g:338:2: typName= type_name
            {
            pushFollow(FOLLOW_type_name_in_delegate_type1437);
            typName=type_name();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 338:27: -> text(value=typName)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", typName));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delegate_type"


    public static class type_argument_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_argument_list"
    // CSharpAngular.g:340:1: type_argument_list : LT args= type_arguments GT -> typeArgumentList(arguments=$args.st.toString().trim());
    public final CSharpAngular.type_argument_list_return type_argument_list() throws RecognitionException {
        CSharpAngular.type_argument_list_return retval = new CSharpAngular.type_argument_list_return();
        retval.start = input.LT(1);


        CSharpAngular.type_arguments_return args =null;


        try {
            // CSharpAngular.g:341:2: ( LT args= type_arguments GT -> typeArgumentList(arguments=$args.st.toString().trim()))
            // CSharpAngular.g:342:2: LT args= type_arguments GT
            {
            match(input,LT,FOLLOW_LT_in_type_argument_list1465); if (state.failed) return retval;

            pushFollow(FOLLOW_type_arguments_in_type_argument_list1469);
            args=type_arguments();

            state._fsp--;
            if (state.failed) return retval;

            match(input,GT,FOLLOW_GT_in_type_argument_list1471); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 343:2: -> typeArgumentList(arguments=$args.st.toString().trim())
              {
                  retval.st = templateLib.getInstanceOf("typeArgumentList",new STAttrMap().put("arguments", (args!=null?args.st:null).toString().trim()));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_argument_list"


    public static class type_arguments_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_arguments"
    // CSharpAngular.g:345:1: type_arguments : fstArg= type_argument (tChld+= type_arguments_Chld )* -> typeArguments(firstArg=fstArgchldLst=$tChld);
    public final CSharpAngular.type_arguments_return type_arguments() throws RecognitionException {
        CSharpAngular.type_arguments_return retval = new CSharpAngular.type_arguments_return();
        retval.start = input.LT(1);


        List list_tChld=null;
        CSharpAngular.type_argument_return fstArg =null;

        RuleReturnScope tChld = null;
        try {
            // CSharpAngular.g:346:2: (fstArg= type_argument (tChld+= type_arguments_Chld )* -> typeArguments(firstArg=fstArgchldLst=$tChld))
            // CSharpAngular.g:347:2: fstArg= type_argument (tChld+= type_arguments_Chld )*
            {
            pushFollow(FOLLOW_type_argument_in_type_arguments1495);
            fstArg=type_argument();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:347:23: (tChld+= type_arguments_Chld )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==COMMA) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // CSharpAngular.g:347:24: tChld+= type_arguments_Chld
            	    {
            	    pushFollow(FOLLOW_type_arguments_Chld_in_type_arguments1500);
            	    tChld=type_arguments_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_tChld==null) list_tChld=new ArrayList();
            	    list_tChld.add(tChld.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 348:2: -> typeArguments(firstArg=fstArgchldLst=$tChld)
              {
                  retval.st = templateLib.getInstanceOf("typeArguments",new STAttrMap().put("firstArg", fstArg).put("chldLst", list_tChld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_arguments"


    public static class type_arguments_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_arguments_Chld"
    // CSharpAngular.g:351:1: type_arguments_Chld : COMMA arg= type_argument -> typeArgumentsChld(args=arg);
    public final CSharpAngular.type_arguments_Chld_return type_arguments_Chld() throws RecognitionException {
        CSharpAngular.type_arguments_Chld_return retval = new CSharpAngular.type_arguments_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.type_argument_return arg =null;


        try {
            // CSharpAngular.g:352:2: ( COMMA arg= type_argument -> typeArgumentsChld(args=arg))
            // CSharpAngular.g:353:2: COMMA arg= type_argument
            {
            match(input,COMMA,FOLLOW_COMMA_in_type_arguments_Chld1528); if (state.failed) return retval;

            pushFollow(FOLLOW_type_argument_in_type_arguments_Chld1532);
            arg=type_argument();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 354:2: -> typeArgumentsChld(args=arg)
              {
                  retval.st = templateLib.getInstanceOf("typeArgumentsChld",new STAttrMap().put("args", arg));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_arguments_Chld"


    public static class type_argument_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_argument"
    // CSharpAngular.g:357:1: type_argument : ta= type -> typeArgument(value=ta);
    public final CSharpAngular.type_argument_return type_argument() throws RecognitionException {
        CSharpAngular.type_argument_return retval = new CSharpAngular.type_argument_return();
        retval.start = input.LT(1);


        CSharpAngular.type_return ta =null;


        try {
            // CSharpAngular.g:358:2: (ta= type -> typeArgument(value=ta))
            // CSharpAngular.g:359:2: ta= type
            {
            pushFollow(FOLLOW_type_in_type_argument1558);
            ta=type();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 359:19: -> typeArgument(value=ta)
              {
                  retval.st = templateLib.getInstanceOf("typeArgument",new STAttrMap().put("value", ta));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_argument"


    public static class type_void_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_void"
    // CSharpAngular.g:362:1: type_void : v= VOID -> text(value=\"\");
    public final CSharpAngular.type_void_return type_void() throws RecognitionException {
        CSharpAngular.type_void_return retval = new CSharpAngular.type_void_return();
        retval.start = input.LT(1);


        Token v=null;

        try {
            // CSharpAngular.g:363:3: (v= VOID -> text(value=\"\"))
            // CSharpAngular.g:364:3: v= VOID
            {
            v=(Token)match(input,VOID,FOLLOW_VOID_in_type_void1592); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 365:3: -> text(value=\"\")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_void"


    public static class variable_reference_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_reference"
    // CSharpAngular.g:370:1: variable_reference : expr= expression -> variableReference(ref=expr);
    public final CSharpAngular.variable_reference_return variable_reference() throws RecognitionException {
        CSharpAngular.variable_reference_return retval = new CSharpAngular.variable_reference_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_return expr =null;


        try {
            // CSharpAngular.g:371:2: (expr= expression -> variableReference(ref=expr))
            // CSharpAngular.g:372:2: expr= expression
            {
            pushFollow(FOLLOW_expression_in_variable_reference1622);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 373:2: -> variableReference(ref=expr)
              {
                  retval.st = templateLib.getInstanceOf("variableReference",new STAttrMap().put("ref", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_reference"


    public static class argument_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "argument_list"
    // CSharpAngular.g:377:1: argument_list : fstArg= argument (lst+= argument_list_Chld )* -> argumentList(firstArgmnt=fstArglist=$lst);
    public final CSharpAngular.argument_list_return argument_list() throws RecognitionException {
        CSharpAngular.argument_list_return retval = new CSharpAngular.argument_list_return();
        retval.start = input.LT(1);


        List list_lst=null;
        CSharpAngular.argument_return fstArg =null;

        RuleReturnScope lst = null;
        try {
            // CSharpAngular.g:378:2: (fstArg= argument (lst+= argument_list_Chld )* -> argumentList(firstArgmnt=fstArglist=$lst))
            // CSharpAngular.g:379:2: fstArg= argument (lst+= argument_list_Chld )*
            {
            pushFollow(FOLLOW_argument_in_argument_list1648);
            fstArg=argument();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:379:18: (lst+= argument_list_Chld )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==COMMA) ) {
                    alt21=1;
                }


                switch (alt21) {
            	case 1 :
            	    // CSharpAngular.g:379:19: lst+= argument_list_Chld
            	    {
            	    pushFollow(FOLLOW_argument_list_Chld_in_argument_list1653);
            	    lst=argument_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 380:2: -> argumentList(firstArgmnt=fstArglist=$lst)
              {
                  retval.st = templateLib.getInstanceOf("argumentList",new STAttrMap().put("firstArgmnt", fstArg).put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "argument_list"


    public static class argument_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "argument_list_Chld"
    // CSharpAngular.g:383:1: argument_list_Chld : COMMA (cmnt= comments )? arg= argument -> argumentListChld(cmnts=cmntargs=arg);
    public final CSharpAngular.argument_list_Chld_return argument_list_Chld() throws RecognitionException {
        CSharpAngular.argument_list_Chld_return retval = new CSharpAngular.argument_list_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.comments_return cmnt =null;

        CSharpAngular.argument_return arg =null;


        try {
            // CSharpAngular.g:384:3: ( COMMA (cmnt= comments )? arg= argument -> argumentListChld(cmnts=cmntargs=arg))
            // CSharpAngular.g:385:2: COMMA (cmnt= comments )? arg= argument
            {
            match(input,COMMA,FOLLOW_COMMA_in_argument_list_Chld1682); if (state.failed) return retval;

            // CSharpAngular.g:385:8: (cmnt= comments )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( ((LA22_0 >= SINGLE_LINE_COMMENT && LA22_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // CSharpAngular.g:385:9: cmnt= comments
                    {
                    pushFollow(FOLLOW_comments_in_argument_list_Chld1687);
                    cmnt=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_argument_in_argument_list_Chld1693);
            arg=argument();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 386:2: -> argumentListChld(cmnts=cmntargs=arg)
              {
                  retval.st = templateLib.getInstanceOf("argumentListChld",new STAttrMap().put("cmnts", cmnt).put("args", arg));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "argument_list_Chld"


    public static class argument_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "argument"
    // CSharpAngular.g:389:1: argument : (argNam= argument_name )? val= argument_value -> argument(argName=argNamargValue=val);
    public final CSharpAngular.argument_return argument() throws RecognitionException {
        CSharpAngular.argument_return retval = new CSharpAngular.argument_return();
        retval.start = input.LT(1);


        CSharpAngular.argument_name_return argNam =null;

        CSharpAngular.argument_value_return val =null;


        try {
            // CSharpAngular.g:390:2: ( (argNam= argument_name )? val= argument_value -> argument(argName=argNamargValue=val))
            // CSharpAngular.g:391:2: (argNam= argument_name )? val= argument_value
            {
            // CSharpAngular.g:391:2: (argNam= argument_name )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==IDENTIFIER) ) {
                int LA23_1 = input.LA(2);

                if ( (LA23_1==COLON) ) {
                    alt23=1;
                }
            }
            switch (alt23) {
                case 1 :
                    // CSharpAngular.g:391:3: argNam= argument_name
                    {
                    pushFollow(FOLLOW_argument_name_in_argument1723);
                    argNam=argument_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_argument_value_in_argument1729);
            val=argument_value();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 392:2: -> argument(argName=argNamargValue=val)
              {
                  retval.st = templateLib.getInstanceOf("argument",new STAttrMap().put("argName", argNam).put("argValue", val));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "argument"


    public static class argument_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "argument_name"
    // CSharpAngular.g:394:1: argument_name : IDENTIFIER COLON -> argumentName(id=NamingUtil.toCamelCase($IDENTIFIER.text));
    public final CSharpAngular.argument_name_return argument_name() throws RecognitionException {
        CSharpAngular.argument_name_return retval = new CSharpAngular.argument_name_return();
        retval.start = input.LT(1);


        Token IDENTIFIER14=null;

        try {
            // CSharpAngular.g:395:2: ( IDENTIFIER COLON -> argumentName(id=NamingUtil.toCamelCase($IDENTIFIER.text)))
            // CSharpAngular.g:396:2: IDENTIFIER COLON
            {
            IDENTIFIER14=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_argument_name1755); if (state.failed) return retval;

            match(input,COLON,FOLLOW_COLON_in_argument_name1757); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 397:2: -> argumentName(id=NamingUtil.toCamelCase($IDENTIFIER.text))
              {
                  retval.st = templateLib.getInstanceOf("argumentName",new STAttrMap().put("id", NamingUtil.toCamelCase((IDENTIFIER14!=null?IDENTIFIER14.getText():null))));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "argument_name"


    public static class argument_value_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "argument_value"
    // CSharpAngular.g:399:1: argument_value : (expr= expression -> argumentValue(value=expr)| REF varRef= variable_reference -> argumentValue2(type=$REF.textvalue=expr)| OUT variable_reference -> argumentValue2(type=$OUT.textvalue=expr));
    public final CSharpAngular.argument_value_return argument_value() throws RecognitionException {
        CSharpAngular.argument_value_return retval = new CSharpAngular.argument_value_return();
        retval.start = input.LT(1);


        Token REF15=null;
        Token OUT16=null;
        CSharpAngular.expression_return expr =null;

        CSharpAngular.variable_reference_return varRef =null;


        try {
            // CSharpAngular.g:400:2: (expr= expression -> argumentValue(value=expr)| REF varRef= variable_reference -> argumentValue2(type=$REF.textvalue=expr)| OUT variable_reference -> argumentValue2(type=$OUT.textvalue=expr))
            int alt24=3;
            switch ( input.LA(1) ) {
            case AMP:
            case BANG:
            case BASE:
            case BOOL:
            case BYTE:
            case CHAR:
            case CHARACTER_LITERAL:
            case CHECKED:
            case DECIMAL:
            case DEFAULT:
            case DELEGATE:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case IDENTIFIER:
            case INT:
            case INTEGER_LITERAL:
            case LONG:
            case MINUS:
            case NEW:
            case NULL:
            case OBJECT:
            case OPEN_PARENS:
            case OP_DEC:
            case OP_INC:
            case PLUS:
            case REAL_LITERAL:
            case SBYTE:
            case SHORT:
            case SIZEOF:
            case STAR:
            case STRING:
            case STRING_LITERAL:
            case THIS:
            case TILDE:
            case TRUE:
            case TYPEOF:
            case UINT:
            case ULONG:
            case UNCHECKED:
            case USHORT:
                {
                alt24=1;
                }
                break;
            case REF:
                {
                alt24=2;
                }
                break;
            case OUT:
                {
                alt24=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;

            }

            switch (alt24) {
                case 1 :
                    // CSharpAngular.g:401:2: expr= expression
                    {
                    pushFollow(FOLLOW_expression_in_argument_value1781);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 402:2: -> argumentValue(value=expr)
                      {
                          retval.st = templateLib.getInstanceOf("argumentValue",new STAttrMap().put("value", expr));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:403:4: REF varRef= variable_reference
                    {
                    REF15=(Token)match(input,REF,FOLLOW_REF_in_argument_value1795); if (state.failed) return retval;

                    pushFollow(FOLLOW_variable_reference_in_argument_value1799);
                    varRef=variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 404:2: -> argumentValue2(type=$REF.textvalue=expr)
                      {
                          retval.st = templateLib.getInstanceOf("argumentValue2",new STAttrMap().put("type", (REF15!=null?REF15.getText():null)).put("value", expr));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:405:4: OUT variable_reference
                    {
                    OUT16=(Token)match(input,OUT,FOLLOW_OUT_in_argument_value1817); if (state.failed) return retval;

                    pushFollow(FOLLOW_variable_reference_in_argument_value1819);
                    variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 406:2: -> argumentValue2(type=$OUT.textvalue=expr)
                      {
                          retval.st = templateLib.getInstanceOf("argumentValue2",new STAttrMap().put("type", (OUT16!=null?OUT16.getText():null)).put("value", expr));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "argument_value"


    public static class primary_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_expression"
    // CSharpAngular.g:415:1: primary_expression : pe= primary_expression_start (fbe+= bracket_expression )* (pcl+= primary_expression_Chld )* (cmnts= comments )? -> primaryExpression(prmExprStrt=pefrstBrktExpr=$fbeprmChldLst=$pclcmnt=cmnts);
    public final CSharpAngular.primary_expression_return primary_expression() throws RecognitionException {
        CSharpAngular.primary_expression_return retval = new CSharpAngular.primary_expression_return();
        retval.start = input.LT(1);


        List list_fbe=null;
        List list_pcl=null;
        CSharpAngular.primary_expression_start_return pe =null;

        CSharpAngular.comments_return cmnts =null;

        RuleReturnScope fbe = null;
        RuleReturnScope pcl = null;
        try {
            // CSharpAngular.g:416:3: (pe= primary_expression_start (fbe+= bracket_expression )* (pcl+= primary_expression_Chld )* (cmnts= comments )? -> primaryExpression(prmExprStrt=pefrstBrktExpr=$fbeprmChldLst=$pclcmnt=cmnts))
            // CSharpAngular.g:417:3: pe= primary_expression_start (fbe+= bracket_expression )* (pcl+= primary_expression_Chld )* (cmnts= comments )?
            {
            pushFollow(FOLLOW_primary_expression_start_in_primary_expression1851);
            pe=primary_expression_start();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:417:32: (fbe+= bracket_expression )*
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==OPEN_BRACKET) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // CSharpAngular.g:417:33: fbe+= bracket_expression
            	    {
            	    pushFollow(FOLLOW_bracket_expression_in_primary_expression1857);
            	    fbe=bracket_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_fbe==null) list_fbe=new ArrayList();
            	    list_fbe.add(fbe.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);


            // CSharpAngular.g:417:59: (pcl+= primary_expression_Chld )*
            loop26:
            do {
                int alt26=2;
                alt26 = dfa26.predict(input);
                switch (alt26) {
            	case 1 :
            	    // CSharpAngular.g:417:60: pcl+= primary_expression_Chld
            	    {
            	    pushFollow(FOLLOW_primary_expression_Chld_in_primary_expression1864);
            	    pcl=primary_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_pcl==null) list_pcl=new ArrayList();
            	    list_pcl.add(pcl.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);


            // CSharpAngular.g:417:91: (cmnts= comments )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==SINGLE_LINE_COMMENT) ) {
                alt27=1;
            }
            else if ( (LA27_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // CSharpAngular.g:417:92: cmnts= comments
                    {
                    pushFollow(FOLLOW_comments_in_primary_expression1871);
                    cmnts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 418:3: -> primaryExpression(prmExprStrt=pefrstBrktExpr=$fbeprmChldLst=$pclcmnt=cmnts)
              {
                  retval.st = templateLib.getInstanceOf("primaryExpression",new STAttrMap().put("prmExprStrt", pe).put("frstBrktExpr", list_fbe).put("prmChldLst", list_pcl).put("cmnt", cmnts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primary_expression"


    public static class date_week_operations_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "date_week_operations"
    // CSharpAngular.g:421:1: date_week_operations : ( ({...}?)=> IDENTIFIER DOT IDENTIFIER -> text(value=\"Day[0]\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER -> text(value=\"Day[1]\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER -> text(value=\"Day[2]\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER -> text(value=\"Day[3]\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER -> text(value=\"Day[4]\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER -> text(value=\"Day[5]\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER -> text(value=\"Day[6]\")| ({...}?) IDENTIFIER -> text(value=\"DayOfWeek\")| IDENTIFIER DOT id= IDENTIFIER -> text(value=id));
    public final CSharpAngular.date_week_operations_return date_week_operations() throws RecognitionException {
        CSharpAngular.date_week_operations_return retval = new CSharpAngular.date_week_operations_return();
        retval.start = input.LT(1);


        Token id=null;

        try {
            // CSharpAngular.g:422:3: ( ({...}?)=> IDENTIFIER DOT IDENTIFIER -> text(value=\"Day[0]\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER -> text(value=\"Day[1]\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER -> text(value=\"Day[2]\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER -> text(value=\"Day[3]\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER -> text(value=\"Day[4]\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER -> text(value=\"Day[5]\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER -> text(value=\"Day[6]\")| ({...}?) IDENTIFIER -> text(value=\"DayOfWeek\")| IDENTIFIER DOT id= IDENTIFIER -> text(value=id))
            int alt28=9;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==IDENTIFIER) ) {
                int LA28_1 = input.LA(2);

                if ( (LA28_1==DOT) ) {
                    int LA28_2 = input.LA(3);

                    if ( (LA28_2==IDENTIFIER) ) {
                        int LA28_4 = input.LA(4);

                        if ( (synpred6_CSharpAngular()) ) {
                            alt28=1;
                        }
                        else if ( (synpred7_CSharpAngular()) ) {
                            alt28=2;
                        }
                        else if ( (synpred8_CSharpAngular()) ) {
                            alt28=3;
                        }
                        else if ( (synpred9_CSharpAngular()) ) {
                            alt28=4;
                        }
                        else if ( (synpred10_CSharpAngular()) ) {
                            alt28=5;
                        }
                        else if ( (synpred11_CSharpAngular()) ) {
                            alt28=6;
                        }
                        else if ( (synpred12_CSharpAngular()) ) {
                            alt28=7;
                        }
                        else if ( ((input.LT(1).getText().equals("DayOfWeek"))) ) {
                            alt28=8;
                        }
                        else if ( (true) ) {
                            alt28=9;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 28, 4, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 28, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA28_1==EOF||(LA28_1 >= AMP && LA28_1 <= ASSIGNMENT)||LA28_1==BITWISE_OR||LA28_1==CARET||(LA28_1 >= CLOSE_BRACE && LA28_1 <= COMMA)||LA28_1==DIV||LA28_1==GT||LA28_1==IDENTIFIER||(LA28_1 >= INTERR && LA28_1 <= IS)||LA28_1==LT||LA28_1==MINUS||(LA28_1 >= OPEN_BRACKET && LA28_1 <= OPEN_PARENS)||(LA28_1 >= OP_ADD_ASSIGNMENT && LA28_1 <= OP_XOR_ASSIGNMENT)||(LA28_1 >= PERCENT && LA28_1 <= PLUS)||LA28_1==SEMICOLON||(LA28_1 >= SINGLE_LINE_COMMENT && LA28_1 <= SINGLE_LINE_DOC_COMMENT)||LA28_1==STAR) ) {
                    alt28=8;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 28, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;

            }
            switch (alt28) {
                case 1 :
                    // CSharpAngular.g:423:3: ({...}?)=> IDENTIFIER DOT IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_week_operations1918); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_week_operations1920); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_week_operations1922); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 424:3: -> text(value=\"Day[0]\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "Day[0]"));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:426:3: ({...}?)=> IDENTIFIER DOT IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_week_operations1946); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_week_operations1948); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_week_operations1950); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 427:3: -> text(value=\"Day[1]\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "Day[1]"));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:429:3: ({...}?)=> IDENTIFIER DOT IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_week_operations1974); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_week_operations1976); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_week_operations1978); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 430:3: -> text(value=\"Day[2]\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "Day[2]"));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:432:3: ({...}?)=> IDENTIFIER DOT IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_week_operations2002); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_week_operations2004); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_week_operations2006); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 433:3: -> text(value=\"Day[3]\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "Day[3]"));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:435:3: ({...}?)=> IDENTIFIER DOT IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_week_operations2030); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_week_operations2032); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_week_operations2034); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 436:3: -> text(value=\"Day[4]\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "Day[4]"));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:438:3: ({...}?)=> IDENTIFIER DOT IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_week_operations2058); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_week_operations2060); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_week_operations2062); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 439:3: -> text(value=\"Day[5]\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "Day[5]"));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:441:3: ({...}?)=> IDENTIFIER DOT IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_week_operations2086); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_week_operations2088); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_week_operations2090); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 442:3: -> text(value=\"Day[6]\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "Day[6]"));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:444:3: ({...}?) IDENTIFIER
                    {
                    // CSharpAngular.g:444:3: ({...}?)
                    // CSharpAngular.g:444:4: {...}?
                    {
                    if ( !((input.LT(1).getText().equals("DayOfWeek"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "date_week_operations", "input.LT(1).getText().equals(\"DayOfWeek\")");
                    }

                    }


                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_week_operations2112); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 445:3: -> text(value=\"DayOfWeek\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "DayOfWeek"));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:446:5: IDENTIFIER DOT id= IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_week_operations2128); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_week_operations2130); if (state.failed) return retval;

                    id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_week_operations2134); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 447:4: -> text(value=id)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", id));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "date_week_operations"


    public static class date_operations_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "date_operations"
    // CSharpAngular.g:450:1: date_operations : ( ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par= parenthesized_expression -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate(),new Date().getHours(), new Date().getMinutes(), new Date().getSeconds()+\"\n +CSharpAngularHelper.handleDateParenthesis(par.st.toString().trim())+\", new Date().getMilliseconds())\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate()+\"\n +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+\",new Date().getHours(), new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds())\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate(), new Date().getHours()+\"\n +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+\", new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds())\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate(), new Date().getHours(), new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds()+\"\n +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+\")\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate(), new Date().getHours(), new Date().getMinutes()+\"\n +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+\", new Date().getSeconds(), new Date().getMilliseconds())\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth()+\"\n +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+\", new Date().getDate(), new Date().getHours(), new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds())\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression -> text(value=\"new Date(new Date().getFullYear()+\"+CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())\n +\",new Date().getMonth(), new Date().getDate(), new Date().getHours(), new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds())\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par2= parenthesized_expression -> text(value=\"( new Date() -\"+par2+\" )\")| ( ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER ) -> text(value=\"( new Date().getMonth() + 1)\")| IDENTIFIER DOT IDENTIFIER -> text(value=\"new Date()\"));
    public final CSharpAngular.date_operations_return date_operations() throws RecognitionException {
        CSharpAngular.date_operations_return retval = new CSharpAngular.date_operations_return();
        retval.start = input.LT(1);


        CSharpAngular.parenthesized_expression_return par =null;

        CSharpAngular.parenthesized_expression_return par1 =null;

        CSharpAngular.parenthesized_expression_return par2 =null;


        try {
            // CSharpAngular.g:451:3: ( ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par= parenthesized_expression -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate(),new Date().getHours(), new Date().getMinutes(), new Date().getSeconds()+\"\n +CSharpAngularHelper.handleDateParenthesis(par.st.toString().trim())+\", new Date().getMilliseconds())\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate()+\"\n +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+\",new Date().getHours(), new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds())\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate(), new Date().getHours()+\"\n +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+\", new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds())\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate(), new Date().getHours(), new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds()+\"\n +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+\")\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate(), new Date().getHours(), new Date().getMinutes()+\"\n +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+\", new Date().getSeconds(), new Date().getMilliseconds())\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth()+\"\n +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+\", new Date().getDate(), new Date().getHours(), new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds())\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression -> text(value=\"new Date(new Date().getFullYear()+\"+CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())\n +\",new Date().getMonth(), new Date().getDate(), new Date().getHours(), new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds())\")| ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par2= parenthesized_expression -> text(value=\"( new Date() -\"+par2+\" )\")| ( ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER ) -> text(value=\"( new Date().getMonth() + 1)\")| IDENTIFIER DOT IDENTIFIER -> text(value=\"new Date()\"))
            int alt29=10;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==IDENTIFIER) ) {
                int LA29_1 = input.LA(2);

                if ( (synpred13_CSharpAngular()) ) {
                    alt29=1;
                }
                else if ( (synpred14_CSharpAngular()) ) {
                    alt29=2;
                }
                else if ( (synpred15_CSharpAngular()) ) {
                    alt29=3;
                }
                else if ( (synpred16_CSharpAngular()) ) {
                    alt29=4;
                }
                else if ( (synpred17_CSharpAngular()) ) {
                    alt29=5;
                }
                else if ( (synpred18_CSharpAngular()) ) {
                    alt29=6;
                }
                else if ( (synpred19_CSharpAngular()) ) {
                    alt29=7;
                }
                else if ( (synpred20_CSharpAngular()) ) {
                    alt29=8;
                }
                else if ( (synpred21_CSharpAngular()) ) {
                    alt29=9;
                }
                else if ( (true) ) {
                    alt29=10;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;

            }
            switch (alt29) {
                case 1 :
                    // CSharpAngular.g:452:3: ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par= parenthesized_expression
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2168); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2170); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2172); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2174); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2176); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_date_operations2180);
                    par=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 453:3: -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate(),new Date().getHours(), new Date().getMinutes(), new Date().getSeconds()+\"\n +CSharpAngularHelper.handleDateParenthesis(par.st.toString().trim())+\", new Date().getMilliseconds())\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate(),new Date().getHours(), new Date().getMinutes(), new Date().getSeconds()+"
                              +CSharpAngularHelper.handleDateParenthesis(par.st.toString().trim())+", new Date().getMilliseconds())"));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:456:3: ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2204); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2206); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2208); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2210); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2212); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_date_operations2216);
                    par1=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 457:3: -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate()+\"\n +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+\",new Date().getHours(), new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds())\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate()+"
                              +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+",new Date().getHours(), new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds())"));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:460:3: ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2240); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2242); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2244); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2246); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2248); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_date_operations2252);
                    par1=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 461:3: -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate(), new Date().getHours()+\"\n +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+\", new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds())\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate(), new Date().getHours()+"
                        +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+", new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds())"));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:464:3: ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2276); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2278); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2280); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2282); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2284); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_date_operations2288);
                    par1=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 465:3: -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate(), new Date().getHours(), new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds()+\"\n +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+\")\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate(), new Date().getHours(), new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds()+"
                              +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+")"));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:468:3: ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2312); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2314); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2316); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2318); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2320); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_date_operations2324);
                    par1=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 469:3: -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate(), new Date().getHours(), new Date().getMinutes()+\"\n +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+\", new Date().getSeconds(), new Date().getMilliseconds())\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "new Date(new Date().getFullYear(),new Date().getMonth(), new Date().getDate(), new Date().getHours(), new Date().getMinutes()+"
                              +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+", new Date().getSeconds(), new Date().getMilliseconds())"));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:472:3: ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2348); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2350); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2352); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2354); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2356); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_date_operations2360);
                    par1=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 473:3: -> text(value=\"new Date(new Date().getFullYear(),new Date().getMonth()+\"\n +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+\", new Date().getDate(), new Date().getHours(), new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds())\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "new Date(new Date().getFullYear(),new Date().getMonth()+"
                              +CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())+", new Date().getDate(), new Date().getHours(), new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds())"));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:476:4: ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par1= parenthesized_expression
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2385); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2387); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2389); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2391); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2393); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_date_operations2397);
                    par1=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 477:3: -> text(value=\"new Date(new Date().getFullYear()+\"+CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())\n +\",new Date().getMonth(), new Date().getDate(), new Date().getHours(), new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds())\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "new Date(new Date().getFullYear()+"+CSharpAngularHelper.handleDateParenthesis(par1.st.toString().trim())
                              +",new Date().getMonth(), new Date().getDate(), new Date().getHours(), new Date().getMinutes(), new Date().getSeconds(), new Date().getMilliseconds())"));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:480:3: ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER par2= parenthesized_expression
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2421); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2423); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2425); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2427); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2429); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_date_operations2433);
                    par2=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 481:3: -> text(value=\"( new Date() -\"+par2+\" )\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "( new Date() -"+par2+" )"));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:483:3: ( ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER )
                    {
                    // CSharpAngular.g:483:3: ( ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER )
                    // CSharpAngular.g:483:4: ({...}?)=> IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2458); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2460); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2462); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2464); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2466); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 484:3: -> text(value=\"( new Date().getMonth() + 1)\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "( new Date().getMonth() + 1)"));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:486:3: IDENTIFIER DOT IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2486); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_date_operations2488); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_date_operations2490); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 487:3: -> text(value=\"new Date()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "new Date()"));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "date_operations"


    public static class string_operations_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "string_operations"
    // CSharpAngular.g:490:1: string_operations : ( ({...}?) STRING DOT IDENTIFIER par= parenthesized_expression -> stringnullcheck(value=par.st.toString().trim())| ({...}?) STRING DOT IDENTIFIER par2= parenthesized_expression -> stringnullcheck(value=par2.st.toString().trim())| ({...}?) STRING DOT IDENTIFIER -> text(value=\"''\")| ( ({...}? STRING DOT IDENTIFIER LT type GT )=> STRING DOT IDENTIFIER LT type GT OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS ) -> memberaccess3join(fstArg1=fstArgsndArg1=sndArg)| ( ({...}?)=> STRING DOT IDENTIFIER OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS ) -> memberaccess3join(fstArg1=fstArgsndArg1=sndArg)| ({...}? STRING DOT IDENTIFIER method_invocation2 )=> STRING DOT IDENTIFIER met2= method_invocation2 -> text(value=\"String.format\"+met2.st.toString().trim())| ({...}?) STRING DOT IDENTIFIER par1= parenthesized_expression -> text(value=\"String.format\"+par1.st.toString().trim())| ({...}? STRING DOT IDENTIFIER OPEN_PARENS argument COMMA argument COMMA argument COMMA argument CLOSE_PARENS )=> STRING DOT IDENTIFIER OPEN_PARENS fstArg= argument COMMA sndArg= argument COMMA thrdArg= argument COMMA frthArg= argument CLOSE_PARENS -> text(value=fstArg.st.toString().trim()+sndArg.st.toString().trim()+thrdArg.st.toString().trim()+frthArg.st.toString().trim())| ({...}? STRING DOT IDENTIFIER OPEN_PARENS argument COMMA argument CLOSE_PARENS )=> STRING DOT IDENTIFIER OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS -> text(value=fstArg.st.toString().trim()+\".concat(\"+sndArg.st.toString().trim()+\")\")| ({...}?) STRING DOT IDENTIFIER OPEN_PARENS fstArg= argument CLOSE_PARENS -> text(value=fstArg.st.toString().trim())| ({...}?) STRING DOT IDENTIFIER met3= method_invocation2 -> text(value=\"compare\"+met3.st.toString().trim())| ({...}?) STRING DOT IDENTIFIER -> text(value=\"\"));
    public final CSharpAngular.string_operations_return string_operations() throws RecognitionException {
        CSharpAngular.string_operations_return retval = new CSharpAngular.string_operations_return();
        retval.start = input.LT(1);


        CSharpAngular.parenthesized_expression_return par =null;

        CSharpAngular.parenthesized_expression_return par2 =null;

        CSharpAngular.argument_return fstArg =null;

        CSharpAngular.argument_return sndArg =null;

        CSharpAngular.method_invocation2_return met2 =null;

        CSharpAngular.parenthesized_expression_return par1 =null;

        CSharpAngular.argument_return thrdArg =null;

        CSharpAngular.argument_return frthArg =null;

        CSharpAngular.method_invocation2_return met3 =null;


        try {
            // CSharpAngular.g:491:3: ( ({...}?) STRING DOT IDENTIFIER par= parenthesized_expression -> stringnullcheck(value=par.st.toString().trim())| ({...}?) STRING DOT IDENTIFIER par2= parenthesized_expression -> stringnullcheck(value=par2.st.toString().trim())| ({...}?) STRING DOT IDENTIFIER -> text(value=\"''\")| ( ({...}? STRING DOT IDENTIFIER LT type GT )=> STRING DOT IDENTIFIER LT type GT OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS ) -> memberaccess3join(fstArg1=fstArgsndArg1=sndArg)| ( ({...}?)=> STRING DOT IDENTIFIER OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS ) -> memberaccess3join(fstArg1=fstArgsndArg1=sndArg)| ({...}? STRING DOT IDENTIFIER method_invocation2 )=> STRING DOT IDENTIFIER met2= method_invocation2 -> text(value=\"String.format\"+met2.st.toString().trim())| ({...}?) STRING DOT IDENTIFIER par1= parenthesized_expression -> text(value=\"String.format\"+par1.st.toString().trim())| ({...}? STRING DOT IDENTIFIER OPEN_PARENS argument COMMA argument COMMA argument COMMA argument CLOSE_PARENS )=> STRING DOT IDENTIFIER OPEN_PARENS fstArg= argument COMMA sndArg= argument COMMA thrdArg= argument COMMA frthArg= argument CLOSE_PARENS -> text(value=fstArg.st.toString().trim()+sndArg.st.toString().trim()+thrdArg.st.toString().trim()+frthArg.st.toString().trim())| ({...}? STRING DOT IDENTIFIER OPEN_PARENS argument COMMA argument CLOSE_PARENS )=> STRING DOT IDENTIFIER OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS -> text(value=fstArg.st.toString().trim()+\".concat(\"+sndArg.st.toString().trim()+\")\")| ({...}?) STRING DOT IDENTIFIER OPEN_PARENS fstArg= argument CLOSE_PARENS -> text(value=fstArg.st.toString().trim())| ({...}?) STRING DOT IDENTIFIER met3= method_invocation2 -> text(value=\"compare\"+met3.st.toString().trim())| ({...}?) STRING DOT IDENTIFIER -> text(value=\"\"))
            int alt30=12;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==STRING) ) {
                int LA30_1 = input.LA(2);

                if ( ((input.LT(3).getText().equals("IsNullOrWhiteSpace"))) ) {
                    alt30=1;
                }
                else if ( ((input.LT(3).getText().equals("IsNullOrEmpty"))) ) {
                    alt30=2;
                }
                else if ( ((input.LT(3).getText().equals("Empty"))) ) {
                    alt30=3;
                }
                else if ( (synpred22_CSharpAngular()) ) {
                    alt30=4;
                }
                else if ( (synpred23_CSharpAngular()) ) {
                    alt30=5;
                }
                else if ( (synpred24_CSharpAngular()) ) {
                    alt30=6;
                }
                else if ( ((input.LT(3).getText().equals("Format"))) ) {
                    alt30=7;
                }
                else if ( (synpred25_CSharpAngular()) ) {
                    alt30=8;
                }
                else if ( (synpred26_CSharpAngular()) ) {
                    alt30=9;
                }
                else if ( ((input.LT(3).getText().equals("Concat"))) ) {
                    alt30=10;
                }
                else if ( ((input.LT(3).getText().equals("Compare"))) ) {
                    alt30=11;
                }
                else if ( ((input.LT(3).getText().equals("Equals"))) ) {
                    alt30=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 30, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;

            }
            switch (alt30) {
                case 1 :
                    // CSharpAngular.g:491:4: ({...}?) STRING DOT IDENTIFIER par= parenthesized_expression
                    {
                    // CSharpAngular.g:491:4: ({...}?)
                    // CSharpAngular.g:491:5: {...}?
                    {
                    if ( !((input.LT(3).getText().equals("IsNullOrWhiteSpace"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "string_operations", "input.LT(3).getText().equals(\"IsNullOrWhiteSpace\")");
                    }

                    }


                    match(input,STRING,FOLLOW_STRING_in_string_operations2518); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_string_operations2520); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_string_operations2522); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_string_operations2526);
                    par=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 492:3: -> stringnullcheck(value=par.st.toString().trim())
                      {
                          retval.st = templateLib.getInstanceOf("stringnullcheck",new STAttrMap().put("value", par.st.toString().trim()));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:494:3: ({...}?) STRING DOT IDENTIFIER par2= parenthesized_expression
                    {
                    // CSharpAngular.g:494:3: ({...}?)
                    // CSharpAngular.g:494:4: {...}?
                    {
                    if ( !((input.LT(3).getText().equals("IsNullOrEmpty"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "string_operations", "input.LT(3).getText().equals(\"IsNullOrEmpty\")");
                    }

                    }


                    match(input,STRING,FOLLOW_STRING_in_string_operations2548); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_string_operations2550); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_string_operations2552); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_string_operations2556);
                    par2=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 495:3: -> stringnullcheck(value=par2.st.toString().trim())
                      {
                          retval.st = templateLib.getInstanceOf("stringnullcheck",new STAttrMap().put("value", par2.st.toString().trim()));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:497:3: ({...}?) STRING DOT IDENTIFIER
                    {
                    // CSharpAngular.g:497:3: ({...}?)
                    // CSharpAngular.g:497:4: {...}?
                    {
                    if ( !((input.LT(3).getText().equals("Empty"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "string_operations", "input.LT(3).getText().equals(\"Empty\")");
                    }

                    }


                    match(input,STRING,FOLLOW_STRING_in_string_operations2579); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_string_operations2581); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_string_operations2583); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 498:3: -> text(value=\"''\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "''"));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:500:3: ( ({...}? STRING DOT IDENTIFIER LT type GT )=> STRING DOT IDENTIFIER LT type GT OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS )
                    {
                    // CSharpAngular.g:500:3: ( ({...}? STRING DOT IDENTIFIER LT type GT )=> STRING DOT IDENTIFIER LT type GT OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS )
                    // CSharpAngular.g:500:4: ({...}? STRING DOT IDENTIFIER LT type GT )=> STRING DOT IDENTIFIER LT type GT OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS
                    {
                    match(input,STRING,FOLLOW_STRING_in_string_operations2621); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_string_operations2623); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_string_operations2625); if (state.failed) return retval;

                    match(input,LT,FOLLOW_LT_in_string_operations2627); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_string_operations2629);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,GT,FOLLOW_GT_in_string_operations2631); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_string_operations2633); if (state.failed) return retval;

                    pushFollow(FOLLOW_argument_in_string_operations2637);
                    fstArg=argument();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,COMMA,FOLLOW_COMMA_in_string_operations2639); if (state.failed) return retval;

                    pushFollow(FOLLOW_argument_in_string_operations2643);
                    sndArg=argument();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_string_operations2645); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 501:3: -> memberaccess3join(fstArg1=fstArgsndArg1=sndArg)
                      {
                          retval.st = templateLib.getInstanceOf("memberaccess3join",new STAttrMap().put("fstArg1", fstArg).put("sndArg1", sndArg));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:503:3: ( ({...}?)=> STRING DOT IDENTIFIER OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS )
                    {
                    // CSharpAngular.g:503:3: ( ({...}?)=> STRING DOT IDENTIFIER OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS )
                    // CSharpAngular.g:503:4: ({...}?)=> STRING DOT IDENTIFIER OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS
                    {
                    match(input,STRING,FOLLOW_STRING_in_string_operations2675); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_string_operations2677); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_string_operations2679); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_string_operations2681); if (state.failed) return retval;

                    pushFollow(FOLLOW_argument_in_string_operations2685);
                    fstArg=argument();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,COMMA,FOLLOW_COMMA_in_string_operations2687); if (state.failed) return retval;

                    pushFollow(FOLLOW_argument_in_string_operations2691);
                    sndArg=argument();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_string_operations2693); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 504:3: -> memberaccess3join(fstArg1=fstArgsndArg1=sndArg)
                      {
                          retval.st = templateLib.getInstanceOf("memberaccess3join",new STAttrMap().put("fstArg1", fstArg).put("sndArg1", sndArg));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:506:3: ({...}? STRING DOT IDENTIFIER method_invocation2 )=> STRING DOT IDENTIFIER met2= method_invocation2
                    {
                    match(input,STRING,FOLLOW_STRING_in_string_operations2730); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_string_operations2732); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_string_operations2734); if (state.failed) return retval;

                    pushFollow(FOLLOW_method_invocation2_in_string_operations2738);
                    met2=method_invocation2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 507:3: -> text(value=\"String.format\"+met2.st.toString().trim())
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "String.format"+met2.st.toString().trim()));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:509:3: ({...}?) STRING DOT IDENTIFIER par1= parenthesized_expression
                    {
                    // CSharpAngular.g:509:3: ({...}?)
                    // CSharpAngular.g:509:4: {...}?
                    {
                    if ( !((input.LT(3).getText().equals("Format"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "string_operations", "input.LT(3).getText().equals(\"Format\")");
                    }

                    }


                    match(input,STRING,FOLLOW_STRING_in_string_operations2761); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_string_operations2763); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_string_operations2765); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_string_operations2769);
                    par1=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 510:3: -> text(value=\"String.format\"+par1.st.toString().trim())
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "String.format"+par1.st.toString().trim()));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:512:3: ({...}? STRING DOT IDENTIFIER OPEN_PARENS argument COMMA argument COMMA argument COMMA argument CLOSE_PARENS )=> STRING DOT IDENTIFIER OPEN_PARENS fstArg= argument COMMA sndArg= argument COMMA thrdArg= argument COMMA frthArg= argument CLOSE_PARENS
                    {
                    match(input,STRING,FOLLOW_STRING_in_string_operations2817); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_string_operations2819); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_string_operations2821); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_string_operations2823); if (state.failed) return retval;

                    pushFollow(FOLLOW_argument_in_string_operations2827);
                    fstArg=argument();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,COMMA,FOLLOW_COMMA_in_string_operations2829); if (state.failed) return retval;

                    pushFollow(FOLLOW_argument_in_string_operations2833);
                    sndArg=argument();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,COMMA,FOLLOW_COMMA_in_string_operations2835); if (state.failed) return retval;

                    pushFollow(FOLLOW_argument_in_string_operations2839);
                    thrdArg=argument();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,COMMA,FOLLOW_COMMA_in_string_operations2841); if (state.failed) return retval;

                    pushFollow(FOLLOW_argument_in_string_operations2845);
                    frthArg=argument();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_string_operations2847); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 513:3: -> text(value=fstArg.st.toString().trim()+sndArg.st.toString().trim()+thrdArg.st.toString().trim()+frthArg.st.toString().trim())
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", fstArg.st.toString().trim()+sndArg.st.toString().trim()+thrdArg.st.toString().trim()+frthArg.st.toString().trim()));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:515:3: ({...}? STRING DOT IDENTIFIER OPEN_PARENS argument COMMA argument CLOSE_PARENS )=> STRING DOT IDENTIFIER OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS
                    {
                    match(input,STRING,FOLLOW_STRING_in_string_operations2887); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_string_operations2889); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_string_operations2891); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_string_operations2893); if (state.failed) return retval;

                    pushFollow(FOLLOW_argument_in_string_operations2897);
                    fstArg=argument();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,COMMA,FOLLOW_COMMA_in_string_operations2899); if (state.failed) return retval;

                    pushFollow(FOLLOW_argument_in_string_operations2903);
                    sndArg=argument();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_string_operations2905); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 516:3: -> text(value=fstArg.st.toString().trim()+\".concat(\"+sndArg.st.toString().trim()+\")\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", fstArg.st.toString().trim()+".concat("+sndArg.st.toString().trim()+")"));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:518:3: ({...}?) STRING DOT IDENTIFIER OPEN_PARENS fstArg= argument CLOSE_PARENS
                    {
                    // CSharpAngular.g:518:3: ({...}?)
                    // CSharpAngular.g:518:4: {...}?
                    {
                    if ( !((input.LT(3).getText().equals("Concat"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "string_operations", "input.LT(3).getText().equals(\"Concat\")");
                    }

                    }


                    match(input,STRING,FOLLOW_STRING_in_string_operations2928); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_string_operations2930); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_string_operations2932); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_string_operations2934); if (state.failed) return retval;

                    pushFollow(FOLLOW_argument_in_string_operations2938);
                    fstArg=argument();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_string_operations2940); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 519:3: -> text(value=fstArg.st.toString().trim())
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", fstArg.st.toString().trim()));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:521:3: ({...}?) STRING DOT IDENTIFIER met3= method_invocation2
                    {
                    // CSharpAngular.g:521:3: ({...}?)
                    // CSharpAngular.g:521:4: {...}?
                    {
                    if ( !((input.LT(3).getText().equals("Compare"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "string_operations", "input.LT(3).getText().equals(\"Compare\")");
                    }

                    }


                    match(input,STRING,FOLLOW_STRING_in_string_operations2962); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_string_operations2964); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_string_operations2966); if (state.failed) return retval;

                    pushFollow(FOLLOW_method_invocation2_in_string_operations2970);
                    met3=method_invocation2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 522:3: -> text(value=\"compare\"+met3.st.toString().trim())
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "compare"+met3.st.toString().trim()));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharpAngular.g:524:3: ({...}?) STRING DOT IDENTIFIER
                    {
                    // CSharpAngular.g:524:3: ({...}?)
                    // CSharpAngular.g:524:4: {...}?
                    {
                    if ( !((input.LT(3).getText().equals("Equals"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "string_operations", "input.LT(3).getText().equals(\"Equals\")");
                    }

                    }


                    match(input,STRING,FOLLOW_STRING_in_string_operations2993); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_string_operations2995); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_string_operations2997); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 525:3: -> text(value=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_operations"


    public static class primary_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_expression_Chld"
    // CSharpAngular.g:528:1: primary_expression_Chld : (cmnts= comments )? pesc= primary_expression_sub_Chld (brktExpr+= bracket_expression )* -> primaryExpressionChld(cmnt=cmntspeChild=pescbracketExpr=$brktExpr);
    public final CSharpAngular.primary_expression_Chld_return primary_expression_Chld() throws RecognitionException {
        CSharpAngular.primary_expression_Chld_return retval = new CSharpAngular.primary_expression_Chld_return();
        retval.start = input.LT(1);


        List list_brktExpr=null;
        CSharpAngular.comments_return cmnts =null;

        CSharpAngular.primary_expression_sub_Chld_return pesc =null;

        RuleReturnScope brktExpr = null;
        try {
            // CSharpAngular.g:529:3: ( (cmnts= comments )? pesc= primary_expression_sub_Chld (brktExpr+= bracket_expression )* -> primaryExpressionChld(cmnt=cmntspeChild=pescbracketExpr=$brktExpr))
            // CSharpAngular.g:530:3: (cmnts= comments )? pesc= primary_expression_sub_Chld (brktExpr+= bracket_expression )*
            {
            // CSharpAngular.g:530:3: (cmnts= comments )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( ((LA31_0 >= SINGLE_LINE_COMMENT && LA31_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // CSharpAngular.g:530:4: cmnts= comments
                    {
                    pushFollow(FOLLOW_comments_in_primary_expression_Chld3025);
                    cmnts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_primary_expression_sub_Chld_in_primary_expression_Chld3031);
            pesc=primary_expression_sub_Chld();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:530:54: (brktExpr+= bracket_expression )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==OPEN_BRACKET) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // CSharpAngular.g:530:55: brktExpr+= bracket_expression
            	    {
            	    pushFollow(FOLLOW_bracket_expression_in_primary_expression_Chld3036);
            	    brktExpr=bracket_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_brktExpr==null) list_brktExpr=new ArrayList();
            	    list_brktExpr.add(brktExpr.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 531:3: -> primaryExpressionChld(cmnt=cmntspeChild=pescbracketExpr=$brktExpr)
              {
                  retval.st = templateLib.getInstanceOf("primaryExpressionChld",new STAttrMap().put("cmnt", cmnts).put("peChild", pesc).put("bracketExpr", list_brktExpr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primary_expression_Chld"


    public static class primary_expression_sub_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_expression_sub_Chld"
    // CSharpAngular.g:534:1: primary_expression_sub_Chld : ( ( ( DOT IDENTIFIER OPEN_PARENS )=>memAc= member_access3 ) -> primaryExpressionSubChld(expressionChild=memAc)| ( ( DOT IDENTIFIER LT )=>memAc= member_access3 ) -> primaryExpressionSubChld(expressionChild=memAc)|memAcc= member_access2 -> primaryExpressionSubChld(expressionChild=memAcc)|methdInc= method_invocation2 -> primaryExpressionSubChld(expressionChild=methdInc)| OP_INC -> primaryExpressionSubChld(expressionChild=$OP_INC.text)| OP_DEC -> primaryExpressionSubChld(expressionChild=$OP_DEC.text)| OP_PTR IDENTIFIER -> primaryExpressionSubChld2(expressionChildprt1=$OP_PTR.textexpressionChildprt2=$IDENTIFIER.text));
    public final CSharpAngular.primary_expression_sub_Chld_return primary_expression_sub_Chld() throws RecognitionException {
        CSharpAngular.primary_expression_sub_Chld_return retval = new CSharpAngular.primary_expression_sub_Chld_return();
        retval.start = input.LT(1);


        Token OP_INC17=null;
        Token OP_DEC18=null;
        Token OP_PTR19=null;
        Token IDENTIFIER20=null;
        CSharpAngular.member_access3_return memAc =null;

        CSharpAngular.member_access2_return memAcc =null;

        CSharpAngular.method_invocation2_return methdInc =null;


        try {
            // CSharpAngular.g:535:2: ( ( ( DOT IDENTIFIER OPEN_PARENS )=>memAc= member_access3 ) -> primaryExpressionSubChld(expressionChild=memAc)| ( ( DOT IDENTIFIER LT )=>memAc= member_access3 ) -> primaryExpressionSubChld(expressionChild=memAc)|memAcc= member_access2 -> primaryExpressionSubChld(expressionChild=memAcc)|methdInc= method_invocation2 -> primaryExpressionSubChld(expressionChild=methdInc)| OP_INC -> primaryExpressionSubChld(expressionChild=$OP_INC.text)| OP_DEC -> primaryExpressionSubChld(expressionChild=$OP_DEC.text)| OP_PTR IDENTIFIER -> primaryExpressionSubChld2(expressionChildprt1=$OP_PTR.textexpressionChildprt2=$IDENTIFIER.text))
            int alt33=7;
            switch ( input.LA(1) ) {
            case DOT:
                {
                int LA33_1 = input.LA(2);

                if ( (LA33_1==IDENTIFIER) ) {
                    int LA33_6 = input.LA(3);

                    if ( (synpred27_CSharpAngular()) ) {
                        alt33=1;
                    }
                    else if ( (synpred28_CSharpAngular()) ) {
                        alt33=2;
                    }
                    else if ( (true) ) {
                        alt33=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 33, 6, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 1, input);

                    throw nvae;

                }
                }
                break;
            case OPEN_PARENS:
                {
                alt33=4;
                }
                break;
            case OP_INC:
                {
                alt33=5;
                }
                break;
            case OP_DEC:
                {
                alt33=6;
                }
                break;
            case OP_PTR:
                {
                alt33=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;

            }

            switch (alt33) {
                case 1 :
                    // CSharpAngular.g:536:3: ( ( DOT IDENTIFIER OPEN_PARENS )=>memAc= member_access3 )
                    {
                    // CSharpAngular.g:536:3: ( ( DOT IDENTIFIER OPEN_PARENS )=>memAc= member_access3 )
                    // CSharpAngular.g:536:4: ( DOT IDENTIFIER OPEN_PARENS )=>memAc= member_access3
                    {
                    pushFollow(FOLLOW_member_access3_in_primary_expression_sub_Chld3087);
                    memAc=member_access3();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 537:3: -> primaryExpressionSubChld(expressionChild=memAc)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionSubChld",new STAttrMap().put("expressionChild", memAc));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:539:3: ( ( DOT IDENTIFIER LT )=>memAc= member_access3 )
                    {
                    // CSharpAngular.g:539:3: ( ( DOT IDENTIFIER LT )=>memAc= member_access3 )
                    // CSharpAngular.g:539:4: ( DOT IDENTIFIER LT )=>memAc= member_access3
                    {
                    pushFollow(FOLLOW_member_access3_in_primary_expression_sub_Chld3120);
                    memAc=member_access3();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 540:3: -> primaryExpressionSubChld(expressionChild=memAc)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionSubChld",new STAttrMap().put("expressionChild", memAc));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:541:5: memAcc= member_access2
                    {
                    pushFollow(FOLLOW_member_access2_in_primary_expression_sub_Chld3139);
                    memAcc=member_access2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 542:3: -> primaryExpressionSubChld(expressionChild=memAcc)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionSubChld",new STAttrMap().put("expressionChild", memAcc));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:543:5: methdInc= method_invocation2
                    {
                    pushFollow(FOLLOW_method_invocation2_in_primary_expression_sub_Chld3157);
                    methdInc=method_invocation2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 544:3: -> primaryExpressionSubChld(expressionChild=methdInc)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionSubChld",new STAttrMap().put("expressionChild", methdInc));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:545:5: OP_INC
                    {
                    OP_INC17=(Token)match(input,OP_INC,FOLLOW_OP_INC_in_primary_expression_sub_Chld3173); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 546:3: -> primaryExpressionSubChld(expressionChild=$OP_INC.text)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionSubChld",new STAttrMap().put("expressionChild", (OP_INC17!=null?OP_INC17.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:547:5: OP_DEC
                    {
                    OP_DEC18=(Token)match(input,OP_DEC,FOLLOW_OP_DEC_in_primary_expression_sub_Chld3189); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 548:3: -> primaryExpressionSubChld(expressionChild=$OP_DEC.text)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionSubChld",new STAttrMap().put("expressionChild", (OP_DEC18!=null?OP_DEC18.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:549:5: OP_PTR IDENTIFIER
                    {
                    OP_PTR19=(Token)match(input,OP_PTR,FOLLOW_OP_PTR_in_primary_expression_sub_Chld3205); if (state.failed) return retval;

                    IDENTIFIER20=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_primary_expression_sub_Chld3207); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 550:3: -> primaryExpressionSubChld2(expressionChildprt1=$OP_PTR.textexpressionChildprt2=$IDENTIFIER.text)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionSubChld2",new STAttrMap().put("expressionChildprt1", (OP_PTR19!=null?OP_PTR19.getText():null)).put("expressionChildprt2", (IDENTIFIER20!=null?IDENTIFIER20.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primary_expression_sub_Chld"


    public static class member_access3_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_access3"
    // CSharpAngular.g:553:1: member_access3 : ( ( ({...}? DOT IDENTIFIER method_invocation2 )=> DOT IDENTIFIER met= method_invocation2 ) -> text(value=\".toString\"+met.st.toString().trim())| ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS ) -> text(value=\".toString()\")| ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS ) -> text(value=\".toLocaleDateString()\")| ( ({...}? DOT IDENTIFIER method_invocation2 )=> DOT IDENTIFIER met1= method_invocation2 ) -> text(value=\".split\"+met1.st.toString().trim())| ( ({...}?)=> DOT IDENTIFIER par1= parenthesized_expression ) -> text(value=\".split\"+CSharpAngularHelper.handleSplitParenthesis(par1.st.toString().trim()))| ( ({...}? DOT IDENTIFIER LT type GT )=> DOT IDENTIFIER LT type GT OPEN_PARENS CLOSE_PARENS ) -> text(value=\"\")| ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS ) -> text(value=\"\")| ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS ) -> text(value=\".splice( \"+fstArg.st.toString().trim()+\" , 0 , \"+sndArg.st.toString().trim()+\" )\")| ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS ) -> text(value=\" = []\")| ( ({...}?)=> DOT IDENTIFIER par5= parenthesized_expression ) -> text(value=\".splice( \"+CSharpAngularHelper.handleRemoveParenthesis(par5.st.toString().trim())+\" , 1)\")| ( ({...}?)=> DOT IDENTIFIER met3= method_invocation2 ) -> text(value=\".push\"+met3.st.toString().trim())| ( ({...}?)=> DOT IDENTIFIER par2= parenthesized_expression ) -> text(value=\".push\"+par2.st.toString().trim())| ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS ) -> text(value=\".trim()\")| ( ({...}?)=> DOT IDENTIFIER met6= method_invocation2 ) -> text(value=\".indexOf\"+met6.st.toString().trim())| ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS ) -> text(value=\"\")| DOT id= IDENTIFIER tal= type_argument_list_opt -> memberAccess3(memName=NamingUtil.toCamelCase($id.text)argLst=tal));
    public final CSharpAngular.member_access3_return member_access3() throws RecognitionException {
        CSharpAngular.member_access3_return retval = new CSharpAngular.member_access3_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharpAngular.method_invocation2_return met =null;

        CSharpAngular.method_invocation2_return met1 =null;

        CSharpAngular.parenthesized_expression_return par1 =null;

        CSharpAngular.argument_return fstArg =null;

        CSharpAngular.argument_return sndArg =null;

        CSharpAngular.parenthesized_expression_return par5 =null;

        CSharpAngular.method_invocation2_return met3 =null;

        CSharpAngular.parenthesized_expression_return par2 =null;

        CSharpAngular.method_invocation2_return met6 =null;

        CSharpAngular.type_argument_list_opt_return tal =null;


        try {
            // CSharpAngular.g:554:3: ( ( ({...}? DOT IDENTIFIER method_invocation2 )=> DOT IDENTIFIER met= method_invocation2 ) -> text(value=\".toString\"+met.st.toString().trim())| ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS ) -> text(value=\".toString()\")| ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS ) -> text(value=\".toLocaleDateString()\")| ( ({...}? DOT IDENTIFIER method_invocation2 )=> DOT IDENTIFIER met1= method_invocation2 ) -> text(value=\".split\"+met1.st.toString().trim())| ( ({...}?)=> DOT IDENTIFIER par1= parenthesized_expression ) -> text(value=\".split\"+CSharpAngularHelper.handleSplitParenthesis(par1.st.toString().trim()))| ( ({...}? DOT IDENTIFIER LT type GT )=> DOT IDENTIFIER LT type GT OPEN_PARENS CLOSE_PARENS ) -> text(value=\"\")| ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS ) -> text(value=\"\")| ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS ) -> text(value=\".splice( \"+fstArg.st.toString().trim()+\" , 0 , \"+sndArg.st.toString().trim()+\" )\")| ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS ) -> text(value=\" = []\")| ( ({...}?)=> DOT IDENTIFIER par5= parenthesized_expression ) -> text(value=\".splice( \"+CSharpAngularHelper.handleRemoveParenthesis(par5.st.toString().trim())+\" , 1)\")| ( ({...}?)=> DOT IDENTIFIER met3= method_invocation2 ) -> text(value=\".push\"+met3.st.toString().trim())| ( ({...}?)=> DOT IDENTIFIER par2= parenthesized_expression ) -> text(value=\".push\"+par2.st.toString().trim())| ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS ) -> text(value=\".trim()\")| ( ({...}?)=> DOT IDENTIFIER met6= method_invocation2 ) -> text(value=\".indexOf\"+met6.st.toString().trim())| ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS ) -> text(value=\"\")| DOT id= IDENTIFIER tal= type_argument_list_opt -> memberAccess3(memName=NamingUtil.toCamelCase($id.text)argLst=tal))
            int alt34=16;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==DOT) ) {
                int LA34_1 = input.LA(2);

                if ( (synpred29_CSharpAngular()) ) {
                    alt34=1;
                }
                else if ( (synpred30_CSharpAngular()) ) {
                    alt34=2;
                }
                else if ( (synpred31_CSharpAngular()) ) {
                    alt34=3;
                }
                else if ( (synpred32_CSharpAngular()) ) {
                    alt34=4;
                }
                else if ( (synpred33_CSharpAngular()) ) {
                    alt34=5;
                }
                else if ( (synpred34_CSharpAngular()) ) {
                    alt34=6;
                }
                else if ( (synpred35_CSharpAngular()) ) {
                    alt34=7;
                }
                else if ( (synpred36_CSharpAngular()) ) {
                    alt34=8;
                }
                else if ( (synpred37_CSharpAngular()) ) {
                    alt34=9;
                }
                else if ( (synpred38_CSharpAngular()) ) {
                    alt34=10;
                }
                else if ( (synpred39_CSharpAngular()) ) {
                    alt34=11;
                }
                else if ( (synpred40_CSharpAngular()) ) {
                    alt34=12;
                }
                else if ( (synpred41_CSharpAngular()) ) {
                    alt34=13;
                }
                else if ( (synpred42_CSharpAngular()) ) {
                    alt34=14;
                }
                else if ( (synpred43_CSharpAngular()) ) {
                    alt34=15;
                }
                else if ( (true) ) {
                    alt34=16;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 34, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;

            }
            switch (alt34) {
                case 1 :
                    // CSharpAngular.g:555:3: ( ({...}? DOT IDENTIFIER method_invocation2 )=> DOT IDENTIFIER met= method_invocation2 )
                    {
                    // CSharpAngular.g:555:3: ( ({...}? DOT IDENTIFIER method_invocation2 )=> DOT IDENTIFIER met= method_invocation2 )
                    // CSharpAngular.g:555:4: ({...}? DOT IDENTIFIER method_invocation2 )=> DOT IDENTIFIER met= method_invocation2
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access33273); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access33275); if (state.failed) return retval;

                    pushFollow(FOLLOW_method_invocation2_in_member_access33279);
                    met=method_invocation2();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 556:3: -> text(value=\".toString\"+met.st.toString().trim())
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".toString"+met.st.toString().trim()));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:558:3: ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS )
                    {
                    // CSharpAngular.g:558:3: ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS )
                    // CSharpAngular.g:558:4: ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access33305); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access33307); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_member_access33309); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_member_access33311); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 559:3: -> text(value=\".toString()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".toString()"));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:561:3: ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS )
                    {
                    // CSharpAngular.g:561:3: ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS )
                    // CSharpAngular.g:561:4: ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access33337); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access33339); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_member_access33341); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_member_access33343); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 562:3: -> text(value=\".toLocaleDateString()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".toLocaleDateString()"));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:564:3: ( ({...}? DOT IDENTIFIER method_invocation2 )=> DOT IDENTIFIER met1= method_invocation2 )
                    {
                    // CSharpAngular.g:564:3: ( ({...}? DOT IDENTIFIER method_invocation2 )=> DOT IDENTIFIER met1= method_invocation2 )
                    // CSharpAngular.g:564:4: ({...}? DOT IDENTIFIER method_invocation2 )=> DOT IDENTIFIER met1= method_invocation2
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access33375); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access33377); if (state.failed) return retval;

                    pushFollow(FOLLOW_method_invocation2_in_member_access33382);
                    met1=method_invocation2();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 565:3: -> text(value=\".split\"+met1.st.toString().trim())
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".split"+met1.st.toString().trim()));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:567:3: ( ({...}?)=> DOT IDENTIFIER par1= parenthesized_expression )
                    {
                    // CSharpAngular.g:567:3: ( ({...}?)=> DOT IDENTIFIER par1= parenthesized_expression )
                    // CSharpAngular.g:567:4: ({...}?)=> DOT IDENTIFIER par1= parenthesized_expression
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access33409); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access33411); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_member_access33416);
                    par1=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 568:3: -> text(value=\".split\"+CSharpAngularHelper.handleSplitParenthesis(par1.st.toString().trim()))
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".split"+CSharpAngularHelper.handleSplitParenthesis(par1.st.toString().trim())));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:570:3: ( ({...}? DOT IDENTIFIER LT type GT )=> DOT IDENTIFIER LT type GT OPEN_PARENS CLOSE_PARENS )
                    {
                    // CSharpAngular.g:570:3: ( ({...}? DOT IDENTIFIER LT type GT )=> DOT IDENTIFIER LT type GT OPEN_PARENS CLOSE_PARENS )
                    // CSharpAngular.g:570:4: ({...}? DOT IDENTIFIER LT type GT )=> DOT IDENTIFIER LT type GT OPEN_PARENS CLOSE_PARENS
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access33455); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access33457); if (state.failed) return retval;

                    match(input,LT,FOLLOW_LT_in_member_access33459); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_member_access33461);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,GT,FOLLOW_GT_in_member_access33463); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_member_access33465); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_member_access33467); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 571:3: -> text(value=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:573:3: ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS )
                    {
                    // CSharpAngular.g:573:3: ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS )
                    // CSharpAngular.g:573:4: ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access33493); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access33495); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_member_access33497); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_member_access33499); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 574:3: -> text(value=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:576:3: ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS )
                    {
                    // CSharpAngular.g:576:3: ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS )
                    // CSharpAngular.g:576:4: ({...}?)=> DOT IDENTIFIER OPEN_PARENS fstArg= argument COMMA sndArg= argument CLOSE_PARENS
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access33525); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access33527); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_member_access33529); if (state.failed) return retval;

                    pushFollow(FOLLOW_argument_in_member_access33533);
                    fstArg=argument();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,COMMA,FOLLOW_COMMA_in_member_access33535); if (state.failed) return retval;

                    pushFollow(FOLLOW_argument_in_member_access33539);
                    sndArg=argument();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_member_access33541); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 577:3: -> text(value=\".splice( \"+fstArg.st.toString().trim()+\" , 0 , \"+sndArg.st.toString().trim()+\" )\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".splice( "+fstArg.st.toString().trim()+" , 0 , "+sndArg.st.toString().trim()+" )"));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:579:3: ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS )
                    {
                    // CSharpAngular.g:579:3: ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS )
                    // CSharpAngular.g:579:4: ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access33568); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access33570); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_member_access33572); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_member_access33574); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 580:3: -> text(value=\" = []\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", " = []"));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:582:3: ( ({...}?)=> DOT IDENTIFIER par5= parenthesized_expression )
                    {
                    // CSharpAngular.g:582:3: ( ({...}?)=> DOT IDENTIFIER par5= parenthesized_expression )
                    // CSharpAngular.g:582:4: ({...}?)=> DOT IDENTIFIER par5= parenthesized_expression
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access33601); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access33603); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_member_access33607);
                    par5=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 583:3: -> text(value=\".splice( \"+CSharpAngularHelper.handleRemoveParenthesis(par5.st.toString().trim())+\" , 1)\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".splice( "+CSharpAngularHelper.handleRemoveParenthesis(par5.st.toString().trim())+" , 1)"));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:585:3: ( ({...}?)=> DOT IDENTIFIER met3= method_invocation2 )
                    {
                    // CSharpAngular.g:585:3: ( ({...}?)=> DOT IDENTIFIER met3= method_invocation2 )
                    // CSharpAngular.g:585:4: ({...}?)=> DOT IDENTIFIER met3= method_invocation2
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access33634); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access33636); if (state.failed) return retval;

                    pushFollow(FOLLOW_method_invocation2_in_member_access33640);
                    met3=method_invocation2();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 586:3: -> text(value=\".push\"+met3.st.toString().trim())
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".push"+met3.st.toString().trim()));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharpAngular.g:588:3: ( ({...}?)=> DOT IDENTIFIER par2= parenthesized_expression )
                    {
                    // CSharpAngular.g:588:3: ( ({...}?)=> DOT IDENTIFIER par2= parenthesized_expression )
                    // CSharpAngular.g:588:4: ({...}?)=> DOT IDENTIFIER par2= parenthesized_expression
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access33667); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access33669); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_member_access33673);
                    par2=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 589:3: -> text(value=\".push\"+par2.st.toString().trim())
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".push"+par2.st.toString().trim()));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharpAngular.g:591:3: ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS )
                    {
                    // CSharpAngular.g:591:3: ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS )
                    // CSharpAngular.g:591:4: ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access33700); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access33702); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_member_access33704); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_member_access33706); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 592:3: -> text(value=\".trim()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".trim()"));
                      }


                    }

                    }
                    break;
                case 14 :
                    // CSharpAngular.g:594:3: ( ({...}?)=> DOT IDENTIFIER met6= method_invocation2 )
                    {
                    // CSharpAngular.g:594:3: ( ({...}?)=> DOT IDENTIFIER met6= method_invocation2 )
                    // CSharpAngular.g:594:4: ({...}?)=> DOT IDENTIFIER met6= method_invocation2
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access33733); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access33735); if (state.failed) return retval;

                    pushFollow(FOLLOW_method_invocation2_in_member_access33739);
                    met6=method_invocation2();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 595:3: -> text(value=\".indexOf\"+met6.st.toString().trim())
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".indexOf"+met6.st.toString().trim()));
                      }


                    }

                    }
                    break;
                case 15 :
                    // CSharpAngular.g:597:3: ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS )
                    {
                    // CSharpAngular.g:597:3: ( ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS )
                    // CSharpAngular.g:597:4: ({...}?)=> DOT IDENTIFIER OPEN_PARENS CLOSE_PARENS
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access33766); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access33768); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_member_access33770); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_member_access33772); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 598:3: -> text(value=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
                      }


                    }

                    }
                    break;
                case 16 :
                    // CSharpAngular.g:600:3: DOT id= IDENTIFIER tal= type_argument_list_opt
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access33792); if (state.failed) return retval;

                    id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access33796); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_argument_list_opt_in_member_access33800);
                    tal=type_argument_list_opt();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 601:3: -> memberAccess3(memName=NamingUtil.toCamelCase($id.text)argLst=tal)
                      {
                          retval.st = templateLib.getInstanceOf("memberAccess3",new STAttrMap().put("memName", NamingUtil.toCamelCase((id!=null?id.getText():null))).put("argLst", tal));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_access3"


    public static class primary_expression_start_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_expression_start"
    // CSharpAngular.g:604:1: primary_expression_start : (exp1= literal -> primaryExpressionStart(expression=exp1)|exp2= simple_name -> primaryExpressionStart(expression=exp2)|exp3= parenthesized_expression -> primaryExpressionStart(expression=exp3)|exp4= predefined_type -> primaryExpressionStart(expression=exp4)|exp5= qualified_alias_member -> primaryExpressionStart(expression=exp5)|exp6= this_access -> primaryExpressionStart(expression=exp6)|exp7= base_access -> primaryExpressionStart(expression=exp7)|exp8= primary_expression_start_Chld -> primaryExpressionStart(expression=exp8)|exp9= typeof_expression -> primaryExpressionStart(expression=exp9)|exp10= checked_expression -> primaryExpressionStart(expression=exp10)|exp11= unchecked_expression -> primaryExpressionStart(expression=exp11)|exp12= default_value_expression -> primaryExpressionStart(expression=exp12)|exp13= anonymous_method_expression -> primaryExpressionStart(expression=exp13)|exp14= sizeof_expression -> primaryExpressionStart(expression=exp14));
    public final CSharpAngular.primary_expression_start_return primary_expression_start() throws RecognitionException {
        CSharpAngular.primary_expression_start_return retval = new CSharpAngular.primary_expression_start_return();
        retval.start = input.LT(1);


        CSharpAngular.literal_return exp1 =null;

        CSharpAngular.simple_name_return exp2 =null;

        CSharpAngular.parenthesized_expression_return exp3 =null;

        CSharpAngular.predefined_type_return exp4 =null;

        CSharpAngular.qualified_alias_member_return exp5 =null;

        CSharpAngular.this_access_return exp6 =null;

        CSharpAngular.base_access_return exp7 =null;

        CSharpAngular.primary_expression_start_Chld_return exp8 =null;

        CSharpAngular.typeof_expression_return exp9 =null;

        CSharpAngular.checked_expression_return exp10 =null;

        CSharpAngular.unchecked_expression_return exp11 =null;

        CSharpAngular.default_value_expression_return exp12 =null;

        CSharpAngular.anonymous_method_expression_return exp13 =null;

        CSharpAngular.sizeof_expression_return exp14 =null;


        try {
            // CSharpAngular.g:605:3: (exp1= literal -> primaryExpressionStart(expression=exp1)|exp2= simple_name -> primaryExpressionStart(expression=exp2)|exp3= parenthesized_expression -> primaryExpressionStart(expression=exp3)|exp4= predefined_type -> primaryExpressionStart(expression=exp4)|exp5= qualified_alias_member -> primaryExpressionStart(expression=exp5)|exp6= this_access -> primaryExpressionStart(expression=exp6)|exp7= base_access -> primaryExpressionStart(expression=exp7)|exp8= primary_expression_start_Chld -> primaryExpressionStart(expression=exp8)|exp9= typeof_expression -> primaryExpressionStart(expression=exp9)|exp10= checked_expression -> primaryExpressionStart(expression=exp10)|exp11= unchecked_expression -> primaryExpressionStart(expression=exp11)|exp12= default_value_expression -> primaryExpressionStart(expression=exp12)|exp13= anonymous_method_expression -> primaryExpressionStart(expression=exp13)|exp14= sizeof_expression -> primaryExpressionStart(expression=exp14))
            int alt35=14;
            switch ( input.LA(1) ) {
            case CHARACTER_LITERAL:
            case FALSE:
            case INTEGER_LITERAL:
            case NULL:
            case REAL_LITERAL:
            case STRING_LITERAL:
            case TRUE:
                {
                alt35=1;
                }
                break;
            case IDENTIFIER:
                {
                int LA35_2 = input.LA(2);

                if ( (LA35_2==EOF||(LA35_2 >= AMP && LA35_2 <= ASSIGNMENT)||LA35_2==BITWISE_OR||LA35_2==CARET||(LA35_2 >= CLOSE_BRACE && LA35_2 <= COMMA)||LA35_2==DIV||LA35_2==DOT||LA35_2==GT||LA35_2==IDENTIFIER||(LA35_2 >= INTERR && LA35_2 <= IS)||LA35_2==LT||LA35_2==MINUS||(LA35_2 >= OPEN_BRACKET && LA35_2 <= OPEN_PARENS)||(LA35_2 >= OP_ADD_ASSIGNMENT && LA35_2 <= OP_XOR_ASSIGNMENT)||(LA35_2 >= PERCENT && LA35_2 <= PLUS)||LA35_2==SEMICOLON||(LA35_2 >= SINGLE_LINE_COMMENT && LA35_2 <= SINGLE_LINE_DOC_COMMENT)||LA35_2==STAR) ) {
                    alt35=2;
                }
                else if ( (LA35_2==DOUBLE_COLON) ) {
                    alt35=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 2, input);

                    throw nvae;

                }
                }
                break;
            case OPEN_PARENS:
                {
                alt35=3;
                }
                break;
            case BOOL:
            case BYTE:
            case CHAR:
            case DECIMAL:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case OBJECT:
            case SBYTE:
            case SHORT:
            case STRING:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt35=4;
                }
                break;
            case THIS:
                {
                alt35=6;
                }
                break;
            case BASE:
                {
                alt35=7;
                }
                break;
            case NEW:
                {
                alt35=8;
                }
                break;
            case TYPEOF:
                {
                alt35=9;
                }
                break;
            case CHECKED:
                {
                alt35=10;
                }
                break;
            case UNCHECKED:
                {
                alt35=11;
                }
                break;
            case DEFAULT:
                {
                alt35=12;
                }
                break;
            case DELEGATE:
                {
                alt35=13;
                }
                break;
            case SIZEOF:
                {
                alt35=14;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;

            }

            switch (alt35) {
                case 1 :
                    // CSharpAngular.g:606:3: exp1= literal
                    {
                    pushFollow(FOLLOW_literal_in_primary_expression_start3834);
                    exp1=literal();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 607:3: -> primaryExpressionStart(expression=exp1)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:608:5: exp2= simple_name
                    {
                    pushFollow(FOLLOW_simple_name_in_primary_expression_start3852);
                    exp2=simple_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 609:3: -> primaryExpressionStart(expression=exp2)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp2));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:610:5: exp3= parenthesized_expression
                    {
                    pushFollow(FOLLOW_parenthesized_expression_in_primary_expression_start3870);
                    exp3=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 611:3: -> primaryExpressionStart(expression=exp3)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp3));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:612:5: exp4= predefined_type
                    {
                    pushFollow(FOLLOW_predefined_type_in_primary_expression_start3888);
                    exp4=predefined_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 613:3: -> primaryExpressionStart(expression=exp4)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp4));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:614:5: exp5= qualified_alias_member
                    {
                    pushFollow(FOLLOW_qualified_alias_member_in_primary_expression_start3907);
                    exp5=qualified_alias_member();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 615:3: -> primaryExpressionStart(expression=exp5)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp5));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:616:5: exp6= this_access
                    {
                    pushFollow(FOLLOW_this_access_in_primary_expression_start3927);
                    exp6=this_access();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 617:3: -> primaryExpressionStart(expression=exp6)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp6));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:618:5: exp7= base_access
                    {
                    pushFollow(FOLLOW_base_access_in_primary_expression_start3945);
                    exp7=base_access();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 619:3: -> primaryExpressionStart(expression=exp7)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp7));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:620:5: exp8= primary_expression_start_Chld
                    {
                    pushFollow(FOLLOW_primary_expression_start_Chld_in_primary_expression_start3963);
                    exp8=primary_expression_start_Chld();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 621:3: -> primaryExpressionStart(expression=exp8)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp8));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:622:5: exp9= typeof_expression
                    {
                    pushFollow(FOLLOW_typeof_expression_in_primary_expression_start3986);
                    exp9=typeof_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 623:3: -> primaryExpressionStart(expression=exp9)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp9));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:624:5: exp10= checked_expression
                    {
                    pushFollow(FOLLOW_checked_expression_in_primary_expression_start4004);
                    exp10=checked_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 625:3: -> primaryExpressionStart(expression=exp10)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp10));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:626:5: exp11= unchecked_expression
                    {
                    pushFollow(FOLLOW_unchecked_expression_in_primary_expression_start4022);
                    exp11=unchecked_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 627:3: -> primaryExpressionStart(expression=exp11)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp11));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharpAngular.g:628:5: exp12= default_value_expression
                    {
                    pushFollow(FOLLOW_default_value_expression_in_primary_expression_start4040);
                    exp12=default_value_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 629:3: -> primaryExpressionStart(expression=exp12)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp12));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharpAngular.g:630:5: exp13= anonymous_method_expression
                    {
                    pushFollow(FOLLOW_anonymous_method_expression_in_primary_expression_start4058);
                    exp13=anonymous_method_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 631:3: -> primaryExpressionStart(expression=exp13)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp13));
                      }


                    }

                    }
                    break;
                case 14 :
                    // CSharpAngular.g:632:5: exp14= sizeof_expression
                    {
                    pushFollow(FOLLOW_sizeof_expression_in_primary_expression_start4076);
                    exp14=sizeof_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 633:3: -> primaryExpressionStart(expression=exp14)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp14));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primary_expression_start"


    public static class primary_expression_start_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_expression_start_Chld"
    // CSharpAngular.g:636:1: primary_expression_start_Chld : ( NEW t= type prc= primary_expression_start_sub_Chld -> primaryExpressionStartChld(type=texpression=prc)| NEW aoi= anonymous_object_initializer -> primaryExpressionStartChld2(anyObjInit=aoi)| NEW rs= rank_specifier ai= array_initializer -> primaryExpressionStartChld3(rnkSpcr=rsarrInit=ai));
    public final CSharpAngular.primary_expression_start_Chld_return primary_expression_start_Chld() throws RecognitionException {
        CSharpAngular.primary_expression_start_Chld_return retval = new CSharpAngular.primary_expression_start_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.type_return t =null;

        CSharpAngular.primary_expression_start_sub_Chld_return prc =null;

        CSharpAngular.anonymous_object_initializer_return aoi =null;

        CSharpAngular.rank_specifier_return rs =null;

        CSharpAngular.array_initializer_return ai =null;


        try {
            // CSharpAngular.g:637:3: ( NEW t= type prc= primary_expression_start_sub_Chld -> primaryExpressionStartChld(type=texpression=prc)| NEW aoi= anonymous_object_initializer -> primaryExpressionStartChld2(anyObjInit=aoi)| NEW rs= rank_specifier ai= array_initializer -> primaryExpressionStartChld3(rnkSpcr=rsarrInit=ai))
            int alt36=3;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==NEW) ) {
                switch ( input.LA(2) ) {
                case BOOL:
                case BYTE:
                case CHAR:
                case DECIMAL:
                case DOUBLE:
                case FLOAT:
                case IDENTIFIER:
                case INT:
                case LONG:
                case OBJECT:
                case SBYTE:
                case SHORT:
                case STRING:
                case UINT:
                case ULONG:
                case USHORT:
                case VOID:
                    {
                    alt36=1;
                    }
                    break;
                case OPEN_BRACE:
                    {
                    alt36=2;
                    }
                    break;
                case OPEN_BRACKET:
                    {
                    alt36=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 1, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }
            switch (alt36) {
                case 1 :
                    // CSharpAngular.g:638:3: NEW t= type prc= primary_expression_start_sub_Chld
                    {
                    match(input,NEW,FOLLOW_NEW_in_primary_expression_start_Chld4105); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_primary_expression_start_Chld4110);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_primary_expression_start_sub_Chld_in_primary_expression_start_Chld4114);
                    prc=primary_expression_start_sub_Chld();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 639:3: -> primaryExpressionStartChld(type=texpression=prc)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStartChld",new STAttrMap().put("type", t).put("expression", prc));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:640:4: NEW aoi= anonymous_object_initializer
                    {
                    match(input,NEW,FOLLOW_NEW_in_primary_expression_start_Chld4133); if (state.failed) return retval;

                    pushFollow(FOLLOW_anonymous_object_initializer_in_primary_expression_start_Chld4137);
                    aoi=anonymous_object_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 641:3: -> primaryExpressionStartChld2(anyObjInit=aoi)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStartChld2",new STAttrMap().put("anyObjInit", aoi));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:642:4: NEW rs= rank_specifier ai= array_initializer
                    {
                    match(input,NEW,FOLLOW_NEW_in_primary_expression_start_Chld4152); if (state.failed) return retval;

                    pushFollow(FOLLOW_rank_specifier_in_primary_expression_start_Chld4156);
                    rs=rank_specifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_array_initializer_in_primary_expression_start_Chld4160);
                    ai=array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 643:3: -> primaryExpressionStartChld3(rnkSpcr=rsarrInit=ai)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStartChld3",new STAttrMap().put("rnkSpcr", rs).put("arrInit", ai));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primary_expression_start_Chld"


    public static class primary_expression_start_sub_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_expression_start_sub_Chld"
    // CSharpAngular.g:646:1: primary_expression_start_sub_Chld : (objExpr= object_creation_expression2 -> primaryExpressionStartSubChld(expr=objExpr)|objOrColInit= object_or_collection_initializer -> primaryExpressionStartSubChld(expr=objOrColInit)| OPEN_BRACKET el= expression_list CLOSE_BRACKET (rs= rank_specifiers )? (arinit= array_initializer )? -> primaryExpressionStartSubChld2(exprList=elrnkSpecfr=rsarryInit=arinit)|rnkSpr= rank_specifiers arrInit= array_initializer -> primaryExpressionStartSubChld3(expr1=rnkSprexpr2=arrInit));
    public final CSharpAngular.primary_expression_start_sub_Chld_return primary_expression_start_sub_Chld() throws RecognitionException {
        CSharpAngular.primary_expression_start_sub_Chld_return retval = new CSharpAngular.primary_expression_start_sub_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.object_creation_expression2_return objExpr =null;

        CSharpAngular.object_or_collection_initializer_return objOrColInit =null;

        CSharpAngular.expression_list_return el =null;

        CSharpAngular.rank_specifiers_return rs =null;

        CSharpAngular.array_initializer_return arinit =null;

        CSharpAngular.rank_specifiers_return rnkSpr =null;

        CSharpAngular.array_initializer_return arrInit =null;


        try {
            // CSharpAngular.g:647:3: (objExpr= object_creation_expression2 -> primaryExpressionStartSubChld(expr=objExpr)|objOrColInit= object_or_collection_initializer -> primaryExpressionStartSubChld(expr=objOrColInit)| OPEN_BRACKET el= expression_list CLOSE_BRACKET (rs= rank_specifiers )? (arinit= array_initializer )? -> primaryExpressionStartSubChld2(exprList=elrnkSpecfr=rsarryInit=arinit)|rnkSpr= rank_specifiers arrInit= array_initializer -> primaryExpressionStartSubChld3(expr1=rnkSprexpr2=arrInit))
            int alt39=4;
            switch ( input.LA(1) ) {
            case OPEN_PARENS:
                {
                alt39=1;
                }
                break;
            case OPEN_BRACE:
                {
                alt39=2;
                }
                break;
            case OPEN_BRACKET:
                {
                int LA39_3 = input.LA(2);

                if ( (LA39_3==AMP||(LA39_3 >= BANG && LA39_3 <= BASE)||LA39_3==BOOL||LA39_3==BYTE||(LA39_3 >= CHAR && LA39_3 <= CHECKED)||LA39_3==DECIMAL||(LA39_3 >= DEFAULT && LA39_3 <= DELEGATE)||LA39_3==DOUBLE||LA39_3==FALSE||LA39_3==FLOAT||LA39_3==IDENTIFIER||(LA39_3 >= INT && LA39_3 <= INTEGER_LITERAL)||LA39_3==LONG||LA39_3==MINUS||LA39_3==NEW||LA39_3==NULL||LA39_3==OBJECT||LA39_3==OPEN_PARENS||LA39_3==OP_DEC||LA39_3==OP_INC||LA39_3==PLUS||LA39_3==REAL_LITERAL||LA39_3==SBYTE||LA39_3==SHORT||LA39_3==SIZEOF||LA39_3==STAR||(LA39_3 >= STRING && LA39_3 <= STRING_LITERAL)||LA39_3==THIS||(LA39_3 >= TILDE && LA39_3 <= TRUE)||LA39_3==TYPEOF||(LA39_3 >= UINT && LA39_3 <= UNCHECKED)||LA39_3==USHORT) ) {
                    alt39=3;
                }
                else if ( (LA39_3==CLOSE_BRACKET||LA39_3==COMMA) ) {
                    alt39=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }

            switch (alt39) {
                case 1 :
                    // CSharpAngular.g:648:3: objExpr= object_creation_expression2
                    {
                    pushFollow(FOLLOW_object_creation_expression2_in_primary_expression_start_sub_Chld4193);
                    objExpr=object_creation_expression2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 649:3: -> primaryExpressionStartSubChld(expr=objExpr)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStartSubChld",new STAttrMap().put("expr", objExpr));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:650:5: objOrColInit= object_or_collection_initializer
                    {
                    pushFollow(FOLLOW_object_or_collection_initializer_in_primary_expression_start_sub_Chld4211);
                    objOrColInit=object_or_collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 651:5: -> primaryExpressionStartSubChld(expr=objOrColInit)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStartSubChld",new STAttrMap().put("expr", objOrColInit));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:652:5: OPEN_BRACKET el= expression_list CLOSE_BRACKET (rs= rank_specifiers )? (arinit= array_initializer )?
                    {
                    match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_primary_expression_start_sub_Chld4231); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_list_in_primary_expression_start_sub_Chld4235);
                    el=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_primary_expression_start_sub_Chld4237); if (state.failed) return retval;

                    // CSharpAngular.g:652:51: (rs= rank_specifiers )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==OPEN_BRACKET) ) {
                        int LA37_1 = input.LA(2);

                        if ( (LA37_1==CLOSE_BRACKET||LA37_1==COMMA) ) {
                            alt37=1;
                        }
                    }
                    switch (alt37) {
                        case 1 :
                            // CSharpAngular.g:652:52: rs= rank_specifiers
                            {
                            pushFollow(FOLLOW_rank_specifiers_in_primary_expression_start_sub_Chld4242);
                            rs=rank_specifiers();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharpAngular.g:652:73: (arinit= array_initializer )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==OPEN_BRACE) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // CSharpAngular.g:652:74: arinit= array_initializer
                            {
                            pushFollow(FOLLOW_array_initializer_in_primary_expression_start_sub_Chld4249);
                            arinit=array_initializer();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 653:3: -> primaryExpressionStartSubChld2(exprList=elrnkSpecfr=rsarryInit=arinit)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStartSubChld2",new STAttrMap().put("exprList", el).put("rnkSpecfr", rs).put("arryInit", arinit));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:654:5: rnkSpr= rank_specifiers arrInit= array_initializer
                    {
                    pushFollow(FOLLOW_rank_specifiers_in_primary_expression_start_sub_Chld4278);
                    rnkSpr=rank_specifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_array_initializer_in_primary_expression_start_sub_Chld4282);
                    arrInit=array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 655:3: -> primaryExpressionStartSubChld3(expr1=rnkSprexpr2=arrInit)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStartSubChld3",new STAttrMap().put("expr1", rnkSpr).put("expr2", arrInit));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primary_expression_start_sub_Chld"


    public static class bracket_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "bracket_expression"
    // CSharpAngular.g:663:1: bracket_expression : OPEN_BRACKET exprLst= expression_list CLOSE_BRACKET -> bracketExpression(expressionList=exprLst);
    public final CSharpAngular.bracket_expression_return bracket_expression() throws RecognitionException {
        CSharpAngular.bracket_expression_return retval = new CSharpAngular.bracket_expression_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_list_return exprLst =null;


        try {
            // CSharpAngular.g:664:3: ( OPEN_BRACKET exprLst= expression_list CLOSE_BRACKET -> bracketExpression(expressionList=exprLst))
            // CSharpAngular.g:665:3: OPEN_BRACKET exprLst= expression_list CLOSE_BRACKET
            {
            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_bracket_expression4313); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_list_in_bracket_expression4317);
            exprLst=expression_list();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_bracket_expression4319); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 666:3: -> bracketExpression(expressionList=exprLst)
              {
                  retval.st = templateLib.getInstanceOf("bracketExpression",new STAttrMap().put("expressionList", exprLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bracket_expression"


    public static class simple_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "simple_name"
    // CSharpAngular.g:741:1: simple_name : ( ( ({...}?)=>str1= date_operations ) -> text(value=str1)| ( ({...}?)=>str2= date_week_operations ) -> text(value=str2)| ( ({...}?)=> IDENTIFIER DOT IDENTIFIER ) -> text(value=\"(new Date('0001-01-01'))\")| ( ({...}?)=> IDENTIFIER DOT IDENTIFIER ) -> text(value=\"(new Date(\\\"Dec 31, 9999 23:59:59\\\"))\")| ( ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression ) -> text(value=par.st.toString().trim()+\".toString()\")| ( ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression ) -> text(value=\"parseInt\"+par.st.toString().trim())| ( ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression ) -> text(value=\"parseInt\"+par.st.toString().trim())| ( ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression ) -> text(value=\"parseInt\"+par.st.toString().trim())| ( ({...}?)=> IDENTIFIER DOT clsid= IDENTIFIER DOT mtdid= IDENTIFIER met= method_invocation2 ) -> text(value=CSharpAngularHelper.serviceDOGenerator(clsid.getText().toString().trim(),mtdid.getText().toString().trim(),met.st.toString().trim()))| ( ( simple_name1 )+ )=> (sim+= simple_name1 )+ pare= method_invocation2 -> simplename1(sim1=$simvalue1=CSharpAngularHelper.handleRemoveParenthesis(pare.st.toString().trim()))| ( ( simple_remove_name )+ )=> (srn+= simple_remove_name )+ pare= method_invocation2 -> simpleremovename(sim2=$srnvalue2=CSharpAngularHelper.handleRemoveParenthesis(pare.st.toString().trim()))| IDENTIFIER talo= type_argument_list_opt -> simpleName(name=NamingUtil.toCamelCase($IDENTIFIER.text)argList=talo));
    public final CSharpAngular.simple_name_return simple_name() throws RecognitionException {
        CSharpAngular.simple_name_return retval = new CSharpAngular.simple_name_return();
        retval.start = input.LT(1);


        Token clsid=null;
        Token mtdid=null;
        Token IDENTIFIER21=null;
        List list_sim=null;
        List list_srn=null;
        CSharpAngular.date_operations_return str1 =null;

        CSharpAngular.date_week_operations_return str2 =null;

        CSharpAngular.parenthesized_expression_return par =null;

        CSharpAngular.method_invocation2_return met =null;

        CSharpAngular.method_invocation2_return pare =null;

        CSharpAngular.type_argument_list_opt_return talo =null;

        RuleReturnScope sim = null;
        RuleReturnScope srn = null;
        try {
            // CSharpAngular.g:742:3: ( ( ({...}?)=>str1= date_operations ) -> text(value=str1)| ( ({...}?)=>str2= date_week_operations ) -> text(value=str2)| ( ({...}?)=> IDENTIFIER DOT IDENTIFIER ) -> text(value=\"(new Date('0001-01-01'))\")| ( ({...}?)=> IDENTIFIER DOT IDENTIFIER ) -> text(value=\"(new Date(\\\"Dec 31, 9999 23:59:59\\\"))\")| ( ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression ) -> text(value=par.st.toString().trim()+\".toString()\")| ( ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression ) -> text(value=\"parseInt\"+par.st.toString().trim())| ( ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression ) -> text(value=\"parseInt\"+par.st.toString().trim())| ( ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression ) -> text(value=\"parseInt\"+par.st.toString().trim())| ( ({...}?)=> IDENTIFIER DOT clsid= IDENTIFIER DOT mtdid= IDENTIFIER met= method_invocation2 ) -> text(value=CSharpAngularHelper.serviceDOGenerator(clsid.getText().toString().trim(),mtdid.getText().toString().trim(),met.st.toString().trim()))| ( ( simple_name1 )+ )=> (sim+= simple_name1 )+ pare= method_invocation2 -> simplename1(sim1=$simvalue1=CSharpAngularHelper.handleRemoveParenthesis(pare.st.toString().trim()))| ( ( simple_remove_name )+ )=> (srn+= simple_remove_name )+ pare= method_invocation2 -> simpleremovename(sim2=$srnvalue2=CSharpAngularHelper.handleRemoveParenthesis(pare.st.toString().trim()))| IDENTIFIER talo= type_argument_list_opt -> simpleName(name=NamingUtil.toCamelCase($IDENTIFIER.text)argList=talo))
            int alt42=12;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==IDENTIFIER) ) {
                int LA42_1 = input.LA(2);

                if ( (synpred44_CSharpAngular()) ) {
                    alt42=1;
                }
                else if ( (synpred45_CSharpAngular()) ) {
                    alt42=2;
                }
                else if ( (synpred46_CSharpAngular()) ) {
                    alt42=3;
                }
                else if ( (synpred47_CSharpAngular()) ) {
                    alt42=4;
                }
                else if ( ((input.LT(1).getText().equals("Convert") && input.LT(2).getText().equals(".") && input.LT(3).getText().equals("ToString"))) ) {
                    alt42=5;
                }
                else if ( ((input.LT(1).getText().equals("Convert") && input.LT(2).getText().equals(".") && input.LT(3).getText().equals("ToDecimal"))) ) {
                    alt42=6;
                }
                else if ( ((input.LT(1).getText().equals("Convert") && input.LT(2).getText().equals(".") && input.LT(3).getText().equals("ToInt32"))) ) {
                    alt42=7;
                }
                else if ( ((input.LT(1).getText().equals("Convert") && input.LT(2).getText().equals(".") && input.LT(3).getText().equals("ToInt64"))) ) {
                    alt42=8;
                }
                else if ( (synpred48_CSharpAngular()) ) {
                    alt42=9;
                }
                else if ( (synpred49_CSharpAngular()) ) {
                    alt42=10;
                }
                else if ( (synpred50_CSharpAngular()) ) {
                    alt42=11;
                }
                else if ( (true) ) {
                    alt42=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;

            }
            switch (alt42) {
                case 1 :
                    // CSharpAngular.g:743:3: ( ({...}?)=>str1= date_operations )
                    {
                    // CSharpAngular.g:743:3: ( ({...}?)=>str1= date_operations )
                    // CSharpAngular.g:743:4: ({...}?)=>str1= date_operations
                    {
                    pushFollow(FOLLOW_date_operations_in_simple_name4359);
                    str1=date_operations();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 744:3: -> text(value=str1)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", str1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:746:3: ( ({...}?)=>str2= date_week_operations )
                    {
                    // CSharpAngular.g:746:3: ( ({...}?)=>str2= date_week_operations )
                    // CSharpAngular.g:746:4: ({...}?)=>str2= date_week_operations
                    {
                    pushFollow(FOLLOW_date_week_operations_in_simple_name4387);
                    str2=date_week_operations();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 747:3: -> text(value=str2)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", str2));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:749:3: ( ({...}?)=> IDENTIFIER DOT IDENTIFIER )
                    {
                    // CSharpAngular.g:749:3: ( ({...}?)=> IDENTIFIER DOT IDENTIFIER )
                    // CSharpAngular.g:749:4: ({...}?)=> IDENTIFIER DOT IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name4414); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_simple_name4416); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name4418); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 750:3: -> text(value=\"(new Date('0001-01-01'))\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "(new Date('0001-01-01'))"));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:752:3: ( ({...}?)=> IDENTIFIER DOT IDENTIFIER )
                    {
                    // CSharpAngular.g:752:3: ( ({...}?)=> IDENTIFIER DOT IDENTIFIER )
                    // CSharpAngular.g:752:4: ({...}?)=> IDENTIFIER DOT IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name4445); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_simple_name4447); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name4449); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 753:3: -> text(value=\"(new Date(\\\"Dec 31, 9999 23:59:59\\\"))\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "(new Date(\"Dec 31, 9999 23:59:59\"))"));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:755:3: ( ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression )
                    {
                    // CSharpAngular.g:755:3: ( ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression )
                    // CSharpAngular.g:755:4: ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression
                    {
                    // CSharpAngular.g:755:4: ({...}?)
                    // CSharpAngular.g:755:5: {...}?
                    {
                    if ( !((input.LT(1).getText().equals("Convert") && input.LT(2).getText().equals(".") && input.LT(3).getText().equals("ToString"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "simple_name", "input.LT(1).getText().equals(\"Convert\") && input.LT(2).getText().equals(\".\") && input.LT(3).getText().equals(\"ToString\")");
                    }

                    }


                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name4473); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_simple_name4475); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name4477); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_simple_name4481);
                    par=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 756:3: -> text(value=par.st.toString().trim()+\".toString()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", par.st.toString().trim()+".toString()"));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:758:4: ( ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression )
                    {
                    // CSharpAngular.g:758:4: ( ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression )
                    // CSharpAngular.g:758:5: ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression
                    {
                    // CSharpAngular.g:758:5: ({...}?)
                    // CSharpAngular.g:758:6: {...}?
                    {
                    if ( !((input.LT(1).getText().equals("Convert") && input.LT(2).getText().equals(".") && input.LT(3).getText().equals("ToDecimal"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "simple_name", "input.LT(1).getText().equals(\"Convert\") && input.LT(2).getText().equals(\".\") && input.LT(3).getText().equals(\"ToDecimal\")");
                    }

                    }


                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name4505); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_simple_name4507); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name4509); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_simple_name4513);
                    par=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 759:3: -> text(value=\"parseInt\"+par.st.toString().trim())
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "parseInt"+par.st.toString().trim()));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:761:4: ( ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression )
                    {
                    // CSharpAngular.g:761:4: ( ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression )
                    // CSharpAngular.g:761:5: ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression
                    {
                    // CSharpAngular.g:761:5: ({...}?)
                    // CSharpAngular.g:761:6: {...}?
                    {
                    if ( !((input.LT(1).getText().equals("Convert") && input.LT(2).getText().equals(".") && input.LT(3).getText().equals("ToInt32"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "simple_name", "input.LT(1).getText().equals(\"Convert\") && input.LT(2).getText().equals(\".\") && input.LT(3).getText().equals(\"ToInt32\")");
                    }

                    }


                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name4537); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_simple_name4539); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name4541); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_simple_name4545);
                    par=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 762:3: -> text(value=\"parseInt\"+par.st.toString().trim())
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "parseInt"+par.st.toString().trim()));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:764:3: ( ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression )
                    {
                    // CSharpAngular.g:764:3: ( ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression )
                    // CSharpAngular.g:764:4: ({...}?) IDENTIFIER DOT IDENTIFIER par= parenthesized_expression
                    {
                    // CSharpAngular.g:764:4: ({...}?)
                    // CSharpAngular.g:764:5: {...}?
                    {
                    if ( !((input.LT(1).getText().equals("Convert") && input.LT(2).getText().equals(".") && input.LT(3).getText().equals("ToInt64"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "simple_name", "input.LT(1).getText().equals(\"Convert\") && input.LT(2).getText().equals(\".\") && input.LT(3).getText().equals(\"ToInt64\")");
                    }

                    }


                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name4568); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_simple_name4570); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name4572); if (state.failed) return retval;

                    pushFollow(FOLLOW_parenthesized_expression_in_simple_name4576);
                    par=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 765:3: -> text(value=\"parseInt\"+par.st.toString().trim())
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "parseInt"+par.st.toString().trim()));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:767:3: ( ({...}?)=> IDENTIFIER DOT clsid= IDENTIFIER DOT mtdid= IDENTIFIER met= method_invocation2 )
                    {
                    // CSharpAngular.g:767:3: ( ({...}?)=> IDENTIFIER DOT clsid= IDENTIFIER DOT mtdid= IDENTIFIER met= method_invocation2 )
                    // CSharpAngular.g:767:4: ({...}?)=> IDENTIFIER DOT clsid= IDENTIFIER DOT mtdid= IDENTIFIER met= method_invocation2
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name4602); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_simple_name4604); if (state.failed) return retval;

                    clsid=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name4608); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_simple_name4610); if (state.failed) return retval;

                    mtdid=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name4614); if (state.failed) return retval;

                    pushFollow(FOLLOW_method_invocation2_in_simple_name4618);
                    met=method_invocation2();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 768:3: -> text(value=CSharpAngularHelper.serviceDOGenerator(clsid.getText().toString().trim(),mtdid.getText().toString().trim(),met.st.toString().trim()))
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", CSharpAngularHelper.serviceDOGenerator(clsid.getText().toString().trim(),mtdid.getText().toString().trim(),met.st.toString().trim())));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:770:3: ( ( simple_name1 )+ )=> (sim+= simple_name1 )+ pare= method_invocation2
                    {
                    // CSharpAngular.g:770:26: (sim+= simple_name1 )+
                    int cnt40=0;
                    loop40:
                    do {
                        int alt40=2;
                        int LA40_0 = input.LA(1);

                        if ( (LA40_0==IDENTIFIER) ) {
                            alt40=1;
                        }


                        switch (alt40) {
                    	case 1 :
                    	    // CSharpAngular.g:770:27: sim+= simple_name1
                    	    {
                    	    pushFollow(FOLLOW_simple_name1_in_simple_name4651);
                    	    sim=simple_name1();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_sim==null) list_sim=new ArrayList();
                    	    list_sim.add(sim.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt40 >= 1 ) break loop40;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(40, input);
                                throw eee;
                        }
                        cnt40++;
                    } while (true);


                    pushFollow(FOLLOW_method_invocation2_in_simple_name4657);
                    pare=method_invocation2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 771:3: -> simplename1(sim1=$simvalue1=CSharpAngularHelper.handleRemoveParenthesis(pare.st.toString().trim()))
                      {
                          retval.st = templateLib.getInstanceOf("simplename1",new STAttrMap().put("sim1", list_sim).put("value1", CSharpAngularHelper.handleRemoveParenthesis(pare.st.toString().trim())));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:773:3: ( ( simple_remove_name )+ )=> (srn+= simple_remove_name )+ pare= method_invocation2
                    {
                    // CSharpAngular.g:773:32: (srn+= simple_remove_name )+
                    int cnt41=0;
                    loop41:
                    do {
                        int alt41=2;
                        int LA41_0 = input.LA(1);

                        if ( (LA41_0==IDENTIFIER) ) {
                            alt41=1;
                        }


                        switch (alt41) {
                    	case 1 :
                    	    // CSharpAngular.g:773:33: srn+= simple_remove_name
                    	    {
                    	    pushFollow(FOLLOW_simple_remove_name_in_simple_name4694);
                    	    srn=simple_remove_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_srn==null) list_srn=new ArrayList();
                    	    list_srn.add(srn.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt41 >= 1 ) break loop41;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(41, input);
                                throw eee;
                        }
                        cnt41++;
                    } while (true);


                    pushFollow(FOLLOW_method_invocation2_in_simple_name4700);
                    pare=method_invocation2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 774:3: -> simpleremovename(sim2=$srnvalue2=CSharpAngularHelper.handleRemoveParenthesis(pare.st.toString().trim()))
                      {
                          retval.st = templateLib.getInstanceOf("simpleremovename",new STAttrMap().put("sim2", list_srn).put("value2", CSharpAngularHelper.handleRemoveParenthesis(pare.st.toString().trim())));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharpAngular.g:776:3: IDENTIFIER talo= type_argument_list_opt
                    {
                    IDENTIFIER21=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name4723); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_argument_list_opt_in_simple_name4727);
                    talo=type_argument_list_opt();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 777:3: -> simpleName(name=NamingUtil.toCamelCase($IDENTIFIER.text)argList=talo)
                      {
                          retval.st = templateLib.getInstanceOf("simpleName",new STAttrMap().put("name", NamingUtil.toCamelCase((IDENTIFIER21!=null?IDENTIFIER21.getText():null))).put("argList", talo));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_name"


    public static class simple_remove_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "simple_remove_name"
    // CSharpAngular.g:780:1: simple_remove_name : ( ({...}?) IDENTIFIER -> text(value=\"\")|id= IDENTIFIER DOT -> text(value=NamingUtil.toCamelCase($id.text)+\".\"));
    public final CSharpAngular.simple_remove_name_return simple_remove_name() throws RecognitionException {
        CSharpAngular.simple_remove_name_return retval = new CSharpAngular.simple_remove_name_return();
        retval.start = input.LT(1);


        Token id=null;

        try {
            // CSharpAngular.g:781:3: ( ({...}?) IDENTIFIER -> text(value=\"\")|id= IDENTIFIER DOT -> text(value=NamingUtil.toCamelCase($id.text)+\".\"))
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==IDENTIFIER) ) {
                int LA43_1 = input.LA(2);

                if ( (LA43_1==DOT) ) {
                    alt43=2;
                }
                else if ( (LA43_1==EOF||LA43_1==IDENTIFIER||LA43_1==OPEN_PARENS) ) {
                    alt43=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;

            }
            switch (alt43) {
                case 1 :
                    // CSharpAngular.g:782:3: ({...}?) IDENTIFIER
                    {
                    // CSharpAngular.g:782:3: ({...}?)
                    // CSharpAngular.g:782:4: {...}?
                    {
                    if ( !((input.LT(1).getText().equals("Remove"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "simple_remove_name", "input.LT(1).getText().equals(\"Remove\")");
                    }

                    }


                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_remove_name4762); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 783:3: -> text(value=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:785:3: id= IDENTIFIER DOT
                    {
                    id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_remove_name4782); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_simple_remove_name4784); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 786:3: -> text(value=NamingUtil.toCamelCase($id.text)+\".\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", NamingUtil.toCamelCase((id!=null?id.getText():null))+"."));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_remove_name"


    public static class parenthesized_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "parenthesized_expression"
    // CSharpAngular.g:790:1: parenthesized_expression : OPEN_PARENS expr= expression CLOSE_PARENS -> parenthesizedExpression(expression=expr);
    public final CSharpAngular.parenthesized_expression_return parenthesized_expression() throws RecognitionException {
        CSharpAngular.parenthesized_expression_return retval = new CSharpAngular.parenthesized_expression_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_return expr =null;


        try {
            // CSharpAngular.g:791:2: ( OPEN_PARENS expr= expression CLOSE_PARENS -> parenthesizedExpression(expression=expr))
            // CSharpAngular.g:792:2: OPEN_PARENS expr= expression CLOSE_PARENS
            {
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_parenthesized_expression4813); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_parenthesized_expression4817);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_parenthesized_expression4819); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 793:2: -> parenthesizedExpression(expression=expr)
              {
                  retval.st = templateLib.getInstanceOf("parenthesizedExpression",new STAttrMap().put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parenthesized_expression"


    public static class simple_name1_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "simple_name1"
    // CSharpAngular.g:796:1: simple_name1 : ( ({...}?) IDENTIFIER -> text(value=\"\")| ({...}?) id1= IDENTIFIER DOT -> text(value=NamingUtil.toCamelCase($id1.text))|id= IDENTIFIER DOT -> text(value=NamingUtil.toCamelCase($id.text)+\".\"));
    public final CSharpAngular.simple_name1_return simple_name1() throws RecognitionException {
        CSharpAngular.simple_name1_return retval = new CSharpAngular.simple_name1_return();
        retval.start = input.LT(1);


        Token id1=null;
        Token id=null;

        try {
            // CSharpAngular.g:797:3: ( ({...}?) IDENTIFIER -> text(value=\"\")| ({...}?) id1= IDENTIFIER DOT -> text(value=NamingUtil.toCamelCase($id1.text))|id= IDENTIFIER DOT -> text(value=NamingUtil.toCamelCase($id.text)+\".\"))
            int alt44=3;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==IDENTIFIER) ) {
                int LA44_1 = input.LA(2);

                if ( (LA44_1==DOT) ) {
                    int LA44_2 = input.LA(3);

                    if ( ((input.LT(3).getText().equals("ToString") && input.LT(4).getText().equals("(") && !input.LT(5).getText().equals(")"))) ) {
                        alt44=2;
                    }
                    else if ( (true) ) {
                        alt44=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 44, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA44_1==EOF||LA44_1==IDENTIFIER||LA44_1==OPEN_PARENS) ) {
                    alt44=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 44, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;

            }
            switch (alt44) {
                case 1 :
                    // CSharpAngular.g:798:3: ({...}?) IDENTIFIER
                    {
                    // CSharpAngular.g:798:3: ({...}?)
                    // CSharpAngular.g:798:4: {...}?
                    {
                    if ( !((input.LT(1).getText().equals("ToString") && input.LT(2).getText().equals("(") && !input.LT(3).getText().equals(")"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "simple_name1", "input.LT(1).getText().equals(\"ToString\") && input.LT(2).getText().equals(\"(\") && !input.LT(3).getText().equals(\")\")");
                    }

                    }


                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name14846); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 799:3: -> text(value=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:801:3: ({...}?) id1= IDENTIFIER DOT
                    {
                    // CSharpAngular.g:801:3: ({...}?)
                    // CSharpAngular.g:801:4: {...}?
                    {
                    if ( !((input.LT(3).getText().equals("ToString") && input.LT(4).getText().equals("(") && !input.LT(5).getText().equals(")"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "simple_name1", "input.LT(3).getText().equals(\"ToString\") && input.LT(4).getText().equals(\"(\") && !input.LT(5).getText().equals(\")\")");
                    }

                    }


                    id1=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name14870); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_simple_name14872); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 802:3: -> text(value=NamingUtil.toCamelCase($id1.text))
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", NamingUtil.toCamelCase((id1!=null?id1.getText():null))));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:804:3: id= IDENTIFIER DOT
                    {
                    id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name14892); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_simple_name14894); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 805:3: -> text(value=NamingUtil.toCamelCase($id.text)+\".\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", NamingUtil.toCamelCase((id!=null?id.getText():null))+"."));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_name1"


    public static class member_access_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_access"
    // CSharpAngular.g:815:1: member_access : ma= primary_expression -> memberAccess(expr=ma);
    public final CSharpAngular.member_access_return member_access() throws RecognitionException {
        CSharpAngular.member_access_return retval = new CSharpAngular.member_access_return();
        retval.start = input.LT(1);


        CSharpAngular.primary_expression_return ma =null;


        try {
            // CSharpAngular.g:816:3: (ma= primary_expression -> memberAccess(expr=ma))
            // CSharpAngular.g:817:3: ma= primary_expression
            {
            pushFollow(FOLLOW_primary_expression_in_member_access4926);
            ma=primary_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 818:3: -> memberAccess(expr=ma)
              {
                  retval.st = templateLib.getInstanceOf("memberAccess",new STAttrMap().put("expr", ma));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_access"


    public static class predefined_cast_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "predefined_cast_type"
    // CSharpAngular.g:821:1: predefined_cast_type : ( BOOL -> text(value=\"boolean\")| BYTE -> text(value=$BYTE.text)| CHAR -> text(value=$CHAR.text)| DECIMAL -> text(value=$DECIMAL.text)| DOUBLE -> text(value=$DOUBLE.text)| FLOAT -> text(value=$FLOAT.text)| INT -> text(value=$INT.text)| LONG -> text(value=$LONG.text)| OBJECT -> text(value=\"Object\")| SBYTE -> text(value=$SBYTE.text)| SHORT -> text(value=$SHORT.text)| STRING -> text(value=\"String\")| UINT -> text(value=$UINT.text)| ULONG -> text(value=$ULONG.text)| USHORT -> text(value=$USHORT.text));
    public final CSharpAngular.predefined_cast_type_return predefined_cast_type() throws RecognitionException {
        CSharpAngular.predefined_cast_type_return retval = new CSharpAngular.predefined_cast_type_return();
        retval.start = input.LT(1);


        Token BYTE22=null;
        Token CHAR23=null;
        Token DECIMAL24=null;
        Token DOUBLE25=null;
        Token FLOAT26=null;
        Token INT27=null;
        Token LONG28=null;
        Token SBYTE29=null;
        Token SHORT30=null;
        Token UINT31=null;
        Token ULONG32=null;
        Token USHORT33=null;

        try {
            // CSharpAngular.g:822:3: ( BOOL -> text(value=\"boolean\")| BYTE -> text(value=$BYTE.text)| CHAR -> text(value=$CHAR.text)| DECIMAL -> text(value=$DECIMAL.text)| DOUBLE -> text(value=$DOUBLE.text)| FLOAT -> text(value=$FLOAT.text)| INT -> text(value=$INT.text)| LONG -> text(value=$LONG.text)| OBJECT -> text(value=\"Object\")| SBYTE -> text(value=$SBYTE.text)| SHORT -> text(value=$SHORT.text)| STRING -> text(value=\"String\")| UINT -> text(value=$UINT.text)| ULONG -> text(value=$ULONG.text)| USHORT -> text(value=$USHORT.text))
            int alt45=15;
            switch ( input.LA(1) ) {
            case BOOL:
                {
                alt45=1;
                }
                break;
            case BYTE:
                {
                alt45=2;
                }
                break;
            case CHAR:
                {
                alt45=3;
                }
                break;
            case DECIMAL:
                {
                alt45=4;
                }
                break;
            case DOUBLE:
                {
                alt45=5;
                }
                break;
            case FLOAT:
                {
                alt45=6;
                }
                break;
            case INT:
                {
                alt45=7;
                }
                break;
            case LONG:
                {
                alt45=8;
                }
                break;
            case OBJECT:
                {
                alt45=9;
                }
                break;
            case SBYTE:
                {
                alt45=10;
                }
                break;
            case SHORT:
                {
                alt45=11;
                }
                break;
            case STRING:
                {
                alt45=12;
                }
                break;
            case UINT:
                {
                alt45=13;
                }
                break;
            case ULONG:
                {
                alt45=14;
                }
                break;
            case USHORT:
                {
                alt45=15;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }

            switch (alt45) {
                case 1 :
                    // CSharpAngular.g:823:3: BOOL
                    {
                    match(input,BOOL,FOLLOW_BOOL_in_predefined_cast_type4955); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 824:3: -> text(value=\"boolean\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "boolean"));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:825:5: BYTE
                    {
                    BYTE22=(Token)match(input,BYTE,FOLLOW_BYTE_in_predefined_cast_type4971); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 826:3: -> text(value=$BYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BYTE22!=null?BYTE22.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:827:5: CHAR
                    {
                    CHAR23=(Token)match(input,CHAR,FOLLOW_CHAR_in_predefined_cast_type4987); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 828:3: -> text(value=$CHAR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CHAR23!=null?CHAR23.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:829:5: DECIMAL
                    {
                    DECIMAL24=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_predefined_cast_type5003); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 830:3: -> text(value=$DECIMAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DECIMAL24!=null?DECIMAL24.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:831:5: DOUBLE
                    {
                    DOUBLE25=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_predefined_cast_type5019); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 832:3: -> text(value=$DOUBLE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DOUBLE25!=null?DOUBLE25.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:833:5: FLOAT
                    {
                    FLOAT26=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_predefined_cast_type5035); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 834:3: -> text(value=$FLOAT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FLOAT26!=null?FLOAT26.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:835:5: INT
                    {
                    INT27=(Token)match(input,INT,FOLLOW_INT_in_predefined_cast_type5051); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 836:3: -> text(value=$INT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INT27!=null?INT27.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:837:5: LONG
                    {
                    LONG28=(Token)match(input,LONG,FOLLOW_LONG_in_predefined_cast_type5067); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 838:3: -> text(value=$LONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (LONG28!=null?LONG28.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:839:5: OBJECT
                    {
                    match(input,OBJECT,FOLLOW_OBJECT_in_predefined_cast_type5083); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 840:3: -> text(value=\"Object\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "Object"));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:841:5: SBYTE
                    {
                    SBYTE29=(Token)match(input,SBYTE,FOLLOW_SBYTE_in_predefined_cast_type5099); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 842:3: -> text(value=$SBYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SBYTE29!=null?SBYTE29.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:843:5: SHORT
                    {
                    SHORT30=(Token)match(input,SHORT,FOLLOW_SHORT_in_predefined_cast_type5115); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 844:3: -> text(value=$SHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SHORT30!=null?SHORT30.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharpAngular.g:845:5: STRING
                    {
                    match(input,STRING,FOLLOW_STRING_in_predefined_cast_type5131); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 846:3: -> text(value=\"String\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "String"));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharpAngular.g:847:5: UINT
                    {
                    UINT31=(Token)match(input,UINT,FOLLOW_UINT_in_predefined_cast_type5147); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 848:3: -> text(value=$UINT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UINT31!=null?UINT31.getText():null)));
                      }


                    }

                    }
                    break;
                case 14 :
                    // CSharpAngular.g:849:5: ULONG
                    {
                    ULONG32=(Token)match(input,ULONG,FOLLOW_ULONG_in_predefined_cast_type5163); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 850:3: -> text(value=$ULONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ULONG32!=null?ULONG32.getText():null)));
                      }


                    }

                    }
                    break;
                case 15 :
                    // CSharpAngular.g:851:5: USHORT
                    {
                    USHORT33=(Token)match(input,USHORT,FOLLOW_USHORT_in_predefined_cast_type5179); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 852:3: -> text(value=$USHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (USHORT33!=null?USHORT33.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "predefined_cast_type"


    public static class predefined_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "predefined_type"
    // CSharpAngular.g:855:1: predefined_type : ( BOOL -> text(value=\"boolean\")| BYTE -> text(value=$BYTE.text)| CHAR -> text(value=$CHAR.text)| DECIMAL -> text(value=$DECIMAL.text)| DOUBLE -> text(value=$DOUBLE.text)| FLOAT -> text(value=$FLOAT.text)| INT -> text(value=$INT.text)| LONG -> text(value=$LONG.text)| OBJECT -> text(value=\"Object\")| SBYTE -> text(value=$SBYTE.text)| SHORT -> text(value=$SHORT.text)| ( ({...}?)=>str= string_operations ) -> text(value=str)| STRING -> text(value=\"String\")| UINT -> text(value=$UINT.text)| ULONG -> text(value=$ULONG.text)| USHORT -> text(value=$USHORT.text));
    public final CSharpAngular.predefined_type_return predefined_type() throws RecognitionException {
        CSharpAngular.predefined_type_return retval = new CSharpAngular.predefined_type_return();
        retval.start = input.LT(1);


        Token BYTE34=null;
        Token CHAR35=null;
        Token DECIMAL36=null;
        Token DOUBLE37=null;
        Token FLOAT38=null;
        Token INT39=null;
        Token LONG40=null;
        Token SBYTE41=null;
        Token SHORT42=null;
        Token UINT43=null;
        Token ULONG44=null;
        Token USHORT45=null;
        CSharpAngular.string_operations_return str =null;


        try {
            // CSharpAngular.g:856:2: ( BOOL -> text(value=\"boolean\")| BYTE -> text(value=$BYTE.text)| CHAR -> text(value=$CHAR.text)| DECIMAL -> text(value=$DECIMAL.text)| DOUBLE -> text(value=$DOUBLE.text)| FLOAT -> text(value=$FLOAT.text)| INT -> text(value=$INT.text)| LONG -> text(value=$LONG.text)| OBJECT -> text(value=\"Object\")| SBYTE -> text(value=$SBYTE.text)| SHORT -> text(value=$SHORT.text)| ( ({...}?)=>str= string_operations ) -> text(value=str)| STRING -> text(value=\"String\")| UINT -> text(value=$UINT.text)| ULONG -> text(value=$ULONG.text)| USHORT -> text(value=$USHORT.text))
            int alt46=16;
            switch ( input.LA(1) ) {
            case BOOL:
                {
                alt46=1;
                }
                break;
            case BYTE:
                {
                alt46=2;
                }
                break;
            case CHAR:
                {
                alt46=3;
                }
                break;
            case DECIMAL:
                {
                alt46=4;
                }
                break;
            case DOUBLE:
                {
                alt46=5;
                }
                break;
            case FLOAT:
                {
                alt46=6;
                }
                break;
            case INT:
                {
                alt46=7;
                }
                break;
            case LONG:
                {
                alt46=8;
                }
                break;
            case OBJECT:
                {
                alt46=9;
                }
                break;
            case SBYTE:
                {
                alt46=10;
                }
                break;
            case SHORT:
                {
                alt46=11;
                }
                break;
            case STRING:
                {
                int LA46_12 = input.LA(2);

                if ( (LA46_12==DOT) ) {
                    int LA46_16 = input.LA(3);

                    if ( (LA46_16==IDENTIFIER) ) {
                        int LA46_18 = input.LA(4);

                        if ( (synpred51_CSharpAngular()) ) {
                            alt46=12;
                        }
                        else if ( (true) ) {
                            alt46=13;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 46, 18, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 46, 16, input);

                        throw nvae;

                    }
                }
                else if ( (LA46_12==EOF||(LA46_12 >= AMP && LA46_12 <= ASSIGNMENT)||LA46_12==BITWISE_OR||LA46_12==CARET||(LA46_12 >= CLOSE_BRACE && LA46_12 <= COMMA)||LA46_12==DIV||LA46_12==GT||LA46_12==IDENTIFIER||(LA46_12 >= INTERR && LA46_12 <= IS)||LA46_12==LT||LA46_12==MINUS||(LA46_12 >= OPEN_BRACKET && LA46_12 <= OPEN_PARENS)||(LA46_12 >= OP_ADD_ASSIGNMENT && LA46_12 <= OP_XOR_ASSIGNMENT)||(LA46_12 >= PERCENT && LA46_12 <= PLUS)||LA46_12==SEMICOLON||(LA46_12 >= SINGLE_LINE_COMMENT && LA46_12 <= SINGLE_LINE_DOC_COMMENT)||LA46_12==STAR) ) {
                    alt46=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 12, input);

                    throw nvae;

                }
                }
                break;
            case UINT:
                {
                alt46=14;
                }
                break;
            case ULONG:
                {
                alt46=15;
                }
                break;
            case USHORT:
                {
                alt46=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }

            switch (alt46) {
                case 1 :
                    // CSharpAngular.g:857:2: BOOL
                    {
                    match(input,BOOL,FOLLOW_BOOL_in_predefined_type5204); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 858:2: -> text(value=\"boolean\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "boolean"));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:859:4: BYTE
                    {
                    BYTE34=(Token)match(input,BYTE,FOLLOW_BYTE_in_predefined_type5218); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 860:2: -> text(value=$BYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BYTE34!=null?BYTE34.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:861:4: CHAR
                    {
                    CHAR35=(Token)match(input,CHAR,FOLLOW_CHAR_in_predefined_type5232); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 862:2: -> text(value=$CHAR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CHAR35!=null?CHAR35.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:863:4: DECIMAL
                    {
                    DECIMAL36=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_predefined_type5246); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 864:2: -> text(value=$DECIMAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DECIMAL36!=null?DECIMAL36.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:865:4: DOUBLE
                    {
                    DOUBLE37=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_predefined_type5260); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 866:2: -> text(value=$DOUBLE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DOUBLE37!=null?DOUBLE37.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:867:4: FLOAT
                    {
                    FLOAT38=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_predefined_type5274); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 868:2: -> text(value=$FLOAT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FLOAT38!=null?FLOAT38.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:869:4: INT
                    {
                    INT39=(Token)match(input,INT,FOLLOW_INT_in_predefined_type5288); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 870:2: -> text(value=$INT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INT39!=null?INT39.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:871:4: LONG
                    {
                    LONG40=(Token)match(input,LONG,FOLLOW_LONG_in_predefined_type5302); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 872:2: -> text(value=$LONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (LONG40!=null?LONG40.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:873:4: OBJECT
                    {
                    match(input,OBJECT,FOLLOW_OBJECT_in_predefined_type5316); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 874:2: -> text(value=\"Object\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "Object"));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:875:4: SBYTE
                    {
                    SBYTE41=(Token)match(input,SBYTE,FOLLOW_SBYTE_in_predefined_type5330); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 876:2: -> text(value=$SBYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SBYTE41!=null?SBYTE41.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:877:4: SHORT
                    {
                    SHORT42=(Token)match(input,SHORT,FOLLOW_SHORT_in_predefined_type5344); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 878:2: -> text(value=$SHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SHORT42!=null?SHORT42.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharpAngular.g:879:4: ( ({...}?)=>str= string_operations )
                    {
                    // CSharpAngular.g:879:4: ( ({...}?)=>str= string_operations )
                    // CSharpAngular.g:879:5: ({...}?)=>str= string_operations
                    {
                    pushFollow(FOLLOW_string_operations_in_predefined_type5367);
                    str=string_operations();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 880:3: -> text(value=str)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", str));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharpAngular.g:881:4: STRING
                    {
                    match(input,STRING,FOLLOW_STRING_in_predefined_type5383); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 882:2: -> text(value=\"String\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "String"));
                      }


                    }

                    }
                    break;
                case 14 :
                    // CSharpAngular.g:883:4: UINT
                    {
                    UINT43=(Token)match(input,UINT,FOLLOW_UINT_in_predefined_type5397); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 884:2: -> text(value=$UINT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UINT43!=null?UINT43.getText():null)));
                      }


                    }

                    }
                    break;
                case 15 :
                    // CSharpAngular.g:885:4: ULONG
                    {
                    ULONG44=(Token)match(input,ULONG,FOLLOW_ULONG_in_predefined_type5411); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 886:2: -> text(value=$ULONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ULONG44!=null?ULONG44.getText():null)));
                      }


                    }

                    }
                    break;
                case 16 :
                    // CSharpAngular.g:887:4: USHORT
                    {
                    USHORT45=(Token)match(input,USHORT,FOLLOW_USHORT_in_predefined_type5425); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 888:2: -> text(value=$USHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (USHORT45!=null?USHORT45.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "predefined_type"


    public static class expression_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "expression_list"
    // CSharpAngular.g:901:1: expression_list : frstExpr= expression (ChldLst+= expression_list_Chld )* -> expressionList(firstExpr=frstExprlist=$ChldLst);
    public final CSharpAngular.expression_list_return expression_list() throws RecognitionException {
        CSharpAngular.expression_list_return retval = new CSharpAngular.expression_list_return();
        retval.start = input.LT(1);


        List list_ChldLst=null;
        CSharpAngular.expression_return frstExpr =null;

        RuleReturnScope ChldLst = null;
        try {
            // CSharpAngular.g:902:2: (frstExpr= expression (ChldLst+= expression_list_Chld )* -> expressionList(firstExpr=frstExprlist=$ChldLst))
            // CSharpAngular.g:903:2: frstExpr= expression (ChldLst+= expression_list_Chld )*
            {
            pushFollow(FOLLOW_expression_in_expression_list5455);
            frstExpr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:903:22: (ChldLst+= expression_list_Chld )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==COMMA) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // CSharpAngular.g:903:23: ChldLst+= expression_list_Chld
            	    {
            	    pushFollow(FOLLOW_expression_list_Chld_in_expression_list5460);
            	    ChldLst=expression_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_ChldLst==null) list_ChldLst=new ArrayList();
            	    list_ChldLst.add(ChldLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 904:2: -> expressionList(firstExpr=frstExprlist=$ChldLst)
              {
                  retval.st = templateLib.getInstanceOf("expressionList",new STAttrMap().put("firstExpr", frstExpr).put("list", list_ChldLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression_list"


    public static class expression_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "expression_list_Chld"
    // CSharpAngular.g:907:1: expression_list_Chld : COMMA expr= expression -> expressionListChld(expression=expr);
    public final CSharpAngular.expression_list_Chld_return expression_list_Chld() throws RecognitionException {
        CSharpAngular.expression_list_Chld_return retval = new CSharpAngular.expression_list_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_return expr =null;


        try {
            // CSharpAngular.g:908:2: ( COMMA expr= expression -> expressionListChld(expression=expr))
            // CSharpAngular.g:909:2: COMMA expr= expression
            {
            match(input,COMMA,FOLLOW_COMMA_in_expression_list_Chld5488); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_expression_list_Chld5492);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 910:2: -> expressionListChld(expression=expr)
              {
                  retval.st = templateLib.getInstanceOf("expressionListChld",new STAttrMap().put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression_list_Chld"


    public static class this_access_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "this_access"
    // CSharpAngular.g:913:1: this_access : t= THIS -> text(value=$t.text);
    public final CSharpAngular.this_access_return this_access() throws RecognitionException {
        CSharpAngular.this_access_return retval = new CSharpAngular.this_access_return();
        retval.start = input.LT(1);


        Token t=null;

        try {
            // CSharpAngular.g:914:2: (t= THIS -> text(value=$t.text))
            // CSharpAngular.g:915:2: t= THIS
            {
            t=(Token)match(input,THIS,FOLLOW_THIS_in_this_access5518); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 916:2: -> text(value=$t.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (t!=null?t.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "this_access"


    public static class base_access_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "base_access"
    // CSharpAngular.g:919:1: base_access : ( BASE DOT IDENTIFIER typarglst= type_argument_list_opt -> baseaccess(typarg=typarglst)| BASE OPEN_BRACKET expression_list CLOSE_BRACKET );
    public final CSharpAngular.base_access_return base_access() throws RecognitionException {
        CSharpAngular.base_access_return retval = new CSharpAngular.base_access_return();
        retval.start = input.LT(1);


        CSharpAngular.type_argument_list_opt_return typarglst =null;


        try {
            // CSharpAngular.g:920:2: ( BASE DOT IDENTIFIER typarglst= type_argument_list_opt -> baseaccess(typarg=typarglst)| BASE OPEN_BRACKET expression_list CLOSE_BRACKET )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==BASE) ) {
                int LA48_1 = input.LA(2);

                if ( (LA48_1==DOT) ) {
                    alt48=1;
                }
                else if ( (LA48_1==OPEN_BRACKET) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;

            }
            switch (alt48) {
                case 1 :
                    // CSharpAngular.g:921:2: BASE DOT IDENTIFIER typarglst= type_argument_list_opt
                    {
                    match(input,BASE,FOLLOW_BASE_in_base_access5541); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_base_access5543); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_base_access5545); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_argument_list_opt_in_base_access5549);
                    typarglst=type_argument_list_opt();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 922:2: -> baseaccess(typarg=typarglst)
                      {
                          retval.st = templateLib.getInstanceOf("baseaccess",new STAttrMap().put("typarg", typarglst));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:923:4: BASE OPEN_BRACKET expression_list CLOSE_BRACKET
                    {
                    match(input,BASE,FOLLOW_BASE_in_base_access5563); if (state.failed) return retval;

                    match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_base_access5565); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_list_in_base_access5567);
                    expression_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_base_access5569); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "base_access"


    public static class object_creation_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "object_creation_expression"
    // CSharpAngular.g:940:1: object_creation_expression : NEW t= type chld= object_creation_expression_Chld -> objectCreationExpression(type=tchild=chld);
    public final CSharpAngular.object_creation_expression_return object_creation_expression() throws RecognitionException {
        CSharpAngular.object_creation_expression_return retval = new CSharpAngular.object_creation_expression_return();
        retval.start = input.LT(1);


        CSharpAngular.type_return t =null;

        CSharpAngular.object_creation_expression_Chld_return chld =null;


        try {
            // CSharpAngular.g:941:3: ( NEW t= type chld= object_creation_expression_Chld -> objectCreationExpression(type=tchild=chld))
            // CSharpAngular.g:942:3: NEW t= type chld= object_creation_expression_Chld
            {
            match(input,NEW,FOLLOW_NEW_in_object_creation_expression5590); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_object_creation_expression5594);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_object_creation_expression_Chld_in_object_creation_expression5598);
            chld=object_creation_expression_Chld();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 943:3: -> objectCreationExpression(type=tchild=chld)
              {
                  retval.st = templateLib.getInstanceOf("objectCreationExpression",new STAttrMap().put("type", t).put("child", chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_creation_expression"


    public static class object_creation_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "object_creation_expression_Chld"
    // CSharpAngular.g:945:1: object_creation_expression_Chld : ( OPEN_PARENS (lst= argument_list )? CLOSE_PARENS (ObjInit= object_or_collection_initializer )? -> objectCreationExpressionChld(argLst=$lst.st.toString().trim()init=ObjInit)|ObjColInit= object_or_collection_initializer -> objectCreationExpressionChld(argLst=nullinit=ObjColInit));
    public final CSharpAngular.object_creation_expression_Chld_return object_creation_expression_Chld() throws RecognitionException {
        CSharpAngular.object_creation_expression_Chld_return retval = new CSharpAngular.object_creation_expression_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.argument_list_return lst =null;

        CSharpAngular.object_or_collection_initializer_return ObjInit =null;

        CSharpAngular.object_or_collection_initializer_return ObjColInit =null;


        try {
            // CSharpAngular.g:946:4: ( OPEN_PARENS (lst= argument_list )? CLOSE_PARENS (ObjInit= object_or_collection_initializer )? -> objectCreationExpressionChld(argLst=$lst.st.toString().trim()init=ObjInit)|ObjColInit= object_or_collection_initializer -> objectCreationExpressionChld(argLst=nullinit=ObjColInit))
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==OPEN_PARENS) ) {
                alt51=1;
            }
            else if ( (LA51_0==OPEN_BRACE) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;

            }
            switch (alt51) {
                case 1 :
                    // CSharpAngular.g:947:4: OPEN_PARENS (lst= argument_list )? CLOSE_PARENS (ObjInit= object_or_collection_initializer )?
                    {
                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_object_creation_expression_Chld5631); if (state.failed) return retval;

                    // CSharpAngular.g:947:16: (lst= argument_list )?
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==AMP||(LA49_0 >= BANG && LA49_0 <= BASE)||LA49_0==BOOL||LA49_0==BYTE||(LA49_0 >= CHAR && LA49_0 <= CHECKED)||LA49_0==DECIMAL||(LA49_0 >= DEFAULT && LA49_0 <= DELEGATE)||LA49_0==DOUBLE||LA49_0==FALSE||LA49_0==FLOAT||LA49_0==IDENTIFIER||(LA49_0 >= INT && LA49_0 <= INTEGER_LITERAL)||LA49_0==LONG||LA49_0==MINUS||LA49_0==NEW||LA49_0==NULL||LA49_0==OBJECT||LA49_0==OPEN_PARENS||LA49_0==OP_DEC||LA49_0==OP_INC||LA49_0==OUT||LA49_0==PLUS||(LA49_0 >= REAL_LITERAL && LA49_0 <= REF)||LA49_0==SBYTE||LA49_0==SHORT||LA49_0==SIZEOF||LA49_0==STAR||(LA49_0 >= STRING && LA49_0 <= STRING_LITERAL)||LA49_0==THIS||(LA49_0 >= TILDE && LA49_0 <= TRUE)||LA49_0==TYPEOF||(LA49_0 >= UINT && LA49_0 <= UNCHECKED)||LA49_0==USHORT) ) {
                        alt49=1;
                    }
                    switch (alt49) {
                        case 1 :
                            // CSharpAngular.g:947:17: lst= argument_list
                            {
                            pushFollow(FOLLOW_argument_list_in_object_creation_expression_Chld5636);
                            lst=argument_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_object_creation_expression_Chld5640); if (state.failed) return retval;

                    // CSharpAngular.g:947:50: (ObjInit= object_or_collection_initializer )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==OPEN_BRACE) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // CSharpAngular.g:947:51: ObjInit= object_or_collection_initializer
                            {
                            pushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression_Chld5645);
                            ObjInit=object_or_collection_initializer();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 948:4: -> objectCreationExpressionChld(argLst=$lst.st.toString().trim()init=ObjInit)
                      {
                          retval.st = templateLib.getInstanceOf("objectCreationExpressionChld",new STAttrMap().put("argLst", (lst!=null?lst.st:null).toString().trim()).put("init", ObjInit));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:949:6: ObjColInit= object_or_collection_initializer
                    {
                    pushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression_Chld5672);
                    ObjColInit=object_or_collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 950:4: -> objectCreationExpressionChld(argLst=nullinit=ObjColInit)
                      {
                          retval.st = templateLib.getInstanceOf("objectCreationExpressionChld",new STAttrMap().put("argLst", null).put("init", ObjColInit));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_creation_expression_Chld"


    public static class object_or_collection_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "object_or_collection_initializer"
    // CSharpAngular.g:953:1: object_or_collection_initializer : (objInit= object_initializer -> objectOrCollectionInitializer(init=objInit)|colInit= collection_initializer -> objectOrCollectionInitializer(init=colInit));
    public final CSharpAngular.object_or_collection_initializer_return object_or_collection_initializer() throws RecognitionException {
        CSharpAngular.object_or_collection_initializer_return retval = new CSharpAngular.object_or_collection_initializer_return();
        retval.start = input.LT(1);


        CSharpAngular.object_initializer_return objInit =null;

        CSharpAngular.collection_initializer_return colInit =null;


        try {
            // CSharpAngular.g:954:2: (objInit= object_initializer -> objectOrCollectionInitializer(init=objInit)|colInit= collection_initializer -> objectOrCollectionInitializer(init=colInit))
            int alt52=2;
            alt52 = dfa52.predict(input);
            switch (alt52) {
                case 1 :
                    // CSharpAngular.g:955:2: objInit= object_initializer
                    {
                    pushFollow(FOLLOW_object_initializer_in_object_or_collection_initializer5706);
                    objInit=object_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 956:2: -> objectOrCollectionInitializer(init=objInit)
                      {
                          retval.st = templateLib.getInstanceOf("objectOrCollectionInitializer",new STAttrMap().put("init", objInit));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:957:4: colInit= collection_initializer
                    {
                    pushFollow(FOLLOW_collection_initializer_in_object_or_collection_initializer5722);
                    colInit=collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 958:2: -> objectOrCollectionInitializer(init=colInit)
                      {
                          retval.st = templateLib.getInstanceOf("objectOrCollectionInitializer",new STAttrMap().put("init", colInit));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_or_collection_initializer"


    public static class object_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "object_initializer"
    // CSharpAngular.g:967:1: object_initializer : ( OPEN_BRACE CLOSE_BRACE -> text(value=\"{}\")| OPEN_BRACE mil= member_initializer_list ( COMMA )? CLOSE_BRACE -> objectInitializer(memInitList=mil));
    public final CSharpAngular.object_initializer_return object_initializer() throws RecognitionException {
        CSharpAngular.object_initializer_return retval = new CSharpAngular.object_initializer_return();
        retval.start = input.LT(1);


        CSharpAngular.member_initializer_list_return mil =null;


        try {
            // CSharpAngular.g:968:3: ( OPEN_BRACE CLOSE_BRACE -> text(value=\"{}\")| OPEN_BRACE mil= member_initializer_list ( COMMA )? CLOSE_BRACE -> objectInitializer(memInitList=mil))
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==OPEN_BRACE) ) {
                int LA54_1 = input.LA(2);

                if ( (LA54_1==CLOSE_BRACE) ) {
                    alt54=1;
                }
                else if ( (LA54_1==IDENTIFIER||(LA54_1 >= SINGLE_LINE_COMMENT && LA54_1 <= SINGLE_LINE_DOC_COMMENT)) ) {
                    alt54=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 54, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;

            }
            switch (alt54) {
                case 1 :
                    // CSharpAngular.g:969:3: OPEN_BRACE CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_object_initializer5750); if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_object_initializer5752); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 970:3: -> text(value=\"{}\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "{}"));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:971:5: OPEN_BRACE mil= member_initializer_list ( COMMA )? CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_object_initializer5768); if (state.failed) return retval;

                    pushFollow(FOLLOW_member_initializer_list_in_object_initializer5772);
                    mil=member_initializer_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharpAngular.g:971:44: ( COMMA )?
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==COMMA) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            // CSharpAngular.g:971:44: COMMA
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_object_initializer5774); if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_object_initializer5777); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 972:3: -> objectInitializer(memInitList=mil)
                      {
                          retval.st = templateLib.getInstanceOf("objectInitializer",new STAttrMap().put("memInitList", mil));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_initializer"


    public static class member_initializer_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_initializer_list"
    // CSharpAngular.g:974:1: member_initializer_list : frstInit= member_initializer (memChldLst+= member_initializer_list_Chld )* -> memberInitializerList(firstInit=frstInitlist=$memChldLst);
    public final CSharpAngular.member_initializer_list_return member_initializer_list() throws RecognitionException {
        CSharpAngular.member_initializer_list_return retval = new CSharpAngular.member_initializer_list_return();
        retval.start = input.LT(1);


        List list_memChldLst=null;
        CSharpAngular.member_initializer_return frstInit =null;

        RuleReturnScope memChldLst = null;
        try {
            // CSharpAngular.g:975:2: (frstInit= member_initializer (memChldLst+= member_initializer_list_Chld )* -> memberInitializerList(firstInit=frstInitlist=$memChldLst))
            // CSharpAngular.g:976:2: frstInit= member_initializer (memChldLst+= member_initializer_list_Chld )*
            {
            pushFollow(FOLLOW_member_initializer_in_member_initializer_list5803);
            frstInit=member_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:976:30: (memChldLst+= member_initializer_list_Chld )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==COMMA) ) {
                    int LA55_1 = input.LA(2);

                    if ( (LA55_1==IDENTIFIER||(LA55_1 >= SINGLE_LINE_COMMENT && LA55_1 <= SINGLE_LINE_DOC_COMMENT)) ) {
                        alt55=1;
                    }


                }


                switch (alt55) {
            	case 1 :
            	    // CSharpAngular.g:976:31: memChldLst+= member_initializer_list_Chld
            	    {
            	    pushFollow(FOLLOW_member_initializer_list_Chld_in_member_initializer_list5808);
            	    memChldLst=member_initializer_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_memChldLst==null) list_memChldLst=new ArrayList();
            	    list_memChldLst.add(memChldLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 977:2: -> memberInitializerList(firstInit=frstInitlist=$memChldLst)
              {
                  retval.st = templateLib.getInstanceOf("memberInitializerList",new STAttrMap().put("firstInit", frstInit).put("list", list_memChldLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_initializer_list"


    public static class member_initializer_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_initializer_list_Chld"
    // CSharpAngular.g:980:1: member_initializer_list_Chld : COMMA mi= member_initializer -> memberInitializerListChld(memInit=mi);
    public final CSharpAngular.member_initializer_list_Chld_return member_initializer_list_Chld() throws RecognitionException {
        CSharpAngular.member_initializer_list_Chld_return retval = new CSharpAngular.member_initializer_list_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.member_initializer_return mi =null;


        try {
            // CSharpAngular.g:981:2: ( COMMA mi= member_initializer -> memberInitializerListChld(memInit=mi))
            // CSharpAngular.g:982:2: COMMA mi= member_initializer
            {
            match(input,COMMA,FOLLOW_COMMA_in_member_initializer_list_Chld5836); if (state.failed) return retval;

            pushFollow(FOLLOW_member_initializer_in_member_initializer_list_Chld5840);
            mi=member_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 983:2: -> memberInitializerListChld(memInit=mi)
              {
                  retval.st = templateLib.getInstanceOf("memberInitializerListChld",new STAttrMap().put("memInit", mi));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_initializer_list_Chld"


    public static class member_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_initializer"
    // CSharpAngular.g:986:1: member_initializer : ( (cmnts= comments )? id= IDENTIFIER ASSIGNMENT ival= initializer_value -> memberInitializer(cmnt=cmntsmemberName=$id.textinitVal=ival)| (cmnts= comments ) -> comment(content=cmnts));
    public final CSharpAngular.member_initializer_return member_initializer() throws RecognitionException {
        CSharpAngular.member_initializer_return retval = new CSharpAngular.member_initializer_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharpAngular.comments_return cmnts =null;

        CSharpAngular.initializer_value_return ival =null;


        try {
            // CSharpAngular.g:987:2: ( (cmnts= comments )? id= IDENTIFIER ASSIGNMENT ival= initializer_value -> memberInitializer(cmnt=cmntsmemberName=$id.textinitVal=ival)| (cmnts= comments ) -> comment(content=cmnts))
            int alt57=2;
            alt57 = dfa57.predict(input);
            switch (alt57) {
                case 1 :
                    // CSharpAngular.g:988:2: (cmnts= comments )? id= IDENTIFIER ASSIGNMENT ival= initializer_value
                    {
                    // CSharpAngular.g:988:2: (cmnts= comments )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( ((LA56_0 >= SINGLE_LINE_COMMENT && LA56_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // CSharpAngular.g:988:3: cmnts= comments
                            {
                            pushFollow(FOLLOW_comments_in_member_initializer5867);
                            cmnts=comments();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_initializer5873); if (state.failed) return retval;

                    match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_member_initializer5875); if (state.failed) return retval;

                    pushFollow(FOLLOW_initializer_value_in_member_initializer5879);
                    ival=initializer_value();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 989:2: -> memberInitializer(cmnt=cmntsmemberName=$id.textinitVal=ival)
                      {
                          retval.st = templateLib.getInstanceOf("memberInitializer",new STAttrMap().put("cmnt", cmnts).put("memberName", (id!=null?id.getText():null)).put("initVal", ival));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:990:4: (cmnts= comments )
                    {
                    // CSharpAngular.g:990:4: (cmnts= comments )
                    // CSharpAngular.g:990:5: cmnts= comments
                    {
                    pushFollow(FOLLOW_comments_in_member_initializer5904);
                    cmnts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 991:2: -> comment(content=cmnts)
                      {
                          retval.st = templateLib.getInstanceOf("comment",new STAttrMap().put("content", cmnts));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_initializer"


    public static class initializer_value_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "initializer_value"
    // CSharpAngular.g:994:1: initializer_value : (expr= expression -> initializerValue(expression=expr)|objCrtInit= object_or_collection_initializer -> initializerValue(expression=objCrtInit));
    public final CSharpAngular.initializer_value_return initializer_value() throws RecognitionException {
        CSharpAngular.initializer_value_return retval = new CSharpAngular.initializer_value_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_return expr =null;

        CSharpAngular.object_or_collection_initializer_return objCrtInit =null;


        try {
            // CSharpAngular.g:995:2: (expr= expression -> initializerValue(expression=expr)|objCrtInit= object_or_collection_initializer -> initializerValue(expression=objCrtInit))
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==AMP||(LA58_0 >= BANG && LA58_0 <= BASE)||LA58_0==BOOL||LA58_0==BYTE||(LA58_0 >= CHAR && LA58_0 <= CHECKED)||LA58_0==DECIMAL||(LA58_0 >= DEFAULT && LA58_0 <= DELEGATE)||LA58_0==DOUBLE||LA58_0==FALSE||LA58_0==FLOAT||LA58_0==IDENTIFIER||(LA58_0 >= INT && LA58_0 <= INTEGER_LITERAL)||LA58_0==LONG||LA58_0==MINUS||LA58_0==NEW||LA58_0==NULL||LA58_0==OBJECT||LA58_0==OPEN_PARENS||LA58_0==OP_DEC||LA58_0==OP_INC||LA58_0==PLUS||LA58_0==REAL_LITERAL||LA58_0==SBYTE||LA58_0==SHORT||LA58_0==SIZEOF||LA58_0==STAR||(LA58_0 >= STRING && LA58_0 <= STRING_LITERAL)||LA58_0==THIS||(LA58_0 >= TILDE && LA58_0 <= TRUE)||LA58_0==TYPEOF||(LA58_0 >= UINT && LA58_0 <= UNCHECKED)||LA58_0==USHORT) ) {
                alt58=1;
            }
            else if ( (LA58_0==OPEN_BRACE) ) {
                alt58=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;

            }
            switch (alt58) {
                case 1 :
                    // CSharpAngular.g:996:2: expr= expression
                    {
                    pushFollow(FOLLOW_expression_in_initializer_value5931);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 997:2: -> initializerValue(expression=expr)
                      {
                          retval.st = templateLib.getInstanceOf("initializerValue",new STAttrMap().put("expression", expr));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:998:4: objCrtInit= object_or_collection_initializer
                    {
                    pushFollow(FOLLOW_object_or_collection_initializer_in_initializer_value5947);
                    objCrtInit=object_or_collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 999:2: -> initializerValue(expression=objCrtInit)
                      {
                          retval.st = templateLib.getInstanceOf("initializerValue",new STAttrMap().put("expression", objCrtInit));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "initializer_value"


    public static class collection_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "collection_initializer"
    // CSharpAngular.g:1008:1: collection_initializer : OPEN_BRACE elemntLst= element_initializer_list ( COMMA )? CLOSE_BRACE -> collectionInitializer(elementList=elemntLst);
    public final CSharpAngular.collection_initializer_return collection_initializer() throws RecognitionException {
        CSharpAngular.collection_initializer_return retval = new CSharpAngular.collection_initializer_return();
        retval.start = input.LT(1);


        CSharpAngular.element_initializer_list_return elemntLst =null;


        try {
            // CSharpAngular.g:1009:3: ( OPEN_BRACE elemntLst= element_initializer_list ( COMMA )? CLOSE_BRACE -> collectionInitializer(elementList=elemntLst))
            // CSharpAngular.g:1010:3: OPEN_BRACE elemntLst= element_initializer_list ( COMMA )? CLOSE_BRACE
            {
            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_collection_initializer5975); if (state.failed) return retval;

            pushFollow(FOLLOW_element_initializer_list_in_collection_initializer5979);
            elemntLst=element_initializer_list();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1010:49: ( COMMA )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==COMMA) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // CSharpAngular.g:1010:49: COMMA
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_collection_initializer5981); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_collection_initializer5984); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1011:3: -> collectionInitializer(elementList=elemntLst)
              {
                  retval.st = templateLib.getInstanceOf("collectionInitializer",new STAttrMap().put("elementList", elemntLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "collection_initializer"


    public static class element_initializer_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "element_initializer_list"
    // CSharpAngular.g:1013:1: element_initializer_list : (cmnt= comments )? fstElmnt= element_initializer (chld+= element_initializer_list_Chld )* -> elementInitializerList(cmnts=cmntfirstElement=fstElmntchldList=$chld);
    public final CSharpAngular.element_initializer_list_return element_initializer_list() throws RecognitionException {
        CSharpAngular.element_initializer_list_return retval = new CSharpAngular.element_initializer_list_return();
        retval.start = input.LT(1);


        List list_chld=null;
        CSharpAngular.comments_return cmnt =null;

        CSharpAngular.element_initializer_return fstElmnt =null;

        RuleReturnScope chld = null;
        try {
            // CSharpAngular.g:1014:2: ( (cmnt= comments )? fstElmnt= element_initializer (chld+= element_initializer_list_Chld )* -> elementInitializerList(cmnts=cmntfirstElement=fstElmntchldList=$chld))
            // CSharpAngular.g:1015:2: (cmnt= comments )? fstElmnt= element_initializer (chld+= element_initializer_list_Chld )*
            {
            // CSharpAngular.g:1015:2: (cmnt= comments )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( ((LA60_0 >= SINGLE_LINE_COMMENT && LA60_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // CSharpAngular.g:1015:3: cmnt= comments
                    {
                    pushFollow(FOLLOW_comments_in_element_initializer_list6011);
                    cmnt=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_element_initializer_in_element_initializer_list6017);
            fstElmnt=element_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1015:48: (chld+= element_initializer_list_Chld )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==COMMA) ) {
                    int LA61_1 = input.LA(2);

                    if ( (LA61_1==AMP||(LA61_1 >= BANG && LA61_1 <= BASE)||LA61_1==BOOL||LA61_1==BYTE||(LA61_1 >= CHAR && LA61_1 <= CHECKED)||LA61_1==DECIMAL||(LA61_1 >= DEFAULT && LA61_1 <= DELEGATE)||LA61_1==DOUBLE||LA61_1==FALSE||LA61_1==FLOAT||LA61_1==IDENTIFIER||(LA61_1 >= INT && LA61_1 <= INTEGER_LITERAL)||LA61_1==LONG||LA61_1==MINUS||LA61_1==NEW||LA61_1==NULL||(LA61_1 >= OBJECT && LA61_1 <= OPEN_BRACE)||LA61_1==OPEN_PARENS||LA61_1==OP_DEC||LA61_1==OP_INC||LA61_1==PLUS||LA61_1==REAL_LITERAL||LA61_1==SBYTE||(LA61_1 >= SHORT && LA61_1 <= SIZEOF)||LA61_1==STAR||(LA61_1 >= STRING && LA61_1 <= STRING_LITERAL)||LA61_1==THIS||(LA61_1 >= TILDE && LA61_1 <= TRUE)||LA61_1==TYPEOF||(LA61_1 >= UINT && LA61_1 <= UNCHECKED)||LA61_1==USHORT) ) {
                        alt61=1;
                    }


                }


                switch (alt61) {
            	case 1 :
            	    // CSharpAngular.g:1015:49: chld+= element_initializer_list_Chld
            	    {
            	    pushFollow(FOLLOW_element_initializer_list_Chld_in_element_initializer_list6022);
            	    chld=element_initializer_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_chld==null) list_chld=new ArrayList();
            	    list_chld.add(chld.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1016:2: -> elementInitializerList(cmnts=cmntfirstElement=fstElmntchldList=$chld)
              {
                  retval.st = templateLib.getInstanceOf("elementInitializerList",new STAttrMap().put("cmnts", cmnt).put("firstElement", fstElmnt).put("chldList", list_chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_initializer_list"


    public static class element_initializer_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "element_initializer_list_Chld"
    // CSharpAngular.g:1019:1: element_initializer_list_Chld : COMMA (cmnt= comments )? eleInit= element_initializer -> elementInitializerListChld(cmnts=cmntinit=eleInit);
    public final CSharpAngular.element_initializer_list_Chld_return element_initializer_list_Chld() throws RecognitionException {
        CSharpAngular.element_initializer_list_Chld_return retval = new CSharpAngular.element_initializer_list_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.comments_return cmnt =null;

        CSharpAngular.element_initializer_return eleInit =null;


        try {
            // CSharpAngular.g:1020:2: ( COMMA (cmnt= comments )? eleInit= element_initializer -> elementInitializerListChld(cmnts=cmntinit=eleInit))
            // CSharpAngular.g:1021:2: COMMA (cmnt= comments )? eleInit= element_initializer
            {
            match(input,COMMA,FOLLOW_COMMA_in_element_initializer_list_Chld6054); if (state.failed) return retval;

            // CSharpAngular.g:1021:8: (cmnt= comments )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( ((LA62_0 >= SINGLE_LINE_COMMENT && LA62_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // CSharpAngular.g:1021:9: cmnt= comments
                    {
                    pushFollow(FOLLOW_comments_in_element_initializer_list_Chld6059);
                    cmnt=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_element_initializer_in_element_initializer_list_Chld6065);
            eleInit=element_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1022:2: -> elementInitializerListChld(cmnts=cmntinit=eleInit)
              {
                  retval.st = templateLib.getInstanceOf("elementInitializerListChld",new STAttrMap().put("cmnts", cmnt).put("init", eleInit));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_initializer_list_Chld"


    public static class element_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "element_initializer"
    // CSharpAngular.g:1024:1: element_initializer : (expr= non_assignment_expression -> elementInitializer(expression=expr)| OPEN_BRACE el= expression_list CLOSE_BRACE -> elementInitializer(expression=el));
    public final CSharpAngular.element_initializer_return element_initializer() throws RecognitionException {
        CSharpAngular.element_initializer_return retval = new CSharpAngular.element_initializer_return();
        retval.start = input.LT(1);


        CSharpAngular.non_assignment_expression_return expr =null;

        CSharpAngular.expression_list_return el =null;


        try {
            // CSharpAngular.g:1025:2: (expr= non_assignment_expression -> elementInitializer(expression=expr)| OPEN_BRACE el= expression_list CLOSE_BRACE -> elementInitializer(expression=el))
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==AMP||(LA63_0 >= BANG && LA63_0 <= BASE)||LA63_0==BOOL||LA63_0==BYTE||(LA63_0 >= CHAR && LA63_0 <= CHECKED)||LA63_0==DECIMAL||(LA63_0 >= DEFAULT && LA63_0 <= DELEGATE)||LA63_0==DOUBLE||LA63_0==FALSE||LA63_0==FLOAT||LA63_0==IDENTIFIER||(LA63_0 >= INT && LA63_0 <= INTEGER_LITERAL)||LA63_0==LONG||LA63_0==MINUS||LA63_0==NEW||LA63_0==NULL||LA63_0==OBJECT||LA63_0==OPEN_PARENS||LA63_0==OP_DEC||LA63_0==OP_INC||LA63_0==PLUS||LA63_0==REAL_LITERAL||LA63_0==SBYTE||LA63_0==SHORT||LA63_0==SIZEOF||LA63_0==STAR||(LA63_0 >= STRING && LA63_0 <= STRING_LITERAL)||LA63_0==THIS||(LA63_0 >= TILDE && LA63_0 <= TRUE)||LA63_0==TYPEOF||(LA63_0 >= UINT && LA63_0 <= UNCHECKED)||LA63_0==USHORT) ) {
                alt63=1;
            }
            else if ( (LA63_0==OPEN_BRACE) ) {
                alt63=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;

            }
            switch (alt63) {
                case 1 :
                    // CSharpAngular.g:1026:2: expr= non_assignment_expression
                    {
                    pushFollow(FOLLOW_non_assignment_expression_in_element_initializer6093);
                    expr=non_assignment_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1027:2: -> elementInitializer(expression=expr)
                      {
                          retval.st = templateLib.getInstanceOf("elementInitializer",new STAttrMap().put("expression", expr));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1028:4: OPEN_BRACE el= expression_list CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_element_initializer6107); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_list_in_element_initializer6111);
                    el=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_element_initializer6113); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1029:2: -> elementInitializer(expression=el)
                      {
                          retval.st = templateLib.getInstanceOf("elementInitializer",new STAttrMap().put("expression", el));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_initializer"


    public static class array_creation_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "array_creation_expression"
    // CSharpAngular.g:1041:1: array_creation_expression : NEW arc= array_creation_expression_Chld -> arrayCreationExpression(Chld=arc);
    public final CSharpAngular.array_creation_expression_return array_creation_expression() throws RecognitionException {
        CSharpAngular.array_creation_expression_return retval = new CSharpAngular.array_creation_expression_return();
        retval.start = input.LT(1);


        CSharpAngular.array_creation_expression_Chld_return arc =null;


        try {
            // CSharpAngular.g:1042:3: ( NEW arc= array_creation_expression_Chld -> arrayCreationExpression(Chld=arc))
            // CSharpAngular.g:1043:2: NEW arc= array_creation_expression_Chld
            {
            match(input,NEW,FOLLOW_NEW_in_array_creation_expression6147); if (state.failed) return retval;

            pushFollow(FOLLOW_array_creation_expression_Chld_in_array_creation_expression6151);
            arc=array_creation_expression_Chld();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1044:3: -> arrayCreationExpression(Chld=arc)
              {
                  retval.st = templateLib.getInstanceOf("arrayCreationExpression",new STAttrMap().put("Chld", arc));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_creation_expression"


    public static class array_creation_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "array_creation_expression_Chld"
    // CSharpAngular.g:1047:1: array_creation_expression_Chld : ( ( array_type OPEN_BRACKET )=>acexpsChld= array_creation_expression_sub_Chld -> arrayCreationExpressionChld(subChld=acexpsChld)| (t= non_array_type )* OPEN_BRACKET eLst= expression_list CLOSE_BRACKET (rs= rank_specifiers )? (ai= array_initializer )? -> arrayCreationExpressionChld2(type=texpList=eLstrnkSpcr=rsarrInitlr=ai));
    public final CSharpAngular.array_creation_expression_Chld_return array_creation_expression_Chld() throws RecognitionException {
        CSharpAngular.array_creation_expression_Chld_return retval = new CSharpAngular.array_creation_expression_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.array_creation_expression_sub_Chld_return acexpsChld =null;

        CSharpAngular.non_array_type_return t =null;

        CSharpAngular.expression_list_return eLst =null;

        CSharpAngular.rank_specifiers_return rs =null;

        CSharpAngular.array_initializer_return ai =null;


        try {
            // CSharpAngular.g:1048:4: ( ( array_type OPEN_BRACKET )=>acexpsChld= array_creation_expression_sub_Chld -> arrayCreationExpressionChld(subChld=acexpsChld)| (t= non_array_type )* OPEN_BRACKET eLst= expression_list CLOSE_BRACKET (rs= rank_specifiers )? (ai= array_initializer )? -> arrayCreationExpressionChld2(type=texpList=eLstrnkSpcr=rsarrInitlr=ai))
            int alt67=2;
            switch ( input.LA(1) ) {
            case SBYTE:
                {
                int LA67_1 = input.LA(2);

                if ( (synpred52_CSharpAngular()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 1, input);

                    throw nvae;

                }
                }
                break;
            case BYTE:
                {
                int LA67_2 = input.LA(2);

                if ( (synpred52_CSharpAngular()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 2, input);

                    throw nvae;

                }
                }
                break;
            case SHORT:
                {
                int LA67_3 = input.LA(2);

                if ( (synpred52_CSharpAngular()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 3, input);

                    throw nvae;

                }
                }
                break;
            case USHORT:
                {
                int LA67_4 = input.LA(2);

                if ( (synpred52_CSharpAngular()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 4, input);

                    throw nvae;

                }
                }
                break;
            case INT:
                {
                int LA67_5 = input.LA(2);

                if ( (synpred52_CSharpAngular()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 5, input);

                    throw nvae;

                }
                }
                break;
            case UINT:
                {
                int LA67_6 = input.LA(2);

                if ( (synpred52_CSharpAngular()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 6, input);

                    throw nvae;

                }
                }
                break;
            case LONG:
                {
                int LA67_7 = input.LA(2);

                if ( (synpred52_CSharpAngular()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 7, input);

                    throw nvae;

                }
                }
                break;
            case ULONG:
                {
                int LA67_8 = input.LA(2);

                if ( (synpred52_CSharpAngular()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 8, input);

                    throw nvae;

                }
                }
                break;
            case CHAR:
                {
                int LA67_9 = input.LA(2);

                if ( (synpred52_CSharpAngular()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 9, input);

                    throw nvae;

                }
                }
                break;
            case FLOAT:
                {
                int LA67_10 = input.LA(2);

                if ( (synpred52_CSharpAngular()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 10, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE:
                {
                int LA67_11 = input.LA(2);

                if ( (synpred52_CSharpAngular()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 11, input);

                    throw nvae;

                }
                }
                break;
            case DECIMAL:
                {
                int LA67_12 = input.LA(2);

                if ( (synpred52_CSharpAngular()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 12, input);

                    throw nvae;

                }
                }
                break;
            case BOOL:
                {
                int LA67_13 = input.LA(2);

                if ( (synpred52_CSharpAngular()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 13, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA67_14 = input.LA(2);

                if ( (synpred52_CSharpAngular()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 14, input);

                    throw nvae;

                }
                }
                break;
            case OBJECT:
                {
                int LA67_15 = input.LA(2);

                if ( (synpred52_CSharpAngular()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 15, input);

                    throw nvae;

                }
                }
                break;
            case STRING:
                {
                int LA67_16 = input.LA(2);

                if ( (synpred52_CSharpAngular()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 16, input);

                    throw nvae;

                }
                }
                break;
            case VOID:
                {
                int LA67_17 = input.LA(2);

                if ( (synpred52_CSharpAngular()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 17, input);

                    throw nvae;

                }
                }
                break;
            case OPEN_BRACKET:
                {
                alt67=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;

            }

            switch (alt67) {
                case 1 :
                    // CSharpAngular.g:1049:4: ( array_type OPEN_BRACKET )=>acexpsChld= array_creation_expression_sub_Chld
                    {
                    pushFollow(FOLLOW_array_creation_expression_sub_Chld_in_array_creation_expression_Chld6195);
                    acexpsChld=array_creation_expression_sub_Chld();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1050:4: -> arrayCreationExpressionChld(subChld=acexpsChld)
                      {
                          retval.st = templateLib.getInstanceOf("arrayCreationExpressionChld",new STAttrMap().put("subChld", acexpsChld));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1051:6: (t= non_array_type )* OPEN_BRACKET eLst= expression_list CLOSE_BRACKET (rs= rank_specifiers )? (ai= array_initializer )?
                    {
                    // CSharpAngular.g:1051:6: (t= non_array_type )*
                    loop64:
                    do {
                        int alt64=2;
                        int LA64_0 = input.LA(1);

                        if ( (LA64_0==BOOL||LA64_0==BYTE||LA64_0==CHAR||LA64_0==DECIMAL||LA64_0==DOUBLE||LA64_0==FLOAT||LA64_0==IDENTIFIER||LA64_0==INT||LA64_0==LONG||LA64_0==OBJECT||LA64_0==SBYTE||LA64_0==SHORT||LA64_0==STRING||(LA64_0 >= UINT && LA64_0 <= ULONG)||LA64_0==USHORT||LA64_0==VOID) ) {
                            alt64=1;
                        }


                        switch (alt64) {
                    	case 1 :
                    	    // CSharpAngular.g:1051:7: t= non_array_type
                    	    {
                    	    pushFollow(FOLLOW_non_array_type_in_array_creation_expression_Chld6216);
                    	    t=non_array_type();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop64;
                        }
                    } while (true);


                    match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_array_creation_expression_Chld6220); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_list_in_array_creation_expression_Chld6224);
                    eLst=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_array_creation_expression_Chld6226); if (state.failed) return retval;

                    // CSharpAngular.g:1051:74: (rs= rank_specifiers )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==OPEN_BRACKET) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // CSharpAngular.g:1051:75: rs= rank_specifiers
                            {
                            pushFollow(FOLLOW_rank_specifiers_in_array_creation_expression_Chld6231);
                            rs=rank_specifiers();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharpAngular.g:1051:96: (ai= array_initializer )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==OPEN_BRACE) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // CSharpAngular.g:1051:97: ai= array_initializer
                            {
                            pushFollow(FOLLOW_array_initializer_in_array_creation_expression_Chld6238);
                            ai=array_initializer();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1052:4: -> arrayCreationExpressionChld2(type=texpList=eLstrnkSpcr=rsarrInitlr=ai)
                      {
                          retval.st = templateLib.getInstanceOf("arrayCreationExpressionChld2",new STAttrMap().put("type", t).put("expList", eLst).put("rnkSpcr", rs).put("arrInitlr", ai));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_creation_expression_Chld"


    public static class array_creation_expression_sub_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "array_creation_expression_sub_Chld"
    // CSharpAngular.g:1057:1: array_creation_expression_sub_Chld : aType= array_type aInit= array_initializer -> arrayCreationExpressionSubChld(arryType=aTypearInit=aInit);
    public final CSharpAngular.array_creation_expression_sub_Chld_return array_creation_expression_sub_Chld() throws RecognitionException {
        CSharpAngular.array_creation_expression_sub_Chld_return retval = new CSharpAngular.array_creation_expression_sub_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.array_type_return aType =null;

        CSharpAngular.array_initializer_return aInit =null;


        try {
            // CSharpAngular.g:1058:3: (aType= array_type aInit= array_initializer -> arrayCreationExpressionSubChld(arryType=aTypearInit=aInit))
            // CSharpAngular.g:1059:4: aType= array_type aInit= array_initializer
            {
            pushFollow(FOLLOW_array_type_in_array_creation_expression_sub_Chld6290);
            aType=array_type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_array_initializer_in_array_creation_expression_sub_Chld6294);
            aInit=array_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1060:4: -> arrayCreationExpressionSubChld(arryType=aTypearInit=aInit)
              {
                  retval.st = templateLib.getInstanceOf("arrayCreationExpressionSubChld",new STAttrMap().put("arryType", aType).put("arInit", aInit));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_creation_expression_sub_Chld"


    public static class delegate_creation_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_creation_expression"
    // CSharpAngular.g:1069:1: delegate_creation_expression : NEW delegate_type OPEN_PARENS expression CLOSE_PARENS ;
    public final CSharpAngular.delegate_creation_expression_return delegate_creation_expression() throws RecognitionException {
        CSharpAngular.delegate_creation_expression_return retval = new CSharpAngular.delegate_creation_expression_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:1070:2: ( NEW delegate_type OPEN_PARENS expression CLOSE_PARENS )
            // CSharpAngular.g:1070:4: NEW delegate_type OPEN_PARENS expression CLOSE_PARENS
            {
            match(input,NEW,FOLLOW_NEW_in_delegate_creation_expression6325); if (state.failed) return retval;

            pushFollow(FOLLOW_delegate_type_in_delegate_creation_expression6327);
            delegate_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_delegate_creation_expression6329); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_delegate_creation_expression6331);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_delegate_creation_expression6333); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delegate_creation_expression"


    public static class anonymous_object_creation_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_object_creation_expression"
    // CSharpAngular.g:1073:1: anonymous_object_creation_expression : NEW aobjInit= anonymous_object_initializer -> anonymousObjectCreationExpression(anyObjInit=aobjInit);
    public final CSharpAngular.anonymous_object_creation_expression_return anonymous_object_creation_expression() throws RecognitionException {
        CSharpAngular.anonymous_object_creation_expression_return retval = new CSharpAngular.anonymous_object_creation_expression_return();
        retval.start = input.LT(1);


        CSharpAngular.anonymous_object_initializer_return aobjInit =null;


        try {
            // CSharpAngular.g:1074:2: ( NEW aobjInit= anonymous_object_initializer -> anonymousObjectCreationExpression(anyObjInit=aobjInit))
            // CSharpAngular.g:1075:2: NEW aobjInit= anonymous_object_initializer
            {
            match(input,NEW,FOLLOW_NEW_in_anonymous_object_creation_expression6348); if (state.failed) return retval;

            pushFollow(FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression6352);
            aobjInit=anonymous_object_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1076:2: -> anonymousObjectCreationExpression(anyObjInit=aobjInit)
              {
                  retval.st = templateLib.getInstanceOf("anonymousObjectCreationExpression",new STAttrMap().put("anyObjInit", aobjInit));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "anonymous_object_creation_expression"


    public static class anonymous_object_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_object_initializer"
    // CSharpAngular.g:1085:1: anonymous_object_initializer : ( OPEN_BRACE CLOSE_BRACE -> anonymousObjectInitializer(memDeclLst=null)| OPEN_BRACE lst= member_declarator_list ( COMMA )? CLOSE_BRACE -> anonymousObjectInitializer(memDeclLst=lst));
    public final CSharpAngular.anonymous_object_initializer_return anonymous_object_initializer() throws RecognitionException {
        CSharpAngular.anonymous_object_initializer_return retval = new CSharpAngular.anonymous_object_initializer_return();
        retval.start = input.LT(1);


        CSharpAngular.member_declarator_list_return lst =null;


        try {
            // CSharpAngular.g:1086:3: ( OPEN_BRACE CLOSE_BRACE -> anonymousObjectInitializer(memDeclLst=null)| OPEN_BRACE lst= member_declarator_list ( COMMA )? CLOSE_BRACE -> anonymousObjectInitializer(memDeclLst=lst))
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==OPEN_BRACE) ) {
                int LA69_1 = input.LA(2);

                if ( (LA69_1==CLOSE_BRACE) ) {
                    alt69=1;
                }
                else if ( (LA69_1==BASE||LA69_1==BOOL||LA69_1==BYTE||(LA69_1 >= CHAR && LA69_1 <= CHECKED)||LA69_1==DECIMAL||(LA69_1 >= DEFAULT && LA69_1 <= DELEGATE)||LA69_1==DOUBLE||LA69_1==FALSE||LA69_1==FLOAT||LA69_1==IDENTIFIER||(LA69_1 >= INT && LA69_1 <= INTEGER_LITERAL)||LA69_1==LONG||LA69_1==NEW||LA69_1==NULL||LA69_1==OBJECT||LA69_1==OPEN_PARENS||LA69_1==REAL_LITERAL||LA69_1==SBYTE||LA69_1==SHORT||LA69_1==SIZEOF||(LA69_1 >= STRING && LA69_1 <= STRING_LITERAL)||LA69_1==THIS||LA69_1==TRUE||LA69_1==TYPEOF||(LA69_1 >= UINT && LA69_1 <= UNCHECKED)||LA69_1==USHORT) ) {
                    alt69=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;

            }
            switch (alt69) {
                case 1 :
                    // CSharpAngular.g:1087:3: OPEN_BRACE CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_anonymous_object_initializer6380); if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer6382); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1088:3: -> anonymousObjectInitializer(memDeclLst=null)
                      {
                          retval.st = templateLib.getInstanceOf("anonymousObjectInitializer",new STAttrMap().put("memDeclLst", null));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1089:5: OPEN_BRACE lst= member_declarator_list ( COMMA )? CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_anonymous_object_initializer6398); if (state.failed) return retval;

                    pushFollow(FOLLOW_member_declarator_list_in_anonymous_object_initializer6402);
                    lst=member_declarator_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharpAngular.g:1089:43: ( COMMA )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==COMMA) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // CSharpAngular.g:1089:44: COMMA
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_anonymous_object_initializer6405); if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer6409); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1090:3: -> anonymousObjectInitializer(memDeclLst=lst)
                      {
                          retval.st = templateLib.getInstanceOf("anonymousObjectInitializer",new STAttrMap().put("memDeclLst", lst));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "anonymous_object_initializer"


    public static class member_declarator_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_declarator_list"
    // CSharpAngular.g:1092:1: member_declarator_list : md= member_declarator (memlst+= member_declarator_list_Chld )* -> memberDeclaratorList(memberDecl=mdlist=$memlst);
    public final CSharpAngular.member_declarator_list_return member_declarator_list() throws RecognitionException {
        CSharpAngular.member_declarator_list_return retval = new CSharpAngular.member_declarator_list_return();
        retval.start = input.LT(1);


        List list_memlst=null;
        CSharpAngular.member_declarator_return md =null;

        RuleReturnScope memlst = null;
        try {
            // CSharpAngular.g:1093:2: (md= member_declarator (memlst+= member_declarator_list_Chld )* -> memberDeclaratorList(memberDecl=mdlist=$memlst))
            // CSharpAngular.g:1094:2: md= member_declarator (memlst+= member_declarator_list_Chld )*
            {
            pushFollow(FOLLOW_member_declarator_in_member_declarator_list6435);
            md=member_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1094:23: (memlst+= member_declarator_list_Chld )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==COMMA) ) {
                    int LA70_1 = input.LA(2);

                    if ( (LA70_1==BASE||LA70_1==BOOL||LA70_1==BYTE||(LA70_1 >= CHAR && LA70_1 <= CHECKED)||LA70_1==DECIMAL||(LA70_1 >= DEFAULT && LA70_1 <= DELEGATE)||LA70_1==DOUBLE||LA70_1==FALSE||LA70_1==FLOAT||LA70_1==IDENTIFIER||(LA70_1 >= INT && LA70_1 <= INTEGER_LITERAL)||LA70_1==LONG||LA70_1==NEW||LA70_1==NULL||LA70_1==OBJECT||LA70_1==OPEN_PARENS||LA70_1==REAL_LITERAL||LA70_1==SBYTE||(LA70_1 >= SHORT && LA70_1 <= SIZEOF)||(LA70_1 >= STRING && LA70_1 <= STRING_LITERAL)||LA70_1==THIS||LA70_1==TRUE||LA70_1==TYPEOF||(LA70_1 >= UINT && LA70_1 <= UNCHECKED)||LA70_1==USHORT) ) {
                        alt70=1;
                    }


                }


                switch (alt70) {
            	case 1 :
            	    // CSharpAngular.g:1094:25: memlst+= member_declarator_list_Chld
            	    {
            	    pushFollow(FOLLOW_member_declarator_list_Chld_in_member_declarator_list6441);
            	    memlst=member_declarator_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_memlst==null) list_memlst=new ArrayList();
            	    list_memlst.add(memlst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1095:2: -> memberDeclaratorList(memberDecl=mdlist=$memlst)
              {
                  retval.st = templateLib.getInstanceOf("memberDeclaratorList",new STAttrMap().put("memberDecl", md).put("list", list_memlst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_declarator_list"


    public static class member_declarator_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_declarator_list_Chld"
    // CSharpAngular.g:1098:1: member_declarator_list_Chld : COMMA (cmnt= comments )? memDcl= member_declarator -> memberDeclaratorListChld(cmnts=cmntdecl=memDcl);
    public final CSharpAngular.member_declarator_list_Chld_return member_declarator_list_Chld() throws RecognitionException {
        CSharpAngular.member_declarator_list_Chld_return retval = new CSharpAngular.member_declarator_list_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.comments_return cmnt =null;

        CSharpAngular.member_declarator_return memDcl =null;


        try {
            // CSharpAngular.g:1099:2: ( COMMA (cmnt= comments )? memDcl= member_declarator -> memberDeclaratorListChld(cmnts=cmntdecl=memDcl))
            // CSharpAngular.g:1100:2: COMMA (cmnt= comments )? memDcl= member_declarator
            {
            match(input,COMMA,FOLLOW_COMMA_in_member_declarator_list_Chld6469); if (state.failed) return retval;

            // CSharpAngular.g:1100:8: (cmnt= comments )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( ((LA71_0 >= SINGLE_LINE_COMMENT && LA71_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // CSharpAngular.g:1100:9: cmnt= comments
                    {
                    pushFollow(FOLLOW_comments_in_member_declarator_list_Chld6474);
                    cmnt=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_member_declarator_in_member_declarator_list_Chld6480);
            memDcl=member_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1101:2: -> memberDeclaratorListChld(cmnts=cmntdecl=memDcl)
              {
                  retval.st = templateLib.getInstanceOf("memberDeclaratorListChld",new STAttrMap().put("cmnts", cmnt).put("decl", memDcl));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_declarator_list_Chld"


    public static class member_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_declarator"
    // CSharpAngular.g:1111:1: member_declarator : (expr1= primary_expression -> memberDeclarator(expression=expr1)|id= IDENTIFIER ASSIGNMENT expr2= expression -> memberDeclarator(expression=expr2));
    public final CSharpAngular.member_declarator_return member_declarator() throws RecognitionException {
        CSharpAngular.member_declarator_return retval = new CSharpAngular.member_declarator_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharpAngular.primary_expression_return expr1 =null;

        CSharpAngular.expression_return expr2 =null;


        try {
            // CSharpAngular.g:1112:3: (expr1= primary_expression -> memberDeclarator(expression=expr1)|id= IDENTIFIER ASSIGNMENT expr2= expression -> memberDeclarator(expression=expr2))
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==BASE||LA72_0==BOOL||LA72_0==BYTE||(LA72_0 >= CHAR && LA72_0 <= CHECKED)||LA72_0==DECIMAL||(LA72_0 >= DEFAULT && LA72_0 <= DELEGATE)||LA72_0==DOUBLE||LA72_0==FALSE||LA72_0==FLOAT||(LA72_0 >= INT && LA72_0 <= INTEGER_LITERAL)||LA72_0==LONG||LA72_0==NEW||LA72_0==NULL||LA72_0==OBJECT||LA72_0==OPEN_PARENS||LA72_0==REAL_LITERAL||LA72_0==SBYTE||LA72_0==SHORT||LA72_0==SIZEOF||(LA72_0 >= STRING && LA72_0 <= STRING_LITERAL)||LA72_0==THIS||LA72_0==TRUE||LA72_0==TYPEOF||(LA72_0 >= UINT && LA72_0 <= UNCHECKED)||LA72_0==USHORT) ) {
                alt72=1;
            }
            else if ( (LA72_0==IDENTIFIER) ) {
                int LA72_2 = input.LA(2);

                if ( (LA72_2==CLOSE_BRACE||LA72_2==COMMA||LA72_2==DOT||LA72_2==DOUBLE_COLON||LA72_2==IDENTIFIER||LA72_2==LT||(LA72_2 >= OPEN_BRACKET && LA72_2 <= OPEN_PARENS)||LA72_2==OP_DEC||LA72_2==OP_INC||LA72_2==OP_PTR||(LA72_2 >= SINGLE_LINE_COMMENT && LA72_2 <= SINGLE_LINE_DOC_COMMENT)) ) {
                    alt72=1;
                }
                else if ( (LA72_2==ASSIGNMENT) ) {
                    alt72=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 72, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;

            }
            switch (alt72) {
                case 1 :
                    // CSharpAngular.g:1113:3: expr1= primary_expression
                    {
                    pushFollow(FOLLOW_primary_expression_in_member_declarator6512);
                    expr1=primary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1114:3: -> memberDeclarator(expression=expr1)
                      {
                          retval.st = templateLib.getInstanceOf("memberDeclarator",new STAttrMap().put("expression", expr1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1115:5: id= IDENTIFIER ASSIGNMENT expr2= expression
                    {
                    id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_declarator6530); if (state.failed) return retval;

                    match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_member_declarator6532); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_in_member_declarator6536);
                    expr2=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1116:3: -> memberDeclarator(expression=expr2)
                      {
                          retval.st = templateLib.getInstanceOf("memberDeclarator",new STAttrMap().put("expression", expr2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_declarator"


    public static class typeof_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "typeof_expression"
    // CSharpAngular.g:1118:1: typeof_expression : TYPEOF OPEN_PARENS ( ( unbound_type_name )=>typ= unbound_type_name CLOSE_PARENS | type CLOSE_PARENS | VOID CLOSE_PARENS ) -> typeofexpression(typename=NamingUtil.toCamelCase($typ.text));
    public final CSharpAngular.typeof_expression_return typeof_expression() throws RecognitionException {
        CSharpAngular.typeof_expression_return retval = new CSharpAngular.typeof_expression_return();
        retval.start = input.LT(1);


        CSharpAngular.unbound_type_name_return typ =null;


        try {
            // CSharpAngular.g:1119:2: ( TYPEOF OPEN_PARENS ( ( unbound_type_name )=>typ= unbound_type_name CLOSE_PARENS | type CLOSE_PARENS | VOID CLOSE_PARENS ) -> typeofexpression(typename=NamingUtil.toCamelCase($typ.text)))
            // CSharpAngular.g:1119:4: TYPEOF OPEN_PARENS ( ( unbound_type_name )=>typ= unbound_type_name CLOSE_PARENS | type CLOSE_PARENS | VOID CLOSE_PARENS )
            {
            match(input,TYPEOF,FOLLOW_TYPEOF_in_typeof_expression6558); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_typeof_expression6560); if (state.failed) return retval;

            // CSharpAngular.g:1120:4: ( ( unbound_type_name )=>typ= unbound_type_name CLOSE_PARENS | type CLOSE_PARENS | VOID CLOSE_PARENS )
            int alt73=3;
            alt73 = dfa73.predict(input);
            switch (alt73) {
                case 1 :
                    // CSharpAngular.g:1120:6: ( unbound_type_name )=>typ= unbound_type_name CLOSE_PARENS
                    {
                    pushFollow(FOLLOW_unbound_type_name_in_typeof_expression6575);
                    typ=unbound_type_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_typeof_expression6577); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1121:6: type CLOSE_PARENS
                    {
                    pushFollow(FOLLOW_type_in_typeof_expression6584);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_typeof_expression6586); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:1122:6: VOID CLOSE_PARENS
                    {
                    match(input,VOID,FOLLOW_VOID_in_typeof_expression6593); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_typeof_expression6595); if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1124:4: -> typeofexpression(typename=NamingUtil.toCamelCase($typ.text))
              {
                  retval.st = templateLib.getInstanceOf("typeofexpression",new STAttrMap().put("typename", NamingUtil.toCamelCase((typ!=null?input.toString(typ.start,typ.stop):null))));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof_expression"


    public static class unbound_type_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unbound_type_name"
    // CSharpAngular.g:1133:1: unbound_type_name : id= IDENTIFIER ( ( generic_dimension_specifier )? | DOUBLE_COLON IDENTIFIER ( generic_dimension_specifier )? ) ( DOT IDENTIFIER ( generic_dimension_specifier )? )* -> unboundtypename(tkn=$id.text);
    public final CSharpAngular.unbound_type_name_return unbound_type_name() throws RecognitionException {
        CSharpAngular.unbound_type_name_return retval = new CSharpAngular.unbound_type_name_return();
        retval.start = input.LT(1);


        Token id=null;

        try {
            // CSharpAngular.g:1134:3: (id= IDENTIFIER ( ( generic_dimension_specifier )? | DOUBLE_COLON IDENTIFIER ( generic_dimension_specifier )? ) ( DOT IDENTIFIER ( generic_dimension_specifier )? )* -> unboundtypename(tkn=$id.text))
            // CSharpAngular.g:1134:5: id= IDENTIFIER ( ( generic_dimension_specifier )? | DOUBLE_COLON IDENTIFIER ( generic_dimension_specifier )? ) ( DOT IDENTIFIER ( generic_dimension_specifier )? )*
            {
            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_unbound_type_name6627); if (state.failed) return retval;

            // CSharpAngular.g:1134:19: ( ( generic_dimension_specifier )? | DOUBLE_COLON IDENTIFIER ( generic_dimension_specifier )? )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==EOF||LA76_0==CLOSE_PARENS||LA76_0==DOT||LA76_0==LT) ) {
                alt76=1;
            }
            else if ( (LA76_0==DOUBLE_COLON) ) {
                alt76=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;

            }
            switch (alt76) {
                case 1 :
                    // CSharpAngular.g:1134:21: ( generic_dimension_specifier )?
                    {
                    // CSharpAngular.g:1134:21: ( generic_dimension_specifier )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==LT) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // CSharpAngular.g:1134:21: generic_dimension_specifier
                            {
                            pushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name6631);
                            generic_dimension_specifier();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1135:18: DOUBLE_COLON IDENTIFIER ( generic_dimension_specifier )?
                    {
                    match(input,DOUBLE_COLON,FOLLOW_DOUBLE_COLON_in_unbound_type_name6651); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_unbound_type_name6653); if (state.failed) return retval;

                    // CSharpAngular.g:1135:42: ( generic_dimension_specifier )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==LT) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // CSharpAngular.g:1135:42: generic_dimension_specifier
                            {
                            pushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name6655);
                            generic_dimension_specifier();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }


            // CSharpAngular.g:1137:5: ( DOT IDENTIFIER ( generic_dimension_specifier )? )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==DOT) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // CSharpAngular.g:1137:6: DOT IDENTIFIER ( generic_dimension_specifier )?
            	    {
            	    match(input,DOT,FOLLOW_DOT_in_unbound_type_name6680); if (state.failed) return retval;

            	    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_unbound_type_name6682); if (state.failed) return retval;

            	    // CSharpAngular.g:1137:21: ( generic_dimension_specifier )?
            	    int alt77=2;
            	    int LA77_0 = input.LA(1);

            	    if ( (LA77_0==LT) ) {
            	        alt77=1;
            	    }
            	    switch (alt77) {
            	        case 1 :
            	            // CSharpAngular.g:1137:21: generic_dimension_specifier
            	            {
            	            pushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name6684);
            	            generic_dimension_specifier();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1138:5: -> unboundtypename(tkn=$id.text)
              {
                  retval.st = templateLib.getInstanceOf("unboundtypename",new STAttrMap().put("tkn", (id!=null?id.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unbound_type_name"


    public static class generic_dimension_specifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "generic_dimension_specifier"
    // CSharpAngular.g:1140:1: generic_dimension_specifier : LT (cl= commas )? GT -> genericDimensionSpecifier(cList=\"<\"+cl+\">\");
    public final CSharpAngular.generic_dimension_specifier_return generic_dimension_specifier() throws RecognitionException {
        CSharpAngular.generic_dimension_specifier_return retval = new CSharpAngular.generic_dimension_specifier_return();
        retval.start = input.LT(1);


        CSharpAngular.commas_return cl =null;


        try {
            // CSharpAngular.g:1141:2: ( LT (cl= commas )? GT -> genericDimensionSpecifier(cList=\"<\"+cl+\">\"))
            // CSharpAngular.g:1142:2: LT (cl= commas )? GT
            {
            match(input,LT,FOLLOW_LT_in_generic_dimension_specifier6713); if (state.failed) return retval;

            // CSharpAngular.g:1142:5: (cl= commas )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==COMMA) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // CSharpAngular.g:1142:6: cl= commas
                    {
                    pushFollow(FOLLOW_commas_in_generic_dimension_specifier6718);
                    cl=commas();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,GT,FOLLOW_GT_in_generic_dimension_specifier6722); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1143:2: -> genericDimensionSpecifier(cList=\"<\"+cl+\">\")
              {
                  retval.st = templateLib.getInstanceOf("genericDimensionSpecifier",new STAttrMap().put("cList", "<"+cl+">"));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic_dimension_specifier"


    public static class commas_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "commas"
    // CSharpAngular.g:1145:1: commas : COMMA (lst+= commas_Chld )* -> commas(list=$lst);
    public final CSharpAngular.commas_return commas() throws RecognitionException {
        CSharpAngular.commas_return retval = new CSharpAngular.commas_return();
        retval.start = input.LT(1);


        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharpAngular.g:1146:2: ( COMMA (lst+= commas_Chld )* -> commas(list=$lst))
            // CSharpAngular.g:1147:2: COMMA (lst+= commas_Chld )*
            {
            match(input,COMMA,FOLLOW_COMMA_in_commas6744); if (state.failed) return retval;

            // CSharpAngular.g:1147:8: (lst+= commas_Chld )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==COMMA) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // CSharpAngular.g:1147:9: lst+= commas_Chld
            	    {
            	    pushFollow(FOLLOW_commas_Chld_in_commas6749);
            	    lst=commas_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1148:2: -> commas(list=$lst)
              {
                  retval.st = templateLib.getInstanceOf("commas",new STAttrMap().put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "commas"


    public static class commas_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "commas_Chld"
    // CSharpAngular.g:1151:1: commas_Chld : COMMA -> text(value=$COMMA.text);
    public final CSharpAngular.commas_Chld_return commas_Chld() throws RecognitionException {
        CSharpAngular.commas_Chld_return retval = new CSharpAngular.commas_Chld_return();
        retval.start = input.LT(1);


        Token COMMA46=null;

        try {
            // CSharpAngular.g:1152:2: ( COMMA -> text(value=$COMMA.text))
            // CSharpAngular.g:1153:2: COMMA
            {
            COMMA46=(Token)match(input,COMMA,FOLLOW_COMMA_in_commas_Chld6773); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1154:2: -> text(value=$COMMA.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (COMMA46!=null?COMMA46.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "commas_Chld"


    public static class checked_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "checked_expression"
    // CSharpAngular.g:1156:1: checked_expression : CHECKED OPEN_PARENS expression CLOSE_PARENS ;
    public final CSharpAngular.checked_expression_return checked_expression() throws RecognitionException {
        CSharpAngular.checked_expression_return retval = new CSharpAngular.checked_expression_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:1157:2: ( CHECKED OPEN_PARENS expression CLOSE_PARENS )
            // CSharpAngular.g:1157:4: CHECKED OPEN_PARENS expression CLOSE_PARENS
            {
            match(input,CHECKED,FOLLOW_CHECKED_in_checked_expression6794); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_checked_expression6796); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_checked_expression6798);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_checked_expression6800); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "checked_expression"


    public static class unchecked_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unchecked_expression"
    // CSharpAngular.g:1159:1: unchecked_expression : UNCHECKED OPEN_PARENS expression CLOSE_PARENS ;
    public final CSharpAngular.unchecked_expression_return unchecked_expression() throws RecognitionException {
        CSharpAngular.unchecked_expression_return retval = new CSharpAngular.unchecked_expression_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:1160:2: ( UNCHECKED OPEN_PARENS expression CLOSE_PARENS )
            // CSharpAngular.g:1160:4: UNCHECKED OPEN_PARENS expression CLOSE_PARENS
            {
            match(input,UNCHECKED,FOLLOW_UNCHECKED_in_unchecked_expression6811); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_unchecked_expression6813); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_unchecked_expression6815);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_unchecked_expression6817); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unchecked_expression"


    public static class default_value_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "default_value_expression"
    // CSharpAngular.g:1162:1: default_value_expression : DEFAULT OPEN_PARENS typ= type CLOSE_PARENS -> defaultvalueexpression(tpe=typ);
    public final CSharpAngular.default_value_expression_return default_value_expression() throws RecognitionException {
        CSharpAngular.default_value_expression_return retval = new CSharpAngular.default_value_expression_return();
        retval.start = input.LT(1);


        CSharpAngular.type_return typ =null;


        try {
            // CSharpAngular.g:1163:2: ( DEFAULT OPEN_PARENS typ= type CLOSE_PARENS -> defaultvalueexpression(tpe=typ))
            // CSharpAngular.g:1163:4: DEFAULT OPEN_PARENS typ= type CLOSE_PARENS
            {
            match(input,DEFAULT,FOLLOW_DEFAULT_in_default_value_expression6828); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_default_value_expression6830); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_default_value_expression6834);
            typ=type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_default_value_expression6836); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1164:2: -> defaultvalueexpression(tpe=typ)
              {
                  retval.st = templateLib.getInstanceOf("defaultvalueexpression",new STAttrMap().put("tpe", typ));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_value_expression"


    public static class unary_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unary_expression"
    // CSharpAngular.g:1179:1: unary_expression : ( ( ( scan_for_cast_generic_precedence | OPEN_PARENS predefined_cast_type )=>val1= cast_expression ) -> unaryExpression(value=val1)|val2= primary_expression -> unaryExpression(value=val2)| PLUS val3= unary_expression -> unaryExpression(value=val3)| MINUS val4= unary_expression -> unaryExpression(value=val4)| BANG val5= unary_expression -> unaryExpression(value=val5)| TILDE val6= unary_expression -> unaryExpression(value=val6)|val7= pre_increment_expression -> unaryExpression(value=val7)|val8= pre_decrement_expression -> unaryExpression(value=val8)|val9= unary_expression_unsafe -> unaryExpression(value=val9));
    public final CSharpAngular.unary_expression_return unary_expression() throws RecognitionException {
        CSharpAngular.unary_expression_return retval = new CSharpAngular.unary_expression_return();
        retval.start = input.LT(1);


        CSharpAngular.cast_expression_return val1 =null;

        CSharpAngular.primary_expression_return val2 =null;

        CSharpAngular.unary_expression_return val3 =null;

        CSharpAngular.unary_expression_return val4 =null;

        CSharpAngular.unary_expression_return val5 =null;

        CSharpAngular.unary_expression_return val6 =null;

        CSharpAngular.pre_increment_expression_return val7 =null;

        CSharpAngular.pre_decrement_expression_return val8 =null;

        CSharpAngular.unary_expression_unsafe_return val9 =null;


        try {
            // CSharpAngular.g:1180:2: ( ( ( scan_for_cast_generic_precedence | OPEN_PARENS predefined_cast_type )=>val1= cast_expression ) -> unaryExpression(value=val1)|val2= primary_expression -> unaryExpression(value=val2)| PLUS val3= unary_expression -> unaryExpression(value=val3)| MINUS val4= unary_expression -> unaryExpression(value=val4)| BANG val5= unary_expression -> unaryExpression(value=val5)| TILDE val6= unary_expression -> unaryExpression(value=val6)|val7= pre_increment_expression -> unaryExpression(value=val7)|val8= pre_decrement_expression -> unaryExpression(value=val8)|val9= unary_expression_unsafe -> unaryExpression(value=val9))
            int alt81=9;
            switch ( input.LA(1) ) {
            case OPEN_PARENS:
                {
                int LA81_1 = input.LA(2);

                if ( (synpred54_CSharpAngular()) ) {
                    alt81=1;
                }
                else if ( (true) ) {
                    alt81=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 1, input);

                    throw nvae;

                }
                }
                break;
            case BASE:
            case BOOL:
            case BYTE:
            case CHAR:
            case CHARACTER_LITERAL:
            case CHECKED:
            case DECIMAL:
            case DEFAULT:
            case DELEGATE:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case IDENTIFIER:
            case INT:
            case INTEGER_LITERAL:
            case LONG:
            case NEW:
            case NULL:
            case OBJECT:
            case REAL_LITERAL:
            case SBYTE:
            case SHORT:
            case SIZEOF:
            case STRING:
            case STRING_LITERAL:
            case THIS:
            case TRUE:
            case TYPEOF:
            case UINT:
            case ULONG:
            case UNCHECKED:
            case USHORT:
                {
                alt81=2;
                }
                break;
            case PLUS:
                {
                alt81=3;
                }
                break;
            case MINUS:
                {
                alt81=4;
                }
                break;
            case BANG:
                {
                alt81=5;
                }
                break;
            case TILDE:
                {
                alt81=6;
                }
                break;
            case OP_INC:
                {
                alt81=7;
                }
                break;
            case OP_DEC:
                {
                alt81=8;
                }
                break;
            case AMP:
            case STAR:
                {
                alt81=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }

            switch (alt81) {
                case 1 :
                    // CSharpAngular.g:1181:2: ( ( scan_for_cast_generic_precedence | OPEN_PARENS predefined_cast_type )=>val1= cast_expression )
                    {
                    // CSharpAngular.g:1181:2: ( ( scan_for_cast_generic_precedence | OPEN_PARENS predefined_cast_type )=>val1= cast_expression )
                    // CSharpAngular.g:1181:3: ( scan_for_cast_generic_precedence | OPEN_PARENS predefined_cast_type )=>val1= cast_expression
                    {
                    pushFollow(FOLLOW_cast_expression_in_unary_expression6875);
                    val1=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1182:2: -> unaryExpression(value=val1)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1183:4: val2= primary_expression
                    {
                    pushFollow(FOLLOW_primary_expression_in_unary_expression6892);
                    val2=primary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1184:2: -> unaryExpression(value=val2)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val2));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:1185:4: PLUS val3= unary_expression
                    {
                    match(input,PLUS,FOLLOW_PLUS_in_unary_expression6906); if (state.failed) return retval;

                    pushFollow(FOLLOW_unary_expression_in_unary_expression6910);
                    val3=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1186:2: -> unaryExpression(value=val3)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val3));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:1187:4: MINUS val4= unary_expression
                    {
                    match(input,MINUS,FOLLOW_MINUS_in_unary_expression6924); if (state.failed) return retval;

                    pushFollow(FOLLOW_unary_expression_in_unary_expression6928);
                    val4=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1188:2: -> unaryExpression(value=val4)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val4));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:1189:4: BANG val5= unary_expression
                    {
                    match(input,BANG,FOLLOW_BANG_in_unary_expression6942); if (state.failed) return retval;

                    pushFollow(FOLLOW_unary_expression_in_unary_expression6946);
                    val5=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1190:2: -> unaryExpression(value=val5)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val5));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:1191:4: TILDE val6= unary_expression
                    {
                    match(input,TILDE,FOLLOW_TILDE_in_unary_expression6960); if (state.failed) return retval;

                    pushFollow(FOLLOW_unary_expression_in_unary_expression6964);
                    val6=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1192:2: -> unaryExpression(value=val6)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val6));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:1193:4: val7= pre_increment_expression
                    {
                    pushFollow(FOLLOW_pre_increment_expression_in_unary_expression6980);
                    val7=pre_increment_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1194:2: -> unaryExpression(value=val7)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val7));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:1195:4: val8= pre_decrement_expression
                    {
                    pushFollow(FOLLOW_pre_decrement_expression_in_unary_expression6996);
                    val8=pre_decrement_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1196:2: -> unaryExpression(value=val8)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val8));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:1197:4: val9= unary_expression_unsafe
                    {
                    pushFollow(FOLLOW_unary_expression_unsafe_in_unary_expression7012);
                    val9=unary_expression_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1198:2: -> unaryExpression(value=val9)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val9));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unary_expression"


    public static class scan_for_cast_generic_precedence_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "scan_for_cast_generic_precedence"
    // CSharpAngular.g:1204:1: scan_for_cast_generic_precedence : OPEN_PARENS typ= type CLOSE_PARENS cadt= cast_disambiguation_token -> scanForCastGenericPrecedence(type=typcastDisAmbTok=cadt);
    public final CSharpAngular.scan_for_cast_generic_precedence_return scan_for_cast_generic_precedence() throws RecognitionException {
        CSharpAngular.scan_for_cast_generic_precedence_return retval = new CSharpAngular.scan_for_cast_generic_precedence_return();
        retval.start = input.LT(1);


        CSharpAngular.type_return typ =null;

        CSharpAngular.cast_disambiguation_token_return cadt =null;


        try {
            // CSharpAngular.g:1205:3: ( OPEN_PARENS typ= type CLOSE_PARENS cadt= cast_disambiguation_token -> scanForCastGenericPrecedence(type=typcastDisAmbTok=cadt))
            // CSharpAngular.g:1206:3: OPEN_PARENS typ= type CLOSE_PARENS cadt= cast_disambiguation_token
            {
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_scan_for_cast_generic_precedence7039); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_scan_for_cast_generic_precedence7043);
            typ=type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_scan_for_cast_generic_precedence7045); if (state.failed) return retval;

            pushFollow(FOLLOW_cast_disambiguation_token_in_scan_for_cast_generic_precedence7049);
            cadt=cast_disambiguation_token();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1207:3: -> scanForCastGenericPrecedence(type=typcastDisAmbTok=cadt)
              {
                  retval.st = templateLib.getInstanceOf("scanForCastGenericPrecedence",new STAttrMap().put("type", typ).put("castDisAmbTok", cadt));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "scan_for_cast_generic_precedence"


    public static class cast_disambiguation_token_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "cast_disambiguation_token"
    // CSharpAngular.g:1212:1: cast_disambiguation_token : ( TILDE -> text(value=$TILDE.text)| BANG -> text(value=$BANG.text)| OPEN_PARENS -> text(value=$OPEN_PARENS.text)|notselect= not_select_contextual_keyword -> text(value=notselect)|lit= literal -> text(value=lit)| ABSTRACT -> text(value=$ABSTRACT.text)| BASE -> text(value=$BASE.text)| BOOL -> text(value=$BOOL.text)| BREAK -> text(value=$BREAK.text)| BYTE -> text(value=$BYTE.text)| CASE -> text(value=$CASE.text)| CATCH -> text(value=$CATCH.text)| CHAR -> text(value=$CHAR.text)| CHECKED -> text(value=$CHECKED.text)| CLASS -> text(value=$CLASS.text)| CONST -> text(value=$CONST.text)| CONTINUE -> text(value=$CONTINUE.text)| DECIMAL -> text(value=$DECIMAL.text)| DEFAULT -> text(value=$DEFAULT.text)| DELEGATE -> text(value=$DELEGATE.text)| DO -> text(value=$DO.text)| DOUBLE -> text(value=$DOUBLE.text)| ELSE -> text(value=$ELSE.text)| ENUM -> text(value=$ENUM.text)| EVENT -> text(value=$EVENT.text)| EXPLICIT -> text(value=$EXPLICIT.text)| EXTERN -> text(value=$EXTERN.text)| FINALLY -> text(value=$FINALLY.text)| FIXED -> text(value=$FIXED.text)| FLOAT -> text(value=$FLOAT.text)| FOR -> text(value=$FOR.text)| FOREACH -> text(value=$FOREACH.text)| GOTO -> text(value=$GOTO.text)| IF -> text(value=$IF.text)| IMPLICIT -> text(value=$IMPLICIT.text)| IN -> text(value=$IN.text)| INT -> text(value=$INT.text)| INTERFACE -> text(value=$INTERFACE.text)| INTERNAL -> text(value=$INTERNAL.text)| LOCK -> text(value=$LOCK.text)| LONG -> text(value=$LONG.text)| NAMESPACE -> text(value=$NAMESPACE.text)| NEW -> text(value=$NEW.text)| OBJECT -> text(value=\"Object\")| OPERATOR -> text(value=$OPERATOR.text)| OUT -> text(value=$OUT.text)| OVERRIDE -> text(value=$OVERRIDE.text)| PARAMS -> text(value=$PARAMS.text)| PRIVATE -> text(value=$PRIVATE.text)| PROTECTED -> text(value=$PROTECTED.text)| PUBLIC -> text(value=$PUBLIC.text)| READONLY -> text(value=$READONLY.text)| REF -> text(value=$REF.text)| RETURN -> text(value=$RETURN.text)| SBYTE -> text(value=$SBYTE.text)| SEALED -> text(value=$SEALED.text)| SHORT -> text(value=$SHORT.text)| SIZEOF -> text(value=$SIZEOF.text)| STACKALLOC -> text(value=$STACKALLOC.text)| STATIC -> text(value=$STATIC.text)| STRING -> text(value=\"String\")| STRUCT -> text(value=$STRUCT.text)| SWITCH -> text(value=$SWITCH.text)| THIS -> text(value=$THIS.text)| THROW -> text(value=$THROW.text)| TRY -> text(value=$TRY.text)| TYPEOF -> text(value=$TYPEOF.text)| UINT -> text(value=$UINT.text)| ULONG -> text(value=$ULONG.text)| UNCHECKED -> text(value=$UNCHECKED.text)| UNSAFE -> text(value=$UNSAFE.text)| USHORT -> text(value=$USHORT.text)| USING -> text(value=$USING.text)| VIRTUAL -> text(value=$VIRTUAL.text)| VOID -> text(value=$VOID.text)| VOLATILE -> text(value=$VOLATILE.text)| WHILE -> text(value=$WHILE.text));
    public final CSharpAngular.cast_disambiguation_token_return cast_disambiguation_token() throws RecognitionException {
        CSharpAngular.cast_disambiguation_token_return retval = new CSharpAngular.cast_disambiguation_token_return();
        retval.start = input.LT(1);


        Token TILDE47=null;
        Token BANG48=null;
        Token OPEN_PARENS49=null;
        Token ABSTRACT50=null;
        Token BASE51=null;
        Token BOOL52=null;
        Token BREAK53=null;
        Token BYTE54=null;
        Token CASE55=null;
        Token CATCH56=null;
        Token CHAR57=null;
        Token CHECKED58=null;
        Token CLASS59=null;
        Token CONST60=null;
        Token CONTINUE61=null;
        Token DECIMAL62=null;
        Token DEFAULT63=null;
        Token DELEGATE64=null;
        Token DO65=null;
        Token DOUBLE66=null;
        Token ELSE67=null;
        Token ENUM68=null;
        Token EVENT69=null;
        Token EXPLICIT70=null;
        Token EXTERN71=null;
        Token FINALLY72=null;
        Token FIXED73=null;
        Token FLOAT74=null;
        Token FOR75=null;
        Token FOREACH76=null;
        Token GOTO77=null;
        Token IF78=null;
        Token IMPLICIT79=null;
        Token IN80=null;
        Token INT81=null;
        Token INTERFACE82=null;
        Token INTERNAL83=null;
        Token LOCK84=null;
        Token LONG85=null;
        Token NAMESPACE86=null;
        Token NEW87=null;
        Token OPERATOR88=null;
        Token OUT89=null;
        Token OVERRIDE90=null;
        Token PARAMS91=null;
        Token PRIVATE92=null;
        Token PROTECTED93=null;
        Token PUBLIC94=null;
        Token READONLY95=null;
        Token REF96=null;
        Token RETURN97=null;
        Token SBYTE98=null;
        Token SEALED99=null;
        Token SHORT100=null;
        Token SIZEOF101=null;
        Token STACKALLOC102=null;
        Token STATIC103=null;
        Token STRUCT104=null;
        Token SWITCH105=null;
        Token THIS106=null;
        Token THROW107=null;
        Token TRY108=null;
        Token TYPEOF109=null;
        Token UINT110=null;
        Token ULONG111=null;
        Token UNCHECKED112=null;
        Token UNSAFE113=null;
        Token USHORT114=null;
        Token USING115=null;
        Token VIRTUAL116=null;
        Token VOID117=null;
        Token VOLATILE118=null;
        Token WHILE119=null;
        CSharpAngular.not_select_contextual_keyword_return notselect =null;

        CSharpAngular.literal_return lit =null;


        try {
            // CSharpAngular.g:1213:3: ( TILDE -> text(value=$TILDE.text)| BANG -> text(value=$BANG.text)| OPEN_PARENS -> text(value=$OPEN_PARENS.text)|notselect= not_select_contextual_keyword -> text(value=notselect)|lit= literal -> text(value=lit)| ABSTRACT -> text(value=$ABSTRACT.text)| BASE -> text(value=$BASE.text)| BOOL -> text(value=$BOOL.text)| BREAK -> text(value=$BREAK.text)| BYTE -> text(value=$BYTE.text)| CASE -> text(value=$CASE.text)| CATCH -> text(value=$CATCH.text)| CHAR -> text(value=$CHAR.text)| CHECKED -> text(value=$CHECKED.text)| CLASS -> text(value=$CLASS.text)| CONST -> text(value=$CONST.text)| CONTINUE -> text(value=$CONTINUE.text)| DECIMAL -> text(value=$DECIMAL.text)| DEFAULT -> text(value=$DEFAULT.text)| DELEGATE -> text(value=$DELEGATE.text)| DO -> text(value=$DO.text)| DOUBLE -> text(value=$DOUBLE.text)| ELSE -> text(value=$ELSE.text)| ENUM -> text(value=$ENUM.text)| EVENT -> text(value=$EVENT.text)| EXPLICIT -> text(value=$EXPLICIT.text)| EXTERN -> text(value=$EXTERN.text)| FINALLY -> text(value=$FINALLY.text)| FIXED -> text(value=$FIXED.text)| FLOAT -> text(value=$FLOAT.text)| FOR -> text(value=$FOR.text)| FOREACH -> text(value=$FOREACH.text)| GOTO -> text(value=$GOTO.text)| IF -> text(value=$IF.text)| IMPLICIT -> text(value=$IMPLICIT.text)| IN -> text(value=$IN.text)| INT -> text(value=$INT.text)| INTERFACE -> text(value=$INTERFACE.text)| INTERNAL -> text(value=$INTERNAL.text)| LOCK -> text(value=$LOCK.text)| LONG -> text(value=$LONG.text)| NAMESPACE -> text(value=$NAMESPACE.text)| NEW -> text(value=$NEW.text)| OBJECT -> text(value=\"Object\")| OPERATOR -> text(value=$OPERATOR.text)| OUT -> text(value=$OUT.text)| OVERRIDE -> text(value=$OVERRIDE.text)| PARAMS -> text(value=$PARAMS.text)| PRIVATE -> text(value=$PRIVATE.text)| PROTECTED -> text(value=$PROTECTED.text)| PUBLIC -> text(value=$PUBLIC.text)| READONLY -> text(value=$READONLY.text)| REF -> text(value=$REF.text)| RETURN -> text(value=$RETURN.text)| SBYTE -> text(value=$SBYTE.text)| SEALED -> text(value=$SEALED.text)| SHORT -> text(value=$SHORT.text)| SIZEOF -> text(value=$SIZEOF.text)| STACKALLOC -> text(value=$STACKALLOC.text)| STATIC -> text(value=$STATIC.text)| STRING -> text(value=\"String\")| STRUCT -> text(value=$STRUCT.text)| SWITCH -> text(value=$SWITCH.text)| THIS -> text(value=$THIS.text)| THROW -> text(value=$THROW.text)| TRY -> text(value=$TRY.text)| TYPEOF -> text(value=$TYPEOF.text)| UINT -> text(value=$UINT.text)| ULONG -> text(value=$ULONG.text)| UNCHECKED -> text(value=$UNCHECKED.text)| UNSAFE -> text(value=$UNSAFE.text)| USHORT -> text(value=$USHORT.text)| USING -> text(value=$USING.text)| VIRTUAL -> text(value=$VIRTUAL.text)| VOID -> text(value=$VOID.text)| VOLATILE -> text(value=$VOLATILE.text)| WHILE -> text(value=$WHILE.text))
            int alt82=77;
            alt82 = dfa82.predict(input);
            switch (alt82) {
                case 1 :
                    // CSharpAngular.g:1214:3: TILDE
                    {
                    TILDE47=(Token)match(input,TILDE,FOLLOW_TILDE_in_cast_disambiguation_token7081); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1214:25: -> text(value=$TILDE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TILDE47!=null?TILDE47.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1215:5: BANG
                    {
                    BANG48=(Token)match(input,BANG,FOLLOW_BANG_in_cast_disambiguation_token7111); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1215:25: -> text(value=$BANG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BANG48!=null?BANG48.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:1216:5: OPEN_PARENS
                    {
                    OPEN_PARENS49=(Token)match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_cast_disambiguation_token7140); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1216:25: -> text(value=$OPEN_PARENS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OPEN_PARENS49!=null?OPEN_PARENS49.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:1217:5: notselect= not_select_contextual_keyword
                    {
                    pushFollow(FOLLOW_not_select_contextual_keyword_in_cast_disambiguation_token7164);
                    notselect=not_select_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1217:54: -> text(value=notselect)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", notselect));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:1218:5: lit= literal
                    {
                    pushFollow(FOLLOW_literal_in_cast_disambiguation_token7189);
                    lit=literal();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1218:25: -> text(value=lit)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", lit));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:1219:5: ABSTRACT
                    {
                    ABSTRACT50=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_cast_disambiguation_token7211); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1219:25: -> text(value=$ABSTRACT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ABSTRACT50!=null?ABSTRACT50.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:1220:5: BASE
                    {
                    BASE51=(Token)match(input,BASE,FOLLOW_BASE_in_cast_disambiguation_token7236); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1220:25: -> text(value=$BASE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BASE51!=null?BASE51.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:1221:5: BOOL
                    {
                    BOOL52=(Token)match(input,BOOL,FOLLOW_BOOL_in_cast_disambiguation_token7265); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1221:25: -> text(value=$BOOL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BOOL52!=null?BOOL52.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:1222:5: BREAK
                    {
                    BREAK53=(Token)match(input,BREAK,FOLLOW_BREAK_in_cast_disambiguation_token7294); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1222:25: -> text(value=$BREAK.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BREAK53!=null?BREAK53.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:1223:5: BYTE
                    {
                    BYTE54=(Token)match(input,BYTE,FOLLOW_BYTE_in_cast_disambiguation_token7322); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1223:25: -> text(value=$BYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BYTE54!=null?BYTE54.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:1224:5: CASE
                    {
                    CASE55=(Token)match(input,CASE,FOLLOW_CASE_in_cast_disambiguation_token7351); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1224:25: -> text(value=$CASE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CASE55!=null?CASE55.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharpAngular.g:1225:5: CATCH
                    {
                    CATCH56=(Token)match(input,CATCH,FOLLOW_CATCH_in_cast_disambiguation_token7380); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1225:25: -> text(value=$CATCH.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CATCH56!=null?CATCH56.getText():null)));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharpAngular.g:1226:5: CHAR
                    {
                    CHAR57=(Token)match(input,CHAR,FOLLOW_CHAR_in_cast_disambiguation_token7408); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1226:25: -> text(value=$CHAR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CHAR57!=null?CHAR57.getText():null)));
                      }


                    }

                    }
                    break;
                case 14 :
                    // CSharpAngular.g:1227:5: CHECKED
                    {
                    CHECKED58=(Token)match(input,CHECKED,FOLLOW_CHECKED_in_cast_disambiguation_token7437); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1227:25: -> text(value=$CHECKED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CHECKED58!=null?CHECKED58.getText():null)));
                      }


                    }

                    }
                    break;
                case 15 :
                    // CSharpAngular.g:1228:5: CLASS
                    {
                    CLASS59=(Token)match(input,CLASS,FOLLOW_CLASS_in_cast_disambiguation_token7463); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1228:25: -> text(value=$CLASS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CLASS59!=null?CLASS59.getText():null)));
                      }


                    }

                    }
                    break;
                case 16 :
                    // CSharpAngular.g:1229:5: CONST
                    {
                    CONST60=(Token)match(input,CONST,FOLLOW_CONST_in_cast_disambiguation_token7491); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1229:25: -> text(value=$CONST.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CONST60!=null?CONST60.getText():null)));
                      }


                    }

                    }
                    break;
                case 17 :
                    // CSharpAngular.g:1230:5: CONTINUE
                    {
                    CONTINUE61=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_cast_disambiguation_token7519); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1230:25: -> text(value=$CONTINUE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CONTINUE61!=null?CONTINUE61.getText():null)));
                      }


                    }

                    }
                    break;
                case 18 :
                    // CSharpAngular.g:1231:5: DECIMAL
                    {
                    DECIMAL62=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_cast_disambiguation_token7544); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1231:25: -> text(value=$DECIMAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DECIMAL62!=null?DECIMAL62.getText():null)));
                      }


                    }

                    }
                    break;
                case 19 :
                    // CSharpAngular.g:1232:5: DEFAULT
                    {
                    DEFAULT63=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_cast_disambiguation_token7570); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1232:25: -> text(value=$DEFAULT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DEFAULT63!=null?DEFAULT63.getText():null)));
                      }


                    }

                    }
                    break;
                case 20 :
                    // CSharpAngular.g:1233:5: DELEGATE
                    {
                    DELEGATE64=(Token)match(input,DELEGATE,FOLLOW_DELEGATE_in_cast_disambiguation_token7596); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1233:25: -> text(value=$DELEGATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DELEGATE64!=null?DELEGATE64.getText():null)));
                      }


                    }

                    }
                    break;
                case 21 :
                    // CSharpAngular.g:1234:5: DO
                    {
                    DO65=(Token)match(input,DO,FOLLOW_DO_in_cast_disambiguation_token7621); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1234:25: -> text(value=$DO.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DO65!=null?DO65.getText():null)));
                      }


                    }

                    }
                    break;
                case 22 :
                    // CSharpAngular.g:1235:5: DOUBLE
                    {
                    DOUBLE66=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_cast_disambiguation_token7652); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1235:25: -> text(value=$DOUBLE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DOUBLE66!=null?DOUBLE66.getText():null)));
                      }


                    }

                    }
                    break;
                case 23 :
                    // CSharpAngular.g:1236:5: ELSE
                    {
                    ELSE67=(Token)match(input,ELSE,FOLLOW_ELSE_in_cast_disambiguation_token7679); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1236:25: -> text(value=$ELSE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ELSE67!=null?ELSE67.getText():null)));
                      }


                    }

                    }
                    break;
                case 24 :
                    // CSharpAngular.g:1237:5: ENUM
                    {
                    ENUM68=(Token)match(input,ENUM,FOLLOW_ENUM_in_cast_disambiguation_token7708); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1237:25: -> text(value=$ENUM.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ENUM68!=null?ENUM68.getText():null)));
                      }


                    }

                    }
                    break;
                case 25 :
                    // CSharpAngular.g:1238:5: EVENT
                    {
                    EVENT69=(Token)match(input,EVENT,FOLLOW_EVENT_in_cast_disambiguation_token7737); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1238:25: -> text(value=$EVENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EVENT69!=null?EVENT69.getText():null)));
                      }


                    }

                    }
                    break;
                case 26 :
                    // CSharpAngular.g:1239:5: EXPLICIT
                    {
                    EXPLICIT70=(Token)match(input,EXPLICIT,FOLLOW_EXPLICIT_in_cast_disambiguation_token7765); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1239:25: -> text(value=$EXPLICIT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXPLICIT70!=null?EXPLICIT70.getText():null)));
                      }


                    }

                    }
                    break;
                case 27 :
                    // CSharpAngular.g:1240:5: EXTERN
                    {
                    EXTERN71=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_cast_disambiguation_token7790); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1240:25: -> text(value=$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXTERN71!=null?EXTERN71.getText():null)));
                      }


                    }

                    }
                    break;
                case 28 :
                    // CSharpAngular.g:1241:5: FINALLY
                    {
                    FINALLY72=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_cast_disambiguation_token7817); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1241:25: -> text(value=$FINALLY.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FINALLY72!=null?FINALLY72.getText():null)));
                      }


                    }

                    }
                    break;
                case 29 :
                    // CSharpAngular.g:1242:5: FIXED
                    {
                    FIXED73=(Token)match(input,FIXED,FOLLOW_FIXED_in_cast_disambiguation_token7843); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1242:25: -> text(value=$FIXED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FIXED73!=null?FIXED73.getText():null)));
                      }


                    }

                    }
                    break;
                case 30 :
                    // CSharpAngular.g:1243:5: FLOAT
                    {
                    FLOAT74=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_cast_disambiguation_token7871); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1243:25: -> text(value=$FLOAT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FLOAT74!=null?FLOAT74.getText():null)));
                      }


                    }

                    }
                    break;
                case 31 :
                    // CSharpAngular.g:1244:5: FOR
                    {
                    FOR75=(Token)match(input,FOR,FOLLOW_FOR_in_cast_disambiguation_token7899); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1244:25: -> text(value=$FOR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FOR75!=null?FOR75.getText():null)));
                      }


                    }

                    }
                    break;
                case 32 :
                    // CSharpAngular.g:1245:5: FOREACH
                    {
                    FOREACH76=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_cast_disambiguation_token7929); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1245:25: -> text(value=$FOREACH.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FOREACH76!=null?FOREACH76.getText():null)));
                      }


                    }

                    }
                    break;
                case 33 :
                    // CSharpAngular.g:1246:5: GOTO
                    {
                    GOTO77=(Token)match(input,GOTO,FOLLOW_GOTO_in_cast_disambiguation_token7955); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1246:25: -> text(value=$GOTO.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (GOTO77!=null?GOTO77.getText():null)));
                      }


                    }

                    }
                    break;
                case 34 :
                    // CSharpAngular.g:1247:5: IF
                    {
                    IF78=(Token)match(input,IF,FOLLOW_IF_in_cast_disambiguation_token7984); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1247:25: -> text(value=$IF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IF78!=null?IF78.getText():null)));
                      }


                    }

                    }
                    break;
                case 35 :
                    // CSharpAngular.g:1248:5: IMPLICIT
                    {
                    IMPLICIT79=(Token)match(input,IMPLICIT,FOLLOW_IMPLICIT_in_cast_disambiguation_token8015); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1248:25: -> text(value=$IMPLICIT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IMPLICIT79!=null?IMPLICIT79.getText():null)));
                      }


                    }

                    }
                    break;
                case 36 :
                    // CSharpAngular.g:1249:5: IN
                    {
                    IN80=(Token)match(input,IN,FOLLOW_IN_in_cast_disambiguation_token8040); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1249:25: -> text(value=$IN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IN80!=null?IN80.getText():null)));
                      }


                    }

                    }
                    break;
                case 37 :
                    // CSharpAngular.g:1250:5: INT
                    {
                    INT81=(Token)match(input,INT,FOLLOW_INT_in_cast_disambiguation_token8071); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1250:25: -> text(value=$INT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INT81!=null?INT81.getText():null)));
                      }


                    }

                    }
                    break;
                case 38 :
                    // CSharpAngular.g:1251:5: INTERFACE
                    {
                    INTERFACE82=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_cast_disambiguation_token8101); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1251:25: -> text(value=$INTERFACE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERFACE82!=null?INTERFACE82.getText():null)));
                      }


                    }

                    }
                    break;
                case 39 :
                    // CSharpAngular.g:1252:5: INTERNAL
                    {
                    INTERNAL83=(Token)match(input,INTERNAL,FOLLOW_INTERNAL_in_cast_disambiguation_token8125); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1252:25: -> text(value=$INTERNAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERNAL83!=null?INTERNAL83.getText():null)));
                      }


                    }

                    }
                    break;
                case 40 :
                    // CSharpAngular.g:1253:5: LOCK
                    {
                    LOCK84=(Token)match(input,LOCK,FOLLOW_LOCK_in_cast_disambiguation_token8150); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1253:25: -> text(value=$LOCK.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (LOCK84!=null?LOCK84.getText():null)));
                      }


                    }

                    }
                    break;
                case 41 :
                    // CSharpAngular.g:1254:5: LONG
                    {
                    LONG85=(Token)match(input,LONG,FOLLOW_LONG_in_cast_disambiguation_token8179); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1254:25: -> text(value=$LONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (LONG85!=null?LONG85.getText():null)));
                      }


                    }

                    }
                    break;
                case 42 :
                    // CSharpAngular.g:1255:5: NAMESPACE
                    {
                    NAMESPACE86=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_cast_disambiguation_token8208); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1255:25: -> text(value=$NAMESPACE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NAMESPACE86!=null?NAMESPACE86.getText():null)));
                      }


                    }

                    }
                    break;
                case 43 :
                    // CSharpAngular.g:1256:5: NEW
                    {
                    NEW87=(Token)match(input,NEW,FOLLOW_NEW_in_cast_disambiguation_token8232); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1256:25: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW87!=null?NEW87.getText():null)));
                      }


                    }

                    }
                    break;
                case 44 :
                    // CSharpAngular.g:1257:5: OBJECT
                    {
                    match(input,OBJECT,FOLLOW_OBJECT_in_cast_disambiguation_token8262); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1257:25: -> text(value=\"Object\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "Object"));
                      }


                    }

                    }
                    break;
                case 45 :
                    // CSharpAngular.g:1258:5: OPERATOR
                    {
                    OPERATOR88=(Token)match(input,OPERATOR,FOLLOW_OPERATOR_in_cast_disambiguation_token8289); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1258:25: -> text(value=$OPERATOR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OPERATOR88!=null?OPERATOR88.getText():null)));
                      }


                    }

                    }
                    break;
                case 46 :
                    // CSharpAngular.g:1259:5: OUT
                    {
                    OUT89=(Token)match(input,OUT,FOLLOW_OUT_in_cast_disambiguation_token8314); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1259:25: -> text(value=$OUT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OUT89!=null?OUT89.getText():null)));
                      }


                    }

                    }
                    break;
                case 47 :
                    // CSharpAngular.g:1260:5: OVERRIDE
                    {
                    OVERRIDE90=(Token)match(input,OVERRIDE,FOLLOW_OVERRIDE_in_cast_disambiguation_token8344); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1260:25: -> text(value=$OVERRIDE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OVERRIDE90!=null?OVERRIDE90.getText():null)));
                      }


                    }

                    }
                    break;
                case 48 :
                    // CSharpAngular.g:1261:5: PARAMS
                    {
                    PARAMS91=(Token)match(input,PARAMS,FOLLOW_PARAMS_in_cast_disambiguation_token8369); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1261:25: -> text(value=$PARAMS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PARAMS91!=null?PARAMS91.getText():null)));
                      }


                    }

                    }
                    break;
                case 49 :
                    // CSharpAngular.g:1262:5: PRIVATE
                    {
                    PRIVATE92=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_cast_disambiguation_token8396); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1262:25: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE92!=null?PRIVATE92.getText():null)));
                      }


                    }

                    }
                    break;
                case 50 :
                    // CSharpAngular.g:1263:5: PROTECTED
                    {
                    PROTECTED93=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_cast_disambiguation_token8422); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1263:25: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED93!=null?PROTECTED93.getText():null)));
                      }


                    }

                    }
                    break;
                case 51 :
                    // CSharpAngular.g:1264:5: PUBLIC
                    {
                    PUBLIC94=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_cast_disambiguation_token8446); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1264:25: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC94!=null?PUBLIC94.getText():null)));
                      }


                    }

                    }
                    break;
                case 52 :
                    // CSharpAngular.g:1265:5: READONLY
                    {
                    READONLY95=(Token)match(input,READONLY,FOLLOW_READONLY_in_cast_disambiguation_token8473); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1265:25: -> text(value=$READONLY.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (READONLY95!=null?READONLY95.getText():null)));
                      }


                    }

                    }
                    break;
                case 53 :
                    // CSharpAngular.g:1266:5: REF
                    {
                    REF96=(Token)match(input,REF,FOLLOW_REF_in_cast_disambiguation_token8498); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1266:25: -> text(value=$REF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (REF96!=null?REF96.getText():null)));
                      }


                    }

                    }
                    break;
                case 54 :
                    // CSharpAngular.g:1267:5: RETURN
                    {
                    RETURN97=(Token)match(input,RETURN,FOLLOW_RETURN_in_cast_disambiguation_token8528); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1267:25: -> text(value=$RETURN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (RETURN97!=null?RETURN97.getText():null)));
                      }


                    }

                    }
                    break;
                case 55 :
                    // CSharpAngular.g:1268:5: SBYTE
                    {
                    SBYTE98=(Token)match(input,SBYTE,FOLLOW_SBYTE_in_cast_disambiguation_token8555); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1268:25: -> text(value=$SBYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SBYTE98!=null?SBYTE98.getText():null)));
                      }


                    }

                    }
                    break;
                case 56 :
                    // CSharpAngular.g:1269:5: SEALED
                    {
                    SEALED99=(Token)match(input,SEALED,FOLLOW_SEALED_in_cast_disambiguation_token8583); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1269:25: -> text(value=$SEALED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEALED99!=null?SEALED99.getText():null)));
                      }


                    }

                    }
                    break;
                case 57 :
                    // CSharpAngular.g:1270:5: SHORT
                    {
                    SHORT100=(Token)match(input,SHORT,FOLLOW_SHORT_in_cast_disambiguation_token8610); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1270:25: -> text(value=$SHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SHORT100!=null?SHORT100.getText():null)));
                      }


                    }

                    }
                    break;
                case 58 :
                    // CSharpAngular.g:1271:5: SIZEOF
                    {
                    SIZEOF101=(Token)match(input,SIZEOF,FOLLOW_SIZEOF_in_cast_disambiguation_token8638); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1271:25: -> text(value=$SIZEOF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SIZEOF101!=null?SIZEOF101.getText():null)));
                      }


                    }

                    }
                    break;
                case 59 :
                    // CSharpAngular.g:1272:5: STACKALLOC
                    {
                    STACKALLOC102=(Token)match(input,STACKALLOC,FOLLOW_STACKALLOC_in_cast_disambiguation_token8665); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1272:25: -> text(value=$STACKALLOC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STACKALLOC102!=null?STACKALLOC102.getText():null)));
                      }


                    }

                    }
                    break;
                case 60 :
                    // CSharpAngular.g:1273:5: STATIC
                    {
                    STATIC103=(Token)match(input,STATIC,FOLLOW_STATIC_in_cast_disambiguation_token8688); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1273:25: -> text(value=$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STATIC103!=null?STATIC103.getText():null)));
                      }


                    }

                    }
                    break;
                case 61 :
                    // CSharpAngular.g:1274:5: STRING
                    {
                    match(input,STRING,FOLLOW_STRING_in_cast_disambiguation_token8715); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1274:25: -> text(value=\"String\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "String"));
                      }


                    }

                    }
                    break;
                case 62 :
                    // CSharpAngular.g:1275:5: STRUCT
                    {
                    STRUCT104=(Token)match(input,STRUCT,FOLLOW_STRUCT_in_cast_disambiguation_token8742); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1275:25: -> text(value=$STRUCT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STRUCT104!=null?STRUCT104.getText():null)));
                      }


                    }

                    }
                    break;
                case 63 :
                    // CSharpAngular.g:1276:5: SWITCH
                    {
                    SWITCH105=(Token)match(input,SWITCH,FOLLOW_SWITCH_in_cast_disambiguation_token8769); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1276:25: -> text(value=$SWITCH.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SWITCH105!=null?SWITCH105.getText():null)));
                      }


                    }

                    }
                    break;
                case 64 :
                    // CSharpAngular.g:1277:5: THIS
                    {
                    THIS106=(Token)match(input,THIS,FOLLOW_THIS_in_cast_disambiguation_token8796); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1277:25: -> text(value=$THIS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (THIS106!=null?THIS106.getText():null)));
                      }


                    }

                    }
                    break;
                case 65 :
                    // CSharpAngular.g:1278:5: THROW
                    {
                    THROW107=(Token)match(input,THROW,FOLLOW_THROW_in_cast_disambiguation_token8825); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1278:25: -> text(value=$THROW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (THROW107!=null?THROW107.getText():null)));
                      }


                    }

                    }
                    break;
                case 66 :
                    // CSharpAngular.g:1279:5: TRY
                    {
                    TRY108=(Token)match(input,TRY,FOLLOW_TRY_in_cast_disambiguation_token8853); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1279:25: -> text(value=$TRY.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TRY108!=null?TRY108.getText():null)));
                      }


                    }

                    }
                    break;
                case 67 :
                    // CSharpAngular.g:1280:5: TYPEOF
                    {
                    TYPEOF109=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_cast_disambiguation_token8883); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1280:25: -> text(value=$TYPEOF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TYPEOF109!=null?TYPEOF109.getText():null)));
                      }


                    }

                    }
                    break;
                case 68 :
                    // CSharpAngular.g:1281:5: UINT
                    {
                    UINT110=(Token)match(input,UINT,FOLLOW_UINT_in_cast_disambiguation_token8910); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1281:25: -> text(value=$UINT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UINT110!=null?UINT110.getText():null)));
                      }


                    }

                    }
                    break;
                case 69 :
                    // CSharpAngular.g:1282:5: ULONG
                    {
                    ULONG111=(Token)match(input,ULONG,FOLLOW_ULONG_in_cast_disambiguation_token8939); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1282:25: -> text(value=$ULONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ULONG111!=null?ULONG111.getText():null)));
                      }


                    }

                    }
                    break;
                case 70 :
                    // CSharpAngular.g:1283:5: UNCHECKED
                    {
                    UNCHECKED112=(Token)match(input,UNCHECKED,FOLLOW_UNCHECKED_in_cast_disambiguation_token8967); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1283:25: -> text(value=$UNCHECKED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNCHECKED112!=null?UNCHECKED112.getText():null)));
                      }


                    }

                    }
                    break;
                case 71 :
                    // CSharpAngular.g:1284:5: UNSAFE
                    {
                    UNSAFE113=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_cast_disambiguation_token8991); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1284:25: -> text(value=$UNSAFE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE113!=null?UNSAFE113.getText():null)));
                      }


                    }

                    }
                    break;
                case 72 :
                    // CSharpAngular.g:1285:5: USHORT
                    {
                    USHORT114=(Token)match(input,USHORT,FOLLOW_USHORT_in_cast_disambiguation_token9018); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1285:25: -> text(value=$USHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (USHORT114!=null?USHORT114.getText():null)));
                      }


                    }

                    }
                    break;
                case 73 :
                    // CSharpAngular.g:1286:5: USING
                    {
                    USING115=(Token)match(input,USING,FOLLOW_USING_in_cast_disambiguation_token9045); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1286:25: -> text(value=$USING.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (USING115!=null?USING115.getText():null)));
                      }


                    }

                    }
                    break;
                case 74 :
                    // CSharpAngular.g:1287:5: VIRTUAL
                    {
                    VIRTUAL116=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_cast_disambiguation_token9073); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1287:25: -> text(value=$VIRTUAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VIRTUAL116!=null?VIRTUAL116.getText():null)));
                      }


                    }

                    }
                    break;
                case 75 :
                    // CSharpAngular.g:1288:5: VOID
                    {
                    VOID117=(Token)match(input,VOID,FOLLOW_VOID_in_cast_disambiguation_token9099); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1288:25: -> text(value=$VOID.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VOID117!=null?VOID117.getText():null)));
                      }


                    }

                    }
                    break;
                case 76 :
                    // CSharpAngular.g:1289:5: VOLATILE
                    {
                    VOLATILE118=(Token)match(input,VOLATILE,FOLLOW_VOLATILE_in_cast_disambiguation_token9128); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1289:25: -> text(value=$VOLATILE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VOLATILE118!=null?VOLATILE118.getText():null)));
                      }


                    }

                    }
                    break;
                case 77 :
                    // CSharpAngular.g:1290:5: WHILE
                    {
                    WHILE119=(Token)match(input,WHILE,FOLLOW_WHILE_in_cast_disambiguation_token9153); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1290:25: -> text(value=$WHILE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (WHILE119!=null?WHILE119.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_disambiguation_token"


    public static class pre_increment_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "pre_increment_expression"
    // CSharpAngular.g:1293:1: pre_increment_expression : OP_INC expr= unary_expression -> preIncrementExpression(optr=$OP_INC.textexpression=expr);
    public final CSharpAngular.pre_increment_expression_return pre_increment_expression() throws RecognitionException {
        CSharpAngular.pre_increment_expression_return retval = new CSharpAngular.pre_increment_expression_return();
        retval.start = input.LT(1);


        Token OP_INC120=null;
        CSharpAngular.unary_expression_return expr =null;


        try {
            // CSharpAngular.g:1294:2: ( OP_INC expr= unary_expression -> preIncrementExpression(optr=$OP_INC.textexpression=expr))
            // CSharpAngular.g:1295:2: OP_INC expr= unary_expression
            {
            OP_INC120=(Token)match(input,OP_INC,FOLLOW_OP_INC_in_pre_increment_expression9190); if (state.failed) return retval;

            pushFollow(FOLLOW_unary_expression_in_pre_increment_expression9194);
            expr=unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1296:2: -> preIncrementExpression(optr=$OP_INC.textexpression=expr)
              {
                  retval.st = templateLib.getInstanceOf("preIncrementExpression",new STAttrMap().put("optr", (OP_INC120!=null?OP_INC120.getText():null)).put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pre_increment_expression"


    public static class pre_decrement_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "pre_decrement_expression"
    // CSharpAngular.g:1298:1: pre_decrement_expression : OP_DEC expr= unary_expression -> preDecrementExpression(optr=$OP_DEC.textexpression=expr);
    public final CSharpAngular.pre_decrement_expression_return pre_decrement_expression() throws RecognitionException {
        CSharpAngular.pre_decrement_expression_return retval = new CSharpAngular.pre_decrement_expression_return();
        retval.start = input.LT(1);


        Token OP_DEC121=null;
        CSharpAngular.unary_expression_return expr =null;


        try {
            // CSharpAngular.g:1299:2: ( OP_DEC expr= unary_expression -> preDecrementExpression(optr=$OP_DEC.textexpression=expr))
            // CSharpAngular.g:1300:2: OP_DEC expr= unary_expression
            {
            OP_DEC121=(Token)match(input,OP_DEC,FOLLOW_OP_DEC_in_pre_decrement_expression9220); if (state.failed) return retval;

            pushFollow(FOLLOW_unary_expression_in_pre_decrement_expression9224);
            expr=unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1301:2: -> preDecrementExpression(optr=$OP_DEC.textexpression=expr)
              {
                  retval.st = templateLib.getInstanceOf("preDecrementExpression",new STAttrMap().put("optr", (OP_DEC121!=null?OP_DEC121.getText():null)).put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pre_decrement_expression"


    public static class cast_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "cast_expression"
    // CSharpAngular.g:1303:1: cast_expression : OPEN_PARENS t= type CLOSE_PARENS uExpr= unary_expression -> castExpression(type=tunaryExpr=uExpr);
    public final CSharpAngular.cast_expression_return cast_expression() throws RecognitionException {
        CSharpAngular.cast_expression_return retval = new CSharpAngular.cast_expression_return();
        retval.start = input.LT(1);


        CSharpAngular.type_return t =null;

        CSharpAngular.unary_expression_return uExpr =null;


        try {
            // CSharpAngular.g:1304:2: ( OPEN_PARENS t= type CLOSE_PARENS uExpr= unary_expression -> castExpression(type=tunaryExpr=uExpr))
            // CSharpAngular.g:1305:2: OPEN_PARENS t= type CLOSE_PARENS uExpr= unary_expression
            {
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_cast_expression9250); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_cast_expression9254);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_cast_expression9256); if (state.failed) return retval;

            pushFollow(FOLLOW_unary_expression_in_cast_expression9260);
            uExpr=unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1306:2: -> castExpression(type=tunaryExpr=uExpr)
              {
                  retval.st = templateLib.getInstanceOf("castExpression",new STAttrMap().put("type", t).put("unaryExpr", uExpr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expression"


    public static class multiplicative_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "multiplicative_expression"
    // CSharpAngular.g:1308:1: multiplicative_expression : lhs= unary_expression (rhs+= multiplicative_expression_Chld )* -> multiplicativeExpression(lhs=lhsrhs=$rhs);
    public final CSharpAngular.multiplicative_expression_return multiplicative_expression() throws RecognitionException {
        CSharpAngular.multiplicative_expression_return retval = new CSharpAngular.multiplicative_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharpAngular.unary_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharpAngular.g:1309:2: (lhs= unary_expression (rhs+= multiplicative_expression_Chld )* -> multiplicativeExpression(lhs=lhsrhs=$rhs))
            // CSharpAngular.g:1310:2: lhs= unary_expression (rhs+= multiplicative_expression_Chld )*
            {
            pushFollow(FOLLOW_unary_expression_in_multiplicative_expression9288);
            lhs=unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1310:23: (rhs+= multiplicative_expression_Chld )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==DIV||LA83_0==PERCENT||LA83_0==STAR) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // CSharpAngular.g:1310:24: rhs+= multiplicative_expression_Chld
            	    {
            	    pushFollow(FOLLOW_multiplicative_expression_Chld_in_multiplicative_expression9293);
            	    rhs=multiplicative_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1311:2: -> multiplicativeExpression(lhs=lhsrhs=$rhs)
              {
                  retval.st = templateLib.getInstanceOf("multiplicativeExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multiplicative_expression"


    public static class multiplicative_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "multiplicative_expression_Chld"
    // CSharpAngular.g:1314:1: multiplicative_expression_Chld : ( STAR rhs= unary_expression -> multiplicativeExpressionChld(optr=$STAR.textrhs=rhs)| DIV rhs= unary_expression -> multiplicativeExpressionChld(optr=$DIV.textrhs=rhs)| PERCENT rhs= unary_expression -> multiplicativeExpressionChld(optr=$PERCENTrhs=rhs));
    public final CSharpAngular.multiplicative_expression_Chld_return multiplicative_expression_Chld() throws RecognitionException {
        CSharpAngular.multiplicative_expression_Chld_return retval = new CSharpAngular.multiplicative_expression_Chld_return();
        retval.start = input.LT(1);


        Token STAR122=null;
        Token DIV123=null;
        Token PERCENT124=null;
        CSharpAngular.unary_expression_return rhs =null;


        try {
            // CSharpAngular.g:1315:2: ( STAR rhs= unary_expression -> multiplicativeExpressionChld(optr=$STAR.textrhs=rhs)| DIV rhs= unary_expression -> multiplicativeExpressionChld(optr=$DIV.textrhs=rhs)| PERCENT rhs= unary_expression -> multiplicativeExpressionChld(optr=$PERCENTrhs=rhs))
            int alt84=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt84=1;
                }
                break;
            case DIV:
                {
                alt84=2;
                }
                break;
            case PERCENT:
                {
                alt84=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;

            }

            switch (alt84) {
                case 1 :
                    // CSharpAngular.g:1316:2: STAR rhs= unary_expression
                    {
                    STAR122=(Token)match(input,STAR,FOLLOW_STAR_in_multiplicative_expression_Chld9321); if (state.failed) return retval;

                    pushFollow(FOLLOW_unary_expression_in_multiplicative_expression_Chld9326);
                    rhs=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1317:2: -> multiplicativeExpressionChld(optr=$STAR.textrhs=rhs)
                      {
                          retval.st = templateLib.getInstanceOf("multiplicativeExpressionChld",new STAttrMap().put("optr", (STAR122!=null?STAR122.getText():null)).put("rhs", rhs));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1318:3: DIV rhs= unary_expression
                    {
                    DIV123=(Token)match(input,DIV,FOLLOW_DIV_in_multiplicative_expression_Chld9344); if (state.failed) return retval;

                    pushFollow(FOLLOW_unary_expression_in_multiplicative_expression_Chld9349);
                    rhs=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1319:2: -> multiplicativeExpressionChld(optr=$DIV.textrhs=rhs)
                      {
                          retval.st = templateLib.getInstanceOf("multiplicativeExpressionChld",new STAttrMap().put("optr", (DIV123!=null?DIV123.getText():null)).put("rhs", rhs));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:1320:3: PERCENT rhs= unary_expression
                    {
                    PERCENT124=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_multiplicative_expression_Chld9367); if (state.failed) return retval;

                    pushFollow(FOLLOW_unary_expression_in_multiplicative_expression_Chld9372);
                    rhs=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1321:2: -> multiplicativeExpressionChld(optr=$PERCENTrhs=rhs)
                      {
                          retval.st = templateLib.getInstanceOf("multiplicativeExpressionChld",new STAttrMap().put("optr", PERCENT124).put("rhs", rhs));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multiplicative_expression_Chld"


    public static class additive_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "additive_expression"
    // CSharpAngular.g:1323:1: additive_expression : lhs= multiplicative_expression (rhs+= additive_expression_Chld )* -> additiveExpression(lhs=lhsrhs=$rhs);
    public final CSharpAngular.additive_expression_return additive_expression() throws RecognitionException {
        CSharpAngular.additive_expression_return retval = new CSharpAngular.additive_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharpAngular.multiplicative_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharpAngular.g:1324:2: (lhs= multiplicative_expression (rhs+= additive_expression_Chld )* -> additiveExpression(lhs=lhsrhs=$rhs))
            // CSharpAngular.g:1325:2: lhs= multiplicative_expression (rhs+= additive_expression_Chld )*
            {
            pushFollow(FOLLOW_multiplicative_expression_in_additive_expression9400);
            lhs=multiplicative_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1325:32: (rhs+= additive_expression_Chld )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==MINUS||LA85_0==PLUS||(LA85_0 >= SINGLE_LINE_COMMENT && LA85_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // CSharpAngular.g:1325:33: rhs+= additive_expression_Chld
            	    {
            	    pushFollow(FOLLOW_additive_expression_Chld_in_additive_expression9405);
            	    rhs=additive_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1326:2: -> additiveExpression(lhs=lhsrhs=$rhs)
              {
                  retval.st = templateLib.getInstanceOf("additiveExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "additive_expression"


    public static class additive_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "additive_expression_Chld"
    // CSharpAngular.g:1329:1: additive_expression_Chld : ( (cmnt1= comments )? PLUS (cmnt= comments )? rhs1= multiplicative_expression -> additiveExpressionChld(optr=$PLUS.textrhs=rhs1)| MINUS rhs2= multiplicative_expression -> additiveExpressionChld(optr=$MINUS.textrhs=rhs2));
    public final CSharpAngular.additive_expression_Chld_return additive_expression_Chld() throws RecognitionException {
        CSharpAngular.additive_expression_Chld_return retval = new CSharpAngular.additive_expression_Chld_return();
        retval.start = input.LT(1);


        Token PLUS125=null;
        Token MINUS126=null;
        CSharpAngular.comments_return cmnt1 =null;

        CSharpAngular.comments_return cmnt =null;

        CSharpAngular.multiplicative_expression_return rhs1 =null;

        CSharpAngular.multiplicative_expression_return rhs2 =null;


        try {
            // CSharpAngular.g:1330:2: ( (cmnt1= comments )? PLUS (cmnt= comments )? rhs1= multiplicative_expression -> additiveExpressionChld(optr=$PLUS.textrhs=rhs1)| MINUS rhs2= multiplicative_expression -> additiveExpressionChld(optr=$MINUS.textrhs=rhs2))
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==PLUS||(LA88_0 >= SINGLE_LINE_COMMENT && LA88_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt88=1;
            }
            else if ( (LA88_0==MINUS) ) {
                alt88=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;

            }
            switch (alt88) {
                case 1 :
                    // CSharpAngular.g:1331:2: (cmnt1= comments )? PLUS (cmnt= comments )? rhs1= multiplicative_expression
                    {
                    // CSharpAngular.g:1331:2: (cmnt1= comments )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( ((LA86_0 >= SINGLE_LINE_COMMENT && LA86_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // CSharpAngular.g:1331:3: cmnt1= comments
                            {
                            pushFollow(FOLLOW_comments_in_additive_expression_Chld9436);
                            cmnt1=comments();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    PLUS125=(Token)match(input,PLUS,FOLLOW_PLUS_in_additive_expression_Chld9440); if (state.failed) return retval;

                    // CSharpAngular.g:1331:25: (cmnt= comments )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( ((LA87_0 >= SINGLE_LINE_COMMENT && LA87_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // CSharpAngular.g:1331:26: cmnt= comments
                            {
                            pushFollow(FOLLOW_comments_in_additive_expression_Chld9445);
                            cmnt=comments();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_multiplicative_expression_in_additive_expression_Chld9451);
                    rhs1=multiplicative_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1332:2: -> additiveExpressionChld(optr=$PLUS.textrhs=rhs1)
                      {
                          retval.st = templateLib.getInstanceOf("additiveExpressionChld",new STAttrMap().put("optr", (PLUS125!=null?PLUS125.getText():null)).put("rhs", rhs1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1333:3: MINUS rhs2= multiplicative_expression
                    {
                    MINUS126=(Token)match(input,MINUS,FOLLOW_MINUS_in_additive_expression_Chld9468); if (state.failed) return retval;

                    pushFollow(FOLLOW_multiplicative_expression_in_additive_expression_Chld9473);
                    rhs2=multiplicative_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1334:2: -> additiveExpressionChld(optr=$MINUS.textrhs=rhs2)
                      {
                          retval.st = templateLib.getInstanceOf("additiveExpressionChld",new STAttrMap().put("optr", (MINUS126!=null?MINUS126.getText():null)).put("rhs", rhs2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "additive_expression_Chld"


    public static class shift_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "shift_expression"
    // CSharpAngular.g:1337:1: shift_expression : lhs= additive_expression (rhs+= shift_expression_Chld )* -> shiftExpression(lhs=lhsrhs=rhs);
    public final CSharpAngular.shift_expression_return shift_expression() throws RecognitionException {
        CSharpAngular.shift_expression_return retval = new CSharpAngular.shift_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharpAngular.additive_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharpAngular.g:1338:2: (lhs= additive_expression (rhs+= shift_expression_Chld )* -> shiftExpression(lhs=lhsrhs=rhs))
            // CSharpAngular.g:1339:2: lhs= additive_expression (rhs+= shift_expression_Chld )*
            {
            pushFollow(FOLLOW_additive_expression_in_shift_expression9503);
            lhs=additive_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1339:26: (rhs+= shift_expression_Chld )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==GT) ) {
                    int LA89_2 = input.LA(2);

                    if ( (LA89_2==GT) ) {
                        alt89=1;
                    }


                }
                else if ( (LA89_0==OP_LEFT_SHIFT) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // CSharpAngular.g:1339:27: rhs+= shift_expression_Chld
            	    {
            	    pushFollow(FOLLOW_shift_expression_Chld_in_shift_expression9508);
            	    rhs=shift_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1340:2: -> shiftExpression(lhs=lhsrhs=rhs)
              {
                  retval.st = templateLib.getInstanceOf("shiftExpression",new STAttrMap().put("lhs", lhs).put("rhs", rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "shift_expression"


    public static class shift_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "shift_expression_Chld"
    // CSharpAngular.g:1343:1: shift_expression_Chld : ( OP_LEFT_SHIFT rhs1= additive_expression -> shiftExpressionChld(optr=$OP_LEFT_SHIFT.textrhs=rhs1)|rs= right_shift rhs2= additive_expression -> shiftExpressionChld(optr=rsrhs=rhs2));
    public final CSharpAngular.shift_expression_Chld_return shift_expression_Chld() throws RecognitionException {
        CSharpAngular.shift_expression_Chld_return retval = new CSharpAngular.shift_expression_Chld_return();
        retval.start = input.LT(1);


        Token OP_LEFT_SHIFT127=null;
        CSharpAngular.additive_expression_return rhs1 =null;

        CSharpAngular.right_shift_return rs =null;

        CSharpAngular.additive_expression_return rhs2 =null;


        try {
            // CSharpAngular.g:1344:2: ( OP_LEFT_SHIFT rhs1= additive_expression -> shiftExpressionChld(optr=$OP_LEFT_SHIFT.textrhs=rhs1)|rs= right_shift rhs2= additive_expression -> shiftExpressionChld(optr=rsrhs=rhs2))
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==OP_LEFT_SHIFT) ) {
                alt90=1;
            }
            else if ( (LA90_0==GT) ) {
                alt90=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;

            }
            switch (alt90) {
                case 1 :
                    // CSharpAngular.g:1345:2: OP_LEFT_SHIFT rhs1= additive_expression
                    {
                    OP_LEFT_SHIFT127=(Token)match(input,OP_LEFT_SHIFT,FOLLOW_OP_LEFT_SHIFT_in_shift_expression_Chld9536); if (state.failed) return retval;

                    pushFollow(FOLLOW_additive_expression_in_shift_expression_Chld9541);
                    rhs1=additive_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1346:2: -> shiftExpressionChld(optr=$OP_LEFT_SHIFT.textrhs=rhs1)
                      {
                          retval.st = templateLib.getInstanceOf("shiftExpressionChld",new STAttrMap().put("optr", (OP_LEFT_SHIFT127!=null?OP_LEFT_SHIFT127.getText():null)).put("rhs", rhs1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1347:3: rs= right_shift rhs2= additive_expression
                    {
                    pushFollow(FOLLOW_right_shift_in_shift_expression_Chld9560);
                    rs=right_shift();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_additive_expression_in_shift_expression_Chld9565);
                    rhs2=additive_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1348:2: -> shiftExpressionChld(optr=rsrhs=rhs2)
                      {
                          retval.st = templateLib.getInstanceOf("shiftExpressionChld",new STAttrMap().put("optr", rs).put("rhs", rhs2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "shift_expression_Chld"


    public static class relational_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "relational_expression"
    // CSharpAngular.g:1351:1: relational_expression : ( ( shift_expression ({...}?) )=>lhs1= shift_expression (rhs1+= relational_expression_Chld )* -> relationalasExpression(lhs=lhs1rhs=rhs1)|lhs= shift_expression (rhs+= relational_expression_Chld )* -> relationalExpression(lhs=lhsrhs=$rhs));
    public final CSharpAngular.relational_expression_return relational_expression() throws RecognitionException {
        CSharpAngular.relational_expression_return retval = new CSharpAngular.relational_expression_return();
        retval.start = input.LT(1);


        List list_rhs1=null;
        List list_rhs=null;
        CSharpAngular.shift_expression_return lhs1 =null;

        CSharpAngular.shift_expression_return lhs =null;

        RuleReturnScope rhs1 = null;
        RuleReturnScope rhs = null;
        try {
            // CSharpAngular.g:1352:3: ( ( shift_expression ({...}?) )=>lhs1= shift_expression (rhs1+= relational_expression_Chld )* -> relationalasExpression(lhs=lhs1rhs=rhs1)|lhs= shift_expression (rhs+= relational_expression_Chld )* -> relationalExpression(lhs=lhsrhs=$rhs))
            int alt93=2;
            switch ( input.LA(1) ) {
            case OPEN_PARENS:
                {
                int LA93_1 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 1, input);

                    throw nvae;

                }
                }
                break;
            case TRUE:
                {
                int LA93_2 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 2, input);

                    throw nvae;

                }
                }
                break;
            case FALSE:
                {
                int LA93_3 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 3, input);

                    throw nvae;

                }
                }
                break;
            case INTEGER_LITERAL:
                {
                int LA93_4 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 4, input);

                    throw nvae;

                }
                }
                break;
            case REAL_LITERAL:
                {
                int LA93_5 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 5, input);

                    throw nvae;

                }
                }
                break;
            case CHARACTER_LITERAL:
                {
                int LA93_6 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 6, input);

                    throw nvae;

                }
                }
                break;
            case STRING_LITERAL:
                {
                int LA93_7 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 7, input);

                    throw nvae;

                }
                }
                break;
            case NULL:
                {
                int LA93_8 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 8, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA93_9 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 9, input);

                    throw nvae;

                }
                }
                break;
            case BOOL:
                {
                int LA93_10 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 10, input);

                    throw nvae;

                }
                }
                break;
            case BYTE:
                {
                int LA93_11 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 11, input);

                    throw nvae;

                }
                }
                break;
            case CHAR:
                {
                int LA93_12 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 12, input);

                    throw nvae;

                }
                }
                break;
            case DECIMAL:
                {
                int LA93_13 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 13, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE:
                {
                int LA93_14 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 14, input);

                    throw nvae;

                }
                }
                break;
            case FLOAT:
                {
                int LA93_15 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 15, input);

                    throw nvae;

                }
                }
                break;
            case INT:
                {
                int LA93_16 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 16, input);

                    throw nvae;

                }
                }
                break;
            case LONG:
                {
                int LA93_17 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 17, input);

                    throw nvae;

                }
                }
                break;
            case OBJECT:
                {
                int LA93_18 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 18, input);

                    throw nvae;

                }
                }
                break;
            case SBYTE:
                {
                int LA93_19 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 19, input);

                    throw nvae;

                }
                }
                break;
            case SHORT:
                {
                int LA93_20 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 20, input);

                    throw nvae;

                }
                }
                break;
            case STRING:
                {
                int LA93_21 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 21, input);

                    throw nvae;

                }
                }
                break;
            case UINT:
                {
                int LA93_22 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 22, input);

                    throw nvae;

                }
                }
                break;
            case ULONG:
                {
                int LA93_23 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 23, input);

                    throw nvae;

                }
                }
                break;
            case USHORT:
                {
                int LA93_24 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 24, input);

                    throw nvae;

                }
                }
                break;
            case THIS:
                {
                int LA93_25 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 25, input);

                    throw nvae;

                }
                }
                break;
            case BASE:
                {
                int LA93_26 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 26, input);

                    throw nvae;

                }
                }
                break;
            case NEW:
                {
                int LA93_27 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 27, input);

                    throw nvae;

                }
                }
                break;
            case TYPEOF:
                {
                int LA93_28 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 28, input);

                    throw nvae;

                }
                }
                break;
            case CHECKED:
                {
                int LA93_29 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 29, input);

                    throw nvae;

                }
                }
                break;
            case UNCHECKED:
                {
                int LA93_30 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 30, input);

                    throw nvae;

                }
                }
                break;
            case DEFAULT:
                {
                int LA93_31 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 31, input);

                    throw nvae;

                }
                }
                break;
            case DELEGATE:
                {
                int LA93_32 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 32, input);

                    throw nvae;

                }
                }
                break;
            case SIZEOF:
                {
                int LA93_33 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 33, input);

                    throw nvae;

                }
                }
                break;
            case PLUS:
                {
                int LA93_34 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 34, input);

                    throw nvae;

                }
                }
                break;
            case MINUS:
                {
                int LA93_35 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 35, input);

                    throw nvae;

                }
                }
                break;
            case BANG:
                {
                int LA93_36 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 36, input);

                    throw nvae;

                }
                }
                break;
            case TILDE:
                {
                int LA93_37 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 37, input);

                    throw nvae;

                }
                }
                break;
            case OP_INC:
                {
                int LA93_38 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 38, input);

                    throw nvae;

                }
                }
                break;
            case OP_DEC:
                {
                int LA93_39 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 39, input);

                    throw nvae;

                }
                }
                break;
            case STAR:
                {
                int LA93_40 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 40, input);

                    throw nvae;

                }
                }
                break;
            case AMP:
                {
                int LA93_41 = input.LA(2);

                if ( (synpred55_CSharpAngular()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 41, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;

            }

            switch (alt93) {
                case 1 :
                    // CSharpAngular.g:1353:3: ( shift_expression ({...}?) )=>lhs1= shift_expression (rhs1+= relational_expression_Chld )*
                    {
                    pushFollow(FOLLOW_shift_expression_in_relational_expression9605);
                    lhs1=shift_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharpAngular.g:1353:88: (rhs1+= relational_expression_Chld )*
                    loop91:
                    do {
                        int alt91=2;
                        int LA91_0 = input.LA(1);

                        if ( (LA91_0==AS||LA91_0==GT||LA91_0==IS||LA91_0==LT||LA91_0==OP_GE||LA91_0==OP_LE) ) {
                            alt91=1;
                        }


                        switch (alt91) {
                    	case 1 :
                    	    // CSharpAngular.g:1353:89: rhs1+= relational_expression_Chld
                    	    {
                    	    pushFollow(FOLLOW_relational_expression_Chld_in_relational_expression9611);
                    	    rhs1=relational_expression_Chld();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_rhs1==null) list_rhs1=new ArrayList();
                    	    list_rhs1.add(rhs1.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    break loop91;
                        }
                    } while (true);


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1354:3: -> relationalasExpression(lhs=lhs1rhs=rhs1)
                      {
                          retval.st = templateLib.getInstanceOf("relationalasExpression",new STAttrMap().put("lhs", lhs1).put("rhs", rhs1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1356:3: lhs= shift_expression (rhs+= relational_expression_Chld )*
                    {
                    pushFollow(FOLLOW_shift_expression_in_relational_expression9638);
                    lhs=shift_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharpAngular.g:1356:25: (rhs+= relational_expression_Chld )*
                    loop92:
                    do {
                        int alt92=2;
                        int LA92_0 = input.LA(1);

                        if ( (LA92_0==AS||LA92_0==GT||LA92_0==IS||LA92_0==LT||LA92_0==OP_GE||LA92_0==OP_LE) ) {
                            alt92=1;
                        }


                        switch (alt92) {
                    	case 1 :
                    	    // CSharpAngular.g:1356:26: rhs+= relational_expression_Chld
                    	    {
                    	    pushFollow(FOLLOW_relational_expression_Chld_in_relational_expression9644);
                    	    rhs=relational_expression_Chld();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_rhs==null) list_rhs=new ArrayList();
                    	    list_rhs.add(rhs.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    break loop92;
                        }
                    } while (true);


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1357:3: -> relationalExpression(lhs=lhsrhs=$rhs)
                      {
                          retval.st = templateLib.getInstanceOf("relationalExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "relational_expression"


    public static class relational_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "relational_expression_Chld"
    // CSharpAngular.g:1360:1: relational_expression_Chld : ( LT rhs1= shift_expression -> relationalExpressionChld(optr=$LT.textrhs=rhs1)| GT rhs2= shift_expression -> relationalExpressionChld(optr=$GT.textrhs=rhs2)| OP_LE rhs3= shift_expression -> relationalExpressionChld(optr=$OP_LE.textrhs=rhs3)| OP_GE rhs4= shift_expression -> relationalExpressionChld(optr=$OP_GE.textrhs=rhs4)| IS rhs5= isType -> relationalExpressionChld(optr=$IS.textrhs=rhs5)| AS rhs6= type -> text(value=\"(\"+rhs6+\")\"));
    public final CSharpAngular.relational_expression_Chld_return relational_expression_Chld() throws RecognitionException {
        CSharpAngular.relational_expression_Chld_return retval = new CSharpAngular.relational_expression_Chld_return();
        retval.start = input.LT(1);


        Token LT128=null;
        Token GT129=null;
        Token OP_LE130=null;
        Token OP_GE131=null;
        Token IS132=null;
        CSharpAngular.shift_expression_return rhs1 =null;

        CSharpAngular.shift_expression_return rhs2 =null;

        CSharpAngular.shift_expression_return rhs3 =null;

        CSharpAngular.shift_expression_return rhs4 =null;

        CSharpAngular.isType_return rhs5 =null;

        CSharpAngular.type_return rhs6 =null;


        try {
            // CSharpAngular.g:1361:2: ( LT rhs1= shift_expression -> relationalExpressionChld(optr=$LT.textrhs=rhs1)| GT rhs2= shift_expression -> relationalExpressionChld(optr=$GT.textrhs=rhs2)| OP_LE rhs3= shift_expression -> relationalExpressionChld(optr=$OP_LE.textrhs=rhs3)| OP_GE rhs4= shift_expression -> relationalExpressionChld(optr=$OP_GE.textrhs=rhs4)| IS rhs5= isType -> relationalExpressionChld(optr=$IS.textrhs=rhs5)| AS rhs6= type -> text(value=\"(\"+rhs6+\")\"))
            int alt94=6;
            switch ( input.LA(1) ) {
            case LT:
                {
                alt94=1;
                }
                break;
            case GT:
                {
                alt94=2;
                }
                break;
            case OP_LE:
                {
                alt94=3;
                }
                break;
            case OP_GE:
                {
                alt94=4;
                }
                break;
            case IS:
                {
                alt94=5;
                }
                break;
            case AS:
                {
                alt94=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;

            }

            switch (alt94) {
                case 1 :
                    // CSharpAngular.g:1362:2: LT rhs1= shift_expression
                    {
                    LT128=(Token)match(input,LT,FOLLOW_LT_in_relational_expression_Chld9691); if (state.failed) return retval;

                    pushFollow(FOLLOW_shift_expression_in_relational_expression_Chld9695);
                    rhs1=shift_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1363:2: -> relationalExpressionChld(optr=$LT.textrhs=rhs1)
                      {
                          retval.st = templateLib.getInstanceOf("relationalExpressionChld",new STAttrMap().put("optr", (LT128!=null?LT128.getText():null)).put("rhs", rhs1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1364:5: GT rhs2= shift_expression
                    {
                    GT129=(Token)match(input,GT,FOLLOW_GT_in_relational_expression_Chld9714); if (state.failed) return retval;

                    pushFollow(FOLLOW_shift_expression_in_relational_expression_Chld9718);
                    rhs2=shift_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1365:3: -> relationalExpressionChld(optr=$GT.textrhs=rhs2)
                      {
                          retval.st = templateLib.getInstanceOf("relationalExpressionChld",new STAttrMap().put("optr", (GT129!=null?GT129.getText():null)).put("rhs", rhs2));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:1366:5: OP_LE rhs3= shift_expression
                    {
                    OP_LE130=(Token)match(input,OP_LE,FOLLOW_OP_LE_in_relational_expression_Chld9738); if (state.failed) return retval;

                    pushFollow(FOLLOW_shift_expression_in_relational_expression_Chld9742);
                    rhs3=shift_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1367:3: -> relationalExpressionChld(optr=$OP_LE.textrhs=rhs3)
                      {
                          retval.st = templateLib.getInstanceOf("relationalExpressionChld",new STAttrMap().put("optr", (OP_LE130!=null?OP_LE130.getText():null)).put("rhs", rhs3));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:1368:5: OP_GE rhs4= shift_expression
                    {
                    OP_GE131=(Token)match(input,OP_GE,FOLLOW_OP_GE_in_relational_expression_Chld9762); if (state.failed) return retval;

                    pushFollow(FOLLOW_shift_expression_in_relational_expression_Chld9766);
                    rhs4=shift_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1369:3: -> relationalExpressionChld(optr=$OP_GE.textrhs=rhs4)
                      {
                          retval.st = templateLib.getInstanceOf("relationalExpressionChld",new STAttrMap().put("optr", (OP_GE131!=null?OP_GE131.getText():null)).put("rhs", rhs4));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:1370:5: IS rhs5= isType
                    {
                    IS132=(Token)match(input,IS,FOLLOW_IS_in_relational_expression_Chld9786); if (state.failed) return retval;

                    pushFollow(FOLLOW_isType_in_relational_expression_Chld9790);
                    rhs5=isType();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1371:3: -> relationalExpressionChld(optr=$IS.textrhs=rhs5)
                      {
                          retval.st = templateLib.getInstanceOf("relationalExpressionChld",new STAttrMap().put("optr", (IS132!=null?IS132.getText():null)).put("rhs", rhs5));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:1372:5: AS rhs6= type
                    {
                    match(input,AS,FOLLOW_AS_in_relational_expression_Chld9810); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_relational_expression_Chld9814);
                    rhs6=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1373:3: -> text(value=\"(\"+rhs6+\")\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "("+rhs6+")"));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "relational_expression_Chld"


    public static class scan_for_shift_generic_precedence_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "scan_for_shift_generic_precedence"
    // CSharpAngular.g:1377:1: scan_for_shift_generic_precedence : IDENTIFIER LT type ( COMMA type )* GT shift_disambiguation_token ;
    public final CSharpAngular.scan_for_shift_generic_precedence_return scan_for_shift_generic_precedence() throws RecognitionException {
        CSharpAngular.scan_for_shift_generic_precedence_return retval = new CSharpAngular.scan_for_shift_generic_precedence_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:1378:3: ( IDENTIFIER LT type ( COMMA type )* GT shift_disambiguation_token )
            // CSharpAngular.g:1378:5: IDENTIFIER LT type ( COMMA type )* GT shift_disambiguation_token
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_scan_for_shift_generic_precedence9857); if (state.failed) return retval;

            match(input,LT,FOLLOW_LT_in_scan_for_shift_generic_precedence9859); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_scan_for_shift_generic_precedence9861);
            type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1378:24: ( COMMA type )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==COMMA) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // CSharpAngular.g:1378:25: COMMA type
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_scan_for_shift_generic_precedence9864); if (state.failed) return retval;

            	    pushFollow(FOLLOW_type_in_scan_for_shift_generic_precedence9866);
            	    type();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            match(input,GT,FOLLOW_GT_in_scan_for_shift_generic_precedence9870); if (state.failed) return retval;

            pushFollow(FOLLOW_shift_disambiguation_token_in_scan_for_shift_generic_precedence9872);
            shift_disambiguation_token();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "scan_for_shift_generic_precedence"


    public static class shift_disambiguation_token_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "shift_disambiguation_token"
    // CSharpAngular.g:1383:1: shift_disambiguation_token : ( OPEN_PARENS -> text(value=$OPEN_PARENS.text)| CLOSE_PARENS -> text(value=$CLOSE_PARENS.text)| CLOSE_BRACKET -> text(value=$CLOSE_BRACKET.text)| COLON -> text(value=$COLON.text)| SEMICOLON -> text(value=$SEMICOLON.text)| COMMA -> text(value=$COMMA.text)| DOT -> text(value=$DOT.text)| INTERR -> text(value=\"\")| OP_EQ -> text(value=$OP_EQ.text)| OP_NE -> text(value=$OP_NE.text)| GT -> text(value=$GT.text));
    public final CSharpAngular.shift_disambiguation_token_return shift_disambiguation_token() throws RecognitionException {
        CSharpAngular.shift_disambiguation_token_return retval = new CSharpAngular.shift_disambiguation_token_return();
        retval.start = input.LT(1);


        Token OPEN_PARENS133=null;
        Token CLOSE_PARENS134=null;
        Token CLOSE_BRACKET135=null;
        Token COLON136=null;
        Token SEMICOLON137=null;
        Token COMMA138=null;
        Token DOT139=null;
        Token OP_EQ140=null;
        Token OP_NE141=null;
        Token GT142=null;

        try {
            // CSharpAngular.g:1384:3: ( OPEN_PARENS -> text(value=$OPEN_PARENS.text)| CLOSE_PARENS -> text(value=$CLOSE_PARENS.text)| CLOSE_BRACKET -> text(value=$CLOSE_BRACKET.text)| COLON -> text(value=$COLON.text)| SEMICOLON -> text(value=$SEMICOLON.text)| COMMA -> text(value=$COMMA.text)| DOT -> text(value=$DOT.text)| INTERR -> text(value=\"\")| OP_EQ -> text(value=$OP_EQ.text)| OP_NE -> text(value=$OP_NE.text)| GT -> text(value=$GT.text))
            int alt96=11;
            switch ( input.LA(1) ) {
            case OPEN_PARENS:
                {
                alt96=1;
                }
                break;
            case CLOSE_PARENS:
                {
                alt96=2;
                }
                break;
            case CLOSE_BRACKET:
                {
                alt96=3;
                }
                break;
            case COLON:
                {
                alt96=4;
                }
                break;
            case SEMICOLON:
                {
                alt96=5;
                }
                break;
            case COMMA:
                {
                alt96=6;
                }
                break;
            case DOT:
                {
                alt96=7;
                }
                break;
            case INTERR:
                {
                alt96=8;
                }
                break;
            case OP_EQ:
                {
                alt96=9;
                }
                break;
            case OP_NE:
                {
                alt96=10;
                }
                break;
            case GT:
                {
                alt96=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;

            }

            switch (alt96) {
                case 1 :
                    // CSharpAngular.g:1385:3: OPEN_PARENS
                    {
                    OPEN_PARENS133=(Token)match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_shift_disambiguation_token9890); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1385:24: -> text(value=$OPEN_PARENS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OPEN_PARENS133!=null?OPEN_PARENS133.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1386:5: CLOSE_PARENS
                    {
                    CLOSE_PARENS134=(Token)match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_shift_disambiguation_token9913); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1386:24: -> text(value=$CLOSE_PARENS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CLOSE_PARENS134!=null?CLOSE_PARENS134.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:1387:5: CLOSE_BRACKET
                    {
                    CLOSE_BRACKET135=(Token)match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_shift_disambiguation_token9933); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1387:24: -> text(value=$CLOSE_BRACKET.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CLOSE_BRACKET135!=null?CLOSE_BRACKET135.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:1388:5: COLON
                    {
                    COLON136=(Token)match(input,COLON,FOLLOW_COLON_in_shift_disambiguation_token9952); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1388:24: -> text(value=$COLON.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (COLON136!=null?COLON136.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:1389:5: SEMICOLON
                    {
                    SEMICOLON137=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_shift_disambiguation_token9979); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1389:24: -> text(value=$SEMICOLON.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEMICOLON137!=null?SEMICOLON137.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:1390:5: COMMA
                    {
                    COMMA138=(Token)match(input,COMMA,FOLLOW_COMMA_in_shift_disambiguation_token10002); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1390:24: -> text(value=$COMMA.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (COMMA138!=null?COMMA138.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:1391:5: DOT
                    {
                    DOT139=(Token)match(input,DOT,FOLLOW_DOT_in_shift_disambiguation_token10029); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1391:24: -> text(value=$DOT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DOT139!=null?DOT139.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:1392:5: INTERR
                    {
                    match(input,INTERR,FOLLOW_INTERR_in_shift_disambiguation_token10058); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1392:24: -> text(value=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:1393:5: OP_EQ
                    {
                    OP_EQ140=(Token)match(input,OP_EQ,FOLLOW_OP_EQ_in_shift_disambiguation_token10084); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1393:24: -> text(value=$OP_EQ.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_EQ140!=null?OP_EQ140.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:1394:5: OP_NE
                    {
                    OP_NE141=(Token)match(input,OP_NE,FOLLOW_OP_NE_in_shift_disambiguation_token10111); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1394:24: -> text(value=$OP_NE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_NE141!=null?OP_NE141.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:1395:5: GT
                    {
                    GT142=(Token)match(input,GT,FOLLOW_GT_in_shift_disambiguation_token10138); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1395:24: -> text(value=$GT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (GT142!=null?GT142.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "shift_disambiguation_token"


    public static class isType_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "isType"
    // CSharpAngular.g:1399:1: isType : typ= non_nullable_value_type ( ( INTERR is_disambiguation_token )=> INTERR )? -> isType(type=typopt=\"\");
    public final CSharpAngular.isType_return isType() throws RecognitionException {
        CSharpAngular.isType_return retval = new CSharpAngular.isType_return();
        retval.start = input.LT(1);


        CSharpAngular.non_nullable_value_type_return typ =null;


        try {
            // CSharpAngular.g:1400:3: (typ= non_nullable_value_type ( ( INTERR is_disambiguation_token )=> INTERR )? -> isType(type=typopt=\"\"))
            // CSharpAngular.g:1401:3: typ= non_nullable_value_type ( ( INTERR is_disambiguation_token )=> INTERR )?
            {
            pushFollow(FOLLOW_non_nullable_value_type_in_isType10181);
            typ=non_nullable_value_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1401:31: ( ( INTERR is_disambiguation_token )=> INTERR )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==INTERR) ) {
                int LA97_1 = input.LA(2);

                if ( (synpred56_CSharpAngular()) ) {
                    alt97=1;
                }
            }
            switch (alt97) {
                case 1 :
                    // CSharpAngular.g:1401:33: ( INTERR is_disambiguation_token )=> INTERR
                    {
                    match(input,INTERR,FOLLOW_INTERR_in_isType10193); if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1402:3: -> isType(type=typopt=\"\")
              {
                  retval.st = templateLib.getInstanceOf("isType",new STAttrMap().put("type", typ).put("opt", ""));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "isType"


    public static class is_disambiguation_token_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "is_disambiguation_token"
    // CSharpAngular.g:1404:1: is_disambiguation_token : ( CLOSE_PARENS -> text(value=$CLOSE_PARENS.text)| OP_AND -> text(value=$OP_AND.text)| OP_OR -> text(value=$OP_OR.text)| INTERR -> text(value=\"\"));
    public final CSharpAngular.is_disambiguation_token_return is_disambiguation_token() throws RecognitionException {
        CSharpAngular.is_disambiguation_token_return retval = new CSharpAngular.is_disambiguation_token_return();
        retval.start = input.LT(1);


        Token CLOSE_PARENS143=null;
        Token OP_AND144=null;
        Token OP_OR145=null;

        try {
            // CSharpAngular.g:1405:3: ( CLOSE_PARENS -> text(value=$CLOSE_PARENS.text)| OP_AND -> text(value=$OP_AND.text)| OP_OR -> text(value=$OP_OR.text)| INTERR -> text(value=\"\"))
            int alt98=4;
            switch ( input.LA(1) ) {
            case CLOSE_PARENS:
                {
                alt98=1;
                }
                break;
            case OP_AND:
                {
                alt98=2;
                }
                break;
            case OP_OR:
                {
                alt98=3;
                }
                break;
            case INTERR:
                {
                alt98=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;

            }

            switch (alt98) {
                case 1 :
                    // CSharpAngular.g:1406:3: CLOSE_PARENS
                    {
                    CLOSE_PARENS143=(Token)match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_is_disambiguation_token10224); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1406:23: -> text(value=$CLOSE_PARENS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CLOSE_PARENS143!=null?CLOSE_PARENS143.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1407:5: OP_AND
                    {
                    OP_AND144=(Token)match(input,OP_AND,FOLLOW_OP_AND_in_is_disambiguation_token10245); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1407:23: -> text(value=$OP_AND.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_AND144!=null?OP_AND144.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:1408:5: OP_OR
                    {
                    OP_OR145=(Token)match(input,OP_OR,FOLLOW_OP_OR_in_is_disambiguation_token10270); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1408:23: -> text(value=$OP_OR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_OR145!=null?OP_OR145.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:1409:5: INTERR
                    {
                    match(input,INTERR,FOLLOW_INTERR_in_is_disambiguation_token10296); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1409:23: -> text(value=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "is_disambiguation_token"


    public static class equality_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "equality_expression"
    // CSharpAngular.g:1412:1: equality_expression : lhs= relational_expression (rhs+= equality_expression_Chld )* -> equalityExpression(lhs=lhsrhs=$rhs);
    public final CSharpAngular.equality_expression_return equality_expression() throws RecognitionException {
        CSharpAngular.equality_expression_return retval = new CSharpAngular.equality_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharpAngular.relational_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharpAngular.g:1413:2: (lhs= relational_expression (rhs+= equality_expression_Chld )* -> equalityExpression(lhs=lhsrhs=$rhs))
            // CSharpAngular.g:1414:2: lhs= relational_expression (rhs+= equality_expression_Chld )*
            {
            pushFollow(FOLLOW_relational_expression_in_equality_expression10332);
            lhs=relational_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1414:28: (rhs+= equality_expression_Chld )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==OP_EQ||LA99_0==OP_NE) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // CSharpAngular.g:1414:29: rhs+= equality_expression_Chld
            	    {
            	    pushFollow(FOLLOW_equality_expression_Chld_in_equality_expression10337);
            	    rhs=equality_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1415:2: -> equalityExpression(lhs=lhsrhs=$rhs)
              {
                  retval.st = templateLib.getInstanceOf("equalityExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "equality_expression"


    public static class equality_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "equality_expression_Chld"
    // CSharpAngular.g:1418:1: equality_expression_Chld : ( OP_EQ rhs1= relational_expression -> equalityExpressionChld(optr=$OP_EQ.textrhs=rhs1)| OP_NE rhs2= relational_expression -> equalityExpressionChld(optr=$OP_NE.textrhs=rhs2));
    public final CSharpAngular.equality_expression_Chld_return equality_expression_Chld() throws RecognitionException {
        CSharpAngular.equality_expression_Chld_return retval = new CSharpAngular.equality_expression_Chld_return();
        retval.start = input.LT(1);


        Token OP_EQ146=null;
        Token OP_NE147=null;
        CSharpAngular.relational_expression_return rhs1 =null;

        CSharpAngular.relational_expression_return rhs2 =null;


        try {
            // CSharpAngular.g:1419:2: ( OP_EQ rhs1= relational_expression -> equalityExpressionChld(optr=$OP_EQ.textrhs=rhs1)| OP_NE rhs2= relational_expression -> equalityExpressionChld(optr=$OP_NE.textrhs=rhs2))
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==OP_EQ) ) {
                alt100=1;
            }
            else if ( (LA100_0==OP_NE) ) {
                alt100=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;

            }
            switch (alt100) {
                case 1 :
                    // CSharpAngular.g:1420:2: OP_EQ rhs1= relational_expression
                    {
                    OP_EQ146=(Token)match(input,OP_EQ,FOLLOW_OP_EQ_in_equality_expression_Chld10365); if (state.failed) return retval;

                    pushFollow(FOLLOW_relational_expression_in_equality_expression_Chld10370);
                    rhs1=relational_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1421:2: -> equalityExpressionChld(optr=$OP_EQ.textrhs=rhs1)
                      {
                          retval.st = templateLib.getInstanceOf("equalityExpressionChld",new STAttrMap().put("optr", (OP_EQ146!=null?OP_EQ146.getText():null)).put("rhs", rhs1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1422:3: OP_NE rhs2= relational_expression
                    {
                    OP_NE147=(Token)match(input,OP_NE,FOLLOW_OP_NE_in_equality_expression_Chld10387); if (state.failed) return retval;

                    pushFollow(FOLLOW_relational_expression_in_equality_expression_Chld10392);
                    rhs2=relational_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1423:2: -> equalityExpressionChld(optr=$OP_NE.textrhs=rhs2)
                      {
                          retval.st = templateLib.getInstanceOf("equalityExpressionChld",new STAttrMap().put("optr", (OP_NE147!=null?OP_NE147.getText():null)).put("rhs", rhs2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "equality_expression_Chld"


    public static class and_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "and_expression"
    // CSharpAngular.g:1425:1: and_expression : lhs= equality_expression (rhs+= and_expression_Chld )* -> andExpression(lhs=lhsrhs=$rhs);
    public final CSharpAngular.and_expression_return and_expression() throws RecognitionException {
        CSharpAngular.and_expression_return retval = new CSharpAngular.and_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharpAngular.equality_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharpAngular.g:1426:3: (lhs= equality_expression (rhs+= and_expression_Chld )* -> andExpression(lhs=lhsrhs=$rhs))
            // CSharpAngular.g:1427:3: lhs= equality_expression (rhs+= and_expression_Chld )*
            {
            pushFollow(FOLLOW_equality_expression_in_and_expression10422);
            lhs=equality_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1427:27: (rhs+= and_expression_Chld )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==AMP) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // CSharpAngular.g:1427:29: rhs+= and_expression_Chld
            	    {
            	    pushFollow(FOLLOW_and_expression_Chld_in_and_expression10428);
            	    rhs=and_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1428:3: -> andExpression(lhs=lhsrhs=$rhs)
              {
                  retval.st = templateLib.getInstanceOf("andExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "and_expression"


    public static class and_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "and_expression_Chld"
    // CSharpAngular.g:1431:1: and_expression_Chld : AMP rhs= equality_expression -> andExpressionChld(optr=$AMP.textrhs=rhs);
    public final CSharpAngular.and_expression_Chld_return and_expression_Chld() throws RecognitionException {
        CSharpAngular.and_expression_Chld_return retval = new CSharpAngular.and_expression_Chld_return();
        retval.start = input.LT(1);


        Token AMP148=null;
        CSharpAngular.equality_expression_return rhs =null;


        try {
            // CSharpAngular.g:1432:3: ( AMP rhs= equality_expression -> andExpressionChld(optr=$AMP.textrhs=rhs))
            // CSharpAngular.g:1433:3: AMP rhs= equality_expression
            {
            AMP148=(Token)match(input,AMP,FOLLOW_AMP_in_and_expression_Chld10461); if (state.failed) return retval;

            pushFollow(FOLLOW_equality_expression_in_and_expression_Chld10465);
            rhs=equality_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1434:3: -> andExpressionChld(optr=$AMP.textrhs=rhs)
              {
                  retval.st = templateLib.getInstanceOf("andExpressionChld",new STAttrMap().put("optr", (AMP148!=null?AMP148.getText():null)).put("rhs", rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "and_expression_Chld"


    public static class exclusive_or_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "exclusive_or_expression"
    // CSharpAngular.g:1437:1: exclusive_or_expression : lhs= and_expression (rhs+= exclusive_or_expression_Chld )* -> exclusiveOrExpression(lhs=lhsrhs=$rhs);
    public final CSharpAngular.exclusive_or_expression_return exclusive_or_expression() throws RecognitionException {
        CSharpAngular.exclusive_or_expression_return retval = new CSharpAngular.exclusive_or_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharpAngular.and_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharpAngular.g:1438:3: (lhs= and_expression (rhs+= exclusive_or_expression_Chld )* -> exclusiveOrExpression(lhs=lhsrhs=$rhs))
            // CSharpAngular.g:1439:3: lhs= and_expression (rhs+= exclusive_or_expression_Chld )*
            {
            pushFollow(FOLLOW_and_expression_in_exclusive_or_expression10500);
            lhs=and_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1439:22: (rhs+= exclusive_or_expression_Chld )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==CARET) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // CSharpAngular.g:1439:23: rhs+= exclusive_or_expression_Chld
            	    {
            	    pushFollow(FOLLOW_exclusive_or_expression_Chld_in_exclusive_or_expression10505);
            	    rhs=exclusive_or_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1440:3: -> exclusiveOrExpression(lhs=lhsrhs=$rhs)
              {
                  retval.st = templateLib.getInstanceOf("exclusiveOrExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exclusive_or_expression"


    public static class exclusive_or_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "exclusive_or_expression_Chld"
    // CSharpAngular.g:1443:1: exclusive_or_expression_Chld : CARET rhs= and_expression -> exclusiveOrExpressionChld(optr=$CARET.textrhs=rhs);
    public final CSharpAngular.exclusive_or_expression_Chld_return exclusive_or_expression_Chld() throws RecognitionException {
        CSharpAngular.exclusive_or_expression_Chld_return retval = new CSharpAngular.exclusive_or_expression_Chld_return();
        retval.start = input.LT(1);


        Token CARET149=null;
        CSharpAngular.and_expression_return rhs =null;


        try {
            // CSharpAngular.g:1444:3: ( CARET rhs= and_expression -> exclusiveOrExpressionChld(optr=$CARET.textrhs=rhs))
            // CSharpAngular.g:1445:3: CARET rhs= and_expression
            {
            CARET149=(Token)match(input,CARET,FOLLOW_CARET_in_exclusive_or_expression_Chld10538); if (state.failed) return retval;

            pushFollow(FOLLOW_and_expression_in_exclusive_or_expression_Chld10542);
            rhs=and_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1446:3: -> exclusiveOrExpressionChld(optr=$CARET.textrhs=rhs)
              {
                  retval.st = templateLib.getInstanceOf("exclusiveOrExpressionChld",new STAttrMap().put("optr", (CARET149!=null?CARET149.getText():null)).put("rhs", rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exclusive_or_expression_Chld"


    public static class inclusive_or_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "inclusive_or_expression"
    // CSharpAngular.g:1449:1: inclusive_or_expression : lhs= exclusive_or_expression (rhs+= inclusive_or_expression_Chld )* -> inclusiveOrExpression(lhs=lhsrhs=$rhs);
    public final CSharpAngular.inclusive_or_expression_return inclusive_or_expression() throws RecognitionException {
        CSharpAngular.inclusive_or_expression_return retval = new CSharpAngular.inclusive_or_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharpAngular.exclusive_or_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharpAngular.g:1450:2: (lhs= exclusive_or_expression (rhs+= inclusive_or_expression_Chld )* -> inclusiveOrExpression(lhs=lhsrhs=$rhs))
            // CSharpAngular.g:1451:3: lhs= exclusive_or_expression (rhs+= inclusive_or_expression_Chld )*
            {
            pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression10576);
            lhs=exclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1451:31: (rhs+= inclusive_or_expression_Chld )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==BITWISE_OR) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // CSharpAngular.g:1451:32: rhs+= inclusive_or_expression_Chld
            	    {
            	    pushFollow(FOLLOW_inclusive_or_expression_Chld_in_inclusive_or_expression10581);
            	    rhs=inclusive_or_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1452:3: -> inclusiveOrExpression(lhs=lhsrhs=$rhs)
              {
                  retval.st = templateLib.getInstanceOf("inclusiveOrExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inclusive_or_expression"


    public static class inclusive_or_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "inclusive_or_expression_Chld"
    // CSharpAngular.g:1455:1: inclusive_or_expression_Chld : BITWISE_OR rhs= exclusive_or_expression -> inclusiveOrExpressionChld(optr=$BITWISE_OR.textrhs=rhs);
    public final CSharpAngular.inclusive_or_expression_Chld_return inclusive_or_expression_Chld() throws RecognitionException {
        CSharpAngular.inclusive_or_expression_Chld_return retval = new CSharpAngular.inclusive_or_expression_Chld_return();
        retval.start = input.LT(1);


        Token BITWISE_OR150=null;
        CSharpAngular.exclusive_or_expression_return rhs =null;


        try {
            // CSharpAngular.g:1456:3: ( BITWISE_OR rhs= exclusive_or_expression -> inclusiveOrExpressionChld(optr=$BITWISE_OR.textrhs=rhs))
            // CSharpAngular.g:1457:3: BITWISE_OR rhs= exclusive_or_expression
            {
            BITWISE_OR150=(Token)match(input,BITWISE_OR,FOLLOW_BITWISE_OR_in_inclusive_or_expression_Chld10614); if (state.failed) return retval;

            pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression_Chld10618);
            rhs=exclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1458:3: -> inclusiveOrExpressionChld(optr=$BITWISE_OR.textrhs=rhs)
              {
                  retval.st = templateLib.getInstanceOf("inclusiveOrExpressionChld",new STAttrMap().put("optr", (BITWISE_OR150!=null?BITWISE_OR150.getText():null)).put("rhs", rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inclusive_or_expression_Chld"


    public static class conditional_and_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "conditional_and_expression"
    // CSharpAngular.g:1461:1: conditional_and_expression : lhs= inclusive_or_expression (rhs+= conditional_and_expression_Chld )* -> conditionalAndExpression(lhs=lhsrhs=$rhs);
    public final CSharpAngular.conditional_and_expression_return conditional_and_expression() throws RecognitionException {
        CSharpAngular.conditional_and_expression_return retval = new CSharpAngular.conditional_and_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharpAngular.inclusive_or_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharpAngular.g:1462:2: (lhs= inclusive_or_expression (rhs+= conditional_and_expression_Chld )* -> conditionalAndExpression(lhs=lhsrhs=$rhs))
            // CSharpAngular.g:1463:3: lhs= inclusive_or_expression (rhs+= conditional_and_expression_Chld )*
            {
            pushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression10654);
            lhs=inclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1463:31: (rhs+= conditional_and_expression_Chld )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==OP_AND) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // CSharpAngular.g:1463:32: rhs+= conditional_and_expression_Chld
            	    {
            	    pushFollow(FOLLOW_conditional_and_expression_Chld_in_conditional_and_expression10659);
            	    rhs=conditional_and_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1464:3: -> conditionalAndExpression(lhs=lhsrhs=$rhs)
              {
                  retval.st = templateLib.getInstanceOf("conditionalAndExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conditional_and_expression"


    public static class conditional_and_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "conditional_and_expression_Chld"
    // CSharpAngular.g:1467:1: conditional_and_expression_Chld : OP_AND rhs= inclusive_or_expression -> conditionalAndExpressionChld(optr=$OP_AND.textrhs=rhs);
    public final CSharpAngular.conditional_and_expression_Chld_return conditional_and_expression_Chld() throws RecognitionException {
        CSharpAngular.conditional_and_expression_Chld_return retval = new CSharpAngular.conditional_and_expression_Chld_return();
        retval.start = input.LT(1);


        Token OP_AND151=null;
        CSharpAngular.inclusive_or_expression_return rhs =null;


        try {
            // CSharpAngular.g:1468:3: ( OP_AND rhs= inclusive_or_expression -> conditionalAndExpressionChld(optr=$OP_AND.textrhs=rhs))
            // CSharpAngular.g:1469:3: OP_AND rhs= inclusive_or_expression
            {
            OP_AND151=(Token)match(input,OP_AND,FOLLOW_OP_AND_in_conditional_and_expression_Chld10692); if (state.failed) return retval;

            pushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression_Chld10696);
            rhs=inclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1470:3: -> conditionalAndExpressionChld(optr=$OP_AND.textrhs=rhs)
              {
                  retval.st = templateLib.getInstanceOf("conditionalAndExpressionChld",new STAttrMap().put("optr", (OP_AND151!=null?OP_AND151.getText():null)).put("rhs", rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conditional_and_expression_Chld"


    public static class conditional_or_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "conditional_or_expression"
    // CSharpAngular.g:1472:1: conditional_or_expression : lhs= conditional_and_expression (rhs+= conditional_or_expression_Chld )* -> conditionalOrExpression(lhs=lhsrhs=$rhs);
    public final CSharpAngular.conditional_or_expression_return conditional_or_expression() throws RecognitionException {
        CSharpAngular.conditional_or_expression_return retval = new CSharpAngular.conditional_or_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharpAngular.conditional_and_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharpAngular.g:1473:2: (lhs= conditional_and_expression (rhs+= conditional_or_expression_Chld )* -> conditionalOrExpression(lhs=lhsrhs=$rhs))
            // CSharpAngular.g:1474:3: lhs= conditional_and_expression (rhs+= conditional_or_expression_Chld )*
            {
            pushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression10727);
            lhs=conditional_and_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1474:34: (rhs+= conditional_or_expression_Chld )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==OP_OR) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // CSharpAngular.g:1474:35: rhs+= conditional_or_expression_Chld
            	    {
            	    pushFollow(FOLLOW_conditional_or_expression_Chld_in_conditional_or_expression10732);
            	    rhs=conditional_or_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1475:3: -> conditionalOrExpression(lhs=lhsrhs=$rhs)
              {
                  retval.st = templateLib.getInstanceOf("conditionalOrExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conditional_or_expression"


    public static class conditional_or_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "conditional_or_expression_Chld"
    // CSharpAngular.g:1478:1: conditional_or_expression_Chld : OP_OR rhs= conditional_and_expression -> conditionalOrExpressionChld(optr=$OP_OR.textrhs=rhs);
    public final CSharpAngular.conditional_or_expression_Chld_return conditional_or_expression_Chld() throws RecognitionException {
        CSharpAngular.conditional_or_expression_Chld_return retval = new CSharpAngular.conditional_or_expression_Chld_return();
        retval.start = input.LT(1);


        Token OP_OR152=null;
        CSharpAngular.conditional_and_expression_return rhs =null;


        try {
            // CSharpAngular.g:1479:3: ( OP_OR rhs= conditional_and_expression -> conditionalOrExpressionChld(optr=$OP_OR.textrhs=rhs))
            // CSharpAngular.g:1480:3: OP_OR rhs= conditional_and_expression
            {
            OP_OR152=(Token)match(input,OP_OR,FOLLOW_OP_OR_in_conditional_or_expression_Chld10765); if (state.failed) return retval;

            pushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression_Chld10769);
            rhs=conditional_and_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1481:3: -> conditionalOrExpressionChld(optr=$OP_OR.textrhs=rhs)
              {
                  retval.st = templateLib.getInstanceOf("conditionalOrExpressionChld",new STAttrMap().put("optr", (OP_OR152!=null?OP_OR152.getText():null)).put("rhs", rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conditional_or_expression_Chld"


    public static class null_coalescing_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "null_coalescing_expression"
    // CSharpAngular.g:1489:1: null_coalescing_expression : lhs= conditional_or_expression ( OP_COALESCING rhs= null_coalescing_expression )? -> nullCoalescingExpression(lhs=lhsoptr=$OP_COALESCING.textrhs=rhs);
    public final CSharpAngular.null_coalescing_expression_return null_coalescing_expression() throws RecognitionException {
        CSharpAngular.null_coalescing_expression_return retval = new CSharpAngular.null_coalescing_expression_return();
        retval.start = input.LT(1);


        Token OP_COALESCING153=null;
        CSharpAngular.conditional_or_expression_return lhs =null;

        CSharpAngular.null_coalescing_expression_return rhs =null;


        try {
            // CSharpAngular.g:1490:3: (lhs= conditional_or_expression ( OP_COALESCING rhs= null_coalescing_expression )? -> nullCoalescingExpression(lhs=lhsoptr=$OP_COALESCING.textrhs=rhs))
            // CSharpAngular.g:1491:3: lhs= conditional_or_expression ( OP_COALESCING rhs= null_coalescing_expression )?
            {
            pushFollow(FOLLOW_conditional_or_expression_in_null_coalescing_expression10807);
            lhs=conditional_or_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1491:33: ( OP_COALESCING rhs= null_coalescing_expression )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==OP_COALESCING) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // CSharpAngular.g:1491:34: OP_COALESCING rhs= null_coalescing_expression
                    {
                    OP_COALESCING153=(Token)match(input,OP_COALESCING,FOLLOW_OP_COALESCING_in_null_coalescing_expression10810); if (state.failed) return retval;

                    pushFollow(FOLLOW_null_coalescing_expression_in_null_coalescing_expression10814);
                    rhs=null_coalescing_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1492:3: -> nullCoalescingExpression(lhs=lhsoptr=$OP_COALESCING.textrhs=rhs)
              {
                  retval.st = templateLib.getInstanceOf("nullCoalescingExpression",new STAttrMap().put("lhs", lhs).put("optr", (OP_COALESCING153!=null?OP_COALESCING153.getText():null)).put("rhs", rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_coalescing_expression"


    public static class conditional_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "conditional_expression"
    // CSharpAngular.g:1502:1: conditional_expression : lhs= null_coalescing_expression ( INTERR exp1= expression COLON exp2= expression )? -> conditionalExpression(lhs=lhsoptr1=\"?\"optr2=$COLON.textexpr1=exp1expr2=exp2);
    public final CSharpAngular.conditional_expression_return conditional_expression() throws RecognitionException {
        CSharpAngular.conditional_expression_return retval = new CSharpAngular.conditional_expression_return();
        retval.start = input.LT(1);


        Token COLON154=null;
        CSharpAngular.null_coalescing_expression_return lhs =null;

        CSharpAngular.expression_return exp1 =null;

        CSharpAngular.expression_return exp2 =null;


        try {
            // CSharpAngular.g:1503:3: (lhs= null_coalescing_expression ( INTERR exp1= expression COLON exp2= expression )? -> conditionalExpression(lhs=lhsoptr1=\"?\"optr2=$COLON.textexpr1=exp1expr2=exp2))
            // CSharpAngular.g:1504:3: lhs= null_coalescing_expression ( INTERR exp1= expression COLON exp2= expression )?
            {
            pushFollow(FOLLOW_null_coalescing_expression_in_conditional_expression10860);
            lhs=null_coalescing_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1504:34: ( INTERR exp1= expression COLON exp2= expression )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==INTERR) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // CSharpAngular.g:1504:35: INTERR exp1= expression COLON exp2= expression
                    {
                    match(input,INTERR,FOLLOW_INTERR_in_conditional_expression10863); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_in_conditional_expression10867);
                    exp1=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    COLON154=(Token)match(input,COLON,FOLLOW_COLON_in_conditional_expression10869); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_in_conditional_expression10873);
                    exp2=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1505:3: -> conditionalExpression(lhs=lhsoptr1=\"?\"optr2=$COLON.textexpr1=exp1expr2=exp2)
              {
                  retval.st = templateLib.getInstanceOf("conditionalExpression",new STAttrMap().put("lhs", lhs).put("optr1", "?").put("optr2", (COLON154!=null?COLON154.getText():null)).put("expr1", exp1).put("expr2", exp2));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conditional_expression"


    public static class lambda_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "lambda_expression"
    // CSharpAngular.g:1508:1: lambda_expression : sign= anonymous_function_signature right_arrow (cmnt= comments )? bdy= anonymous_function_body -> lambdaExpression(signature=signcmnts=cmntbody=bdy);
    public final CSharpAngular.lambda_expression_return lambda_expression() throws RecognitionException {
        CSharpAngular.lambda_expression_return retval = new CSharpAngular.lambda_expression_return();
        retval.start = input.LT(1);


        CSharpAngular.anonymous_function_signature_return sign =null;

        CSharpAngular.comments_return cmnt =null;

        CSharpAngular.anonymous_function_body_return bdy =null;


        try {
            // CSharpAngular.g:1509:2: (sign= anonymous_function_signature right_arrow (cmnt= comments )? bdy= anonymous_function_body -> lambdaExpression(signature=signcmnts=cmntbody=bdy))
            // CSharpAngular.g:1510:2: sign= anonymous_function_signature right_arrow (cmnt= comments )? bdy= anonymous_function_body
            {
            pushFollow(FOLLOW_anonymous_function_signature_in_lambda_expression10919);
            sign=anonymous_function_signature();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_right_arrow_in_lambda_expression10921);
            right_arrow();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1510:48: (cmnt= comments )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( ((LA108_0 >= SINGLE_LINE_COMMENT && LA108_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // CSharpAngular.g:1510:49: cmnt= comments
                    {
                    pushFollow(FOLLOW_comments_in_lambda_expression10926);
                    cmnt=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_anonymous_function_body_in_lambda_expression10932);
            bdy=anonymous_function_body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1511:2: -> lambdaExpression(signature=signcmnts=cmntbody=bdy)
              {
                  retval.st = templateLib.getInstanceOf("lambdaExpression",new STAttrMap().put("signature", sign).put("cmnts", cmnt).put("body", bdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lambda_expression"


    public static class anonymous_method_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_method_expression"
    // CSharpAngular.g:1514:1: anonymous_method_expression : DELEGATE (sign= explicit_anonymous_function_signature )? blk= block -> anonymousMethodExpression(signature=signbody=blk);
    public final CSharpAngular.anonymous_method_expression_return anonymous_method_expression() throws RecognitionException {
        CSharpAngular.anonymous_method_expression_return retval = new CSharpAngular.anonymous_method_expression_return();
        retval.start = input.LT(1);


        CSharpAngular.explicit_anonymous_function_signature_return sign =null;

        CSharpAngular.block_return blk =null;


        try {
            // CSharpAngular.g:1515:2: ( DELEGATE (sign= explicit_anonymous_function_signature )? blk= block -> anonymousMethodExpression(signature=signbody=blk))
            // CSharpAngular.g:1516:2: DELEGATE (sign= explicit_anonymous_function_signature )? blk= block
            {
            match(input,DELEGATE,FOLLOW_DELEGATE_in_anonymous_method_expression10964); if (state.failed) return retval;

            // CSharpAngular.g:1516:11: (sign= explicit_anonymous_function_signature )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==OPEN_PARENS) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // CSharpAngular.g:1516:12: sign= explicit_anonymous_function_signature
                    {
                    pushFollow(FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression10969);
                    sign=explicit_anonymous_function_signature();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_block_in_anonymous_method_expression10975);
            blk=block();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1517:2: -> anonymousMethodExpression(signature=signbody=blk)
              {
                  retval.st = templateLib.getInstanceOf("anonymousMethodExpression",new STAttrMap().put("signature", sign).put("body", blk));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "anonymous_method_expression"


    public static class anonymous_function_signature_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_function_signature"
    // CSharpAngular.g:1526:1: anonymous_function_signature : ( OPEN_PARENS CLOSE_PARENS -> text(value=\"()\")| OPEN_PARENS lst1= explicit_anonymous_function_parameter_list CLOSE_PARENS -> anonymousFunctionSignature(list=lst1)| OPEN_PARENS lst2= implicit_anonymous_function_parameter_list CLOSE_PARENS -> anonymousFunctionSignature(list=lst2)|par= implicit_anonymous_function_parameter -> anonymousFunctionSignature2(parameter=par));
    public final CSharpAngular.anonymous_function_signature_return anonymous_function_signature() throws RecognitionException {
        CSharpAngular.anonymous_function_signature_return retval = new CSharpAngular.anonymous_function_signature_return();
        retval.start = input.LT(1);


        CSharpAngular.explicit_anonymous_function_parameter_list_return lst1 =null;

        CSharpAngular.implicit_anonymous_function_parameter_list_return lst2 =null;

        CSharpAngular.implicit_anonymous_function_parameter_return par =null;


        try {
            // CSharpAngular.g:1527:3: ( OPEN_PARENS CLOSE_PARENS -> text(value=\"()\")| OPEN_PARENS lst1= explicit_anonymous_function_parameter_list CLOSE_PARENS -> anonymousFunctionSignature(list=lst1)| OPEN_PARENS lst2= implicit_anonymous_function_parameter_list CLOSE_PARENS -> anonymousFunctionSignature(list=lst2)|par= implicit_anonymous_function_parameter -> anonymousFunctionSignature2(parameter=par))
            int alt110=4;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==OPEN_PARENS) ) {
                switch ( input.LA(2) ) {
                case CLOSE_PARENS:
                    {
                    alt110=1;
                    }
                    break;
                case BOOL:
                case BYTE:
                case CHAR:
                case DECIMAL:
                case DOUBLE:
                case FLOAT:
                case INT:
                case LONG:
                case OBJECT:
                case OUT:
                case REF:
                case SBYTE:
                case SHORT:
                case STRING:
                case UINT:
                case ULONG:
                case USHORT:
                case VOID:
                    {
                    alt110=2;
                    }
                    break;
                case IDENTIFIER:
                    {
                    int LA110_5 = input.LA(3);

                    if ( (LA110_5==DOT||LA110_5==DOUBLE_COLON||LA110_5==IDENTIFIER||LA110_5==INTERR||LA110_5==LT||LA110_5==OPEN_BRACKET||LA110_5==STAR) ) {
                        alt110=2;
                    }
                    else if ( (LA110_5==CLOSE_PARENS||LA110_5==COMMA) ) {
                        alt110=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 110, 5, input);

                        throw nvae;

                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 1, input);

                    throw nvae;

                }

            }
            else if ( (LA110_0==IDENTIFIER) ) {
                alt110=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }
            switch (alt110) {
                case 1 :
                    // CSharpAngular.g:1528:3: OPEN_PARENS CLOSE_PARENS
                    {
                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_anonymous_function_signature11007); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_anonymous_function_signature11009); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1529:3: -> text(value=\"()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "()"));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1530:5: OPEN_PARENS lst1= explicit_anonymous_function_parameter_list CLOSE_PARENS
                    {
                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_anonymous_function_signature11035); if (state.failed) return retval;

                    pushFollow(FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature11039);
                    lst1=explicit_anonymous_function_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_anonymous_function_signature11041); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1531:3: -> anonymousFunctionSignature(list=lst1)
                      {
                          retval.st = templateLib.getInstanceOf("anonymousFunctionSignature",new STAttrMap().put("list", lst1));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:1532:5: OPEN_PARENS lst2= implicit_anonymous_function_parameter_list CLOSE_PARENS
                    {
                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_anonymous_function_signature11057); if (state.failed) return retval;

                    pushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature11061);
                    lst2=implicit_anonymous_function_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_anonymous_function_signature11063); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1533:3: -> anonymousFunctionSignature(list=lst2)
                      {
                          retval.st = templateLib.getInstanceOf("anonymousFunctionSignature",new STAttrMap().put("list", lst2));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:1534:5: par= implicit_anonymous_function_parameter
                    {
                    pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_anonymous_function_signature11081);
                    par=implicit_anonymous_function_parameter();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1535:3: -> anonymousFunctionSignature2(parameter=par)
                      {
                          retval.st = templateLib.getInstanceOf("anonymousFunctionSignature2",new STAttrMap().put("parameter", par));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "anonymous_function_signature"


    public static class explicit_anonymous_function_signature_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "explicit_anonymous_function_signature"
    // CSharpAngular.g:1537:1: explicit_anonymous_function_signature : OPEN_PARENS (lst= explicit_anonymous_function_parameter_list )? CLOSE_PARENS -> explicitAnonymousFunctionSignature(list=lst);
    public final CSharpAngular.explicit_anonymous_function_signature_return explicit_anonymous_function_signature() throws RecognitionException {
        CSharpAngular.explicit_anonymous_function_signature_return retval = new CSharpAngular.explicit_anonymous_function_signature_return();
        retval.start = input.LT(1);


        CSharpAngular.explicit_anonymous_function_parameter_list_return lst =null;


        try {
            // CSharpAngular.g:1538:2: ( OPEN_PARENS (lst= explicit_anonymous_function_parameter_list )? CLOSE_PARENS -> explicitAnonymousFunctionSignature(list=lst))
            // CSharpAngular.g:1539:2: OPEN_PARENS (lst= explicit_anonymous_function_parameter_list )? CLOSE_PARENS
            {
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_explicit_anonymous_function_signature11105); if (state.failed) return retval;

            // CSharpAngular.g:1539:14: (lst= explicit_anonymous_function_parameter_list )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==BOOL||LA111_0==BYTE||LA111_0==CHAR||LA111_0==DECIMAL||LA111_0==DOUBLE||LA111_0==FLOAT||LA111_0==IDENTIFIER||LA111_0==INT||LA111_0==LONG||LA111_0==OBJECT||LA111_0==OUT||LA111_0==REF||LA111_0==SBYTE||LA111_0==SHORT||LA111_0==STRING||(LA111_0 >= UINT && LA111_0 <= ULONG)||LA111_0==USHORT||LA111_0==VOID) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // CSharpAngular.g:1539:15: lst= explicit_anonymous_function_parameter_list
                    {
                    pushFollow(FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature11110);
                    lst=explicit_anonymous_function_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_explicit_anonymous_function_signature11114); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1540:2: -> explicitAnonymousFunctionSignature(list=lst)
              {
                  retval.st = templateLib.getInstanceOf("explicitAnonymousFunctionSignature",new STAttrMap().put("list", lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_signature"


    public static class explicit_anonymous_function_parameter_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "explicit_anonymous_function_parameter_list"
    // CSharpAngular.g:1542:1: explicit_anonymous_function_parameter_list : par= explicit_anonymous_function_parameter (chld+= explicit_anonymous_function_parameter_list_Chld )* -> explicitAnonymousFunctionParameterList(firstPar=parlist=$chld);
    public final CSharpAngular.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list() throws RecognitionException {
        CSharpAngular.explicit_anonymous_function_parameter_list_return retval = new CSharpAngular.explicit_anonymous_function_parameter_list_return();
        retval.start = input.LT(1);


        List list_chld=null;
        CSharpAngular.explicit_anonymous_function_parameter_return par =null;

        RuleReturnScope chld = null;
        try {
            // CSharpAngular.g:1543:2: (par= explicit_anonymous_function_parameter (chld+= explicit_anonymous_function_parameter_list_Chld )* -> explicitAnonymousFunctionParameterList(firstPar=parlist=$chld))
            // CSharpAngular.g:1544:2: par= explicit_anonymous_function_parameter (chld+= explicit_anonymous_function_parameter_list_Chld )*
            {
            pushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list11138);
            par=explicit_anonymous_function_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1544:44: (chld+= explicit_anonymous_function_parameter_list_Chld )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==COMMA) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // CSharpAngular.g:1544:45: chld+= explicit_anonymous_function_parameter_list_Chld
            	    {
            	    pushFollow(FOLLOW_explicit_anonymous_function_parameter_list_Chld_in_explicit_anonymous_function_parameter_list11143);
            	    chld=explicit_anonymous_function_parameter_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_chld==null) list_chld=new ArrayList();
            	    list_chld.add(chld.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1545:2: -> explicitAnonymousFunctionParameterList(firstPar=parlist=$chld)
              {
                  retval.st = templateLib.getInstanceOf("explicitAnonymousFunctionParameterList",new STAttrMap().put("firstPar", par).put("list", list_chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_parameter_list"


    public static class explicit_anonymous_function_parameter_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "explicit_anonymous_function_parameter_list_Chld"
    // CSharpAngular.g:1548:1: explicit_anonymous_function_parameter_list_Chld : COMMA par= explicit_anonymous_function_parameter -> explicitAnonymousFunctionParameterListChld(parameter=par);
    public final CSharpAngular.explicit_anonymous_function_parameter_list_Chld_return explicit_anonymous_function_parameter_list_Chld() throws RecognitionException {
        CSharpAngular.explicit_anonymous_function_parameter_list_Chld_return retval = new CSharpAngular.explicit_anonymous_function_parameter_list_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.explicit_anonymous_function_parameter_return par =null;


        try {
            // CSharpAngular.g:1549:2: ( COMMA par= explicit_anonymous_function_parameter -> explicitAnonymousFunctionParameterListChld(parameter=par))
            // CSharpAngular.g:1550:2: COMMA par= explicit_anonymous_function_parameter
            {
            match(input,COMMA,FOLLOW_COMMA_in_explicit_anonymous_function_parameter_list_Chld11171); if (state.failed) return retval;

            pushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list_Chld11175);
            par=explicit_anonymous_function_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1551:2: -> explicitAnonymousFunctionParameterListChld(parameter=par)
              {
                  retval.st = templateLib.getInstanceOf("explicitAnonymousFunctionParameterListChld",new STAttrMap().put("parameter", par));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_parameter_list_Chld"


    public static class explicit_anonymous_function_parameter_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "explicit_anonymous_function_parameter"
    // CSharpAngular.g:1554:1: explicit_anonymous_function_parameter : (modfr= anonymous_function_parameter_modifier )? t= type IDENTIFIER -> explicitAnonymousFunctionParameter(modifier=modfrtype=tname=$IDENTIFIER.text);
    public final CSharpAngular.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter() throws RecognitionException {
        CSharpAngular.explicit_anonymous_function_parameter_return retval = new CSharpAngular.explicit_anonymous_function_parameter_return();
        retval.start = input.LT(1);


        Token IDENTIFIER155=null;
        CSharpAngular.anonymous_function_parameter_modifier_return modfr =null;

        CSharpAngular.type_return t =null;


        try {
            // CSharpAngular.g:1555:2: ( (modfr= anonymous_function_parameter_modifier )? t= type IDENTIFIER -> explicitAnonymousFunctionParameter(modifier=modfrtype=tname=$IDENTIFIER.text))
            // CSharpAngular.g:1556:2: (modfr= anonymous_function_parameter_modifier )? t= type IDENTIFIER
            {
            // CSharpAngular.g:1556:2: (modfr= anonymous_function_parameter_modifier )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==OUT||LA113_0==REF) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // CSharpAngular.g:1556:3: modfr= anonymous_function_parameter_modifier
                    {
                    pushFollow(FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter11202);
                    modfr=anonymous_function_parameter_modifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_in_explicit_anonymous_function_parameter11208);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            IDENTIFIER155=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_explicit_anonymous_function_parameter11210); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1557:2: -> explicitAnonymousFunctionParameter(modifier=modfrtype=tname=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("explicitAnonymousFunctionParameter",new STAttrMap().put("modifier", modfr).put("type", t).put("name", (IDENTIFIER155!=null?IDENTIFIER155.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_parameter"


    public static class anonymous_function_parameter_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_function_parameter_modifier"
    // CSharpAngular.g:1559:1: anonymous_function_parameter_modifier : ( REF -> text(value=$REF.text)| OUT -> text(value=$OUT.text));
    public final CSharpAngular.anonymous_function_parameter_modifier_return anonymous_function_parameter_modifier() throws RecognitionException {
        CSharpAngular.anonymous_function_parameter_modifier_return retval = new CSharpAngular.anonymous_function_parameter_modifier_return();
        retval.start = input.LT(1);


        Token REF156=null;
        Token OUT157=null;

        try {
            // CSharpAngular.g:1560:2: ( REF -> text(value=$REF.text)| OUT -> text(value=$OUT.text))
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==REF) ) {
                alt114=1;
            }
            else if ( (LA114_0==OUT) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;

            }
            switch (alt114) {
                case 1 :
                    // CSharpAngular.g:1561:2: REF
                    {
                    REF156=(Token)match(input,REF,FOLLOW_REF_in_anonymous_function_parameter_modifier11240); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1561:13: -> text(value=$REF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (REF156!=null?REF156.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1562:4: OUT
                    {
                    OUT157=(Token)match(input,OUT,FOLLOW_OUT_in_anonymous_function_parameter_modifier11260); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1562:13: -> text(value=$OUT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OUT157!=null?OUT157.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "anonymous_function_parameter_modifier"


    public static class implicit_anonymous_function_signature_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "implicit_anonymous_function_signature"
    // CSharpAngular.g:1564:1: implicit_anonymous_function_signature : ( OPEN_PARENS (parLst= implicit_anonymous_function_parameter_list )? CLOSE_PARENS -> implicitAnonymousFunctionSignature(paramList=parLst)|par= implicit_anonymous_function_parameter -> implicitAnonymousFunctionSignature2(param=par));
    public final CSharpAngular.implicit_anonymous_function_signature_return implicit_anonymous_function_signature() throws RecognitionException {
        CSharpAngular.implicit_anonymous_function_signature_return retval = new CSharpAngular.implicit_anonymous_function_signature_return();
        retval.start = input.LT(1);


        CSharpAngular.implicit_anonymous_function_parameter_list_return parLst =null;

        CSharpAngular.implicit_anonymous_function_parameter_return par =null;


        try {
            // CSharpAngular.g:1565:2: ( OPEN_PARENS (parLst= implicit_anonymous_function_parameter_list )? CLOSE_PARENS -> implicitAnonymousFunctionSignature(paramList=parLst)|par= implicit_anonymous_function_parameter -> implicitAnonymousFunctionSignature2(param=par))
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==OPEN_PARENS) ) {
                alt116=1;
            }
            else if ( (LA116_0==IDENTIFIER) ) {
                alt116=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }
            switch (alt116) {
                case 1 :
                    // CSharpAngular.g:1566:2: OPEN_PARENS (parLst= implicit_anonymous_function_parameter_list )? CLOSE_PARENS
                    {
                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_implicit_anonymous_function_signature11286); if (state.failed) return retval;

                    // CSharpAngular.g:1566:14: (parLst= implicit_anonymous_function_parameter_list )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==IDENTIFIER) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            // CSharpAngular.g:1566:15: parLst= implicit_anonymous_function_parameter_list
                            {
                            pushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_implicit_anonymous_function_signature11291);
                            parLst=implicit_anonymous_function_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_implicit_anonymous_function_signature11295); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1567:2: -> implicitAnonymousFunctionSignature(paramList=parLst)
                      {
                          retval.st = templateLib.getInstanceOf("implicitAnonymousFunctionSignature",new STAttrMap().put("paramList", parLst));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1568:4: par= implicit_anonymous_function_parameter
                    {
                    pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_signature11311);
                    par=implicit_anonymous_function_parameter();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1569:2: -> implicitAnonymousFunctionSignature2(param=par)
                      {
                          retval.st = templateLib.getInstanceOf("implicitAnonymousFunctionSignature2",new STAttrMap().put("param", par));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_signature"


    public static class implicit_anonymous_function_parameter_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "implicit_anonymous_function_parameter_list"
    // CSharpAngular.g:1571:1: implicit_anonymous_function_parameter_list : fstPar= implicit_anonymous_function_parameter (chld+= implicit_anonymous_function_parameter_list_Chld )* -> implicitAnonymousFunctionParameterList(firstPar=fstParlist=$chld);
    public final CSharpAngular.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list() throws RecognitionException {
        CSharpAngular.implicit_anonymous_function_parameter_list_return retval = new CSharpAngular.implicit_anonymous_function_parameter_list_return();
        retval.start = input.LT(1);


        List list_chld=null;
        CSharpAngular.implicit_anonymous_function_parameter_return fstPar =null;

        RuleReturnScope chld = null;
        try {
            // CSharpAngular.g:1572:2: (fstPar= implicit_anonymous_function_parameter (chld+= implicit_anonymous_function_parameter_list_Chld )* -> implicitAnonymousFunctionParameterList(firstPar=fstParlist=$chld))
            // CSharpAngular.g:1573:2: fstPar= implicit_anonymous_function_parameter (chld+= implicit_anonymous_function_parameter_list_Chld )*
            {
            pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list11335);
            fstPar=implicit_anonymous_function_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1573:47: (chld+= implicit_anonymous_function_parameter_list_Chld )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==COMMA) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // CSharpAngular.g:1573:48: chld+= implicit_anonymous_function_parameter_list_Chld
            	    {
            	    pushFollow(FOLLOW_implicit_anonymous_function_parameter_list_Chld_in_implicit_anonymous_function_parameter_list11340);
            	    chld=implicit_anonymous_function_parameter_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_chld==null) list_chld=new ArrayList();
            	    list_chld.add(chld.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1574:2: -> implicitAnonymousFunctionParameterList(firstPar=fstParlist=$chld)
              {
                  retval.st = templateLib.getInstanceOf("implicitAnonymousFunctionParameterList",new STAttrMap().put("firstPar", fstPar).put("list", list_chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_parameter_list"


    public static class implicit_anonymous_function_parameter_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "implicit_anonymous_function_parameter_list_Chld"
    // CSharpAngular.g:1577:1: implicit_anonymous_function_parameter_list_Chld : COMMA par= implicit_anonymous_function_parameter -> implicitAnonymousFunctionParameterListChld(parameter=par);
    public final CSharpAngular.implicit_anonymous_function_parameter_list_Chld_return implicit_anonymous_function_parameter_list_Chld() throws RecognitionException {
        CSharpAngular.implicit_anonymous_function_parameter_list_Chld_return retval = new CSharpAngular.implicit_anonymous_function_parameter_list_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.implicit_anonymous_function_parameter_return par =null;


        try {
            // CSharpAngular.g:1578:2: ( COMMA par= implicit_anonymous_function_parameter -> implicitAnonymousFunctionParameterListChld(parameter=par))
            // CSharpAngular.g:1579:2: COMMA par= implicit_anonymous_function_parameter
            {
            match(input,COMMA,FOLLOW_COMMA_in_implicit_anonymous_function_parameter_list_Chld11368); if (state.failed) return retval;

            pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list_Chld11372);
            par=implicit_anonymous_function_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1580:2: -> implicitAnonymousFunctionParameterListChld(parameter=par)
              {
                  retval.st = templateLib.getInstanceOf("implicitAnonymousFunctionParameterListChld",new STAttrMap().put("parameter", par));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_parameter_list_Chld"


    public static class implicit_anonymous_function_parameter_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "implicit_anonymous_function_parameter"
    // CSharpAngular.g:1583:1: implicit_anonymous_function_parameter : IDENTIFIER -> text(value=$IDENTIFIER.text);
    public final CSharpAngular.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter() throws RecognitionException {
        CSharpAngular.implicit_anonymous_function_parameter_return retval = new CSharpAngular.implicit_anonymous_function_parameter_return();
        retval.start = input.LT(1);


        Token IDENTIFIER158=null;

        try {
            // CSharpAngular.g:1584:2: ( IDENTIFIER -> text(value=$IDENTIFIER.text))
            // CSharpAngular.g:1585:2: IDENTIFIER
            {
            IDENTIFIER158=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_implicit_anonymous_function_parameter11396); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1585:17: -> text(value=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IDENTIFIER158!=null?IDENTIFIER158.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_parameter"


    public static class anonymous_function_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_function_body"
    // CSharpAngular.g:1587:1: anonymous_function_body : (expr= expression -> anonymousFunctionBody(body=expr)|blk= block -> anonymousFunctionBody(body=blk));
    public final CSharpAngular.anonymous_function_body_return anonymous_function_body() throws RecognitionException {
        CSharpAngular.anonymous_function_body_return retval = new CSharpAngular.anonymous_function_body_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_return expr =null;

        CSharpAngular.block_return blk =null;


        try {
            // CSharpAngular.g:1588:2: (expr= expression -> anonymousFunctionBody(body=expr)|blk= block -> anonymousFunctionBody(body=blk))
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==AMP||(LA118_0 >= BANG && LA118_0 <= BASE)||LA118_0==BOOL||LA118_0==BYTE||(LA118_0 >= CHAR && LA118_0 <= CHECKED)||LA118_0==DECIMAL||(LA118_0 >= DEFAULT && LA118_0 <= DELEGATE)||LA118_0==DOUBLE||LA118_0==FALSE||LA118_0==FLOAT||LA118_0==IDENTIFIER||(LA118_0 >= INT && LA118_0 <= INTEGER_LITERAL)||LA118_0==LONG||LA118_0==MINUS||LA118_0==NEW||LA118_0==NULL||LA118_0==OBJECT||LA118_0==OPEN_PARENS||LA118_0==OP_DEC||LA118_0==OP_INC||LA118_0==PLUS||LA118_0==REAL_LITERAL||LA118_0==SBYTE||LA118_0==SHORT||LA118_0==SIZEOF||LA118_0==STAR||(LA118_0 >= STRING && LA118_0 <= STRING_LITERAL)||LA118_0==THIS||(LA118_0 >= TILDE && LA118_0 <= TRUE)||LA118_0==TYPEOF||(LA118_0 >= UINT && LA118_0 <= UNCHECKED)||LA118_0==USHORT) ) {
                alt118=1;
            }
            else if ( (LA118_0==OPEN_BRACE) ) {
                alt118=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;

            }
            switch (alt118) {
                case 1 :
                    // CSharpAngular.g:1589:2: expr= expression
                    {
                    pushFollow(FOLLOW_expression_in_anonymous_function_body11423);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1590:2: -> anonymousFunctionBody(body=expr)
                      {
                          retval.st = templateLib.getInstanceOf("anonymousFunctionBody",new STAttrMap().put("body", expr));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1591:4: blk= block
                    {
                    pushFollow(FOLLOW_block_in_anonymous_function_body11439);
                    blk=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1592:2: -> anonymousFunctionBody(body=blk)
                      {
                          retval.st = templateLib.getInstanceOf("anonymousFunctionBody",new STAttrMap().put("body", blk));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "anonymous_function_body"


    public static class query_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "query_expression"
    // CSharpAngular.g:1595:1: query_expression : frmCls= from_clause bdy= query_body -> queryExpression(fromClause=frmCls+updateLinqStatus(true)body=bdy);
    public final CSharpAngular.query_expression_return query_expression() throws RecognitionException {
        CSharpAngular.query_expression_return retval = new CSharpAngular.query_expression_return();
        retval.start = input.LT(1);


        CSharpAngular.from_clause_return frmCls =null;

        CSharpAngular.query_body_return bdy =null;


        try {
            // CSharpAngular.g:1596:2: (frmCls= from_clause bdy= query_body -> queryExpression(fromClause=frmCls+updateLinqStatus(true)body=bdy))
            // CSharpAngular.g:1597:2: frmCls= from_clause bdy= query_body
            {
            pushFollow(FOLLOW_from_clause_in_query_expression11464);
            frmCls=from_clause();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_query_body_in_query_expression11468);
            bdy=query_body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1598:2: -> queryExpression(fromClause=frmCls+updateLinqStatus(true)body=bdy)
              {
                  retval.st = templateLib.getInstanceOf("queryExpression",new STAttrMap().put("fromClause", frmCls+updateLinqStatus(true)).put("body", bdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query_expression"


    public static class from_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "from_clause"
    // CSharpAngular.g:1606:1: from_clause : frmKWd= from_contextual_keyword ( ( type IDENTIFIER IN )=>t= type )? id2= IDENTIFIER IN frm= from_clause_chld -> fromClause(keyWrd=frmKWdtype=tals=$id2.text+updateIdName($id2.text)expression=frm);
    public final CSharpAngular.from_clause_return from_clause() throws RecognitionException {
        CSharpAngular.from_clause_return retval = new CSharpAngular.from_clause_return();
        retval.start = input.LT(1);


        Token id2=null;
        CSharpAngular.from_contextual_keyword_return frmKWd =null;

        CSharpAngular.type_return t =null;

        CSharpAngular.from_clause_chld_return frm =null;


        try {
            // CSharpAngular.g:1607:3: (frmKWd= from_contextual_keyword ( ( type IDENTIFIER IN )=>t= type )? id2= IDENTIFIER IN frm= from_clause_chld -> fromClause(keyWrd=frmKWdtype=tals=$id2.text+updateIdName($id2.text)expression=frm))
            // CSharpAngular.g:1608:3: frmKWd= from_contextual_keyword ( ( type IDENTIFIER IN )=>t= type )? id2= IDENTIFIER IN frm= from_clause_chld
            {
            pushFollow(FOLLOW_from_contextual_keyword_in_from_clause11504);
            frmKWd=from_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1608:34: ( ( type IDENTIFIER IN )=>t= type )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==SBYTE) && (synpred57_CSharpAngular())) {
                alt119=1;
            }
            else if ( (LA119_0==BYTE) && (synpred57_CSharpAngular())) {
                alt119=1;
            }
            else if ( (LA119_0==SHORT) && (synpred57_CSharpAngular())) {
                alt119=1;
            }
            else if ( (LA119_0==USHORT) && (synpred57_CSharpAngular())) {
                alt119=1;
            }
            else if ( (LA119_0==INT) && (synpred57_CSharpAngular())) {
                alt119=1;
            }
            else if ( (LA119_0==UINT) && (synpred57_CSharpAngular())) {
                alt119=1;
            }
            else if ( (LA119_0==LONG) && (synpred57_CSharpAngular())) {
                alt119=1;
            }
            else if ( (LA119_0==ULONG) && (synpred57_CSharpAngular())) {
                alt119=1;
            }
            else if ( (LA119_0==CHAR) && (synpred57_CSharpAngular())) {
                alt119=1;
            }
            else if ( (LA119_0==FLOAT) && (synpred57_CSharpAngular())) {
                alt119=1;
            }
            else if ( (LA119_0==DOUBLE) && (synpred57_CSharpAngular())) {
                alt119=1;
            }
            else if ( (LA119_0==DECIMAL) && (synpred57_CSharpAngular())) {
                alt119=1;
            }
            else if ( (LA119_0==BOOL) && (synpred57_CSharpAngular())) {
                alt119=1;
            }
            else if ( (LA119_0==IDENTIFIER) ) {
                int LA119_14 = input.LA(2);

                if ( (LA119_14==DOUBLE_COLON) && (synpred57_CSharpAngular())) {
                    alt119=1;
                }
                else if ( (LA119_14==LT) && (synpred57_CSharpAngular())) {
                    alt119=1;
                }
                else if ( (LA119_14==DOT) && (synpred57_CSharpAngular())) {
                    alt119=1;
                }
                else if ( (LA119_14==INTERR) && (synpred57_CSharpAngular())) {
                    alt119=1;
                }
                else if ( (LA119_14==OPEN_BRACKET) && (synpred57_CSharpAngular())) {
                    alt119=1;
                }
                else if ( (LA119_14==STAR) && (synpred57_CSharpAngular())) {
                    alt119=1;
                }
                else if ( (LA119_14==IDENTIFIER) && (synpred57_CSharpAngular())) {
                    alt119=1;
                }
            }
            else if ( (LA119_0==OBJECT) && (synpred57_CSharpAngular())) {
                alt119=1;
            }
            else if ( (LA119_0==STRING) && (synpred57_CSharpAngular())) {
                alt119=1;
            }
            else if ( (LA119_0==VOID) && (synpred57_CSharpAngular())) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // CSharpAngular.g:1608:35: ( type IDENTIFIER IN )=>t= type
                    {
                    pushFollow(FOLLOW_type_in_from_clause11519);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            id2=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_from_clause11525); if (state.failed) return retval;

            match(input,IN,FOLLOW_IN_in_from_clause11527); if (state.failed) return retval;

            pushFollow(FOLLOW_from_clause_chld_in_from_clause11531);
            frm=from_clause_chld();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1609:3: -> fromClause(keyWrd=frmKWdtype=tals=$id2.text+updateIdName($id2.text)expression=frm)
              {
                  retval.st = templateLib.getInstanceOf("fromClause",new STAttrMap().put("keyWrd", frmKWd).put("type", t).put("als", (id2!=null?id2.getText():null)+updateIdName((id2!=null?id2.getText():null))).put("expression", frm));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "from_clause"


    public static class from_clause_chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "from_clause_chld"
    // CSharpAngular.g:1612:1: from_clause_chld : ( ( expression {...}?)=>exp= expression -> text(value=NamingUtil.toVarName(CSharpAngularHelper.prefixGetKeyword($exp.text))+updateExpressionStmt2(NamingUtil.toVarName($exp.text))+\".stream()\")| ( expression {...}?)=>exp= expression -> text(value=NamingUtil.toClassName(CSharpAngularHelper.linqFromPart($exp.text))+\".stream(), \")| ( expression {...}?)=>exp= expression -> text(value=NamingUtil.toClassName(CSharpAngularHelper.linqFromPart($exp.text))+\".stream()\")| ( expression {...}?)=>exp= expression -> text(value=NamingUtil.toClassName(CSharpAngularHelper.linqFromPart($exp.text))+\".stream().filter(\"+updateExpressionStmt(CSharpAngularHelper.prefixGetKeyword(NamingUtil.toVarName($exp.text))))|exp= expression -> text(value=NamingUtil.toClassName(CSharpAngularHelper.linqFromPart($exp.text))+\".stream()\"));
    public final CSharpAngular.from_clause_chld_return from_clause_chld() throws RecognitionException {
        CSharpAngular.from_clause_chld_return retval = new CSharpAngular.from_clause_chld_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_return exp =null;


        try {
            // CSharpAngular.g:1613:3: ( ( expression {...}?)=>exp= expression -> text(value=NamingUtil.toVarName(CSharpAngularHelper.prefixGetKeyword($exp.text))+updateExpressionStmt2(NamingUtil.toVarName($exp.text))+\".stream()\")| ( expression {...}?)=>exp= expression -> text(value=NamingUtil.toClassName(CSharpAngularHelper.linqFromPart($exp.text))+\".stream(), \")| ( expression {...}?)=>exp= expression -> text(value=NamingUtil.toClassName(CSharpAngularHelper.linqFromPart($exp.text))+\".stream()\")| ( expression {...}?)=>exp= expression -> text(value=NamingUtil.toClassName(CSharpAngularHelper.linqFromPart($exp.text))+\".stream().filter(\"+updateExpressionStmt(CSharpAngularHelper.prefixGetKeyword(NamingUtil.toVarName($exp.text))))|exp= expression -> text(value=NamingUtil.toClassName(CSharpAngularHelper.linqFromPart($exp.text))+\".stream()\"))
            int alt120=5;
            switch ( input.LA(1) ) {
            case OPEN_PARENS:
                {
                int LA120_1 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 1, input);

                    throw nvae;

                }
                }
                break;
            case TRUE:
                {
                int LA120_2 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 2, input);

                    throw nvae;

                }
                }
                break;
            case FALSE:
                {
                int LA120_3 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 3, input);

                    throw nvae;

                }
                }
                break;
            case INTEGER_LITERAL:
                {
                int LA120_4 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 4, input);

                    throw nvae;

                }
                }
                break;
            case REAL_LITERAL:
                {
                int LA120_5 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 5, input);

                    throw nvae;

                }
                }
                break;
            case CHARACTER_LITERAL:
                {
                int LA120_6 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 6, input);

                    throw nvae;

                }
                }
                break;
            case STRING_LITERAL:
                {
                int LA120_7 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 7, input);

                    throw nvae;

                }
                }
                break;
            case NULL:
                {
                int LA120_8 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 8, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA120_9 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 9, input);

                    throw nvae;

                }
                }
                break;
            case BOOL:
                {
                int LA120_10 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 10, input);

                    throw nvae;

                }
                }
                break;
            case BYTE:
                {
                int LA120_11 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 11, input);

                    throw nvae;

                }
                }
                break;
            case CHAR:
                {
                int LA120_12 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 12, input);

                    throw nvae;

                }
                }
                break;
            case DECIMAL:
                {
                int LA120_13 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 13, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE:
                {
                int LA120_14 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 14, input);

                    throw nvae;

                }
                }
                break;
            case FLOAT:
                {
                int LA120_15 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 15, input);

                    throw nvae;

                }
                }
                break;
            case INT:
                {
                int LA120_16 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 16, input);

                    throw nvae;

                }
                }
                break;
            case LONG:
                {
                int LA120_17 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 17, input);

                    throw nvae;

                }
                }
                break;
            case OBJECT:
                {
                int LA120_18 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 18, input);

                    throw nvae;

                }
                }
                break;
            case SBYTE:
                {
                int LA120_19 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 19, input);

                    throw nvae;

                }
                }
                break;
            case SHORT:
                {
                int LA120_20 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 20, input);

                    throw nvae;

                }
                }
                break;
            case STRING:
                {
                int LA120_21 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 21, input);

                    throw nvae;

                }
                }
                break;
            case UINT:
                {
                int LA120_22 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 22, input);

                    throw nvae;

                }
                }
                break;
            case ULONG:
                {
                int LA120_23 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 23, input);

                    throw nvae;

                }
                }
                break;
            case USHORT:
                {
                int LA120_24 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 24, input);

                    throw nvae;

                }
                }
                break;
            case THIS:
                {
                int LA120_25 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 25, input);

                    throw nvae;

                }
                }
                break;
            case BASE:
                {
                int LA120_26 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 26, input);

                    throw nvae;

                }
                }
                break;
            case NEW:
                {
                int LA120_27 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 27, input);

                    throw nvae;

                }
                }
                break;
            case TYPEOF:
                {
                int LA120_28 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 28, input);

                    throw nvae;

                }
                }
                break;
            case CHECKED:
                {
                int LA120_29 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 29, input);

                    throw nvae;

                }
                }
                break;
            case UNCHECKED:
                {
                int LA120_30 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 30, input);

                    throw nvae;

                }
                }
                break;
            case DEFAULT:
                {
                int LA120_31 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 31, input);

                    throw nvae;

                }
                }
                break;
            case DELEGATE:
                {
                int LA120_32 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 32, input);

                    throw nvae;

                }
                }
                break;
            case SIZEOF:
                {
                int LA120_33 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 33, input);

                    throw nvae;

                }
                }
                break;
            case PLUS:
                {
                int LA120_34 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 34, input);

                    throw nvae;

                }
                }
                break;
            case MINUS:
                {
                int LA120_35 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 35, input);

                    throw nvae;

                }
                }
                break;
            case BANG:
                {
                int LA120_36 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 36, input);

                    throw nvae;

                }
                }
                break;
            case TILDE:
                {
                int LA120_37 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 37, input);

                    throw nvae;

                }
                }
                break;
            case OP_INC:
                {
                int LA120_38 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 38, input);

                    throw nvae;

                }
                }
                break;
            case OP_DEC:
                {
                int LA120_39 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 39, input);

                    throw nvae;

                }
                }
                break;
            case STAR:
                {
                int LA120_40 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 40, input);

                    throw nvae;

                }
                }
                break;
            case AMP:
                {
                int LA120_41 = input.LA(2);

                if ( (synpred58_CSharpAngular()) ) {
                    alt120=1;
                }
                else if ( (synpred59_CSharpAngular()) ) {
                    alt120=2;
                }
                else if ( (synpred60_CSharpAngular()) ) {
                    alt120=3;
                }
                else if ( (synpred61_CSharpAngular()) ) {
                    alt120=4;
                }
                else if ( (true) ) {
                    alt120=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 41, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;

            }

            switch (alt120) {
                case 1 :
                    // CSharpAngular.g:1613:4: ( expression {...}?)=>exp= expression
                    {
                    pushFollow(FOLLOW_expression_in_from_clause_chld11577);
                    exp=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1614:3: -> text(value=NamingUtil.toVarName(CSharpAngularHelper.prefixGetKeyword($exp.text))+updateExpressionStmt2(NamingUtil.toVarName($exp.text))+\".stream()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", NamingUtil.toVarName(CSharpAngularHelper.prefixGetKeyword((exp!=null?input.toString(exp.start,exp.stop):null)))+updateExpressionStmt2(NamingUtil.toVarName((exp!=null?input.toString(exp.start,exp.stop):null)))+".stream()"));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1616:3: ( expression {...}?)=>exp= expression
                    {
                    pushFollow(FOLLOW_expression_in_from_clause_chld11605);
                    exp=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1617:3: -> text(value=NamingUtil.toClassName(CSharpAngularHelper.linqFromPart($exp.text))+\".stream(), \")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", NamingUtil.toClassName(CSharpAngularHelper.linqFromPart((exp!=null?input.toString(exp.start,exp.stop):null)))+".stream(), "));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:1619:3: ( expression {...}?)=>exp= expression
                    {
                    pushFollow(FOLLOW_expression_in_from_clause_chld11633);
                    exp=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1620:3: -> text(value=NamingUtil.toClassName(CSharpAngularHelper.linqFromPart($exp.text))+\".stream()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", NamingUtil.toClassName(CSharpAngularHelper.linqFromPart((exp!=null?input.toString(exp.start,exp.stop):null)))+".stream()"));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:1622:3: ( expression {...}?)=>exp= expression
                    {
                    pushFollow(FOLLOW_expression_in_from_clause_chld11661);
                    exp=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1623:3: -> text(value=NamingUtil.toClassName(CSharpAngularHelper.linqFromPart($exp.text))+\".stream().filter(\"+updateExpressionStmt(CSharpAngularHelper.prefixGetKeyword(NamingUtil.toVarName($exp.text))))
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", NamingUtil.toClassName(CSharpAngularHelper.linqFromPart((exp!=null?input.toString(exp.start,exp.stop):null)))+".stream().filter("+updateExpressionStmt(CSharpAngularHelper.prefixGetKeyword(NamingUtil.toVarName((exp!=null?input.toString(exp.start,exp.stop):null))))));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:1625:3: exp= expression
                    {
                    pushFollow(FOLLOW_expression_in_from_clause_chld11681);
                    exp=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1626:3: -> text(value=NamingUtil.toClassName(CSharpAngularHelper.linqFromPart($exp.text))+\".stream()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", NamingUtil.toClassName(CSharpAngularHelper.linqFromPart((exp!=null?input.toString(exp.start,exp.stop):null)))+".stream()"));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "from_clause_chld"


    public static class query_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "query_body"
    // CSharpAngular.g:1633:1: query_body : (qryBdyCls= query_body_clauses )? slctOrGrpCls= select_or_group_clause ( ( into_contextual_keyword )=>cond= query_continuation )? -> queryBody(bodyClauses=qryBdyClsselectOrGrpCls=slctOrGrpClsquryCond=cond);
    public final CSharpAngular.query_body_return query_body() throws RecognitionException {
        CSharpAngular.query_body_return retval = new CSharpAngular.query_body_return();
        retval.start = input.LT(1);


        CSharpAngular.query_body_clauses_return qryBdyCls =null;

        CSharpAngular.select_or_group_clause_return slctOrGrpCls =null;

        CSharpAngular.query_continuation_return cond =null;


        try {
            // CSharpAngular.g:1634:3: ( (qryBdyCls= query_body_clauses )? slctOrGrpCls= select_or_group_clause ( ( into_contextual_keyword )=>cond= query_continuation )? -> queryBody(bodyClauses=qryBdyClsselectOrGrpCls=slctOrGrpClsquryCond=cond))
            // CSharpAngular.g:1635:3: (qryBdyCls= query_body_clauses )? slctOrGrpCls= select_or_group_clause ( ( into_contextual_keyword )=>cond= query_continuation )?
            {
            // CSharpAngular.g:1635:3: (qryBdyCls= query_body_clauses )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==IDENTIFIER) ) {
                int LA121_1 = input.LA(2);

                if ( (!((((input.LT(1).getText().equals("group"))||(input.LT(1).getText().equals("select")))))) ) {
                    alt121=1;
                }
            }
            switch (alt121) {
                case 1 :
                    // CSharpAngular.g:1635:4: qryBdyCls= query_body_clauses
                    {
                    pushFollow(FOLLOW_query_body_clauses_in_query_body11712);
                    qryBdyCls=query_body_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_select_or_group_clause_in_query_body11718);
            slctOrGrpCls=select_or_group_clause();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1635:71: ( ( into_contextual_keyword )=>cond= query_continuation )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==IDENTIFIER) ) {
                int LA122_1 = input.LA(2);

                if ( (((synpred62_CSharpAngular()&&synpred62_CSharpAngular())&&(input.LT(1).getText().equals("into")))) ) {
                    alt122=1;
                }
            }
            switch (alt122) {
                case 1 :
                    // CSharpAngular.g:1635:72: ( into_contextual_keyword )=>cond= query_continuation
                    {
                    pushFollow(FOLLOW_query_continuation_in_query_body11729);
                    cond=query_continuation();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1636:3: -> queryBody(bodyClauses=qryBdyClsselectOrGrpCls=slctOrGrpClsquryCond=cond)
              {
                  retval.st = templateLib.getInstanceOf("queryBody",new STAttrMap().put("bodyClauses", qryBdyCls).put("selectOrGrpCls", slctOrGrpCls).put("quryCond", cond));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query_body"


    public static class query_body_clauses_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "query_body_clauses"
    // CSharpAngular.g:1645:1: query_body_clauses : (lst+= query_body_clause )+ -> queryBodyClauses(list=$lst);
    public final CSharpAngular.query_body_clauses_return query_body_clauses() throws RecognitionException {
        CSharpAngular.query_body_clauses_return retval = new CSharpAngular.query_body_clauses_return();
        retval.start = input.LT(1);


        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharpAngular.g:1646:3: ( (lst+= query_body_clause )+ -> queryBodyClauses(list=$lst))
            // CSharpAngular.g:1647:3: (lst+= query_body_clause )+
            {
            // CSharpAngular.g:1647:3: (lst+= query_body_clause )+
            int cnt123=0;
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==IDENTIFIER) ) {
                    int LA123_1 = input.LA(2);

                    if ( (!((((input.LT(1).getText().equals("group"))||(input.LT(1).getText().equals("select")))))) ) {
                        alt123=1;
                    }


                }


                switch (alt123) {
            	case 1 :
            	    // CSharpAngular.g:1647:4: lst+= query_body_clause
            	    {
            	    pushFollow(FOLLOW_query_body_clause_in_query_body_clauses11777);
            	    lst=query_body_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt123 >= 1 ) break loop123;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(123, input);
                        throw eee;
                }
                cnt123++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1648:3: -> queryBodyClauses(list=$lst)
              {
                  retval.st = templateLib.getInstanceOf("queryBodyClauses",new STAttrMap().put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query_body_clauses"


    public static class query_body_clauses_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "query_body_clauses_Chld"
    // CSharpAngular.g:1651:1: query_body_clauses_Chld : cls= query_body_clause -> queryBodyClausesChld(clause=cls);
    public final CSharpAngular.query_body_clauses_Chld_return query_body_clauses_Chld() throws RecognitionException {
        CSharpAngular.query_body_clauses_Chld_return retval = new CSharpAngular.query_body_clauses_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.query_body_clause_return cls =null;


        try {
            // CSharpAngular.g:1652:2: (cls= query_body_clause -> queryBodyClausesChld(clause=cls))
            // CSharpAngular.g:1653:2: cls= query_body_clause
            {
            pushFollow(FOLLOW_query_body_clause_in_query_body_clauses_Chld11806);
            cls=query_body_clause();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1654:2: -> queryBodyClausesChld(clause=cls)
              {
                  retval.st = templateLib.getInstanceOf("queryBodyClausesChld",new STAttrMap().put("clause", cls));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query_body_clauses_Chld"


    public static class query_body_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "query_body_clause"
    // CSharpAngular.g:1666:1: query_body_clause : (cls1= from_clause -> queryBodyClause(clause=cls1)|cls2= let_clause -> queryBodyClause(clause=cls2)|cls3= where_clause -> queryBodyClause(clause=cls3)|cls4= combined_join_clause -> queryBodyClause(clause=cls4)|cls5= orderby_clause -> queryBodyClause(clause=cls5));
    public final CSharpAngular.query_body_clause_return query_body_clause() throws RecognitionException {
        CSharpAngular.query_body_clause_return retval = new CSharpAngular.query_body_clause_return();
        retval.start = input.LT(1);


        CSharpAngular.from_clause_return cls1 =null;

        CSharpAngular.let_clause_return cls2 =null;

        CSharpAngular.where_clause_return cls3 =null;

        CSharpAngular.combined_join_clause_return cls4 =null;

        CSharpAngular.orderby_clause_return cls5 =null;


        try {
            // CSharpAngular.g:1667:3: (cls1= from_clause -> queryBodyClause(clause=cls1)|cls2= let_clause -> queryBodyClause(clause=cls2)|cls3= where_clause -> queryBodyClause(clause=cls3)|cls4= combined_join_clause -> queryBodyClause(clause=cls4)|cls5= orderby_clause -> queryBodyClause(clause=cls5))
            int alt124=5;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==IDENTIFIER) ) {
                int LA124_1 = input.LA(2);

                if ( (!((((input.LT(1).getText().equals("join"))||(input.LT(1).getText().equals("orderby"))||(input.LT(1).getText().equals("where"))||(input.LT(1).getText().equals("let")))))) ) {
                    alt124=1;
                }
                else if ( ((input.LT(1).getText().equals("let"))) ) {
                    alt124=2;
                }
                else if ( ((input.LT(1).getText().equals("where"))) ) {
                    alt124=3;
                }
                else if ( ((input.LT(1).getText().equals("join"))) ) {
                    alt124=4;
                }
                else if ( ((input.LT(1).getText().equals("orderby"))) ) {
                    alt124=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 124, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;

            }
            switch (alt124) {
                case 1 :
                    // CSharpAngular.g:1668:3: cls1= from_clause
                    {
                    pushFollow(FOLLOW_from_clause_in_query_body_clause11834);
                    cls1=from_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1669:3: -> queryBodyClause(clause=cls1)
                      {
                          retval.st = templateLib.getInstanceOf("queryBodyClause",new STAttrMap().put("clause", cls1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1670:5: cls2= let_clause
                    {
                    pushFollow(FOLLOW_let_clause_in_query_body_clause11852);
                    cls2=let_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1671:3: -> queryBodyClause(clause=cls2)
                      {
                          retval.st = templateLib.getInstanceOf("queryBodyClause",new STAttrMap().put("clause", cls2));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:1672:5: cls3= where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_query_body_clause11870);
                    cls3=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1673:3: -> queryBodyClause(clause=cls3)
                      {
                          retval.st = templateLib.getInstanceOf("queryBodyClause",new STAttrMap().put("clause", cls3));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:1674:5: cls4= combined_join_clause
                    {
                    pushFollow(FOLLOW_combined_join_clause_in_query_body_clause11888);
                    cls4=combined_join_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1675:3: -> queryBodyClause(clause=cls4)
                      {
                          retval.st = templateLib.getInstanceOf("queryBodyClause",new STAttrMap().put("clause", cls4));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:1676:5: cls5= orderby_clause
                    {
                    pushFollow(FOLLOW_orderby_clause_in_query_body_clause11906);
                    cls5=orderby_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1677:3: -> queryBodyClause(clause=cls5)
                      {
                          retval.st = templateLib.getInstanceOf("queryBodyClause",new STAttrMap().put("clause", cls5));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query_body_clause"


    public static class let_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "let_clause"
    // CSharpAngular.g:1680:1: let_clause : letkWd= let_contextual_keyword id= IDENTIFIER ASSIGNMENT expr= expression -> letClause(letKeyWrd=letkWdname=$id.textexpression=expr);
    public final CSharpAngular.let_clause_return let_clause() throws RecognitionException {
        CSharpAngular.let_clause_return retval = new CSharpAngular.let_clause_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharpAngular.let_contextual_keyword_return letkWd =null;

        CSharpAngular.expression_return expr =null;


        try {
            // CSharpAngular.g:1681:2: (letkWd= let_contextual_keyword id= IDENTIFIER ASSIGNMENT expr= expression -> letClause(letKeyWrd=letkWdname=$id.textexpression=expr))
            // CSharpAngular.g:1682:2: letkWd= let_contextual_keyword id= IDENTIFIER ASSIGNMENT expr= expression
            {
            pushFollow(FOLLOW_let_contextual_keyword_in_let_clause11934);
            letkWd=let_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_let_clause11938); if (state.failed) return retval;

            match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_let_clause11940); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_let_clause11944);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1683:2: -> letClause(letKeyWrd=letkWdname=$id.textexpression=expr)
              {
                  retval.st = templateLib.getInstanceOf("letClause",new STAttrMap().put("letKeyWrd", letkWd).put("name", (id!=null?id.getText():null)).put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "let_clause"


    public static class where_clause1_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "where_clause1"
    // CSharpAngular.g:1685:1: where_clause1 : whrKwd= where_contextual_keyword expr= boolean_expression -> whereClause(whereKeyWrd=whrKwdexpression=updateExpressionStmt(CSharpAngularHelper.prefixGetKeyword((getExpressionStmt2()!=null && !getExpressionStmt2().equals(\"\") )?$expr.text.replaceAll(getIdName(), getExpressionStmt2()):$expr.text))+updateExpressionStmt2(\"\")+updateIdName(\"\"));
    public final CSharpAngular.where_clause1_return where_clause1() throws RecognitionException {
        CSharpAngular.where_clause1_return retval = new CSharpAngular.where_clause1_return();
        retval.start = input.LT(1);


        CSharpAngular.where_contextual_keyword_return whrKwd =null;

        CSharpAngular.boolean_expression_return expr =null;


        try {
            // CSharpAngular.g:1686:3: (whrKwd= where_contextual_keyword expr= boolean_expression -> whereClause(whereKeyWrd=whrKwdexpression=updateExpressionStmt(CSharpAngularHelper.prefixGetKeyword((getExpressionStmt2()!=null && !getExpressionStmt2().equals(\"\") )?$expr.text.replaceAll(getIdName(), getExpressionStmt2()):$expr.text))+updateExpressionStmt2(\"\")+updateIdName(\"\")))
            // CSharpAngular.g:1687:3: whrKwd= where_contextual_keyword expr= boolean_expression
            {
            pushFollow(FOLLOW_where_contextual_keyword_in_where_clause111976);
            whrKwd=where_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_boolean_expression_in_where_clause111980);
            expr=boolean_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1688:3: -> whereClause(whereKeyWrd=whrKwdexpression=updateExpressionStmt(CSharpAngularHelper.prefixGetKeyword((getExpressionStmt2()!=null && !getExpressionStmt2().equals(\"\") )?$expr.text.replaceAll(getIdName(), getExpressionStmt2()):$expr.text))+updateExpressionStmt2(\"\")+updateIdName(\"\"))
              {
                  retval.st = templateLib.getInstanceOf("whereClause",new STAttrMap().put("whereKeyWrd", whrKwd).put("expression", updateExpressionStmt(CSharpAngularHelper.prefixGetKeyword((getExpressionStmt2()!=null && !getExpressionStmt2().equals("") )?(expr!=null?input.toString(expr.start,expr.stop):null).replaceAll(getIdName(), getExpressionStmt2()):(expr!=null?input.toString(expr.start,expr.stop):null)))+updateExpressionStmt2("")+updateIdName("")));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "where_clause1"


    public static class where_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "where_clause"
    // CSharpAngular.g:1691:1: where_clause : ( ( ( where_clause1 orderby_clause )=> (whr= where_clause1 ord= orderby_clause ) ) -> text(value=\").sorted\"+whr.st.toString())|whr= where_clause1 -> text(value=whr));
    public final CSharpAngular.where_clause_return where_clause() throws RecognitionException {
        CSharpAngular.where_clause_return retval = new CSharpAngular.where_clause_return();
        retval.start = input.LT(1);


        CSharpAngular.where_clause1_return whr =null;

        CSharpAngular.orderby_clause_return ord =null;


        try {
            // CSharpAngular.g:1692:2: ( ( ( where_clause1 orderby_clause )=> (whr= where_clause1 ord= orderby_clause ) ) -> text(value=\").sorted\"+whr.st.toString())|whr= where_clause1 -> text(value=whr))
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==IDENTIFIER) ) {
                int LA125_1 = input.LA(2);

                if ( ((((input.LT(1).getText().equals("where"))&&(input.LT(1).getText().equals("where")))&&synpred63_CSharpAngular())) ) {
                    alt125=1;
                }
                else if ( ((input.LT(1).getText().equals("where"))) ) {
                    alt125=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 125, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;

            }
            switch (alt125) {
                case 1 :
                    // CSharpAngular.g:1693:3: ( ( where_clause1 orderby_clause )=> (whr= where_clause1 ord= orderby_clause ) )
                    {
                    // CSharpAngular.g:1693:3: ( ( where_clause1 orderby_clause )=> (whr= where_clause1 ord= orderby_clause ) )
                    // CSharpAngular.g:1693:4: ( where_clause1 orderby_clause )=> (whr= where_clause1 ord= orderby_clause )
                    {
                    // CSharpAngular.g:1693:39: (whr= where_clause1 ord= orderby_clause )
                    // CSharpAngular.g:1693:40: whr= where_clause1 ord= orderby_clause
                    {
                    pushFollow(FOLLOW_where_clause1_in_where_clause12022);
                    whr=where_clause1();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_orderby_clause_in_where_clause12026);
                    ord=orderby_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1694:3: -> text(value=\").sorted\"+whr.st.toString())
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ").sorted"+whr.st.toString()));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1696:4: whr= where_clause1
                    {
                    pushFollow(FOLLOW_where_clause1_in_where_clause12049);
                    whr=where_clause1();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1697:3: -> text(value=whr)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", whr));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "where_clause"


    public static class join_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "join_clause"
    // CSharpAngular.g:1705:1: join_clause : join_contextual_keyword (t= type )? id1= IDENTIFIER IN expr1= expression on_contextual_keyword expr2= expression equals_contextual_keyword expr3= expression -> joinClause(type=tjoinId=$id1.textexpression1=expr1expression2=expr2expression3=expr3);
    public final CSharpAngular.join_clause_return join_clause() throws RecognitionException {
        CSharpAngular.join_clause_return retval = new CSharpAngular.join_clause_return();
        retval.start = input.LT(1);


        Token id1=null;
        CSharpAngular.type_return t =null;

        CSharpAngular.expression_return expr1 =null;

        CSharpAngular.expression_return expr2 =null;

        CSharpAngular.expression_return expr3 =null;


        try {
            // CSharpAngular.g:1706:3: ( join_contextual_keyword (t= type )? id1= IDENTIFIER IN expr1= expression on_contextual_keyword expr2= expression equals_contextual_keyword expr3= expression -> joinClause(type=tjoinId=$id1.textexpression1=expr1expression2=expr2expression3=expr3))
            // CSharpAngular.g:1708:3: join_contextual_keyword (t= type )? id1= IDENTIFIER IN expr1= expression on_contextual_keyword expr2= expression equals_contextual_keyword expr3= expression
            {
            pushFollow(FOLLOW_join_contextual_keyword_in_join_clause12083);
            join_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1708:27: (t= type )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==BOOL||LA126_0==BYTE||LA126_0==CHAR||LA126_0==DECIMAL||LA126_0==DOUBLE||LA126_0==FLOAT||LA126_0==INT||LA126_0==LONG||LA126_0==OBJECT||LA126_0==SBYTE||LA126_0==SHORT||LA126_0==STRING||(LA126_0 >= UINT && LA126_0 <= ULONG)||LA126_0==USHORT||LA126_0==VOID) ) {
                alt126=1;
            }
            else if ( (LA126_0==IDENTIFIER) ) {
                int LA126_2 = input.LA(2);

                if ( (LA126_2==DOT||LA126_2==DOUBLE_COLON||LA126_2==IDENTIFIER||LA126_2==INTERR||LA126_2==LT||LA126_2==OPEN_BRACKET||LA126_2==STAR) ) {
                    alt126=1;
                }
            }
            switch (alt126) {
                case 1 :
                    // CSharpAngular.g:1708:28: t= type
                    {
                    pushFollow(FOLLOW_type_in_join_clause12088);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            id1=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_join_clause12094); if (state.failed) return retval;

            match(input,IN,FOLLOW_IN_in_join_clause12096); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_clause12100);
            expr1=expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_on_contextual_keyword_in_join_clause12102);
            on_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_clause12106);
            expr2=expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_equals_contextual_keyword_in_join_clause12108);
            equals_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_clause12112);
            expr3=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1709:3: -> joinClause(type=tjoinId=$id1.textexpression1=expr1expression2=expr2expression3=expr3)
              {
                  retval.st = templateLib.getInstanceOf("joinClause",new STAttrMap().put("type", t).put("joinId", (id1!=null?id1.getText():null)).put("expression1", expr1).put("expression2", expr2).put("expression3", expr3));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_clause"


    public static class join_into_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "join_into_clause"
    // CSharpAngular.g:1712:1: join_into_clause : (jKwd= join_contextual_keyword t= type )? id1= IDENTIFIER IN expr1= expression onKwd= on_contextual_keyword expr2= expression eqKwd= equals_contextual_keyword expr3= expression into_contextual_keyword id2= IDENTIFIER -> joinIntoClause(joinKeyWrd=$jKwd.texttype=tjoinId=$id1.textexpression1=expr1onKeyWrd=onKwdexpression2=expr2equalsKeyWrd=eqKwdexpression3=expr3intoId=$id2.text);
    public final CSharpAngular.join_into_clause_return join_into_clause() throws RecognitionException {
        CSharpAngular.join_into_clause_return retval = new CSharpAngular.join_into_clause_return();
        retval.start = input.LT(1);


        Token id1=null;
        Token id2=null;
        CSharpAngular.join_contextual_keyword_return jKwd =null;

        CSharpAngular.type_return t =null;

        CSharpAngular.expression_return expr1 =null;

        CSharpAngular.on_contextual_keyword_return onKwd =null;

        CSharpAngular.expression_return expr2 =null;

        CSharpAngular.equals_contextual_keyword_return eqKwd =null;

        CSharpAngular.expression_return expr3 =null;


        try {
            // CSharpAngular.g:1713:2: ( (jKwd= join_contextual_keyword t= type )? id1= IDENTIFIER IN expr1= expression onKwd= on_contextual_keyword expr2= expression eqKwd= equals_contextual_keyword expr3= expression into_contextual_keyword id2= IDENTIFIER -> joinIntoClause(joinKeyWrd=$jKwd.texttype=tjoinId=$id1.textexpression1=expr1onKeyWrd=onKwdexpression2=expr2equalsKeyWrd=eqKwdexpression3=expr3intoId=$id2.text))
            // CSharpAngular.g:1714:2: (jKwd= join_contextual_keyword t= type )? id1= IDENTIFIER IN expr1= expression onKwd= on_contextual_keyword expr2= expression eqKwd= equals_contextual_keyword expr3= expression into_contextual_keyword id2= IDENTIFIER
            {
            // CSharpAngular.g:1714:2: (jKwd= join_contextual_keyword t= type )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==IDENTIFIER) ) {
                int LA127_1 = input.LA(2);

                if ( (LA127_1==BOOL||LA127_1==BYTE||LA127_1==CHAR||LA127_1==DECIMAL||LA127_1==DOUBLE||LA127_1==FLOAT||LA127_1==IDENTIFIER||LA127_1==INT||LA127_1==LONG||LA127_1==OBJECT||LA127_1==SBYTE||LA127_1==SHORT||LA127_1==STRING||(LA127_1 >= UINT && LA127_1 <= ULONG)||LA127_1==USHORT||LA127_1==VOID) ) {
                    alt127=1;
                }
            }
            switch (alt127) {
                case 1 :
                    // CSharpAngular.g:1714:3: jKwd= join_contextual_keyword t= type
                    {
                    pushFollow(FOLLOW_join_contextual_keyword_in_join_into_clause12156);
                    jKwd=join_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_join_into_clause12160);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            id1=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_join_into_clause12166); if (state.failed) return retval;

            match(input,IN,FOLLOW_IN_in_join_into_clause12168); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_into_clause12172);
            expr1=expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_on_contextual_keyword_in_join_into_clause12176);
            onKwd=on_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_into_clause12180);
            expr2=expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_equals_contextual_keyword_in_join_into_clause12184);
            eqKwd=equals_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_into_clause12188);
            expr3=expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_into_contextual_keyword_in_join_into_clause12190);
            into_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            id2=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_join_into_clause12194); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1715:2: -> joinIntoClause(joinKeyWrd=$jKwd.texttype=tjoinId=$id1.textexpression1=expr1onKeyWrd=onKwdexpression2=expr2equalsKeyWrd=eqKwdexpression3=expr3intoId=$id2.text)
              {
                  retval.st = templateLib.getInstanceOf("joinIntoClause",new STAttrMap().put("joinKeyWrd", (jKwd!=null?input.toString(jKwd.start,jKwd.stop):null)).put("type", t).put("joinId", (id1!=null?id1.getText():null)).put("expression1", expr1).put("onKeyWrd", onKwd).put("expression2", expr2).put("equalsKeyWrd", eqKwd).put("expression3", expr3).put("intoId", (id2!=null?id2.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_into_clause"


    public static class combined_join_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "combined_join_clause"
    // CSharpAngular.g:1723:1: combined_join_clause : jck= join_contextual_keyword (t= type )? id1= IDENTIFIER IN expr1= expression ock= on_contextual_keyword expr2= expression eck= equals_contextual_keyword expr3= expression (into= into_query_clause )? -> combinedJoinClause(expression1=CSharpAngularHelper.linqFromPart($expr1.text)expression3=updateExpressionStmt(CSharpHelper.prefixGetKeyword($expr2.text)+\".equals( \"+CSharpHelper.prefixGetKeyword($expr3.text)+\" )\")intoval=into!=null?into.st.toString()+ getExpressionStmt():null );
    public final CSharpAngular.combined_join_clause_return combined_join_clause() throws RecognitionException {
        CSharpAngular.combined_join_clause_return retval = new CSharpAngular.combined_join_clause_return();
        retval.start = input.LT(1);


        Token id1=null;
        CSharpAngular.join_contextual_keyword_return jck =null;

        CSharpAngular.type_return t =null;

        CSharpAngular.expression_return expr1 =null;

        CSharpAngular.on_contextual_keyword_return ock =null;

        CSharpAngular.expression_return expr2 =null;

        CSharpAngular.equals_contextual_keyword_return eck =null;

        CSharpAngular.expression_return expr3 =null;

        CSharpAngular.into_query_clause_return into =null;


        try {
            // CSharpAngular.g:1724:3: (jck= join_contextual_keyword (t= type )? id1= IDENTIFIER IN expr1= expression ock= on_contextual_keyword expr2= expression eck= equals_contextual_keyword expr3= expression (into= into_query_clause )? -> combinedJoinClause(expression1=CSharpAngularHelper.linqFromPart($expr1.text)expression3=updateExpressionStmt(CSharpHelper.prefixGetKeyword($expr2.text)+\".equals( \"+CSharpHelper.prefixGetKeyword($expr3.text)+\" )\")intoval=into!=null?into.st.toString()+ getExpressionStmt():null ))
            // CSharpAngular.g:1725:3: jck= join_contextual_keyword (t= type )? id1= IDENTIFIER IN expr1= expression ock= on_contextual_keyword expr2= expression eck= equals_contextual_keyword expr3= expression (into= into_query_clause )?
            {
            pushFollow(FOLLOW_join_contextual_keyword_in_combined_join_clause12257);
            jck=join_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1725:31: (t= type )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==BOOL||LA128_0==BYTE||LA128_0==CHAR||LA128_0==DECIMAL||LA128_0==DOUBLE||LA128_0==FLOAT||LA128_0==INT||LA128_0==LONG||LA128_0==OBJECT||LA128_0==SBYTE||LA128_0==SHORT||LA128_0==STRING||(LA128_0 >= UINT && LA128_0 <= ULONG)||LA128_0==USHORT||LA128_0==VOID) ) {
                alt128=1;
            }
            else if ( (LA128_0==IDENTIFIER) ) {
                int LA128_2 = input.LA(2);

                if ( (LA128_2==DOT||LA128_2==DOUBLE_COLON||LA128_2==IDENTIFIER||LA128_2==INTERR||LA128_2==LT||LA128_2==OPEN_BRACKET||LA128_2==STAR) ) {
                    alt128=1;
                }
            }
            switch (alt128) {
                case 1 :
                    // CSharpAngular.g:1725:32: t= type
                    {
                    pushFollow(FOLLOW_type_in_combined_join_clause12262);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            id1=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_combined_join_clause12268); if (state.failed) return retval;

            match(input,IN,FOLLOW_IN_in_combined_join_clause12270); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_combined_join_clause12274);
            expr1=expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_on_contextual_keyword_in_combined_join_clause12278);
            ock=on_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_combined_join_clause12282);
            expr2=expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_equals_contextual_keyword_in_combined_join_clause12286);
            eck=equals_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_combined_join_clause12290);
            expr3=expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1725:166: (into= into_query_clause )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==IDENTIFIER) ) {
                int LA129_1 = input.LA(2);

                if ( (LA129_1==IDENTIFIER) ) {
                    int LA129_3 = input.LA(3);

                    if ( ((input.LT(1).getText().equals("into"))) ) {
                        alt129=1;
                    }
                }
            }
            switch (alt129) {
                case 1 :
                    // CSharpAngular.g:1725:167: into= into_query_clause
                    {
                    pushFollow(FOLLOW_into_query_clause_in_combined_join_clause12295);
                    into=into_query_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1726:3: -> combinedJoinClause(expression1=CSharpAngularHelper.linqFromPart($expr1.text)expression3=updateExpressionStmt(CSharpHelper.prefixGetKeyword($expr2.text)+\".equals( \"+CSharpHelper.prefixGetKeyword($expr3.text)+\" )\")intoval=into!=null?into.st.toString()+ getExpressionStmt():null )
              {
                  retval.st = templateLib.getInstanceOf("combinedJoinClause",new STAttrMap().put("expression1", CSharpAngularHelper.linqFromPart((expr1!=null?input.toString(expr1.start,expr1.stop):null))).put("expression3", updateExpressionStmt(CSharpHelper.prefixGetKeyword((expr2!=null?input.toString(expr2.start,expr2.stop):null))+".equals( "+CSharpHelper.prefixGetKeyword((expr3!=null?input.toString(expr3.start,expr3.stop):null))+" )")).put("intoval", into!=null?into.st.toString()+ getExpressionStmt():null ));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "combined_join_clause"


    public static class into_query_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "into_query_clause"
    // CSharpAngular.g:1729:1: into_query_clause : ( ( ( into_contextual_keyword IDENTIFIER from_contextual_keyword IDENTIFIER IN expression where_clause )=>into1= into_contextual_keyword id1= IDENTIFIER from_contextual_keyword id3= IDENTIFIER IN exp= expression ) -> text(value=$id1.text+\" -> \"+updateIdName($id3.text)+updateExpressionStmt2($exp.text))|into= into_contextual_keyword id2= IDENTIFIER -> text(value=$id2.text+\" -> \"));
    public final CSharpAngular.into_query_clause_return into_query_clause() throws RecognitionException {
        CSharpAngular.into_query_clause_return retval = new CSharpAngular.into_query_clause_return();
        retval.start = input.LT(1);


        Token id1=null;
        Token id3=null;
        Token id2=null;
        CSharpAngular.into_contextual_keyword_return into1 =null;

        CSharpAngular.expression_return exp =null;

        CSharpAngular.into_contextual_keyword_return into =null;


        try {
            // CSharpAngular.g:1730:3: ( ( ( into_contextual_keyword IDENTIFIER from_contextual_keyword IDENTIFIER IN expression where_clause )=>into1= into_contextual_keyword id1= IDENTIFIER from_contextual_keyword id3= IDENTIFIER IN exp= expression ) -> text(value=$id1.text+\" -> \"+updateIdName($id3.text)+updateExpressionStmt2($exp.text))|into= into_contextual_keyword id2= IDENTIFIER -> text(value=$id2.text+\" -> \"))
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==IDENTIFIER) ) {
                int LA130_1 = input.LA(2);

                if ( ((((input.LT(1).getText().equals("into"))&&(input.LT(1).getText().equals("into")))&&synpred64_CSharpAngular())) ) {
                    alt130=1;
                }
                else if ( ((input.LT(1).getText().equals("into"))) ) {
                    alt130=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 130, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;

            }
            switch (alt130) {
                case 1 :
                    // CSharpAngular.g:1730:4: ( ( into_contextual_keyword IDENTIFIER from_contextual_keyword IDENTIFIER IN expression where_clause )=>into1= into_contextual_keyword id1= IDENTIFIER from_contextual_keyword id3= IDENTIFIER IN exp= expression )
                    {
                    // CSharpAngular.g:1730:4: ( ( into_contextual_keyword IDENTIFIER from_contextual_keyword IDENTIFIER IN expression where_clause )=>into1= into_contextual_keyword id1= IDENTIFIER from_contextual_keyword id3= IDENTIFIER IN exp= expression )
                    // CSharpAngular.g:1730:5: ( into_contextual_keyword IDENTIFIER from_contextual_keyword IDENTIFIER IN expression where_clause )=>into1= into_contextual_keyword id1= IDENTIFIER from_contextual_keyword id3= IDENTIFIER IN exp= expression
                    {
                    pushFollow(FOLLOW_into_contextual_keyword_in_into_query_clause12360);
                    into1=into_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    id1=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_into_query_clause12364); if (state.failed) return retval;

                    pushFollow(FOLLOW_from_contextual_keyword_in_into_query_clause12366);
                    from_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    id3=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_into_query_clause12370); if (state.failed) return retval;

                    match(input,IN,FOLLOW_IN_in_into_query_clause12372); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_in_into_query_clause12376);
                    exp=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1732:3: -> text(value=$id1.text+\" -> \"+updateIdName($id3.text)+updateExpressionStmt2($exp.text))
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (id1!=null?id1.getText():null)+" -> "+updateIdName((id3!=null?id3.getText():null))+updateExpressionStmt2((exp!=null?input.toString(exp.start,exp.stop):null))));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1733:4: into= into_contextual_keyword id2= IDENTIFIER
                    {
                    pushFollow(FOLLOW_into_contextual_keyword_in_into_query_clause12396);
                    into=into_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    id2=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_into_query_clause12400); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1734:3: -> text(value=$id2.text+\" -> \")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (id2!=null?id2.getText():null)+" -> "));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "into_query_clause"


    public static class orderby_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "orderby_clause"
    // CSharpAngular.g:1745:1: orderby_clause : orderby_contextual_keyword ods= orderings -> text(value=\"\");
    public final CSharpAngular.orderby_clause_return orderby_clause() throws RecognitionException {
        CSharpAngular.orderby_clause_return retval = new CSharpAngular.orderby_clause_return();
        retval.start = input.LT(1);


        CSharpAngular.orderings_return ods =null;


        try {
            // CSharpAngular.g:1746:3: ( orderby_contextual_keyword ods= orderings -> text(value=\"\"))
            // CSharpAngular.g:1747:3: orderby_contextual_keyword ods= orderings
            {
            pushFollow(FOLLOW_orderby_contextual_keyword_in_orderby_clause12439);
            orderby_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_orderings_in_orderby_clause12443);
            ods=orderings();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1748:3: -> text(value=\"\")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orderby_clause"


    public static class orderings_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "orderings"
    // CSharpAngular.g:1751:1: orderings : fstOrd= ordering (chld+= orderings_Chld )* -> orderings(firstOrdrng=fstOrdlist=$chld);
    public final CSharpAngular.orderings_return orderings() throws RecognitionException {
        CSharpAngular.orderings_return retval = new CSharpAngular.orderings_return();
        retval.start = input.LT(1);


        List list_chld=null;
        CSharpAngular.ordering_return fstOrd =null;

        RuleReturnScope chld = null;
        try {
            // CSharpAngular.g:1752:2: (fstOrd= ordering (chld+= orderings_Chld )* -> orderings(firstOrdrng=fstOrdlist=$chld))
            // CSharpAngular.g:1753:2: fstOrd= ordering (chld+= orderings_Chld )*
            {
            pushFollow(FOLLOW_ordering_in_orderings12470);
            fstOrd=ordering();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1753:18: (chld+= orderings_Chld )*
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);

                if ( (LA131_0==COMMA) ) {
                    alt131=1;
                }


                switch (alt131) {
            	case 1 :
            	    // CSharpAngular.g:1753:19: chld+= orderings_Chld
            	    {
            	    pushFollow(FOLLOW_orderings_Chld_in_orderings12475);
            	    chld=orderings_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_chld==null) list_chld=new ArrayList();
            	    list_chld.add(chld.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1754:2: -> orderings(firstOrdrng=fstOrdlist=$chld)
              {
                  retval.st = templateLib.getInstanceOf("orderings",new STAttrMap().put("firstOrdrng", fstOrd).put("list", list_chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orderings"


    public static class orderings_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "orderings_Chld"
    // CSharpAngular.g:1757:1: orderings_Chld : COMMA od= ordering -> orderingsChld(ordrng=od);
    public final CSharpAngular.orderings_Chld_return orderings_Chld() throws RecognitionException {
        CSharpAngular.orderings_Chld_return retval = new CSharpAngular.orderings_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.ordering_return od =null;


        try {
            // CSharpAngular.g:1758:3: ( COMMA od= ordering -> orderingsChld(ordrng=od))
            // CSharpAngular.g:1759:3: COMMA od= ordering
            {
            match(input,COMMA,FOLLOW_COMMA_in_orderings_Chld12505); if (state.failed) return retval;

            pushFollow(FOLLOW_ordering_in_orderings_Chld12510);
            od=ordering();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1760:3: -> orderingsChld(ordrng=od)
              {
                  retval.st = templateLib.getInstanceOf("orderingsChld",new STAttrMap().put("ordrng", od));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orderings_Chld"


    public static class ordering_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "ordering"
    // CSharpAngular.g:1768:1: ordering : expr= expression (orng= ordering_direction )? -> ordering(expression=$expr.st.toString().trim()direction=orng);
    public final CSharpAngular.ordering_return ordering() throws RecognitionException {
        CSharpAngular.ordering_return retval = new CSharpAngular.ordering_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_return expr =null;

        CSharpAngular.ordering_direction_return orng =null;


        try {
            // CSharpAngular.g:1769:3: (expr= expression (orng= ordering_direction )? -> ordering(expression=$expr.st.toString().trim()direction=orng))
            // CSharpAngular.g:1770:3: expr= expression (orng= ordering_direction )?
            {
            pushFollow(FOLLOW_expression_in_ordering12544);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1770:19: (orng= ordering_direction )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==IDENTIFIER) ) {
                int LA132_1 = input.LA(2);

                if ( (LA132_1==EOF||LA132_1==COMMA) ) {
                    alt132=1;
                }
                else if ( (LA132_1==IDENTIFIER) ) {
                    int LA132_4 = input.LA(3);

                    if ( (((input.LT(1).getText().equals("descending"))||(input.LT(1).getText().equals("ascending")))) ) {
                        alt132=1;
                    }
                }
            }
            switch (alt132) {
                case 1 :
                    // CSharpAngular.g:1770:20: orng= ordering_direction
                    {
                    pushFollow(FOLLOW_ordering_direction_in_ordering12549);
                    orng=ordering_direction();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1771:3: -> ordering(expression=$expr.st.toString().trim()direction=orng)
              {
                  retval.st = templateLib.getInstanceOf("ordering",new STAttrMap().put("expression", (expr!=null?expr.st:null).toString().trim()).put("direction", orng));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ordering"


    public static class ordering_direction_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "ordering_direction"
    // CSharpAngular.g:1780:1: ordering_direction : ( ascending_contextual_keyword -> orderingDirectionAsc(| descending_contextual_keyword -> orderingDirectionDesc();
    public final CSharpAngular.ordering_direction_return ordering_direction() throws RecognitionException {
        CSharpAngular.ordering_direction_return retval = new CSharpAngular.ordering_direction_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:1781:3: ( ascending_contextual_keyword -> orderingDirectionAsc(| descending_contextual_keyword -> orderingDirectionDesc()
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==IDENTIFIER) ) {
                int LA133_1 = input.LA(2);

                if ( ((input.LT(1).getText().equals("ascending"))) ) {
                    alt133=1;
                }
                else if ( ((input.LT(1).getText().equals("descending"))) ) {
                    alt133=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 133, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;

            }
            switch (alt133) {
                case 1 :
                    // CSharpAngular.g:1782:3: ascending_contextual_keyword
                    {
                    pushFollow(FOLLOW_ascending_contextual_keyword_in_ordering_direction12588);
                    ascending_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1783:3: -> orderingDirectionAsc(
                      {
                          retval.st = templateLib.getInstanceOf("orderingDirectionAsc");
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1784:5: descending_contextual_keyword
                    {
                    pushFollow(FOLLOW_descending_contextual_keyword_in_ordering_direction12601);
                    descending_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1785:3: -> orderingDirectionDesc(
                      {
                          retval.st = templateLib.getInstanceOf("orderingDirectionDesc");
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ordering_direction"


    public static class select_or_group_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "select_or_group_clause"
    // CSharpAngular.g:1787:1: select_or_group_clause : (cls1= select_clause -> selectOrGroupClause(clause=cls1)|cls2= group_clause -> selectOrGroupClause(clause=cls2));
    public final CSharpAngular.select_or_group_clause_return select_or_group_clause() throws RecognitionException {
        CSharpAngular.select_or_group_clause_return retval = new CSharpAngular.select_or_group_clause_return();
        retval.start = input.LT(1);


        CSharpAngular.select_clause_return cls1 =null;

        CSharpAngular.group_clause_return cls2 =null;


        try {
            // CSharpAngular.g:1788:2: (cls1= select_clause -> selectOrGroupClause(clause=cls1)|cls2= group_clause -> selectOrGroupClause(clause=cls2))
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==IDENTIFIER) ) {
                int LA134_1 = input.LA(2);

                if ( ((input.LT(1).getText().equals("select"))) ) {
                    alt134=1;
                }
                else if ( ((input.LT(1).getText().equals("group"))) ) {
                    alt134=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 134, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;

            }
            switch (alt134) {
                case 1 :
                    // CSharpAngular.g:1789:2: cls1= select_clause
                    {
                    pushFollow(FOLLOW_select_clause_in_select_or_group_clause12624);
                    cls1=select_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1790:2: -> selectOrGroupClause(clause=cls1)
                      {
                          retval.st = templateLib.getInstanceOf("selectOrGroupClause",new STAttrMap().put("clause", cls1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1791:4: cls2= group_clause
                    {
                    pushFollow(FOLLOW_group_clause_in_select_or_group_clause12640);
                    cls2=group_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1792:2: -> selectOrGroupClause(clause=cls2)
                      {
                          retval.st = templateLib.getInstanceOf("selectOrGroupClause",new STAttrMap().put("clause", cls2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "select_or_group_clause"


    public static class select_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "select_clause"
    // CSharpAngular.g:1800:1: select_clause : slctKwd= select_contextual_keyword expr= expression -> text(value=expr.st.toString()+\" -> \" + getExpressionStmt() + updateExpressionStmt(\"\"));
    public final CSharpAngular.select_clause_return select_clause() throws RecognitionException {
        CSharpAngular.select_clause_return retval = new CSharpAngular.select_clause_return();
        retval.start = input.LT(1);


        CSharpAngular.select_contextual_keyword_return slctKwd =null;

        CSharpAngular.expression_return expr =null;


        try {
            // CSharpAngular.g:1801:3: (slctKwd= select_contextual_keyword expr= expression -> text(value=expr.st.toString()+\" -> \" + getExpressionStmt() + updateExpressionStmt(\"\")))
            // CSharpAngular.g:1802:3: slctKwd= select_contextual_keyword expr= expression
            {
            pushFollow(FOLLOW_select_contextual_keyword_in_select_clause12673);
            slctKwd=select_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_select_clause12677);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1803:3: -> text(value=expr.st.toString()+\" -> \" + getExpressionStmt() + updateExpressionStmt(\"\"))
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", expr.st.toString()+" -> " + getExpressionStmt() + updateExpressionStmt("")));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "select_clause"


    public static class group_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "group_clause"
    // CSharpAngular.g:1805:1: group_clause : grpKwd= group_contextual_keyword expr1= expression byKwrd= by_contextual_keyword expr2= expression -> groupClause(groupkeyWrd=grpKwdexpression1=CSharpAngularHelper.prefixGetKeyword($expr1.text)byKeyWrd=\" -> \"expression2=CSharpAngularHelper.prefixGetKeyword($expr2.text)+\")\");
    public final CSharpAngular.group_clause_return group_clause() throws RecognitionException {
        CSharpAngular.group_clause_return retval = new CSharpAngular.group_clause_return();
        retval.start = input.LT(1);


        CSharpAngular.group_contextual_keyword_return grpKwd =null;

        CSharpAngular.expression_return expr1 =null;

        CSharpAngular.by_contextual_keyword_return byKwrd =null;

        CSharpAngular.expression_return expr2 =null;


        try {
            // CSharpAngular.g:1806:2: (grpKwd= group_contextual_keyword expr1= expression byKwrd= by_contextual_keyword expr2= expression -> groupClause(groupkeyWrd=grpKwdexpression1=CSharpAngularHelper.prefixGetKeyword($expr1.text)byKeyWrd=\" -> \"expression2=CSharpAngularHelper.prefixGetKeyword($expr2.text)+\")\"))
            // CSharpAngular.g:1807:2: grpKwd= group_contextual_keyword expr1= expression byKwrd= by_contextual_keyword expr2= expression
            {
            pushFollow(FOLLOW_group_contextual_keyword_in_group_clause12703);
            grpKwd=group_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_group_clause12707);
            expr1=expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_by_contextual_keyword_in_group_clause12711);
            byKwrd=by_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_group_clause12715);
            expr2=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1808:2: -> groupClause(groupkeyWrd=grpKwdexpression1=CSharpAngularHelper.prefixGetKeyword($expr1.text)byKeyWrd=\" -> \"expression2=CSharpAngularHelper.prefixGetKeyword($expr2.text)+\")\")
              {
                  retval.st = templateLib.getInstanceOf("groupClause",new STAttrMap().put("groupkeyWrd", grpKwd).put("expression1", CSharpAngularHelper.prefixGetKeyword((expr1!=null?input.toString(expr1.start,expr1.stop):null))).put("byKeyWrd", " -> ").put("expression2", CSharpAngularHelper.prefixGetKeyword((expr2!=null?input.toString(expr2.start,expr2.stop):null))+")"));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_clause"


    public static class query_continuation_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "query_continuation"
    // CSharpAngular.g:1812:1: query_continuation : intoKwd= into_contextual_keyword IDENTIFIER qBdy= query_body -> queryContinuation(intoKeyWrd=intoKwdname=$IDENTIFIER.textqueryBody=qBdy);
    public final CSharpAngular.query_continuation_return query_continuation() throws RecognitionException {
        CSharpAngular.query_continuation_return retval = new CSharpAngular.query_continuation_return();
        retval.start = input.LT(1);


        Token IDENTIFIER159=null;
        CSharpAngular.into_contextual_keyword_return intoKwd =null;

        CSharpAngular.query_body_return qBdy =null;


        try {
            // CSharpAngular.g:1813:2: (intoKwd= into_contextual_keyword IDENTIFIER qBdy= query_body -> queryContinuation(intoKeyWrd=intoKwdname=$IDENTIFIER.textqueryBody=qBdy))
            // CSharpAngular.g:1814:2: intoKwd= into_contextual_keyword IDENTIFIER qBdy= query_body
            {
            pushFollow(FOLLOW_into_contextual_keyword_in_query_continuation12754);
            intoKwd=into_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            IDENTIFIER159=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_query_continuation12756); if (state.failed) return retval;

            pushFollow(FOLLOW_query_body_in_query_continuation12760);
            qBdy=query_body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1815:2: -> queryContinuation(intoKeyWrd=intoKwdname=$IDENTIFIER.textqueryBody=qBdy)
              {
                  retval.st = templateLib.getInstanceOf("queryContinuation",new STAttrMap().put("intoKeyWrd", intoKwd).put("name", (IDENTIFIER159!=null?IDENTIFIER159.getText():null)).put("queryBody", qBdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query_continuation"


    public static class assignment_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "assignment"
    // CSharpAngular.g:1818:1: assignment : unExpr= unary_expression optr= assignment_operator ( ( ({...}?) expr= expression -> text(value=expr)) | (expr= expression -> assignment(unaryExpr=CSharpAngularHelper.processAssignmentStmtsNew(unExpr.st.toString().trim(),optr.st.toString().trim(),expr.st.toString().trim()))) ) ;
    public final CSharpAngular.assignment_return assignment() throws RecognitionException {
        CSharpAngular.assignment_return retval = new CSharpAngular.assignment_return();
        retval.start = input.LT(1);


        CSharpAngular.unary_expression_return unExpr =null;

        CSharpAngular.assignment_operator_return optr =null;

        CSharpAngular.expression_return expr =null;


        try {
            // CSharpAngular.g:1819:2: (unExpr= unary_expression optr= assignment_operator ( ( ({...}?) expr= expression -> text(value=expr)) | (expr= expression -> assignment(unaryExpr=CSharpAngularHelper.processAssignmentStmtsNew(unExpr.st.toString().trim(),optr.st.toString().trim(),expr.st.toString().trim()))) ) )
            // CSharpAngular.g:1820:2: unExpr= unary_expression optr= assignment_operator ( ( ({...}?) expr= expression -> text(value=expr)) | (expr= expression -> assignment(unaryExpr=CSharpAngularHelper.processAssignmentStmtsNew(unExpr.st.toString().trim(),optr.st.toString().trim(),expr.st.toString().trim()))) )
            {
            pushFollow(FOLLOW_unary_expression_in_assignment12794);
            unExpr=unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_assignment_operator_in_assignment12798);
            optr=assignment_operator();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1820:51: ( ( ({...}?) expr= expression -> text(value=expr)) | (expr= expression -> assignment(unaryExpr=CSharpAngularHelper.processAssignmentStmtsNew(unExpr.st.toString().trim(),optr.st.toString().trim(),expr.st.toString().trim()))) )
            int alt135=2;
            switch ( input.LA(1) ) {
            case OPEN_PARENS:
                {
                int LA135_1 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 1, input);

                    throw nvae;

                }
                }
                break;
            case TRUE:
                {
                int LA135_2 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 2, input);

                    throw nvae;

                }
                }
                break;
            case FALSE:
                {
                int LA135_3 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 3, input);

                    throw nvae;

                }
                }
                break;
            case INTEGER_LITERAL:
                {
                int LA135_4 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 4, input);

                    throw nvae;

                }
                }
                break;
            case REAL_LITERAL:
                {
                int LA135_5 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 5, input);

                    throw nvae;

                }
                }
                break;
            case CHARACTER_LITERAL:
                {
                int LA135_6 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 6, input);

                    throw nvae;

                }
                }
                break;
            case STRING_LITERAL:
                {
                int LA135_7 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 7, input);

                    throw nvae;

                }
                }
                break;
            case NULL:
                {
                int LA135_8 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 8, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA135_9 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 9, input);

                    throw nvae;

                }
                }
                break;
            case BOOL:
                {
                int LA135_10 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 10, input);

                    throw nvae;

                }
                }
                break;
            case BYTE:
                {
                int LA135_11 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 11, input);

                    throw nvae;

                }
                }
                break;
            case CHAR:
                {
                int LA135_12 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 12, input);

                    throw nvae;

                }
                }
                break;
            case DECIMAL:
                {
                int LA135_13 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 13, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE:
                {
                int LA135_14 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 14, input);

                    throw nvae;

                }
                }
                break;
            case FLOAT:
                {
                int LA135_15 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 15, input);

                    throw nvae;

                }
                }
                break;
            case INT:
                {
                int LA135_16 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 16, input);

                    throw nvae;

                }
                }
                break;
            case LONG:
                {
                int LA135_17 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 17, input);

                    throw nvae;

                }
                }
                break;
            case OBJECT:
                {
                int LA135_18 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 18, input);

                    throw nvae;

                }
                }
                break;
            case SBYTE:
                {
                int LA135_19 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 19, input);

                    throw nvae;

                }
                }
                break;
            case SHORT:
                {
                int LA135_20 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 20, input);

                    throw nvae;

                }
                }
                break;
            case STRING:
                {
                int LA135_21 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 21, input);

                    throw nvae;

                }
                }
                break;
            case UINT:
                {
                int LA135_22 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 22, input);

                    throw nvae;

                }
                }
                break;
            case ULONG:
                {
                int LA135_23 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 23, input);

                    throw nvae;

                }
                }
                break;
            case USHORT:
                {
                int LA135_24 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 24, input);

                    throw nvae;

                }
                }
                break;
            case THIS:
                {
                int LA135_25 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 25, input);

                    throw nvae;

                }
                }
                break;
            case BASE:
                {
                int LA135_26 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 26, input);

                    throw nvae;

                }
                }
                break;
            case NEW:
                {
                int LA135_27 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 27, input);

                    throw nvae;

                }
                }
                break;
            case TYPEOF:
                {
                int LA135_28 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 28, input);

                    throw nvae;

                }
                }
                break;
            case CHECKED:
                {
                int LA135_29 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 29, input);

                    throw nvae;

                }
                }
                break;
            case UNCHECKED:
                {
                int LA135_30 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 30, input);

                    throw nvae;

                }
                }
                break;
            case DEFAULT:
                {
                int LA135_31 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 31, input);

                    throw nvae;

                }
                }
                break;
            case DELEGATE:
                {
                int LA135_32 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 32, input);

                    throw nvae;

                }
                }
                break;
            case SIZEOF:
                {
                int LA135_33 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 33, input);

                    throw nvae;

                }
                }
                break;
            case PLUS:
                {
                int LA135_34 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 34, input);

                    throw nvae;

                }
                }
                break;
            case MINUS:
                {
                int LA135_35 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 35, input);

                    throw nvae;

                }
                }
                break;
            case BANG:
                {
                int LA135_36 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 36, input);

                    throw nvae;

                }
                }
                break;
            case TILDE:
                {
                int LA135_37 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 37, input);

                    throw nvae;

                }
                }
                break;
            case OP_INC:
                {
                int LA135_38 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 38, input);

                    throw nvae;

                }
                }
                break;
            case OP_DEC:
                {
                int LA135_39 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 39, input);

                    throw nvae;

                }
                }
                break;
            case STAR:
                {
                int LA135_40 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 40, input);

                    throw nvae;

                }
                }
                break;
            case AMP:
                {
                int LA135_41 = input.LA(2);

                if ( ((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 41, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;

            }

            switch (alt135) {
                case 1 :
                    // CSharpAngular.g:1820:52: ( ({...}?) expr= expression -> text(value=expr))
                    {
                    // CSharpAngular.g:1820:52: ( ({...}?) expr= expression -> text(value=expr))
                    // CSharpAngular.g:1820:53: ({...}?) expr= expression
                    {
                    // CSharpAngular.g:1820:53: ({...}?)
                    // CSharpAngular.g:1820:54: {...}?
                    {
                    if ( !((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "assignment", "input.LT(1).getText().equals(\"Services\") && input.LT(2).getText().equals(\".\")");
                    }

                    }


                    pushFollow(FOLLOW_expression_in_assignment12808);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1821:2: -> text(value=expr)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", expr));
                      }


                    }

                    }


                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1821:24: (expr= expression -> assignment(unaryExpr=CSharpAngularHelper.processAssignmentStmtsNew(unExpr.st.toString().trim(),optr.st.toString().trim(),expr.st.toString().trim())))
                    {
                    // CSharpAngular.g:1821:24: (expr= expression -> assignment(unaryExpr=CSharpAngularHelper.processAssignmentStmtsNew(unExpr.st.toString().trim(),optr.st.toString().trim(),expr.st.toString().trim())))
                    // CSharpAngular.g:1821:25: expr= expression
                    {
                    pushFollow(FOLLOW_expression_in_assignment12823);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1822:2: -> assignment(unaryExpr=CSharpAngularHelper.processAssignmentStmtsNew(unExpr.st.toString().trim(),optr.st.toString().trim(),expr.st.toString().trim()))
                      {
                          retval.st = templateLib.getInstanceOf("assignment",new STAttrMap().put("unaryExpr", CSharpAngularHelper.processAssignmentStmtsNew(unExpr.st.toString().trim(),optr.st.toString().trim(),expr.st.toString().trim())));
                      }


                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assignment"


    public static class assignment_operator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "assignment_operator"
    // CSharpAngular.g:1824:1: assignment_operator : ( ASSIGNMENT -> text(value=$ASSIGNMENT.text)| OP_ADD_ASSIGNMENT -> text(value=$OP_ADD_ASSIGNMENT.text)| OP_SUB_ASSIGNMENT -> text(value=$OP_SUB_ASSIGNMENT.text)| OP_MULT_ASSIGNMENT -> text(value=$OP_MULT_ASSIGNMENT.text)| OP_DIV_ASSIGNMENT -> text(value=$OP_DIV_ASSIGNMENT.text)| OP_MOD_ASSIGNMENT -> text(value=$OP_MOD_ASSIGNMENT.text)| OP_AND_ASSIGNMENT -> text(value=$OP_AND_ASSIGNMENT.text)| OP_OR_ASSIGNMENT -> text(value=$OP_OR_ASSIGNMENT.text)| OP_XOR_ASSIGNMENT -> text(value=$OP_XOR_ASSIGNMENT.text)| OP_LEFT_SHIFT_ASSIGNMENT -> text(value=$OP_LEFT_SHIFT_ASSIGNMENT.text)|rshftAsgn= right_shift_assignment -> text(value=rshftAsgn));
    public final CSharpAngular.assignment_operator_return assignment_operator() throws RecognitionException {
        CSharpAngular.assignment_operator_return retval = new CSharpAngular.assignment_operator_return();
        retval.start = input.LT(1);


        Token ASSIGNMENT160=null;
        Token OP_ADD_ASSIGNMENT161=null;
        Token OP_SUB_ASSIGNMENT162=null;
        Token OP_MULT_ASSIGNMENT163=null;
        Token OP_DIV_ASSIGNMENT164=null;
        Token OP_MOD_ASSIGNMENT165=null;
        Token OP_AND_ASSIGNMENT166=null;
        Token OP_OR_ASSIGNMENT167=null;
        Token OP_XOR_ASSIGNMENT168=null;
        Token OP_LEFT_SHIFT_ASSIGNMENT169=null;
        CSharpAngular.right_shift_assignment_return rshftAsgn =null;


        try {
            // CSharpAngular.g:1825:2: ( ASSIGNMENT -> text(value=$ASSIGNMENT.text)| OP_ADD_ASSIGNMENT -> text(value=$OP_ADD_ASSIGNMENT.text)| OP_SUB_ASSIGNMENT -> text(value=$OP_SUB_ASSIGNMENT.text)| OP_MULT_ASSIGNMENT -> text(value=$OP_MULT_ASSIGNMENT.text)| OP_DIV_ASSIGNMENT -> text(value=$OP_DIV_ASSIGNMENT.text)| OP_MOD_ASSIGNMENT -> text(value=$OP_MOD_ASSIGNMENT.text)| OP_AND_ASSIGNMENT -> text(value=$OP_AND_ASSIGNMENT.text)| OP_OR_ASSIGNMENT -> text(value=$OP_OR_ASSIGNMENT.text)| OP_XOR_ASSIGNMENT -> text(value=$OP_XOR_ASSIGNMENT.text)| OP_LEFT_SHIFT_ASSIGNMENT -> text(value=$OP_LEFT_SHIFT_ASSIGNMENT.text)|rshftAsgn= right_shift_assignment -> text(value=rshftAsgn))
            int alt136=11;
            switch ( input.LA(1) ) {
            case ASSIGNMENT:
                {
                alt136=1;
                }
                break;
            case OP_ADD_ASSIGNMENT:
                {
                alt136=2;
                }
                break;
            case OP_SUB_ASSIGNMENT:
                {
                alt136=3;
                }
                break;
            case OP_MULT_ASSIGNMENT:
                {
                alt136=4;
                }
                break;
            case OP_DIV_ASSIGNMENT:
                {
                alt136=5;
                }
                break;
            case OP_MOD_ASSIGNMENT:
                {
                alt136=6;
                }
                break;
            case OP_AND_ASSIGNMENT:
                {
                alt136=7;
                }
                break;
            case OP_OR_ASSIGNMENT:
                {
                alt136=8;
                }
                break;
            case OP_XOR_ASSIGNMENT:
                {
                alt136=9;
                }
                break;
            case OP_LEFT_SHIFT_ASSIGNMENT:
                {
                alt136=10;
                }
                break;
            case GT:
                {
                alt136=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;

            }

            switch (alt136) {
                case 1 :
                    // CSharpAngular.g:1826:2: ASSIGNMENT
                    {
                    ASSIGNMENT160=(Token)match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_assignment_operator12848); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1827:2: -> text(value=$ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ASSIGNMENT160!=null?ASSIGNMENT160.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1828:4: OP_ADD_ASSIGNMENT
                    {
                    OP_ADD_ASSIGNMENT161=(Token)match(input,OP_ADD_ASSIGNMENT,FOLLOW_OP_ADD_ASSIGNMENT_in_assignment_operator12862); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1829:2: -> text(value=$OP_ADD_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_ADD_ASSIGNMENT161!=null?OP_ADD_ASSIGNMENT161.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:1830:4: OP_SUB_ASSIGNMENT
                    {
                    OP_SUB_ASSIGNMENT162=(Token)match(input,OP_SUB_ASSIGNMENT,FOLLOW_OP_SUB_ASSIGNMENT_in_assignment_operator12876); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1831:2: -> text(value=$OP_SUB_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_SUB_ASSIGNMENT162!=null?OP_SUB_ASSIGNMENT162.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:1832:4: OP_MULT_ASSIGNMENT
                    {
                    OP_MULT_ASSIGNMENT163=(Token)match(input,OP_MULT_ASSIGNMENT,FOLLOW_OP_MULT_ASSIGNMENT_in_assignment_operator12890); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1833:2: -> text(value=$OP_MULT_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_MULT_ASSIGNMENT163!=null?OP_MULT_ASSIGNMENT163.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:1834:4: OP_DIV_ASSIGNMENT
                    {
                    OP_DIV_ASSIGNMENT164=(Token)match(input,OP_DIV_ASSIGNMENT,FOLLOW_OP_DIV_ASSIGNMENT_in_assignment_operator12904); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1835:2: -> text(value=$OP_DIV_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_DIV_ASSIGNMENT164!=null?OP_DIV_ASSIGNMENT164.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:1836:4: OP_MOD_ASSIGNMENT
                    {
                    OP_MOD_ASSIGNMENT165=(Token)match(input,OP_MOD_ASSIGNMENT,FOLLOW_OP_MOD_ASSIGNMENT_in_assignment_operator12918); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1837:2: -> text(value=$OP_MOD_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_MOD_ASSIGNMENT165!=null?OP_MOD_ASSIGNMENT165.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:1838:4: OP_AND_ASSIGNMENT
                    {
                    OP_AND_ASSIGNMENT166=(Token)match(input,OP_AND_ASSIGNMENT,FOLLOW_OP_AND_ASSIGNMENT_in_assignment_operator12932); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1839:2: -> text(value=$OP_AND_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_AND_ASSIGNMENT166!=null?OP_AND_ASSIGNMENT166.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:1840:4: OP_OR_ASSIGNMENT
                    {
                    OP_OR_ASSIGNMENT167=(Token)match(input,OP_OR_ASSIGNMENT,FOLLOW_OP_OR_ASSIGNMENT_in_assignment_operator12946); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1841:2: -> text(value=$OP_OR_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_OR_ASSIGNMENT167!=null?OP_OR_ASSIGNMENT167.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:1842:4: OP_XOR_ASSIGNMENT
                    {
                    OP_XOR_ASSIGNMENT168=(Token)match(input,OP_XOR_ASSIGNMENT,FOLLOW_OP_XOR_ASSIGNMENT_in_assignment_operator12960); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1843:2: -> text(value=$OP_XOR_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_XOR_ASSIGNMENT168!=null?OP_XOR_ASSIGNMENT168.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:1844:4: OP_LEFT_SHIFT_ASSIGNMENT
                    {
                    OP_LEFT_SHIFT_ASSIGNMENT169=(Token)match(input,OP_LEFT_SHIFT_ASSIGNMENT,FOLLOW_OP_LEFT_SHIFT_ASSIGNMENT_in_assignment_operator12974); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1845:2: -> text(value=$OP_LEFT_SHIFT_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_LEFT_SHIFT_ASSIGNMENT169!=null?OP_LEFT_SHIFT_ASSIGNMENT169.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:1846:4: rshftAsgn= right_shift_assignment
                    {
                    pushFollow(FOLLOW_right_shift_assignment_in_assignment_operator12990);
                    rshftAsgn=right_shift_assignment();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1847:2: -> text(value=rshftAsgn)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", rshftAsgn));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assignment_operator"


    public static class expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "expression"
    // CSharpAngular.g:1849:1: expression : ( ( assignment )=>asgn= assignment -> expression(assignment=asgn)|nonAsgn= non_assignment_expression -> expression(assignment=nonAsgn));
    public final CSharpAngular.expression_return expression() throws RecognitionException {
        CSharpAngular.expression_return retval = new CSharpAngular.expression_return();
        retval.start = input.LT(1);


        CSharpAngular.assignment_return asgn =null;

        CSharpAngular.non_assignment_expression_return nonAsgn =null;


        try {
            // CSharpAngular.g:1850:2: ( ( assignment )=>asgn= assignment -> expression(assignment=asgn)|nonAsgn= non_assignment_expression -> expression(assignment=nonAsgn))
            int alt137=2;
            switch ( input.LA(1) ) {
            case OPEN_PARENS:
                {
                int LA137_1 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 1, input);

                    throw nvae;

                }
                }
                break;
            case TRUE:
                {
                int LA137_2 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 2, input);

                    throw nvae;

                }
                }
                break;
            case FALSE:
                {
                int LA137_3 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 3, input);

                    throw nvae;

                }
                }
                break;
            case INTEGER_LITERAL:
                {
                int LA137_4 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 4, input);

                    throw nvae;

                }
                }
                break;
            case REAL_LITERAL:
                {
                int LA137_5 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 5, input);

                    throw nvae;

                }
                }
                break;
            case CHARACTER_LITERAL:
                {
                int LA137_6 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 6, input);

                    throw nvae;

                }
                }
                break;
            case STRING_LITERAL:
                {
                int LA137_7 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 7, input);

                    throw nvae;

                }
                }
                break;
            case NULL:
                {
                int LA137_8 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 8, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA137_9 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 9, input);

                    throw nvae;

                }
                }
                break;
            case BOOL:
                {
                int LA137_10 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 10, input);

                    throw nvae;

                }
                }
                break;
            case BYTE:
                {
                int LA137_11 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 11, input);

                    throw nvae;

                }
                }
                break;
            case CHAR:
                {
                int LA137_12 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 12, input);

                    throw nvae;

                }
                }
                break;
            case DECIMAL:
                {
                int LA137_13 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 13, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE:
                {
                int LA137_14 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 14, input);

                    throw nvae;

                }
                }
                break;
            case FLOAT:
                {
                int LA137_15 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 15, input);

                    throw nvae;

                }
                }
                break;
            case INT:
                {
                int LA137_16 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 16, input);

                    throw nvae;

                }
                }
                break;
            case LONG:
                {
                int LA137_17 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 17, input);

                    throw nvae;

                }
                }
                break;
            case OBJECT:
                {
                int LA137_18 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 18, input);

                    throw nvae;

                }
                }
                break;
            case SBYTE:
                {
                int LA137_19 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 19, input);

                    throw nvae;

                }
                }
                break;
            case SHORT:
                {
                int LA137_20 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 20, input);

                    throw nvae;

                }
                }
                break;
            case STRING:
                {
                int LA137_21 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 21, input);

                    throw nvae;

                }
                }
                break;
            case UINT:
                {
                int LA137_22 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 22, input);

                    throw nvae;

                }
                }
                break;
            case ULONG:
                {
                int LA137_23 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 23, input);

                    throw nvae;

                }
                }
                break;
            case USHORT:
                {
                int LA137_24 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 24, input);

                    throw nvae;

                }
                }
                break;
            case THIS:
                {
                int LA137_25 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 25, input);

                    throw nvae;

                }
                }
                break;
            case BASE:
                {
                int LA137_26 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 26, input);

                    throw nvae;

                }
                }
                break;
            case NEW:
                {
                int LA137_27 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 27, input);

                    throw nvae;

                }
                }
                break;
            case TYPEOF:
                {
                int LA137_28 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 28, input);

                    throw nvae;

                }
                }
                break;
            case CHECKED:
                {
                int LA137_29 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 29, input);

                    throw nvae;

                }
                }
                break;
            case UNCHECKED:
                {
                int LA137_30 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 30, input);

                    throw nvae;

                }
                }
                break;
            case DEFAULT:
                {
                int LA137_31 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 31, input);

                    throw nvae;

                }
                }
                break;
            case DELEGATE:
                {
                int LA137_32 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 32, input);

                    throw nvae;

                }
                }
                break;
            case SIZEOF:
                {
                int LA137_33 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 33, input);

                    throw nvae;

                }
                }
                break;
            case PLUS:
                {
                int LA137_34 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 34, input);

                    throw nvae;

                }
                }
                break;
            case MINUS:
                {
                int LA137_35 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 35, input);

                    throw nvae;

                }
                }
                break;
            case BANG:
                {
                int LA137_36 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 36, input);

                    throw nvae;

                }
                }
                break;
            case TILDE:
                {
                int LA137_37 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 37, input);

                    throw nvae;

                }
                }
                break;
            case OP_INC:
                {
                int LA137_38 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 38, input);

                    throw nvae;

                }
                }
                break;
            case OP_DEC:
                {
                int LA137_39 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 39, input);

                    throw nvae;

                }
                }
                break;
            case STAR:
                {
                int LA137_40 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 40, input);

                    throw nvae;

                }
                }
                break;
            case AMP:
                {
                int LA137_41 = input.LA(2);

                if ( (synpred65_CSharpAngular()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 41, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;

            }

            switch (alt137) {
                case 1 :
                    // CSharpAngular.g:1851:2: ( assignment )=>asgn= assignment
                    {
                    pushFollow(FOLLOW_assignment_in_expression13019);
                    asgn=assignment();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1852:2: -> expression(assignment=asgn)
                      {
                          retval.st = templateLib.getInstanceOf("expression",new STAttrMap().put("assignment", asgn));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1853:4: nonAsgn= non_assignment_expression
                    {
                    pushFollow(FOLLOW_non_assignment_expression_in_expression13035);
                    nonAsgn=non_assignment_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1854:2: -> expression(assignment=nonAsgn)
                      {
                          retval.st = templateLib.getInstanceOf("expression",new STAttrMap().put("assignment", nonAsgn));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class non_assignment_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "non_assignment_expression"
    // CSharpAngular.g:1857:1: non_assignment_expression : ( ( ( lambda_expression )=>le= lambda_expression ) -> nonAssignmentExpression(expression=le)| ( ( query_expression )=>qe= query_expression ) -> nonAssignmentExpression(expression=qe)|ce= conditional_expression -> nonAssignmentExpression(expression=ce));
    public final CSharpAngular.non_assignment_expression_return non_assignment_expression() throws RecognitionException {
        CSharpAngular.non_assignment_expression_return retval = new CSharpAngular.non_assignment_expression_return();
        retval.start = input.LT(1);


        CSharpAngular.lambda_expression_return le =null;

        CSharpAngular.query_expression_return qe =null;

        CSharpAngular.conditional_expression_return ce =null;


        try {
            // CSharpAngular.g:1858:2: ( ( ( lambda_expression )=>le= lambda_expression ) -> nonAssignmentExpression(expression=le)| ( ( query_expression )=>qe= query_expression ) -> nonAssignmentExpression(expression=qe)|ce= conditional_expression -> nonAssignmentExpression(expression=ce))
            int alt138=3;
            switch ( input.LA(1) ) {
            case OPEN_PARENS:
                {
                int LA138_1 = input.LA(2);

                if ( (synpred66_CSharpAngular()) ) {
                    alt138=1;
                }
                else if ( (true) ) {
                    alt138=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 138, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA138_2 = input.LA(2);

                if ( (synpred66_CSharpAngular()) ) {
                    alt138=1;
                }
                else if ( (synpred67_CSharpAngular()) ) {
                    alt138=2;
                }
                else if ( (true) ) {
                    alt138=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 138, 2, input);

                    throw nvae;

                }
                }
                break;
            case AMP:
            case BANG:
            case BASE:
            case BOOL:
            case BYTE:
            case CHAR:
            case CHARACTER_LITERAL:
            case CHECKED:
            case DECIMAL:
            case DEFAULT:
            case DELEGATE:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case INTEGER_LITERAL:
            case LONG:
            case MINUS:
            case NEW:
            case NULL:
            case OBJECT:
            case OP_DEC:
            case OP_INC:
            case PLUS:
            case REAL_LITERAL:
            case SBYTE:
            case SHORT:
            case SIZEOF:
            case STAR:
            case STRING:
            case STRING_LITERAL:
            case THIS:
            case TILDE:
            case TRUE:
            case TYPEOF:
            case UINT:
            case ULONG:
            case UNCHECKED:
            case USHORT:
                {
                alt138=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;

            }

            switch (alt138) {
                case 1 :
                    // CSharpAngular.g:1859:2: ( ( lambda_expression )=>le= lambda_expression )
                    {
                    // CSharpAngular.g:1859:2: ( ( lambda_expression )=>le= lambda_expression )
                    // CSharpAngular.g:1859:3: ( lambda_expression )=>le= lambda_expression
                    {
                    pushFollow(FOLLOW_lambda_expression_in_non_assignment_expression13067);
                    le=lambda_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1860:2: -> nonAssignmentExpression(expression=le)
                      {
                          retval.st = templateLib.getInstanceOf("nonAssignmentExpression",new STAttrMap().put("expression", le));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1861:4: ( ( query_expression )=>qe= query_expression )
                    {
                    // CSharpAngular.g:1861:4: ( ( query_expression )=>qe= query_expression )
                    // CSharpAngular.g:1861:5: ( query_expression )=>qe= query_expression
                    {
                    pushFollow(FOLLOW_query_expression_in_non_assignment_expression13091);
                    qe=query_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1862:2: -> nonAssignmentExpression(expression=qe)
                      {
                          retval.st = templateLib.getInstanceOf("nonAssignmentExpression",new STAttrMap().put("expression", qe));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:1863:4: ce= conditional_expression
                    {
                    pushFollow(FOLLOW_conditional_expression_in_non_assignment_expression13108);
                    ce=conditional_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1864:2: -> nonAssignmentExpression(expression=ce)
                      {
                          retval.st = templateLib.getInstanceOf("nonAssignmentExpression",new STAttrMap().put("expression", ce));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "non_assignment_expression"


    public static class constant_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constant_expression"
    // CSharpAngular.g:1867:1: constant_expression : expr= expression -> constantExpression(expression=expr);
    public final CSharpAngular.constant_expression_return constant_expression() throws RecognitionException {
        CSharpAngular.constant_expression_return retval = new CSharpAngular.constant_expression_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_return expr =null;


        try {
            // CSharpAngular.g:1868:2: (expr= expression -> constantExpression(expression=expr))
            // CSharpAngular.g:1869:2: expr= expression
            {
            pushFollow(FOLLOW_expression_in_constant_expression13134);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1870:2: -> constantExpression(expression=expr)
              {
                  retval.st = templateLib.getInstanceOf("constantExpression",new STAttrMap().put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constant_expression"


    public static class boolean_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "boolean_expression"
    // CSharpAngular.g:1872:1: boolean_expression : expr= expression -> booleanExpression(boolExpr=expr);
    public final CSharpAngular.boolean_expression_return boolean_expression() throws RecognitionException {
        CSharpAngular.boolean_expression_return retval = new CSharpAngular.boolean_expression_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_return expr =null;


        try {
            // CSharpAngular.g:1873:2: (expr= expression -> booleanExpression(boolExpr=expr))
            // CSharpAngular.g:1874:2: expr= expression
            {
            pushFollow(FOLLOW_expression_in_boolean_expression13158);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1875:2: -> booleanExpression(boolExpr=expr)
              {
                  retval.st = templateLib.getInstanceOf("booleanExpression",new STAttrMap().put("boolExpr", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "boolean_expression"


    public static class statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "statement"
    // CSharpAngular.g:1879:1: statement : ( ( ( labeled_statement )=>lblStmt= labeled_statement ) -> statement(stmt=isLinq()?CSharpAngularHelper.linqSourceTargetAppend($lblStmt.text,lblStmt.st.toString())+updateLinqStatus(false):lblStmt)| ( ( declaration_statement )=>decStmt= declaration_statement ) -> statement(stmt=isLinq()?CSharpAngularHelper.linqSourceTargetAppend($decStmt.text,decStmt.st.toString())+updateLinqStatus(false):decStmt)|embdStmt= embedded_statement (cmnt= comments )? -> statement(stmt=isLinq()?CSharpAngularHelper.linqSourceTargetAppend($embdStmt.text,embdStmt.st.toString())+updateLinqStatus(false):embdStmtcmnts=cmnt));
    public final CSharpAngular.statement_return statement() throws RecognitionException {
        CSharpAngular.statement_return retval = new CSharpAngular.statement_return();
        retval.start = input.LT(1);


        CSharpAngular.labeled_statement_return lblStmt =null;

        CSharpAngular.declaration_statement_return decStmt =null;

        CSharpAngular.embedded_statement_return embdStmt =null;

        CSharpAngular.comments_return cmnt =null;


        try {
            // CSharpAngular.g:1880:2: ( ( ( labeled_statement )=>lblStmt= labeled_statement ) -> statement(stmt=isLinq()?CSharpAngularHelper.linqSourceTargetAppend($lblStmt.text,lblStmt.st.toString())+updateLinqStatus(false):lblStmt)| ( ( declaration_statement )=>decStmt= declaration_statement ) -> statement(stmt=isLinq()?CSharpAngularHelper.linqSourceTargetAppend($decStmt.text,decStmt.st.toString())+updateLinqStatus(false):decStmt)|embdStmt= embedded_statement (cmnt= comments )? -> statement(stmt=isLinq()?CSharpAngularHelper.linqSourceTargetAppend($embdStmt.text,embdStmt.st.toString())+updateLinqStatus(false):embdStmtcmnts=cmnt))
            int alt140=3;
            alt140 = dfa140.predict(input);
            switch (alt140) {
                case 1 :
                    // CSharpAngular.g:1881:2: ( ( labeled_statement )=>lblStmt= labeled_statement )
                    {
                    // CSharpAngular.g:1881:2: ( ( labeled_statement )=>lblStmt= labeled_statement )
                    // CSharpAngular.g:1881:3: ( labeled_statement )=>lblStmt= labeled_statement
                    {
                    pushFollow(FOLLOW_labeled_statement_in_statement13191);
                    lblStmt=labeled_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1882:2: -> statement(stmt=isLinq()?CSharpAngularHelper.linqSourceTargetAppend($lblStmt.text,lblStmt.st.toString())+updateLinqStatus(false):lblStmt)
                      {
                          retval.st = templateLib.getInstanceOf("statement",new STAttrMap().put("stmt", isLinq()?CSharpAngularHelper.linqSourceTargetAppend((lblStmt!=null?input.toString(lblStmt.start,lblStmt.stop):null),lblStmt.st.toString())+updateLinqStatus(false):lblStmt));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1883:3: ( ( declaration_statement )=>decStmt= declaration_statement )
                    {
                    // CSharpAngular.g:1883:3: ( ( declaration_statement )=>decStmt= declaration_statement )
                    // CSharpAngular.g:1883:5: ( declaration_statement )=>decStmt= declaration_statement
                    {
                    pushFollow(FOLLOW_declaration_statement_in_statement13215);
                    decStmt=declaration_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1884:2: -> statement(stmt=isLinq()?CSharpAngularHelper.linqSourceTargetAppend($decStmt.text,decStmt.st.toString())+updateLinqStatus(false):decStmt)
                      {
                          retval.st = templateLib.getInstanceOf("statement",new STAttrMap().put("stmt", isLinq()?CSharpAngularHelper.linqSourceTargetAppend((decStmt!=null?input.toString(decStmt.start,decStmt.stop):null),decStmt.st.toString())+updateLinqStatus(false):decStmt));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:1885:4: embdStmt= embedded_statement (cmnt= comments )?
                    {
                    pushFollow(FOLLOW_embedded_statement_in_statement13232);
                    embdStmt=embedded_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharpAngular.g:1885:32: (cmnt= comments )?
                    int alt139=2;
                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==SINGLE_LINE_COMMENT) ) {
                        alt139=1;
                    }
                    else if ( (LA139_0==SINGLE_LINE_DOC_COMMENT) ) {
                        alt139=1;
                    }
                    switch (alt139) {
                        case 1 :
                            // CSharpAngular.g:1885:33: cmnt= comments
                            {
                            pushFollow(FOLLOW_comments_in_statement13237);
                            cmnt=comments();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1886:2: -> statement(stmt=isLinq()?CSharpAngularHelper.linqSourceTargetAppend($embdStmt.text,embdStmt.st.toString())+updateLinqStatus(false):embdStmtcmnts=cmnt)
                      {
                          retval.st = templateLib.getInstanceOf("statement",new STAttrMap().put("stmt", isLinq()?CSharpAngularHelper.linqSourceTargetAppend((embdStmt!=null?input.toString(embdStmt.start,embdStmt.stop):null),embdStmt.st.toString())+updateLinqStatus(false):embdStmt).put("cmnts", cmnt));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class embedded_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "embedded_statement"
    // CSharpAngular.g:1888:1: embedded_statement : (blck= block -> embeddedStatement(stmt=blck)|emptStmt= empty_statement -> embeddedStatement(stmt=emptStmt)|exprStmt= expression_statement -> embeddedStatement(stmt=exprStmt)|selctStmt= selection_statement -> embeddedStatement(stmt=selctStmt)|iterStmt= iteration_statement -> embeddedStatement(stmt=iterStmt)|jmpStmt= jump_statement -> embeddedStatement(stmt=jmpStmt)|tryStmt= try_statement -> embeddedStatement(stmt=tryStmt)|chkdStmt= checked_statement -> embeddedStatement(stmt=chkdStmt)|unChkdStmt= unchecked_statement -> embeddedStatement(stmt=unChkdStmt)|lckStmt= lock_statement -> embeddedStatement(stmt=lckStmt)|usngStmt= using_statement -> embeddedStatement(stmt=usngStmt)|yldStmt= yield_statement -> embeddedStatement(stmt=yldStmt)|embdStmtUnsf= embedded_statement_unsafe -> embeddedStatement(stmt=embdStmtUnsf)|cmnts= comments -> comment(content=cmnts));
    public final CSharpAngular.embedded_statement_return embedded_statement() throws RecognitionException {
        CSharpAngular.embedded_statement_return retval = new CSharpAngular.embedded_statement_return();
        retval.start = input.LT(1);


        CSharpAngular.block_return blck =null;

        CSharpAngular.empty_statement_return emptStmt =null;

        CSharpAngular.expression_statement_return exprStmt =null;

        CSharpAngular.selection_statement_return selctStmt =null;

        CSharpAngular.iteration_statement_return iterStmt =null;

        CSharpAngular.jump_statement_return jmpStmt =null;

        CSharpAngular.try_statement_return tryStmt =null;

        CSharpAngular.checked_statement_return chkdStmt =null;

        CSharpAngular.unchecked_statement_return unChkdStmt =null;

        CSharpAngular.lock_statement_return lckStmt =null;

        CSharpAngular.using_statement_return usngStmt =null;

        CSharpAngular.yield_statement_return yldStmt =null;

        CSharpAngular.embedded_statement_unsafe_return embdStmtUnsf =null;

        CSharpAngular.comments_return cmnts =null;


        try {
            // CSharpAngular.g:1889:2: (blck= block -> embeddedStatement(stmt=blck)|emptStmt= empty_statement -> embeddedStatement(stmt=emptStmt)|exprStmt= expression_statement -> embeddedStatement(stmt=exprStmt)|selctStmt= selection_statement -> embeddedStatement(stmt=selctStmt)|iterStmt= iteration_statement -> embeddedStatement(stmt=iterStmt)|jmpStmt= jump_statement -> embeddedStatement(stmt=jmpStmt)|tryStmt= try_statement -> embeddedStatement(stmt=tryStmt)|chkdStmt= checked_statement -> embeddedStatement(stmt=chkdStmt)|unChkdStmt= unchecked_statement -> embeddedStatement(stmt=unChkdStmt)|lckStmt= lock_statement -> embeddedStatement(stmt=lckStmt)|usngStmt= using_statement -> embeddedStatement(stmt=usngStmt)|yldStmt= yield_statement -> embeddedStatement(stmt=yldStmt)|embdStmtUnsf= embedded_statement_unsafe -> embeddedStatement(stmt=embdStmtUnsf)|cmnts= comments -> comment(content=cmnts))
            int alt141=14;
            switch ( input.LA(1) ) {
            case OPEN_BRACE:
                {
                alt141=1;
                }
                break;
            case SEMICOLON:
                {
                alt141=2;
                }
                break;
            case AMP:
            case BANG:
            case BASE:
            case BOOL:
            case BYTE:
            case CHAR:
            case CHARACTER_LITERAL:
            case DECIMAL:
            case DEFAULT:
            case DELEGATE:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case INTEGER_LITERAL:
            case LONG:
            case MINUS:
            case NEW:
            case NULL:
            case OBJECT:
            case OPEN_PARENS:
            case OP_DEC:
            case OP_INC:
            case PLUS:
            case REAL_LITERAL:
            case SBYTE:
            case SHORT:
            case SIZEOF:
            case STAR:
            case STRING:
            case STRING_LITERAL:
            case THIS:
            case TILDE:
            case TRUE:
            case TYPEOF:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt141=3;
                }
                break;
            case IDENTIFIER:
                {
                int LA141_4 = input.LA(2);

                if ( ((LA141_4 >= AMP && LA141_4 <= ASSIGNMENT)||(LA141_4 >= BITWISE_OR && LA141_4 <= BOOL)||(LA141_4 >= BYTE && LA141_4 <= CARET)||LA141_4==CHAR||LA141_4==DECIMAL||LA141_4==DIV||(LA141_4 >= DOT && LA141_4 <= DOUBLE)||LA141_4==DOUBLE_COLON||LA141_4==FLOAT||LA141_4==GT||LA141_4==IDENTIFIER||LA141_4==INT||(LA141_4 >= INTERR && LA141_4 <= IS)||(LA141_4 >= LONG && LA141_4 <= LT)||LA141_4==MINUS||LA141_4==OBJECT||(LA141_4 >= OPEN_BRACKET && LA141_4 <= OPEN_PARENS)||(LA141_4 >= OP_ADD_ASSIGNMENT && LA141_4 <= OP_XOR_ASSIGNMENT)||(LA141_4 >= PERCENT && LA141_4 <= PLUS)||LA141_4==SBYTE||LA141_4==SEMICOLON||(LA141_4 >= SHORT && LA141_4 <= SINGLE_LINE_DOC_COMMENT)||LA141_4==STAR||LA141_4==STRING||(LA141_4 >= UINT && LA141_4 <= ULONG)||LA141_4==USHORT||LA141_4==VOID) ) {
                    alt141=3;
                }
                else if ( (LA141_4==BREAK||LA141_4==RETURN) ) {
                    alt141=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 4, input);

                    throw nvae;

                }
                }
                break;
            case CHECKED:
                {
                int LA141_5 = input.LA(2);

                if ( (LA141_5==OPEN_PARENS) ) {
                    alt141=3;
                }
                else if ( (LA141_5==OPEN_BRACE) ) {
                    alt141=8;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 5, input);

                    throw nvae;

                }
                }
                break;
            case UNCHECKED:
                {
                int LA141_6 = input.LA(2);

                if ( (LA141_6==OPEN_PARENS) ) {
                    alt141=3;
                }
                else if ( (LA141_6==OPEN_BRACE) ) {
                    alt141=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 6, input);

                    throw nvae;

                }
                }
                break;
            case IF:
            case SWITCH:
                {
                alt141=4;
                }
                break;
            case DO:
            case FOR:
            case FOREACH:
            case WHILE:
                {
                alt141=5;
                }
                break;
            case BREAK:
            case CONTINUE:
            case GOTO:
            case RETURN:
            case THROW:
                {
                alt141=6;
                }
                break;
            case TRY:
                {
                alt141=7;
                }
                break;
            case LOCK:
                {
                alt141=10;
                }
                break;
            case USING:
                {
                alt141=11;
                }
                break;
            case FIXED:
            case UNSAFE:
                {
                alt141=13;
                }
                break;
            case SINGLE_LINE_COMMENT:
            case SINGLE_LINE_DOC_COMMENT:
                {
                alt141=14;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;

            }

            switch (alt141) {
                case 1 :
                    // CSharpAngular.g:1890:2: blck= block
                    {
                    pushFollow(FOLLOW_block_in_embedded_statement13268);
                    blck=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1891:2: -> embeddedStatement(stmt=blck)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", blck));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1892:4: emptStmt= empty_statement
                    {
                    pushFollow(FOLLOW_empty_statement_in_embedded_statement13284);
                    emptStmt=empty_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1893:2: -> embeddedStatement(stmt=emptStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", emptStmt));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:1894:4: exprStmt= expression_statement
                    {
                    pushFollow(FOLLOW_expression_statement_in_embedded_statement13300);
                    exprStmt=expression_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1895:2: -> embeddedStatement(stmt=exprStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", exprStmt));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:1896:4: selctStmt= selection_statement
                    {
                    pushFollow(FOLLOW_selection_statement_in_embedded_statement13316);
                    selctStmt=selection_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1897:2: -> embeddedStatement(stmt=selctStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", selctStmt));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:1898:4: iterStmt= iteration_statement
                    {
                    pushFollow(FOLLOW_iteration_statement_in_embedded_statement13332);
                    iterStmt=iteration_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1899:2: -> embeddedStatement(stmt=iterStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", iterStmt));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:1900:4: jmpStmt= jump_statement
                    {
                    pushFollow(FOLLOW_jump_statement_in_embedded_statement13348);
                    jmpStmt=jump_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1901:2: -> embeddedStatement(stmt=jmpStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", jmpStmt));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:1902:4: tryStmt= try_statement
                    {
                    pushFollow(FOLLOW_try_statement_in_embedded_statement13364);
                    tryStmt=try_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1903:2: -> embeddedStatement(stmt=tryStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", tryStmt));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:1904:4: chkdStmt= checked_statement
                    {
                    pushFollow(FOLLOW_checked_statement_in_embedded_statement13380);
                    chkdStmt=checked_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1905:2: -> embeddedStatement(stmt=chkdStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", chkdStmt));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:1906:4: unChkdStmt= unchecked_statement
                    {
                    pushFollow(FOLLOW_unchecked_statement_in_embedded_statement13396);
                    unChkdStmt=unchecked_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1907:2: -> embeddedStatement(stmt=unChkdStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", unChkdStmt));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:1908:4: lckStmt= lock_statement
                    {
                    pushFollow(FOLLOW_lock_statement_in_embedded_statement13412);
                    lckStmt=lock_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1909:2: -> embeddedStatement(stmt=lckStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", lckStmt));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:1910:4: usngStmt= using_statement
                    {
                    pushFollow(FOLLOW_using_statement_in_embedded_statement13428);
                    usngStmt=using_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1911:2: -> embeddedStatement(stmt=usngStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", usngStmt));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharpAngular.g:1912:4: yldStmt= yield_statement
                    {
                    pushFollow(FOLLOW_yield_statement_in_embedded_statement13444);
                    yldStmt=yield_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1913:2: -> embeddedStatement(stmt=yldStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", yldStmt));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharpAngular.g:1914:4: embdStmtUnsf= embedded_statement_unsafe
                    {
                    pushFollow(FOLLOW_embedded_statement_unsafe_in_embedded_statement13460);
                    embdStmtUnsf=embedded_statement_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1915:2: -> embeddedStatement(stmt=embdStmtUnsf)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", embdStmtUnsf));
                      }


                    }

                    }
                    break;
                case 14 :
                    // CSharpAngular.g:1916:4: cmnts= comments
                    {
                    pushFollow(FOLLOW_comments_in_embedded_statement13476);
                    cmnts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1917:2: -> comment(content=cmnts)
                      {
                          retval.st = templateLib.getInstanceOf("comment",new STAttrMap().put("content", cmnts));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "embedded_statement"


    public static class block_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "block"
    // CSharpAngular.g:1920:1: block : OPEN_BRACE (comts= comments )? (lst= statement_list )? CLOSE_BRACE -> block(blockStmtLst=lstcomt=comts);
    public final CSharpAngular.block_return block() throws RecognitionException {
        CSharpAngular.block_return retval = new CSharpAngular.block_return();
        retval.start = input.LT(1);


        CSharpAngular.comments_return comts =null;

        CSharpAngular.statement_list_return lst =null;


        try {
            // CSharpAngular.g:1921:2: ( OPEN_BRACE (comts= comments )? (lst= statement_list )? CLOSE_BRACE -> block(blockStmtLst=lstcomt=comts))
            // CSharpAngular.g:1922:2: OPEN_BRACE (comts= comments )? (lst= statement_list )? CLOSE_BRACE
            {
            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_block13500); if (state.failed) return retval;

            // CSharpAngular.g:1922:13: (comts= comments )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==SINGLE_LINE_COMMENT) ) {
                alt142=1;
            }
            else if ( (LA142_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // CSharpAngular.g:1922:14: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_block13506);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:1922:33: (lst= statement_list )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==AMP||(LA143_0 >= BANG && LA143_0 <= BASE)||(LA143_0 >= BOOL && LA143_0 <= BYTE)||(LA143_0 >= CHAR && LA143_0 <= CHECKED)||(LA143_0 >= CONST && LA143_0 <= CONTINUE)||LA143_0==DECIMAL||(LA143_0 >= DEFAULT && LA143_0 <= DELEGATE)||LA143_0==DO||LA143_0==DOUBLE||LA143_0==FALSE||(LA143_0 >= FIXED && LA143_0 <= FOREACH)||LA143_0==GOTO||(LA143_0 >= IDENTIFIER && LA143_0 <= IF)||(LA143_0 >= INT && LA143_0 <= INTEGER_LITERAL)||(LA143_0 >= LOCK && LA143_0 <= LONG)||LA143_0==MINUS||LA143_0==NEW||LA143_0==NULL||(LA143_0 >= OBJECT && LA143_0 <= OPEN_BRACE)||LA143_0==OPEN_PARENS||LA143_0==OP_DEC||LA143_0==OP_INC||LA143_0==PLUS||LA143_0==REAL_LITERAL||LA143_0==RETURN||LA143_0==SBYTE||LA143_0==SEMICOLON||(LA143_0 >= SHORT && LA143_0 <= SIZEOF)||LA143_0==STAR||(LA143_0 >= STRING && LA143_0 <= STRING_LITERAL)||LA143_0==SWITCH||(LA143_0 >= THIS && LA143_0 <= TYPEOF)||(LA143_0 >= UINT && LA143_0 <= UNCHECKED)||(LA143_0 >= UNSAFE && LA143_0 <= USING)||LA143_0==VOID||LA143_0==WHILE) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // CSharpAngular.g:1922:34: lst= statement_list
                    {
                    pushFollow(FOLLOW_statement_list_in_block13515);
                    lst=statement_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_block13521); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1923:2: -> block(blockStmtLst=lstcomt=comts)
              {
                  retval.st = templateLib.getInstanceOf("block",new STAttrMap().put("blockStmtLst", lst).put("comt", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class statement_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "statement_list"
    // CSharpAngular.g:1926:1: statement_list : (stmts+= statement )+ (cmnts+= comments )* -> statementList(list=$stmtscmntts=$cmnts);
    public final CSharpAngular.statement_list_return statement_list() throws RecognitionException {
        CSharpAngular.statement_list_return retval = new CSharpAngular.statement_list_return();
        retval.start = input.LT(1);


        List list_stmts=null;
        List list_cmnts=null;
        RuleReturnScope stmts = null;
        RuleReturnScope cmnts = null;
        try {
            // CSharpAngular.g:1927:2: ( (stmts+= statement )+ (cmnts+= comments )* -> statementList(list=$stmtscmntts=$cmnts))
            // CSharpAngular.g:1928:2: (stmts+= statement )+ (cmnts+= comments )*
            {
            // CSharpAngular.g:1928:2: (stmts+= statement )+
            int cnt144=0;
            loop144:
            do {
                int alt144=2;
                switch ( input.LA(1) ) {
                case SINGLE_LINE_COMMENT:
                    {
                    alt144=1;
                    }
                    break;
                case AMP:
                case BANG:
                case BASE:
                case BOOL:
                case BREAK:
                case BYTE:
                case CHAR:
                case CHARACTER_LITERAL:
                case CHECKED:
                case CONST:
                case CONTINUE:
                case DECIMAL:
                case DELEGATE:
                case DO:
                case DOUBLE:
                case FALSE:
                case FIXED:
                case FLOAT:
                case FOR:
                case FOREACH:
                case GOTO:
                case IDENTIFIER:
                case IF:
                case INT:
                case INTEGER_LITERAL:
                case LOCK:
                case LONG:
                case MINUS:
                case NEW:
                case NULL:
                case OBJECT:
                case OPEN_BRACE:
                case OPEN_PARENS:
                case OP_DEC:
                case OP_INC:
                case PLUS:
                case REAL_LITERAL:
                case RETURN:
                case SBYTE:
                case SEMICOLON:
                case SHORT:
                case SINGLE_LINE_DOC_COMMENT:
                case SIZEOF:
                case STAR:
                case STRING:
                case STRING_LITERAL:
                case SWITCH:
                case THIS:
                case THROW:
                case TILDE:
                case TRUE:
                case TRY:
                case TYPEOF:
                case UINT:
                case ULONG:
                case UNCHECKED:
                case UNSAFE:
                case USHORT:
                case USING:
                case VOID:
                case WHILE:
                    {
                    alt144=1;
                    }
                    break;
                case DEFAULT:
                    {
                    int LA144_4 = input.LA(2);

                    if ( (LA144_4==OPEN_PARENS) ) {
                        alt144=1;
                    }


                    }
                    break;

                }

                switch (alt144) {
            	case 1 :
            	    // CSharpAngular.g:1928:3: stmts+= statement
            	    {
            	    pushFollow(FOLLOW_statement_in_statement_list13551);
            	    stmts=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_stmts==null) list_stmts=new ArrayList();
            	    list_stmts.add(stmts.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt144 >= 1 ) break loop144;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(144, input);
                        throw eee;
                }
                cnt144++;
            } while (true);


            // CSharpAngular.g:1928:22: (cmnts+= comments )*
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);

                if ( ((LA145_0 >= SINGLE_LINE_COMMENT && LA145_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                    alt145=1;
                }


                switch (alt145) {
            	case 1 :
            	    // CSharpAngular.g:1928:23: cmnts+= comments
            	    {
            	    pushFollow(FOLLOW_comments_in_statement_list13558);
            	    cmnts=comments();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_cmnts==null) list_cmnts=new ArrayList();
            	    list_cmnts.add(cmnts.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1929:2: -> statementList(list=$stmtscmntts=$cmnts)
              {
                  retval.st = templateLib.getInstanceOf("statementList",new STAttrMap().put("list", list_stmts).put("cmntts", list_cmnts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement_list"


    public static class empty_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "empty_statement"
    // CSharpAngular.g:1931:1: empty_statement : val= SEMICOLON (comts= comments )? -> emptyStatement(value=$val.textcomments=comts);
    public final CSharpAngular.empty_statement_return empty_statement() throws RecognitionException {
        CSharpAngular.empty_statement_return retval = new CSharpAngular.empty_statement_return();
        retval.start = input.LT(1);


        Token val=null;
        CSharpAngular.comments_return comts =null;


        try {
            // CSharpAngular.g:1932:2: (val= SEMICOLON (comts= comments )? -> emptyStatement(value=$val.textcomments=comts))
            // CSharpAngular.g:1933:2: val= SEMICOLON (comts= comments )?
            {
            val=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_empty_statement13588); if (state.failed) return retval;

            // CSharpAngular.g:1933:16: (comts= comments )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==SINGLE_LINE_COMMENT) ) {
                alt146=1;
            }
            else if ( (LA146_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // CSharpAngular.g:1933:17: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_empty_statement13593);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1934:2: -> emptyStatement(value=$val.textcomments=comts)
              {
                  retval.st = templateLib.getInstanceOf("emptyStatement",new STAttrMap().put("value", (val!=null?val.getText():null)).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "empty_statement"


    public static class labeled_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "labeled_statement"
    // CSharpAngular.g:1937:1: labeled_statement : id= IDENTIFIER COLON stmt= statement -> labeledStatement(labelName=idlabelBody=stmt);
    public final CSharpAngular.labeled_statement_return labeled_statement() throws RecognitionException {
        CSharpAngular.labeled_statement_return retval = new CSharpAngular.labeled_statement_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharpAngular.statement_return stmt =null;


        try {
            // CSharpAngular.g:1938:2: (id= IDENTIFIER COLON stmt= statement -> labeledStatement(labelName=idlabelBody=stmt))
            // CSharpAngular.g:1939:2: id= IDENTIFIER COLON stmt= statement
            {
            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_labeled_statement13625); if (state.failed) return retval;

            match(input,COLON,FOLLOW_COLON_in_labeled_statement13627); if (state.failed) return retval;

            pushFollow(FOLLOW_statement_in_labeled_statement13631);
            stmt=statement();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1940:2: -> labeledStatement(labelName=idlabelBody=stmt)
              {
                  retval.st = templateLib.getInstanceOf("labeledStatement",new STAttrMap().put("labelName", id).put("labelBody", stmt));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "labeled_statement"


    public static class declaration_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "declaration_statement"
    // CSharpAngular.g:1943:1: declaration_statement : (varDec= local_variable_declaration SEMICOLON (comts1= comments )? -> declarationStatement(variableDecl=$varDec.st.toString().trim()comments=comts1)|constDec= local_constant_declaration SEMICOLON (comts2= comments )? -> declarationStatement(variableDecl=constDeccomments=comts2));
    public final CSharpAngular.declaration_statement_return declaration_statement() throws RecognitionException {
        CSharpAngular.declaration_statement_return retval = new CSharpAngular.declaration_statement_return();
        retval.start = input.LT(1);


        CSharpAngular.local_variable_declaration_return varDec =null;

        CSharpAngular.comments_return comts1 =null;

        CSharpAngular.local_constant_declaration_return constDec =null;

        CSharpAngular.comments_return comts2 =null;


        try {
            // CSharpAngular.g:1944:2: (varDec= local_variable_declaration SEMICOLON (comts1= comments )? -> declarationStatement(variableDecl=$varDec.st.toString().trim()comments=comts1)|constDec= local_constant_declaration SEMICOLON (comts2= comments )? -> declarationStatement(variableDecl=constDeccomments=comts2))
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==BOOL||LA149_0==BYTE||LA149_0==CHAR||LA149_0==DECIMAL||LA149_0==DOUBLE||LA149_0==FLOAT||LA149_0==IDENTIFIER||LA149_0==INT||LA149_0==LONG||LA149_0==OBJECT||LA149_0==SBYTE||LA149_0==SHORT||LA149_0==STRING||(LA149_0 >= UINT && LA149_0 <= ULONG)||LA149_0==USHORT||LA149_0==VOID) ) {
                alt149=1;
            }
            else if ( (LA149_0==CONST) ) {
                alt149=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;

            }
            switch (alt149) {
                case 1 :
                    // CSharpAngular.g:1945:2: varDec= local_variable_declaration SEMICOLON (comts1= comments )?
                    {
                    pushFollow(FOLLOW_local_variable_declaration_in_declaration_statement13661);
                    varDec=local_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_declaration_statement13663); if (state.failed) return retval;

                    // CSharpAngular.g:1945:46: (comts1= comments )?
                    int alt147=2;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==SINGLE_LINE_COMMENT) ) {
                        alt147=1;
                    }
                    else if ( (LA147_0==SINGLE_LINE_DOC_COMMENT) ) {
                        alt147=1;
                    }
                    switch (alt147) {
                        case 1 :
                            // CSharpAngular.g:1945:47: comts1= comments
                            {
                            pushFollow(FOLLOW_comments_in_declaration_statement13668);
                            comts1=comments();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1946:2: -> declarationStatement(variableDecl=$varDec.st.toString().trim()comments=comts1)
                      {
                          retval.st = templateLib.getInstanceOf("declarationStatement",new STAttrMap().put("variableDecl", (varDec!=null?varDec.st:null).toString().trim()).put("comments", comts1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1947:4: constDec= local_constant_declaration SEMICOLON (comts2= comments )?
                    {
                    pushFollow(FOLLOW_local_constant_declaration_in_declaration_statement13690);
                    constDec=local_constant_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_declaration_statement13692); if (state.failed) return retval;

                    // CSharpAngular.g:1947:50: (comts2= comments )?
                    int alt148=2;
                    int LA148_0 = input.LA(1);

                    if ( (LA148_0==SINGLE_LINE_COMMENT) ) {
                        alt148=1;
                    }
                    else if ( (LA148_0==SINGLE_LINE_DOC_COMMENT) ) {
                        alt148=1;
                    }
                    switch (alt148) {
                        case 1 :
                            // CSharpAngular.g:1947:51: comts2= comments
                            {
                            pushFollow(FOLLOW_comments_in_declaration_statement13697);
                            comts2=comments();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1948:2: -> declarationStatement(variableDecl=constDeccomments=comts2)
                      {
                          retval.st = templateLib.getInstanceOf("declarationStatement",new STAttrMap().put("variableDecl", constDec).put("comments", comts2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "declaration_statement"


    public static class local_variable_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_declaration"
    // CSharpAngular.g:1950:1: local_variable_declaration : typ= local_variable_type (arr= array_initializer )? decls= local_variable_declarators -> localVariableDeclaration(varType=\"var\"arr1=arrdeclarators=decls);
    public final CSharpAngular.local_variable_declaration_return local_variable_declaration() throws RecognitionException {
        CSharpAngular.local_variable_declaration_return retval = new CSharpAngular.local_variable_declaration_return();
        retval.start = input.LT(1);


        CSharpAngular.local_variable_type_return typ =null;

        CSharpAngular.array_initializer_return arr =null;

        CSharpAngular.local_variable_declarators_return decls =null;


        try {
            // CSharpAngular.g:1951:2: (typ= local_variable_type (arr= array_initializer )? decls= local_variable_declarators -> localVariableDeclaration(varType=\"var\"arr1=arrdeclarators=decls))
            // CSharpAngular.g:1952:2: typ= local_variable_type (arr= array_initializer )? decls= local_variable_declarators
            {
            pushFollow(FOLLOW_local_variable_type_in_local_variable_declaration13727);
            typ=local_variable_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1952:26: (arr= array_initializer )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==OPEN_BRACE) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // CSharpAngular.g:1952:27: arr= array_initializer
                    {
                    pushFollow(FOLLOW_array_initializer_in_local_variable_declaration13732);
                    arr=array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_local_variable_declarators_in_local_variable_declaration13738);
            decls=local_variable_declarators();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1953:2: -> localVariableDeclaration(varType=\"var\"arr1=arrdeclarators=decls)
              {
                  retval.st = templateLib.getInstanceOf("localVariableDeclaration",new STAttrMap().put("varType", "var").put("arr1", arr).put("declarators", decls));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "local_variable_declaration"


    public static class local_variable_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_type"
    // CSharpAngular.g:1961:1: local_variable_type : t= type -> localVariableType(type=$t.text);
    public final CSharpAngular.local_variable_type_return local_variable_type() throws RecognitionException {
        CSharpAngular.local_variable_type_return retval = new CSharpAngular.local_variable_type_return();
        retval.start = input.LT(1);


        CSharpAngular.type_return t =null;


        try {
            // CSharpAngular.g:1962:2: (t= type -> localVariableType(type=$t.text))
            // CSharpAngular.g:1963:2: t= type
            {
            pushFollow(FOLLOW_type_in_local_variable_type13772);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1964:2: -> localVariableType(type=$t.text)
              {
                  retval.st = templateLib.getInstanceOf("localVariableType",new STAttrMap().put("type", (t!=null?input.toString(t.start,t.stop):null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "local_variable_type"


    public static class local_variable_declarators_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_declarators"
    // CSharpAngular.g:1967:1: local_variable_declarators : frstDec= local_variable_declarator (lvdChld+= local_variable_declarators_Chld )* -> localVariableDeclarators(firstDeclaration=frstDecdeclarationChld=$lvdChld);
    public final CSharpAngular.local_variable_declarators_return local_variable_declarators() throws RecognitionException {
        CSharpAngular.local_variable_declarators_return retval = new CSharpAngular.local_variable_declarators_return();
        retval.start = input.LT(1);


        List list_lvdChld=null;
        CSharpAngular.local_variable_declarator_return frstDec =null;

        RuleReturnScope lvdChld = null;
        try {
            // CSharpAngular.g:1968:2: (frstDec= local_variable_declarator (lvdChld+= local_variable_declarators_Chld )* -> localVariableDeclarators(firstDeclaration=frstDecdeclarationChld=$lvdChld))
            // CSharpAngular.g:1969:2: frstDec= local_variable_declarator (lvdChld+= local_variable_declarators_Chld )*
            {
            pushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators13799);
            frstDec=local_variable_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:1969:36: (lvdChld+= local_variable_declarators_Chld )*
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);

                if ( (LA151_0==COMMA) ) {
                    alt151=1;
                }


                switch (alt151) {
            	case 1 :
            	    // CSharpAngular.g:1969:38: lvdChld+= local_variable_declarators_Chld
            	    {
            	    pushFollow(FOLLOW_local_variable_declarators_Chld_in_local_variable_declarators13805);
            	    lvdChld=local_variable_declarators_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lvdChld==null) list_lvdChld=new ArrayList();
            	    list_lvdChld.add(lvdChld.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1970:2: -> localVariableDeclarators(firstDeclaration=frstDecdeclarationChld=$lvdChld)
              {
                  retval.st = templateLib.getInstanceOf("localVariableDeclarators",new STAttrMap().put("firstDeclaration", frstDec).put("declarationChld", list_lvdChld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "local_variable_declarators"


    public static class local_variable_declarators_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_declarators_Chld"
    // CSharpAngular.g:1973:1: local_variable_declarators_Chld : COMMA lvd= local_variable_declarator -> localVariableDeclaratorsChld(localVarDec=lvd);
    public final CSharpAngular.local_variable_declarators_Chld_return local_variable_declarators_Chld() throws RecognitionException {
        CSharpAngular.local_variable_declarators_Chld_return retval = new CSharpAngular.local_variable_declarators_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.local_variable_declarator_return lvd =null;


        try {
            // CSharpAngular.g:1974:2: ( COMMA lvd= local_variable_declarator -> localVariableDeclaratorsChld(localVarDec=lvd))
            // CSharpAngular.g:1975:2: COMMA lvd= local_variable_declarator
            {
            match(input,COMMA,FOLLOW_COMMA_in_local_variable_declarators_Chld13834); if (state.failed) return retval;

            pushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators_Chld13839);
            lvd=local_variable_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1976:2: -> localVariableDeclaratorsChld(localVarDec=lvd)
              {
                  retval.st = templateLib.getInstanceOf("localVariableDeclaratorsChld",new STAttrMap().put("localVarDec", lvd));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "local_variable_declarators_Chld"


    public static class local_variable_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_declarator"
    // CSharpAngular.g:1984:1: local_variable_declarator : id= IDENTIFIER ( ASSIGNMENT lvInit= local_variable_initializer )? -> localVariableDeclarator(lvdName=$id.textlocalVarInit=lvInit);
    public final CSharpAngular.local_variable_declarator_return local_variable_declarator() throws RecognitionException {
        CSharpAngular.local_variable_declarator_return retval = new CSharpAngular.local_variable_declarator_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharpAngular.local_variable_initializer_return lvInit =null;


        try {
            // CSharpAngular.g:1985:3: (id= IDENTIFIER ( ASSIGNMENT lvInit= local_variable_initializer )? -> localVariableDeclarator(lvdName=$id.textlocalVarInit=lvInit))
            // CSharpAngular.g:1986:3: id= IDENTIFIER ( ASSIGNMENT lvInit= local_variable_initializer )?
            {
            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_local_variable_declarator13867); if (state.failed) return retval;

            // CSharpAngular.g:1986:18: ( ASSIGNMENT lvInit= local_variable_initializer )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==ASSIGNMENT) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // CSharpAngular.g:1986:19: ASSIGNMENT lvInit= local_variable_initializer
                    {
                    match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_local_variable_declarator13871); if (state.failed) return retval;

                    pushFollow(FOLLOW_local_variable_initializer_in_local_variable_declarator13875);
                    lvInit=local_variable_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1987:3: -> localVariableDeclarator(lvdName=$id.textlocalVarInit=lvInit)
              {
                  retval.st = templateLib.getInstanceOf("localVariableDeclarator",new STAttrMap().put("lvdName", (id!=null?id.getText():null)).put("localVarInit", lvInit));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "local_variable_declarator"


    public static class local_variable_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_initializer"
    // CSharpAngular.g:1989:1: local_variable_initializer : (expr= expression -> localVariableInitializer(init=expr)|arrInit= array_initializer -> localVariableInitializer(init=arrInit)|lvInitUnsafe= local_variable_initializer_unsafe -> localVariableInitializer(init=lvInitUnsafe));
    public final CSharpAngular.local_variable_initializer_return local_variable_initializer() throws RecognitionException {
        CSharpAngular.local_variable_initializer_return retval = new CSharpAngular.local_variable_initializer_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_return expr =null;

        CSharpAngular.array_initializer_return arrInit =null;

        CSharpAngular.local_variable_initializer_unsafe_return lvInitUnsafe =null;


        try {
            // CSharpAngular.g:1990:2: (expr= expression -> localVariableInitializer(init=expr)|arrInit= array_initializer -> localVariableInitializer(init=arrInit)|lvInitUnsafe= local_variable_initializer_unsafe -> localVariableInitializer(init=lvInitUnsafe))
            int alt153=3;
            switch ( input.LA(1) ) {
            case AMP:
            case BANG:
            case BASE:
            case BOOL:
            case BYTE:
            case CHAR:
            case CHARACTER_LITERAL:
            case CHECKED:
            case DECIMAL:
            case DEFAULT:
            case DELEGATE:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case IDENTIFIER:
            case INT:
            case INTEGER_LITERAL:
            case LONG:
            case MINUS:
            case NEW:
            case NULL:
            case OBJECT:
            case OPEN_PARENS:
            case OP_DEC:
            case OP_INC:
            case PLUS:
            case REAL_LITERAL:
            case SBYTE:
            case SHORT:
            case SIZEOF:
            case STAR:
            case STRING:
            case STRING_LITERAL:
            case THIS:
            case TILDE:
            case TRUE:
            case TYPEOF:
            case UINT:
            case ULONG:
            case UNCHECKED:
            case USHORT:
                {
                alt153=1;
                }
                break;
            case OPEN_BRACE:
                {
                alt153=2;
                }
                break;
            case STACKALLOC:
                {
                alt153=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;

            }

            switch (alt153) {
                case 1 :
                    // CSharpAngular.g:1991:2: expr= expression
                    {
                    pushFollow(FOLLOW_expression_in_local_variable_initializer13906);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1992:2: -> localVariableInitializer(init=expr)
                      {
                          retval.st = templateLib.getInstanceOf("localVariableInitializer",new STAttrMap().put("init", expr));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:1993:4: arrInit= array_initializer
                    {
                    pushFollow(FOLLOW_array_initializer_in_local_variable_initializer13922);
                    arrInit=array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1994:2: -> localVariableInitializer(init=arrInit)
                      {
                          retval.st = templateLib.getInstanceOf("localVariableInitializer",new STAttrMap().put("init", arrInit));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:1995:4: lvInitUnsafe= local_variable_initializer_unsafe
                    {
                    pushFollow(FOLLOW_local_variable_initializer_unsafe_in_local_variable_initializer13938);
                    lvInitUnsafe=local_variable_initializer_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1996:2: -> localVariableInitializer(init=lvInitUnsafe)
                      {
                          retval.st = templateLib.getInstanceOf("localVariableInitializer",new STAttrMap().put("init", lvInitUnsafe));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "local_variable_initializer"


    public static class local_constant_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_constant_declaration"
    // CSharpAngular.g:1999:1: local_constant_declaration : CONST t= type cd= constant_declarators -> localConstantDeclaration(type=tconstDecls=cd);
    public final CSharpAngular.local_constant_declaration_return local_constant_declaration() throws RecognitionException {
        CSharpAngular.local_constant_declaration_return retval = new CSharpAngular.local_constant_declaration_return();
        retval.start = input.LT(1);


        CSharpAngular.type_return t =null;

        CSharpAngular.constant_declarators_return cd =null;


        try {
            // CSharpAngular.g:2000:2: ( CONST t= type cd= constant_declarators -> localConstantDeclaration(type=tconstDecls=cd))
            // CSharpAngular.g:2001:2: CONST t= type cd= constant_declarators
            {
            match(input,CONST,FOLLOW_CONST_in_local_constant_declaration13962); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_local_constant_declaration13966);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_constant_declarators_in_local_constant_declaration13970);
            cd=constant_declarators();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2002:2: -> localConstantDeclaration(type=tconstDecls=cd)
              {
                  retval.st = templateLib.getInstanceOf("localConstantDeclaration",new STAttrMap().put("type", t).put("constDecls", cd));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "local_constant_declaration"


    public static class expression_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "expression_statement"
    // CSharpAngular.g:2005:1: expression_statement : stmt= statement_expression SEMICOLON (comts= comments )? -> expressionStatement(statement=$stmt.st.toString().trim()comments=comts);
    public final CSharpAngular.expression_statement_return expression_statement() throws RecognitionException {
        CSharpAngular.expression_statement_return retval = new CSharpAngular.expression_statement_return();
        retval.start = input.LT(1);


        CSharpAngular.statement_expression_return stmt =null;

        CSharpAngular.comments_return comts =null;


        try {
            // CSharpAngular.g:2006:2: (stmt= statement_expression SEMICOLON (comts= comments )? -> expressionStatement(statement=$stmt.st.toString().trim()comments=comts))
            // CSharpAngular.g:2007:2: stmt= statement_expression SEMICOLON (comts= comments )?
            {
            pushFollow(FOLLOW_statement_expression_in_expression_statement13999);
            stmt=statement_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_expression_statement14001); if (state.failed) return retval;

            // CSharpAngular.g:2007:38: (comts= comments )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==SINGLE_LINE_COMMENT) ) {
                alt154=1;
            }
            else if ( (LA154_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // CSharpAngular.g:2007:39: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_expression_statement14006);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2008:2: -> expressionStatement(statement=$stmt.st.toString().trim()comments=comts)
              {
                  retval.st = templateLib.getInstanceOf("expressionStatement",new STAttrMap().put("statement", (stmt!=null?stmt.st:null).toString().trim()).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression_statement"


    public static class statement_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "statement_expression"
    // CSharpAngular.g:2023:1: statement_expression : expr= expression -> statementExpression(expression=expr);
    public final CSharpAngular.statement_expression_return statement_expression() throws RecognitionException {
        CSharpAngular.statement_expression_return retval = new CSharpAngular.statement_expression_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_return expr =null;


        try {
            // CSharpAngular.g:2024:3: (expr= expression -> statementExpression(expression=expr))
            // CSharpAngular.g:2025:3: expr= expression
            {
            pushFollow(FOLLOW_expression_in_statement_expression14042);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2026:3: -> statementExpression(expression=expr)
              {
                  retval.st = templateLib.getInstanceOf("statementExpression",new STAttrMap().put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement_expression"


    public static class selection_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "selection_statement"
    // CSharpAngular.g:2034:1: selection_statement : (ifStmt= if_statement -> selectionStatement(stmt=ifStmt)|swStmt= switch_statement -> selectionStatement(stmt=swStmt));
    public final CSharpAngular.selection_statement_return selection_statement() throws RecognitionException {
        CSharpAngular.selection_statement_return retval = new CSharpAngular.selection_statement_return();
        retval.start = input.LT(1);


        CSharpAngular.if_statement_return ifStmt =null;

        CSharpAngular.switch_statement_return swStmt =null;


        try {
            // CSharpAngular.g:2035:2: (ifStmt= if_statement -> selectionStatement(stmt=ifStmt)|swStmt= switch_statement -> selectionStatement(stmt=swStmt))
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==IF) ) {
                alt155=1;
            }
            else if ( (LA155_0==SWITCH) ) {
                alt155=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;

            }
            switch (alt155) {
                case 1 :
                    // CSharpAngular.g:2036:2: ifStmt= if_statement
                    {
                    pushFollow(FOLLOW_if_statement_in_selection_statement14073);
                    ifStmt=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2037:2: -> selectionStatement(stmt=ifStmt)
                      {
                          retval.st = templateLib.getInstanceOf("selectionStatement",new STAttrMap().put("stmt", ifStmt));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2038:3: swStmt= switch_statement
                    {
                    pushFollow(FOLLOW_switch_statement_in_selection_statement14088);
                    swStmt=switch_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2039:2: -> selectionStatement(stmt=swStmt)
                      {
                          retval.st = templateLib.getInstanceOf("selectionStatement",new STAttrMap().put("stmt", swStmt));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selection_statement"


    public static class if_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "if_statement"
    // CSharpAngular.g:2047:1: if_statement : IF OPEN_PARENS (cmnts2= comments )? cond= boolean_expression CLOSE_PARENS (cmnts1= comments )? ifBdystmts= embedded_statement (cmnts= comments )? ( ( ELSE )=> ELSE elsBdy= embedded_statement )? -> ifStatement(cmnt2=cmnts2condition=cond.toString().trim()cmnt1=cmnts1ifBody=ifBdystmtscmnt=cmntselseBody=elsBdy);
    public final CSharpAngular.if_statement_return if_statement() throws RecognitionException {
        CSharpAngular.if_statement_return retval = new CSharpAngular.if_statement_return();
        retval.start = input.LT(1);


        CSharpAngular.comments_return cmnts2 =null;

        CSharpAngular.boolean_expression_return cond =null;

        CSharpAngular.comments_return cmnts1 =null;

        CSharpAngular.embedded_statement_return ifBdystmts =null;

        CSharpAngular.comments_return cmnts =null;

        CSharpAngular.embedded_statement_return elsBdy =null;


        try {
            // CSharpAngular.g:2048:3: ( IF OPEN_PARENS (cmnts2= comments )? cond= boolean_expression CLOSE_PARENS (cmnts1= comments )? ifBdystmts= embedded_statement (cmnts= comments )? ( ( ELSE )=> ELSE elsBdy= embedded_statement )? -> ifStatement(cmnt2=cmnts2condition=cond.toString().trim()cmnt1=cmnts1ifBody=ifBdystmtscmnt=cmntselseBody=elsBdy))
            // CSharpAngular.g:2049:3: IF OPEN_PARENS (cmnts2= comments )? cond= boolean_expression CLOSE_PARENS (cmnts1= comments )? ifBdystmts= embedded_statement (cmnts= comments )? ( ( ELSE )=> ELSE elsBdy= embedded_statement )?
            {
            match(input,IF,FOLLOW_IF_in_if_statement14114); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_if_statement14116); if (state.failed) return retval;

            // CSharpAngular.g:2049:18: (cmnts2= comments )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( ((LA156_0 >= SINGLE_LINE_COMMENT && LA156_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // CSharpAngular.g:2049:19: cmnts2= comments
                    {
                    pushFollow(FOLLOW_comments_in_if_statement14121);
                    cmnts2=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_boolean_expression_in_if_statement14127);
            cond=boolean_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_if_statement14129); if (state.failed) return retval;

            // CSharpAngular.g:2049:74: (cmnts1= comments )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==SINGLE_LINE_COMMENT) ) {
                alt157=1;
            }
            else if ( (LA157_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // CSharpAngular.g:2049:75: cmnts1= comments
                    {
                    pushFollow(FOLLOW_comments_in_if_statement14134);
                    cmnts1=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_embedded_statement_in_if_statement14140);
            ifBdystmts=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2049:123: (cmnts= comments )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==SINGLE_LINE_COMMENT) ) {
                alt158=1;
            }
            else if ( (LA158_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // CSharpAngular.g:2049:124: cmnts= comments
                    {
                    pushFollow(FOLLOW_comments_in_if_statement14145);
                    cmnts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2049:141: ( ( ELSE )=> ELSE elsBdy= embedded_statement )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==ELSE) ) {
                int LA159_1 = input.LA(2);

                if ( (synpred70_CSharpAngular()) ) {
                    alt159=1;
                }
            }
            switch (alt159) {
                case 1 :
                    // CSharpAngular.g:2049:143: ( ELSE )=> ELSE elsBdy= embedded_statement
                    {
                    match(input,ELSE,FOLLOW_ELSE_in_if_statement14157); if (state.failed) return retval;

                    pushFollow(FOLLOW_embedded_statement_in_if_statement14161);
                    elsBdy=embedded_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2050:3: -> ifStatement(cmnt2=cmnts2condition=cond.toString().trim()cmnt1=cmnts1ifBody=ifBdystmtscmnt=cmntselseBody=elsBdy)
              {
                  retval.st = templateLib.getInstanceOf("ifStatement",new STAttrMap().put("cmnt2", cmnts2).put("condition", cond.toString().trim()).put("cmnt1", cmnts1).put("ifBody", ifBdystmts).put("cmnt", cmnts).put("elseBody", elsBdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_statement"


    public static class switch_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_statement"
    // CSharpAngular.g:2052:1: switch_statement : SWITCH OPEN_PARENS expr= expression CLOSE_PARENS (cmnts= comments )? switchblk= switch_block -> switchstatement(exprsn=exprcmnt=cmntsswiblk=switchblk);
    public final CSharpAngular.switch_statement_return switch_statement() throws RecognitionException {
        CSharpAngular.switch_statement_return retval = new CSharpAngular.switch_statement_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_return expr =null;

        CSharpAngular.comments_return cmnts =null;

        CSharpAngular.switch_block_return switchblk =null;


        try {
            // CSharpAngular.g:2053:2: ( SWITCH OPEN_PARENS expr= expression CLOSE_PARENS (cmnts= comments )? switchblk= switch_block -> switchstatement(exprsn=exprcmnt=cmntsswiblk=switchblk))
            // CSharpAngular.g:2053:4: SWITCH OPEN_PARENS expr= expression CLOSE_PARENS (cmnts= comments )? switchblk= switch_block
            {
            match(input,SWITCH,FOLLOW_SWITCH_in_switch_statement14206); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_switch_statement14208); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_switch_statement14212);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_switch_statement14214); if (state.failed) return retval;

            // CSharpAngular.g:2053:52: (cmnts= comments )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( ((LA160_0 >= SINGLE_LINE_COMMENT && LA160_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // CSharpAngular.g:2053:53: cmnts= comments
                    {
                    pushFollow(FOLLOW_comments_in_switch_statement14219);
                    cmnts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_switch_block_in_switch_statement14225);
            switchblk=switch_block();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2054:2: -> switchstatement(exprsn=exprcmnt=cmntsswiblk=switchblk)
              {
                  retval.st = templateLib.getInstanceOf("switchstatement",new STAttrMap().put("exprsn", expr).put("cmnt", cmnts).put("swiblk", switchblk));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_statement"


    public static class switch_block_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_block"
    // CSharpAngular.g:2056:1: switch_block : OPEN_BRACE (cmnts= comments )? (switchsecns= switch_sections )? CLOSE_BRACE -> switchblock(cmnt=cmntssectns=switchsecns);
    public final CSharpAngular.switch_block_return switch_block() throws RecognitionException {
        CSharpAngular.switch_block_return retval = new CSharpAngular.switch_block_return();
        retval.start = input.LT(1);


        CSharpAngular.comments_return cmnts =null;

        CSharpAngular.switch_sections_return switchsecns =null;


        try {
            // CSharpAngular.g:2057:2: ( OPEN_BRACE (cmnts= comments )? (switchsecns= switch_sections )? CLOSE_BRACE -> switchblock(cmnt=cmntssectns=switchsecns))
            // CSharpAngular.g:2057:4: OPEN_BRACE (cmnts= comments )? (switchsecns= switch_sections )? CLOSE_BRACE
            {
            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_switch_block14253); if (state.failed) return retval;

            // CSharpAngular.g:2057:15: (cmnts= comments )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( ((LA161_0 >= SINGLE_LINE_COMMENT && LA161_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // CSharpAngular.g:2057:16: cmnts= comments
                    {
                    pushFollow(FOLLOW_comments_in_switch_block14258);
                    cmnts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2057:33: (switchsecns= switch_sections )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==CASE||LA162_0==DEFAULT) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // CSharpAngular.g:2057:34: switchsecns= switch_sections
                    {
                    pushFollow(FOLLOW_switch_sections_in_switch_block14265);
                    switchsecns=switch_sections();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_switch_block14269); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2058:2: -> switchblock(cmnt=cmntssectns=switchsecns)
              {
                  retval.st = templateLib.getInstanceOf("switchblock",new STAttrMap().put("cmnt", cmnts).put("sectns", switchsecns));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_block"


    public static class switch_sections_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_sections"
    // CSharpAngular.g:2060:1: switch_sections : (switchsecn+= switch_section )+ -> switchsections(sectn=$switchsecn);
    public final CSharpAngular.switch_sections_return switch_sections() throws RecognitionException {
        CSharpAngular.switch_sections_return retval = new CSharpAngular.switch_sections_return();
        retval.start = input.LT(1);


        List list_switchsecn=null;
        RuleReturnScope switchsecn = null;
        try {
            // CSharpAngular.g:2061:2: ( (switchsecn+= switch_section )+ -> switchsections(sectn=$switchsecn))
            // CSharpAngular.g:2061:4: (switchsecn+= switch_section )+
            {
            // CSharpAngular.g:2061:4: (switchsecn+= switch_section )+
            int cnt163=0;
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==CASE||LA163_0==DEFAULT) ) {
                    alt163=1;
                }


                switch (alt163) {
            	case 1 :
            	    // CSharpAngular.g:2061:5: switchsecn+= switch_section
            	    {
            	    pushFollow(FOLLOW_switch_section_in_switch_sections14296);
            	    switchsecn=switch_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_switchsecn==null) list_switchsecn=new ArrayList();
            	    list_switchsecn.add(switchsecn.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt163 >= 1 ) break loop163;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(163, input);
                        throw eee;
                }
                cnt163++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2062:2: -> switchsections(sectn=$switchsecn)
              {
                  retval.st = templateLib.getInstanceOf("switchsections",new STAttrMap().put("sectn", list_switchsecn));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_sections"


    public static class switch_section_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_section"
    // CSharpAngular.g:2064:1: switch_section : label= switch_labels stmt= statement_list -> switchsection(labels=labelstmts=stmt);
    public final CSharpAngular.switch_section_return switch_section() throws RecognitionException {
        CSharpAngular.switch_section_return retval = new CSharpAngular.switch_section_return();
        retval.start = input.LT(1);


        CSharpAngular.switch_labels_return label =null;

        CSharpAngular.statement_list_return stmt =null;


        try {
            // CSharpAngular.g:2065:2: (label= switch_labels stmt= statement_list -> switchsection(labels=labelstmts=stmt))
            // CSharpAngular.g:2065:4: label= switch_labels stmt= statement_list
            {
            pushFollow(FOLLOW_switch_labels_in_switch_section14320);
            label=switch_labels();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_statement_list_in_switch_section14324);
            stmt=statement_list();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2066:2: -> switchsection(labels=labelstmts=stmt)
              {
                  retval.st = templateLib.getInstanceOf("switchsection",new STAttrMap().put("labels", label).put("stmts", stmt));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_section"


    public static class switch_labels_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_labels"
    // CSharpAngular.g:2068:1: switch_labels : (label+= switch_label )+ -> switchlabels(labels=$label);
    public final CSharpAngular.switch_labels_return switch_labels() throws RecognitionException {
        CSharpAngular.switch_labels_return retval = new CSharpAngular.switch_labels_return();
        retval.start = input.LT(1);


        List list_label=null;
        RuleReturnScope label = null;
        try {
            // CSharpAngular.g:2069:2: ( (label+= switch_label )+ -> switchlabels(labels=$label))
            // CSharpAngular.g:2069:4: (label+= switch_label )+
            {
            // CSharpAngular.g:2069:4: (label+= switch_label )+
            int cnt164=0;
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( (LA164_0==DEFAULT) ) {
                    int LA164_2 = input.LA(2);

                    if ( (LA164_2==COLON) ) {
                        alt164=1;
                    }


                }
                else if ( (LA164_0==CASE) ) {
                    alt164=1;
                }


                switch (alt164) {
            	case 1 :
            	    // CSharpAngular.g:2069:5: label+= switch_label
            	    {
            	    pushFollow(FOLLOW_switch_label_in_switch_labels14351);
            	    label=switch_label();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_label==null) list_label=new ArrayList();
            	    list_label.add(label.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt164 >= 1 ) break loop164;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(164, input);
                        throw eee;
                }
                cnt164++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2070:2: -> switchlabels(labels=$label)
              {
                  retval.st = templateLib.getInstanceOf("switchlabels",new STAttrMap().put("labels", list_label));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_labels"


    public static class switch_label_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_label"
    // CSharpAngular.g:2072:1: switch_label : ( CASE cnst= constant_expression COLON -> switchlabel(cnsts=cnst)| DEFAULT COLON ->);
    public final CSharpAngular.switch_label_return switch_label() throws RecognitionException {
        CSharpAngular.switch_label_return retval = new CSharpAngular.switch_label_return();
        retval.start = input.LT(1);


        CSharpAngular.constant_expression_return cnst =null;


        try {
            // CSharpAngular.g:2073:2: ( CASE cnst= constant_expression COLON -> switchlabel(cnsts=cnst)| DEFAULT COLON ->)
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==CASE) ) {
                alt165=1;
            }
            else if ( (LA165_0==DEFAULT) ) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;

            }
            switch (alt165) {
                case 1 :
                    // CSharpAngular.g:2073:4: CASE cnst= constant_expression COLON
                    {
                    match(input,CASE,FOLLOW_CASE_in_switch_label14373); if (state.failed) return retval;

                    pushFollow(FOLLOW_constant_expression_in_switch_label14377);
                    cnst=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,COLON,FOLLOW_COLON_in_switch_label14379); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2074:2: -> switchlabel(cnsts=cnst)
                      {
                          retval.st = templateLib.getInstanceOf("switchlabel",new STAttrMap().put("cnsts", cnst));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2075:4: DEFAULT COLON
                    {
                    match(input,DEFAULT,FOLLOW_DEFAULT_in_switch_label14393); if (state.failed) return retval;

                    match(input,COLON,FOLLOW_COLON_in_switch_label14395); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2076:2: ->
                      {
                          retval.st = null;;
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_label"


    public static class iteration_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "iteration_statement"
    // CSharpAngular.g:2078:1: iteration_statement : (whlStmt= while_statement -> iterationStatement(stmt=whlStmt)|doStmt= do_statement -> iterationStatement(stmt=doStmt)|forStmt= for_statement -> iterationStatement(stmt=forStmt)|forEchStmt= foreach_statement -> iterationStatement(stmt=forEchStmt));
    public final CSharpAngular.iteration_statement_return iteration_statement() throws RecognitionException {
        CSharpAngular.iteration_statement_return retval = new CSharpAngular.iteration_statement_return();
        retval.start = input.LT(1);


        CSharpAngular.while_statement_return whlStmt =null;

        CSharpAngular.do_statement_return doStmt =null;

        CSharpAngular.for_statement_return forStmt =null;

        CSharpAngular.foreach_statement_return forEchStmt =null;


        try {
            // CSharpAngular.g:2079:2: (whlStmt= while_statement -> iterationStatement(stmt=whlStmt)|doStmt= do_statement -> iterationStatement(stmt=doStmt)|forStmt= for_statement -> iterationStatement(stmt=forStmt)|forEchStmt= foreach_statement -> iterationStatement(stmt=forEchStmt))
            int alt166=4;
            switch ( input.LA(1) ) {
            case WHILE:
                {
                alt166=1;
                }
                break;
            case DO:
                {
                alt166=2;
                }
                break;
            case FOR:
                {
                alt166=3;
                }
                break;
            case FOREACH:
                {
                alt166=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;

            }

            switch (alt166) {
                case 1 :
                    // CSharpAngular.g:2080:2: whlStmt= while_statement
                    {
                    pushFollow(FOLLOW_while_statement_in_iteration_statement14413);
                    whlStmt=while_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2081:2: -> iterationStatement(stmt=whlStmt)
                      {
                          retval.st = templateLib.getInstanceOf("iterationStatement",new STAttrMap().put("stmt", whlStmt));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2082:4: doStmt= do_statement
                    {
                    pushFollow(FOLLOW_do_statement_in_iteration_statement14429);
                    doStmt=do_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2083:2: -> iterationStatement(stmt=doStmt)
                      {
                          retval.st = templateLib.getInstanceOf("iterationStatement",new STAttrMap().put("stmt", doStmt));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:2084:4: forStmt= for_statement
                    {
                    pushFollow(FOLLOW_for_statement_in_iteration_statement14445);
                    forStmt=for_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2085:2: -> iterationStatement(stmt=forStmt)
                      {
                          retval.st = templateLib.getInstanceOf("iterationStatement",new STAttrMap().put("stmt", forStmt));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:2086:4: forEchStmt= foreach_statement
                    {
                    pushFollow(FOLLOW_foreach_statement_in_iteration_statement14461);
                    forEchStmt=foreach_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2087:2: -> iterationStatement(stmt=forEchStmt)
                      {
                          retval.st = templateLib.getInstanceOf("iterationStatement",new STAttrMap().put("stmt", forEchStmt));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "iteration_statement"


    public static class while_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "while_statement"
    // CSharpAngular.g:2089:1: while_statement : WHILE OPEN_PARENS cond= boolean_expression CLOSE_PARENS bdy= embedded_statement -> whileStatement(condition=condbody=bdy);
    public final CSharpAngular.while_statement_return while_statement() throws RecognitionException {
        CSharpAngular.while_statement_return retval = new CSharpAngular.while_statement_return();
        retval.start = input.LT(1);


        CSharpAngular.boolean_expression_return cond =null;

        CSharpAngular.embedded_statement_return bdy =null;


        try {
            // CSharpAngular.g:2090:2: ( WHILE OPEN_PARENS cond= boolean_expression CLOSE_PARENS bdy= embedded_statement -> whileStatement(condition=condbody=bdy))
            // CSharpAngular.g:2091:2: WHILE OPEN_PARENS cond= boolean_expression CLOSE_PARENS bdy= embedded_statement
            {
            match(input,WHILE,FOLLOW_WHILE_in_while_statement14483); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_while_statement14485); if (state.failed) return retval;

            pushFollow(FOLLOW_boolean_expression_in_while_statement14489);
            cond=boolean_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_while_statement14491); if (state.failed) return retval;

            pushFollow(FOLLOW_embedded_statement_in_while_statement14495);
            bdy=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2092:2: -> whileStatement(condition=condbody=bdy)
              {
                  retval.st = templateLib.getInstanceOf("whileStatement",new STAttrMap().put("condition", cond).put("body", bdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_statement"


    public static class do_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "do_statement"
    // CSharpAngular.g:2094:1: do_statement : DO bdy= embedded_statement WHILE OPEN_PARENS cond= boolean_expression CLOSE_PARENS SEMICOLON (comts= comments )? -> doStatement(doBody=bdycondition=condcomments=comts);
    public final CSharpAngular.do_statement_return do_statement() throws RecognitionException {
        CSharpAngular.do_statement_return retval = new CSharpAngular.do_statement_return();
        retval.start = input.LT(1);


        CSharpAngular.embedded_statement_return bdy =null;

        CSharpAngular.boolean_expression_return cond =null;

        CSharpAngular.comments_return comts =null;


        try {
            // CSharpAngular.g:2095:2: ( DO bdy= embedded_statement WHILE OPEN_PARENS cond= boolean_expression CLOSE_PARENS SEMICOLON (comts= comments )? -> doStatement(doBody=bdycondition=condcomments=comts))
            // CSharpAngular.g:2096:2: DO bdy= embedded_statement WHILE OPEN_PARENS cond= boolean_expression CLOSE_PARENS SEMICOLON (comts= comments )?
            {
            match(input,DO,FOLLOW_DO_in_do_statement14521); if (state.failed) return retval;

            pushFollow(FOLLOW_embedded_statement_in_do_statement14525);
            bdy=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            match(input,WHILE,FOLLOW_WHILE_in_do_statement14527); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_do_statement14529); if (state.failed) return retval;

            pushFollow(FOLLOW_boolean_expression_in_do_statement14533);
            cond=boolean_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_do_statement14535); if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_do_statement14537); if (state.failed) return retval;

            // CSharpAngular.g:2096:93: (comts= comments )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==SINGLE_LINE_COMMENT) ) {
                alt167=1;
            }
            else if ( (LA167_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // CSharpAngular.g:2096:94: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_do_statement14542);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2097:2: -> doStatement(doBody=bdycondition=condcomments=comts)
              {
                  retval.st = templateLib.getInstanceOf("doStatement",new STAttrMap().put("doBody", bdy).put("condition", cond).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_statement"


    public static class for_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "for_statement"
    // CSharpAngular.g:2099:1: for_statement : FOR OPEN_PARENS (init= for_initializer )? SEMICOLON (cond= for_condition )? SEMICOLON (itr= for_iterator )? CLOSE_PARENS frBdy= embedded_statement -> forStatement(initialization=initcondition=conditerator=itrforBody=frBdy);
    public final CSharpAngular.for_statement_return for_statement() throws RecognitionException {
        CSharpAngular.for_statement_return retval = new CSharpAngular.for_statement_return();
        retval.start = input.LT(1);


        CSharpAngular.for_initializer_return init =null;

        CSharpAngular.for_condition_return cond =null;

        CSharpAngular.for_iterator_return itr =null;

        CSharpAngular.embedded_statement_return frBdy =null;


        try {
            // CSharpAngular.g:2100:2: ( FOR OPEN_PARENS (init= for_initializer )? SEMICOLON (cond= for_condition )? SEMICOLON (itr= for_iterator )? CLOSE_PARENS frBdy= embedded_statement -> forStatement(initialization=initcondition=conditerator=itrforBody=frBdy))
            // CSharpAngular.g:2101:2: FOR OPEN_PARENS (init= for_initializer )? SEMICOLON (cond= for_condition )? SEMICOLON (itr= for_iterator )? CLOSE_PARENS frBdy= embedded_statement
            {
            match(input,FOR,FOLLOW_FOR_in_for_statement14574); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_for_statement14576); if (state.failed) return retval;

            // CSharpAngular.g:2101:18: (init= for_initializer )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==AMP||(LA168_0 >= BANG && LA168_0 <= BASE)||LA168_0==BOOL||LA168_0==BYTE||(LA168_0 >= CHAR && LA168_0 <= CHECKED)||LA168_0==DECIMAL||(LA168_0 >= DEFAULT && LA168_0 <= DELEGATE)||LA168_0==DOUBLE||LA168_0==FALSE||LA168_0==FLOAT||LA168_0==IDENTIFIER||(LA168_0 >= INT && LA168_0 <= INTEGER_LITERAL)||LA168_0==LONG||LA168_0==MINUS||LA168_0==NEW||LA168_0==NULL||LA168_0==OBJECT||LA168_0==OPEN_PARENS||LA168_0==OP_DEC||LA168_0==OP_INC||LA168_0==PLUS||LA168_0==REAL_LITERAL||LA168_0==SBYTE||LA168_0==SHORT||LA168_0==SIZEOF||LA168_0==STAR||(LA168_0 >= STRING && LA168_0 <= STRING_LITERAL)||LA168_0==THIS||(LA168_0 >= TILDE && LA168_0 <= TRUE)||LA168_0==TYPEOF||(LA168_0 >= UINT && LA168_0 <= UNCHECKED)||LA168_0==USHORT||LA168_0==VOID) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // CSharpAngular.g:2101:19: init= for_initializer
                    {
                    pushFollow(FOLLOW_for_initializer_in_for_statement14581);
                    init=for_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_statement14585); if (state.failed) return retval;

            // CSharpAngular.g:2101:52: (cond= for_condition )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==AMP||(LA169_0 >= BANG && LA169_0 <= BASE)||LA169_0==BOOL||LA169_0==BYTE||(LA169_0 >= CHAR && LA169_0 <= CHECKED)||LA169_0==DECIMAL||(LA169_0 >= DEFAULT && LA169_0 <= DELEGATE)||LA169_0==DOUBLE||LA169_0==FALSE||LA169_0==FLOAT||LA169_0==IDENTIFIER||(LA169_0 >= INT && LA169_0 <= INTEGER_LITERAL)||LA169_0==LONG||LA169_0==MINUS||LA169_0==NEW||LA169_0==NULL||LA169_0==OBJECT||LA169_0==OPEN_PARENS||LA169_0==OP_DEC||LA169_0==OP_INC||LA169_0==PLUS||LA169_0==REAL_LITERAL||LA169_0==SBYTE||LA169_0==SHORT||LA169_0==SIZEOF||LA169_0==STAR||(LA169_0 >= STRING && LA169_0 <= STRING_LITERAL)||LA169_0==THIS||(LA169_0 >= TILDE && LA169_0 <= TRUE)||LA169_0==TYPEOF||(LA169_0 >= UINT && LA169_0 <= UNCHECKED)||LA169_0==USHORT) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // CSharpAngular.g:2101:53: cond= for_condition
                    {
                    pushFollow(FOLLOW_for_condition_in_for_statement14590);
                    cond=for_condition();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_statement14594); if (state.failed) return retval;

            // CSharpAngular.g:2101:84: (itr= for_iterator )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==AMP||(LA170_0 >= BANG && LA170_0 <= BASE)||LA170_0==BOOL||LA170_0==BYTE||(LA170_0 >= CHAR && LA170_0 <= CHECKED)||LA170_0==DECIMAL||(LA170_0 >= DEFAULT && LA170_0 <= DELEGATE)||LA170_0==DOUBLE||LA170_0==FALSE||LA170_0==FLOAT||LA170_0==IDENTIFIER||(LA170_0 >= INT && LA170_0 <= INTEGER_LITERAL)||LA170_0==LONG||LA170_0==MINUS||LA170_0==NEW||LA170_0==NULL||LA170_0==OBJECT||LA170_0==OPEN_PARENS||LA170_0==OP_DEC||LA170_0==OP_INC||LA170_0==PLUS||LA170_0==REAL_LITERAL||LA170_0==SBYTE||LA170_0==SHORT||LA170_0==SIZEOF||LA170_0==STAR||(LA170_0 >= STRING && LA170_0 <= STRING_LITERAL)||LA170_0==THIS||(LA170_0 >= TILDE && LA170_0 <= TRUE)||LA170_0==TYPEOF||(LA170_0 >= UINT && LA170_0 <= UNCHECKED)||LA170_0==USHORT) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // CSharpAngular.g:2101:85: itr= for_iterator
                    {
                    pushFollow(FOLLOW_for_iterator_in_for_statement14599);
                    itr=for_iterator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_for_statement14603); if (state.failed) return retval;

            pushFollow(FOLLOW_embedded_statement_in_for_statement14607);
            frBdy=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2102:2: -> forStatement(initialization=initcondition=conditerator=itrforBody=frBdy)
              {
                  retval.st = templateLib.getInstanceOf("forStatement",new STAttrMap().put("initialization", init).put("condition", cond).put("iterator", itr).put("forBody", frBdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_statement"


    public static class for_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "for_initializer"
    // CSharpAngular.g:2104:1: for_initializer : ( ( local_variable_declaration )=>lvd= local_variable_declaration -> forInitializer(init=lvd)|stlist= statement_expression_list -> forInitializer(init=stlist));
    public final CSharpAngular.for_initializer_return for_initializer() throws RecognitionException {
        CSharpAngular.for_initializer_return retval = new CSharpAngular.for_initializer_return();
        retval.start = input.LT(1);


        CSharpAngular.local_variable_declaration_return lvd =null;

        CSharpAngular.statement_expression_list_return stlist =null;


        try {
            // CSharpAngular.g:2105:2: ( ( local_variable_declaration )=>lvd= local_variable_declaration -> forInitializer(init=lvd)|stlist= statement_expression_list -> forInitializer(init=stlist))
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==SBYTE) ) {
                int LA171_1 = input.LA(2);

                if ( (synpred71_CSharpAngular()) ) {
                    alt171=1;
                }
                else if ( (true) ) {
                    alt171=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA171_0==BYTE) ) {
                int LA171_2 = input.LA(2);

                if ( (synpred71_CSharpAngular()) ) {
                    alt171=1;
                }
                else if ( (true) ) {
                    alt171=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA171_0==SHORT) ) {
                int LA171_3 = input.LA(2);

                if ( (synpred71_CSharpAngular()) ) {
                    alt171=1;
                }
                else if ( (true) ) {
                    alt171=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA171_0==USHORT) ) {
                int LA171_4 = input.LA(2);

                if ( (synpred71_CSharpAngular()) ) {
                    alt171=1;
                }
                else if ( (true) ) {
                    alt171=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA171_0==INT) ) {
                int LA171_5 = input.LA(2);

                if ( (synpred71_CSharpAngular()) ) {
                    alt171=1;
                }
                else if ( (true) ) {
                    alt171=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA171_0==UINT) ) {
                int LA171_6 = input.LA(2);

                if ( (synpred71_CSharpAngular()) ) {
                    alt171=1;
                }
                else if ( (true) ) {
                    alt171=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA171_0==LONG) ) {
                int LA171_7 = input.LA(2);

                if ( (synpred71_CSharpAngular()) ) {
                    alt171=1;
                }
                else if ( (true) ) {
                    alt171=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA171_0==ULONG) ) {
                int LA171_8 = input.LA(2);

                if ( (synpred71_CSharpAngular()) ) {
                    alt171=1;
                }
                else if ( (true) ) {
                    alt171=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA171_0==CHAR) ) {
                int LA171_9 = input.LA(2);

                if ( (synpred71_CSharpAngular()) ) {
                    alt171=1;
                }
                else if ( (true) ) {
                    alt171=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA171_0==FLOAT) ) {
                int LA171_10 = input.LA(2);

                if ( (synpred71_CSharpAngular()) ) {
                    alt171=1;
                }
                else if ( (true) ) {
                    alt171=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA171_0==DOUBLE) ) {
                int LA171_11 = input.LA(2);

                if ( (synpred71_CSharpAngular()) ) {
                    alt171=1;
                }
                else if ( (true) ) {
                    alt171=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA171_0==DECIMAL) ) {
                int LA171_12 = input.LA(2);

                if ( (synpred71_CSharpAngular()) ) {
                    alt171=1;
                }
                else if ( (true) ) {
                    alt171=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA171_0==BOOL) ) {
                int LA171_13 = input.LA(2);

                if ( (synpred71_CSharpAngular()) ) {
                    alt171=1;
                }
                else if ( (true) ) {
                    alt171=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 13, input);

                    throw nvae;

                }
            }
            else if ( (LA171_0==IDENTIFIER) ) {
                int LA171_14 = input.LA(2);

                if ( (synpred71_CSharpAngular()) ) {
                    alt171=1;
                }
                else if ( (true) ) {
                    alt171=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 14, input);

                    throw nvae;

                }
            }
            else if ( (LA171_0==OBJECT) ) {
                int LA171_15 = input.LA(2);

                if ( (synpred71_CSharpAngular()) ) {
                    alt171=1;
                }
                else if ( (true) ) {
                    alt171=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 15, input);

                    throw nvae;

                }
            }
            else if ( (LA171_0==STRING) ) {
                int LA171_16 = input.LA(2);

                if ( (synpred71_CSharpAngular()) ) {
                    alt171=1;
                }
                else if ( (true) ) {
                    alt171=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 16, input);

                    throw nvae;

                }
            }
            else if ( (LA171_0==VOID) && (synpred71_CSharpAngular())) {
                alt171=1;
            }
            else if ( (LA171_0==AMP||(LA171_0 >= BANG && LA171_0 <= BASE)||(LA171_0 >= CHARACTER_LITERAL && LA171_0 <= CHECKED)||(LA171_0 >= DEFAULT && LA171_0 <= DELEGATE)||LA171_0==FALSE||LA171_0==INTEGER_LITERAL||LA171_0==MINUS||LA171_0==NEW||LA171_0==NULL||LA171_0==OPEN_PARENS||LA171_0==OP_DEC||LA171_0==OP_INC||LA171_0==PLUS||LA171_0==REAL_LITERAL||LA171_0==SIZEOF||LA171_0==STAR||LA171_0==STRING_LITERAL||LA171_0==THIS||(LA171_0 >= TILDE && LA171_0 <= TRUE)||LA171_0==TYPEOF||LA171_0==UNCHECKED) ) {
                alt171=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;

            }
            switch (alt171) {
                case 1 :
                    // CSharpAngular.g:2105:4: ( local_variable_declaration )=>lvd= local_variable_declaration
                    {
                    pushFollow(FOLLOW_local_variable_declaration_in_for_initializer14647);
                    lvd=local_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2106:2: -> forInitializer(init=lvd)
                      {
                          retval.st = templateLib.getInstanceOf("forInitializer",new STAttrMap().put("init", lvd));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2107:4: stlist= statement_expression_list
                    {
                    pushFollow(FOLLOW_statement_expression_list_in_for_initializer14663);
                    stlist=statement_expression_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2108:2: -> forInitializer(init=stlist)
                      {
                          retval.st = templateLib.getInstanceOf("forInitializer",new STAttrMap().put("init", stlist));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_initializer"


    public static class for_condition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "for_condition"
    // CSharpAngular.g:2111:1: for_condition : expr= boolean_expression -> forCondition(expression=expr);
    public final CSharpAngular.for_condition_return for_condition() throws RecognitionException {
        CSharpAngular.for_condition_return retval = new CSharpAngular.for_condition_return();
        retval.start = input.LT(1);


        CSharpAngular.boolean_expression_return expr =null;


        try {
            // CSharpAngular.g:2112:2: (expr= boolean_expression -> forCondition(expression=expr))
            // CSharpAngular.g:2112:4: expr= boolean_expression
            {
            pushFollow(FOLLOW_boolean_expression_in_for_condition14687);
            expr=boolean_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2113:3: -> forCondition(expression=expr)
              {
                  retval.st = templateLib.getInstanceOf("forCondition",new STAttrMap().put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_condition"


    public static class for_iterator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "for_iterator"
    // CSharpAngular.g:2115:1: for_iterator : eL= statement_expression_list -> forIterator(exprList=eL);
    public final CSharpAngular.for_iterator_return for_iterator() throws RecognitionException {
        CSharpAngular.for_iterator_return retval = new CSharpAngular.for_iterator_return();
        retval.start = input.LT(1);


        CSharpAngular.statement_expression_list_return eL =null;


        try {
            // CSharpAngular.g:2116:3: (eL= statement_expression_list -> forIterator(exprList=eL))
            // CSharpAngular.g:2117:3: eL= statement_expression_list
            {
            pushFollow(FOLLOW_statement_expression_list_in_for_iterator14714);
            eL=statement_expression_list();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2118:3: -> forIterator(exprList=eL)
              {
                  retval.st = templateLib.getInstanceOf("forIterator",new STAttrMap().put("exprList", eL));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_iterator"


    public static class statement_expression_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "statement_expression_list"
    // CSharpAngular.g:2121:1: statement_expression_list : fstExpr= statement_expression (lst+= statement_expression_list_Chld )* -> statementExpressionList(firstExpr=fstExprlist=$lst);
    public final CSharpAngular.statement_expression_list_return statement_expression_list() throws RecognitionException {
        CSharpAngular.statement_expression_list_return retval = new CSharpAngular.statement_expression_list_return();
        retval.start = input.LT(1);


        List list_lst=null;
        CSharpAngular.statement_expression_return fstExpr =null;

        RuleReturnScope lst = null;
        try {
            // CSharpAngular.g:2122:3: (fstExpr= statement_expression (lst+= statement_expression_list_Chld )* -> statementExpressionList(firstExpr=fstExprlist=$lst))
            // CSharpAngular.g:2123:3: fstExpr= statement_expression (lst+= statement_expression_list_Chld )*
            {
            pushFollow(FOLLOW_statement_expression_in_statement_expression_list14743);
            fstExpr=statement_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2123:32: (lst+= statement_expression_list_Chld )*
            loop172:
            do {
                int alt172=2;
                int LA172_0 = input.LA(1);

                if ( (LA172_0==COMMA) ) {
                    alt172=1;
                }


                switch (alt172) {
            	case 1 :
            	    // CSharpAngular.g:2123:33: lst+= statement_expression_list_Chld
            	    {
            	    pushFollow(FOLLOW_statement_expression_list_Chld_in_statement_expression_list14748);
            	    lst=statement_expression_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop172;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2124:3: -> statementExpressionList(firstExpr=fstExprlist=$lst)
              {
                  retval.st = templateLib.getInstanceOf("statementExpressionList",new STAttrMap().put("firstExpr", fstExpr).put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement_expression_list"


    public static class statement_expression_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "statement_expression_list_Chld"
    // CSharpAngular.g:2127:1: statement_expression_list_Chld : COMMA expr= statement_expression -> statementExpressionListChld(expression=expr);
    public final CSharpAngular.statement_expression_list_Chld_return statement_expression_list_Chld() throws RecognitionException {
        CSharpAngular.statement_expression_list_Chld_return retval = new CSharpAngular.statement_expression_list_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.statement_expression_return expr =null;


        try {
            // CSharpAngular.g:2128:3: ( COMMA expr= statement_expression -> statementExpressionListChld(expression=expr))
            // CSharpAngular.g:2129:3: COMMA expr= statement_expression
            {
            match(input,COMMA,FOLLOW_COMMA_in_statement_expression_list_Chld14781); if (state.failed) return retval;

            pushFollow(FOLLOW_statement_expression_in_statement_expression_list_Chld14786);
            expr=statement_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2130:3: -> statementExpressionListChld(expression=expr)
              {
                  retval.st = templateLib.getInstanceOf("statementExpressionListChld",new STAttrMap().put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement_expression_list_Chld"


    public static class foreach_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "foreach_statement"
    // CSharpAngular.g:2133:1: foreach_statement : FOREACH OPEN_PARENS varTyp= local_variable_type var= IDENTIFIER IN expr= expression CLOSE_PARENS frEchBdy= embedded_statement -> foreachStatement(variableType=\"var\"variable=$var.textexpression=exprforEachBody=frEchBdy);
    public final CSharpAngular.foreach_statement_return foreach_statement() throws RecognitionException {
        CSharpAngular.foreach_statement_return retval = new CSharpAngular.foreach_statement_return();
        retval.start = input.LT(1);


        Token var=null;
        CSharpAngular.local_variable_type_return varTyp =null;

        CSharpAngular.expression_return expr =null;

        CSharpAngular.embedded_statement_return frEchBdy =null;


        try {
            // CSharpAngular.g:2134:2: ( FOREACH OPEN_PARENS varTyp= local_variable_type var= IDENTIFIER IN expr= expression CLOSE_PARENS frEchBdy= embedded_statement -> foreachStatement(variableType=\"var\"variable=$var.textexpression=exprforEachBody=frEchBdy))
            // CSharpAngular.g:2135:2: FOREACH OPEN_PARENS varTyp= local_variable_type var= IDENTIFIER IN expr= expression CLOSE_PARENS frEchBdy= embedded_statement
            {
            match(input,FOREACH,FOLLOW_FOREACH_in_foreach_statement14811); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_foreach_statement14813); if (state.failed) return retval;

            pushFollow(FOLLOW_local_variable_type_in_foreach_statement14817);
            varTyp=local_variable_type();

            state._fsp--;
            if (state.failed) return retval;

            var=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_foreach_statement14821); if (state.failed) return retval;

            match(input,IN,FOLLOW_IN_in_foreach_statement14823); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_foreach_statement14827);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_foreach_statement14829); if (state.failed) return retval;

            pushFollow(FOLLOW_embedded_statement_in_foreach_statement14833);
            frEchBdy=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2136:2: -> foreachStatement(variableType=\"var\"variable=$var.textexpression=exprforEachBody=frEchBdy)
              {
                  retval.st = templateLib.getInstanceOf("foreachStatement",new STAttrMap().put("variableType", "var").put("variable", (var!=null?var.getText():null)).put("expression", expr).put("forEachBody", frEchBdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_statement"


    public static class jump_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "jump_statement"
    // CSharpAngular.g:2138:1: jump_statement : (brkStmt= break_statement -> jumpStatement(stmt=brkStmt)|contStmt= continue_statement -> jumpStatement(stmt=contStmt)|gotoStmt= goto_statement -> jumpStatement(stmt=gotoStmt)|retStmt= return_statement -> jumpStatement(stmt=retStmt)|thrwStmt= throw_statement -> jumpStatement(stmt=thrwStmt));
    public final CSharpAngular.jump_statement_return jump_statement() throws RecognitionException {
        CSharpAngular.jump_statement_return retval = new CSharpAngular.jump_statement_return();
        retval.start = input.LT(1);


        CSharpAngular.break_statement_return brkStmt =null;

        CSharpAngular.continue_statement_return contStmt =null;

        CSharpAngular.goto_statement_return gotoStmt =null;

        CSharpAngular.return_statement_return retStmt =null;

        CSharpAngular.throw_statement_return thrwStmt =null;


        try {
            // CSharpAngular.g:2139:2: (brkStmt= break_statement -> jumpStatement(stmt=brkStmt)|contStmt= continue_statement -> jumpStatement(stmt=contStmt)|gotoStmt= goto_statement -> jumpStatement(stmt=gotoStmt)|retStmt= return_statement -> jumpStatement(stmt=retStmt)|thrwStmt= throw_statement -> jumpStatement(stmt=thrwStmt))
            int alt173=5;
            switch ( input.LA(1) ) {
            case BREAK:
                {
                alt173=1;
                }
                break;
            case CONTINUE:
                {
                alt173=2;
                }
                break;
            case GOTO:
                {
                alt173=3;
                }
                break;
            case RETURN:
                {
                alt173=4;
                }
                break;
            case THROW:
                {
                alt173=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;

            }

            switch (alt173) {
                case 1 :
                    // CSharpAngular.g:2140:2: brkStmt= break_statement
                    {
                    pushFollow(FOLLOW_break_statement_in_jump_statement14869);
                    brkStmt=break_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2141:2: -> jumpStatement(stmt=brkStmt)
                      {
                          retval.st = templateLib.getInstanceOf("jumpStatement",new STAttrMap().put("stmt", brkStmt));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2142:4: contStmt= continue_statement
                    {
                    pushFollow(FOLLOW_continue_statement_in_jump_statement14885);
                    contStmt=continue_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2143:2: -> jumpStatement(stmt=contStmt)
                      {
                          retval.st = templateLib.getInstanceOf("jumpStatement",new STAttrMap().put("stmt", contStmt));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:2144:4: gotoStmt= goto_statement
                    {
                    pushFollow(FOLLOW_goto_statement_in_jump_statement14901);
                    gotoStmt=goto_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2145:2: -> jumpStatement(stmt=gotoStmt)
                      {
                          retval.st = templateLib.getInstanceOf("jumpStatement",new STAttrMap().put("stmt", gotoStmt));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:2146:4: retStmt= return_statement
                    {
                    pushFollow(FOLLOW_return_statement_in_jump_statement14917);
                    retStmt=return_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2147:2: -> jumpStatement(stmt=retStmt)
                      {
                          retval.st = templateLib.getInstanceOf("jumpStatement",new STAttrMap().put("stmt", retStmt));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:2148:4: thrwStmt= throw_statement
                    {
                    pushFollow(FOLLOW_throw_statement_in_jump_statement14933);
                    thrwStmt=throw_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2149:2: -> jumpStatement(stmt=thrwStmt)
                      {
                          retval.st = templateLib.getInstanceOf("jumpStatement",new STAttrMap().put("stmt", thrwStmt));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "jump_statement"


    public static class break_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "break_statement"
    // CSharpAngular.g:2151:1: break_statement : brk= BREAK SEMICOLON (comts= comments )? -> breakStatement(value=$brk.text+\";\"comments=comts);
    public final CSharpAngular.break_statement_return break_statement() throws RecognitionException {
        CSharpAngular.break_statement_return retval = new CSharpAngular.break_statement_return();
        retval.start = input.LT(1);


        Token brk=null;
        CSharpAngular.comments_return comts =null;


        try {
            // CSharpAngular.g:2152:2: (brk= BREAK SEMICOLON (comts= comments )? -> breakStatement(value=$brk.text+\";\"comments=comts))
            // CSharpAngular.g:2153:2: brk= BREAK SEMICOLON (comts= comments )?
            {
            brk=(Token)match(input,BREAK,FOLLOW_BREAK_in_break_statement14957); if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_break_statement14959); if (state.failed) return retval;

            // CSharpAngular.g:2153:22: (comts= comments )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==SINGLE_LINE_COMMENT) ) {
                alt174=1;
            }
            else if ( (LA174_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // CSharpAngular.g:2153:23: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_break_statement14964);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2154:2: -> breakStatement(value=$brk.text+\";\"comments=comts)
              {
                  retval.st = templateLib.getInstanceOf("breakStatement",new STAttrMap().put("value", (brk!=null?brk.getText():null)+";").put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_statement"


    public static class continue_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "continue_statement"
    // CSharpAngular.g:2156:1: continue_statement : cont= CONTINUE SEMICOLON (comts= comments )? -> continueStatement(value=$cont.text+\";\"comments=comts);
    public final CSharpAngular.continue_statement_return continue_statement() throws RecognitionException {
        CSharpAngular.continue_statement_return retval = new CSharpAngular.continue_statement_return();
        retval.start = input.LT(1);


        Token cont=null;
        CSharpAngular.comments_return comts =null;


        try {
            // CSharpAngular.g:2157:2: (cont= CONTINUE SEMICOLON (comts= comments )? -> continueStatement(value=$cont.text+\";\"comments=comts))
            // CSharpAngular.g:2158:2: cont= CONTINUE SEMICOLON (comts= comments )?
            {
            cont=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_continue_statement14994); if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_continue_statement14996); if (state.failed) return retval;

            // CSharpAngular.g:2158:26: (comts= comments )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==SINGLE_LINE_COMMENT) ) {
                alt175=1;
            }
            else if ( (LA175_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // CSharpAngular.g:2158:27: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_continue_statement15001);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2159:2: -> continueStatement(value=$cont.text+\";\"comments=comts)
              {
                  retval.st = templateLib.getInstanceOf("continueStatement",new STAttrMap().put("value", (cont!=null?cont.getText():null)+";").put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "continue_statement"


    public static class goto_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "goto_statement"
    // CSharpAngular.g:2161:1: goto_statement : ( GOTO id= IDENTIFIER SEMICOLON (comts1= comments )? -> simpleGotoStatement(labelName=$id.textcomments=comts1)| GOTO CASE expr= constant_expression SEMICOLON (comts2= comments )? -> gotoCaseStmt(caseExpr=exprcomments=comts2)| GOTO DEFAULT SEMICOLON (comts3= comments )? -> gotoDefaultStmt(comments=comts3));
    public final CSharpAngular.goto_statement_return goto_statement() throws RecognitionException {
        CSharpAngular.goto_statement_return retval = new CSharpAngular.goto_statement_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharpAngular.comments_return comts1 =null;

        CSharpAngular.constant_expression_return expr =null;

        CSharpAngular.comments_return comts2 =null;

        CSharpAngular.comments_return comts3 =null;


        try {
            // CSharpAngular.g:2162:2: ( GOTO id= IDENTIFIER SEMICOLON (comts1= comments )? -> simpleGotoStatement(labelName=$id.textcomments=comts1)| GOTO CASE expr= constant_expression SEMICOLON (comts2= comments )? -> gotoCaseStmt(caseExpr=exprcomments=comts2)| GOTO DEFAULT SEMICOLON (comts3= comments )? -> gotoDefaultStmt(comments=comts3))
            int alt179=3;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==GOTO) ) {
                switch ( input.LA(2) ) {
                case IDENTIFIER:
                    {
                    alt179=1;
                    }
                    break;
                case CASE:
                    {
                    alt179=2;
                    }
                    break;
                case DEFAULT:
                    {
                    alt179=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 179, 1, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;

            }
            switch (alt179) {
                case 1 :
                    // CSharpAngular.g:2163:2: GOTO id= IDENTIFIER SEMICOLON (comts1= comments )?
                    {
                    match(input,GOTO,FOLLOW_GOTO_in_goto_statement15029); if (state.failed) return retval;

                    id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_goto_statement15033); if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_goto_statement15035); if (state.failed) return retval;

                    // CSharpAngular.g:2163:31: (comts1= comments )?
                    int alt176=2;
                    int LA176_0 = input.LA(1);

                    if ( (LA176_0==SINGLE_LINE_COMMENT) ) {
                        alt176=1;
                    }
                    else if ( (LA176_0==SINGLE_LINE_DOC_COMMENT) ) {
                        alt176=1;
                    }
                    switch (alt176) {
                        case 1 :
                            // CSharpAngular.g:2163:32: comts1= comments
                            {
                            pushFollow(FOLLOW_comments_in_goto_statement15040);
                            comts1=comments();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2164:2: -> simpleGotoStatement(labelName=$id.textcomments=comts1)
                      {
                          retval.st = templateLib.getInstanceOf("simpleGotoStatement",new STAttrMap().put("labelName", (id!=null?id.getText():null)).put("comments", comts1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2165:4: GOTO CASE expr= constant_expression SEMICOLON (comts2= comments )?
                    {
                    match(input,GOTO,FOLLOW_GOTO_in_goto_statement15060); if (state.failed) return retval;

                    match(input,CASE,FOLLOW_CASE_in_goto_statement15062); if (state.failed) return retval;

                    pushFollow(FOLLOW_constant_expression_in_goto_statement15066);
                    expr=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_goto_statement15068); if (state.failed) return retval;

                    // CSharpAngular.g:2165:49: (comts2= comments )?
                    int alt177=2;
                    int LA177_0 = input.LA(1);

                    if ( (LA177_0==SINGLE_LINE_COMMENT) ) {
                        alt177=1;
                    }
                    else if ( (LA177_0==SINGLE_LINE_DOC_COMMENT) ) {
                        alt177=1;
                    }
                    switch (alt177) {
                        case 1 :
                            // CSharpAngular.g:2165:50: comts2= comments
                            {
                            pushFollow(FOLLOW_comments_in_goto_statement15073);
                            comts2=comments();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2166:2: -> gotoCaseStmt(caseExpr=exprcomments=comts2)
                      {
                          retval.st = templateLib.getInstanceOf("gotoCaseStmt",new STAttrMap().put("caseExpr", expr).put("comments", comts2));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:2167:4: GOTO DEFAULT SEMICOLON (comts3= comments )?
                    {
                    match(input,GOTO,FOLLOW_GOTO_in_goto_statement15093); if (state.failed) return retval;

                    match(input,DEFAULT,FOLLOW_DEFAULT_in_goto_statement15095); if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_goto_statement15097); if (state.failed) return retval;

                    // CSharpAngular.g:2167:27: (comts3= comments )?
                    int alt178=2;
                    int LA178_0 = input.LA(1);

                    if ( (LA178_0==SINGLE_LINE_COMMENT) ) {
                        alt178=1;
                    }
                    else if ( (LA178_0==SINGLE_LINE_DOC_COMMENT) ) {
                        alt178=1;
                    }
                    switch (alt178) {
                        case 1 :
                            // CSharpAngular.g:2167:28: comts3= comments
                            {
                            pushFollow(FOLLOW_comments_in_goto_statement15102);
                            comts3=comments();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2168:2: -> gotoDefaultStmt(comments=comts3)
                      {
                          retval.st = templateLib.getInstanceOf("gotoDefaultStmt",new STAttrMap().put("comments", comts3));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_statement"


    public static class return_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "return_statement"
    // CSharpAngular.g:2170:1: return_statement : RETURN (expr= expression )? SEMICOLON (comts= comments )? -> returnStatement(returnExpr=exprcomments=comts);
    public final CSharpAngular.return_statement_return return_statement() throws RecognitionException {
        CSharpAngular.return_statement_return retval = new CSharpAngular.return_statement_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_return expr =null;

        CSharpAngular.comments_return comts =null;


        try {
            // CSharpAngular.g:2171:2: ( RETURN (expr= expression )? SEMICOLON (comts= comments )? -> returnStatement(returnExpr=exprcomments=comts))
            // CSharpAngular.g:2172:2: RETURN (expr= expression )? SEMICOLON (comts= comments )?
            {
            match(input,RETURN,FOLLOW_RETURN_in_return_statement15126); if (state.failed) return retval;

            // CSharpAngular.g:2172:9: (expr= expression )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==AMP||(LA180_0 >= BANG && LA180_0 <= BASE)||LA180_0==BOOL||LA180_0==BYTE||(LA180_0 >= CHAR && LA180_0 <= CHECKED)||LA180_0==DECIMAL||(LA180_0 >= DEFAULT && LA180_0 <= DELEGATE)||LA180_0==DOUBLE||LA180_0==FALSE||LA180_0==FLOAT||LA180_0==IDENTIFIER||(LA180_0 >= INT && LA180_0 <= INTEGER_LITERAL)||LA180_0==LONG||LA180_0==MINUS||LA180_0==NEW||LA180_0==NULL||LA180_0==OBJECT||LA180_0==OPEN_PARENS||LA180_0==OP_DEC||LA180_0==OP_INC||LA180_0==PLUS||LA180_0==REAL_LITERAL||LA180_0==SBYTE||LA180_0==SHORT||LA180_0==SIZEOF||LA180_0==STAR||(LA180_0 >= STRING && LA180_0 <= STRING_LITERAL)||LA180_0==THIS||(LA180_0 >= TILDE && LA180_0 <= TRUE)||LA180_0==TYPEOF||(LA180_0 >= UINT && LA180_0 <= UNCHECKED)||LA180_0==USHORT) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // CSharpAngular.g:2172:10: expr= expression
                    {
                    pushFollow(FOLLOW_expression_in_return_statement15131);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_return_statement15135); if (state.failed) return retval;

            // CSharpAngular.g:2172:38: (comts= comments )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==SINGLE_LINE_COMMENT) ) {
                alt181=1;
            }
            else if ( (LA181_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // CSharpAngular.g:2172:39: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_return_statement15140);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2173:2: -> returnStatement(returnExpr=exprcomments=comts)
              {
                  retval.st = templateLib.getInstanceOf("returnStatement",new STAttrMap().put("returnExpr", expr).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_statement"


    public static class throw_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "throw_statement"
    // CSharpAngular.g:2175:1: throw_statement : THROW (expr= expression )? SEMICOLON (comts= comments )? -> throwStatement(throwExpr=$expr.st.toString().trim()comments=comts);
    public final CSharpAngular.throw_statement_return throw_statement() throws RecognitionException {
        CSharpAngular.throw_statement_return retval = new CSharpAngular.throw_statement_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_return expr =null;

        CSharpAngular.comments_return comts =null;


        try {
            // CSharpAngular.g:2176:2: ( THROW (expr= expression )? SEMICOLON (comts= comments )? -> throwStatement(throwExpr=$expr.st.toString().trim()comments=comts))
            // CSharpAngular.g:2177:2: THROW (expr= expression )? SEMICOLON (comts= comments )?
            {
            match(input,THROW,FOLLOW_THROW_in_throw_statement15168); if (state.failed) return retval;

            // CSharpAngular.g:2177:8: (expr= expression )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==AMP||(LA182_0 >= BANG && LA182_0 <= BASE)||LA182_0==BOOL||LA182_0==BYTE||(LA182_0 >= CHAR && LA182_0 <= CHECKED)||LA182_0==DECIMAL||(LA182_0 >= DEFAULT && LA182_0 <= DELEGATE)||LA182_0==DOUBLE||LA182_0==FALSE||LA182_0==FLOAT||LA182_0==IDENTIFIER||(LA182_0 >= INT && LA182_0 <= INTEGER_LITERAL)||LA182_0==LONG||LA182_0==MINUS||LA182_0==NEW||LA182_0==NULL||LA182_0==OBJECT||LA182_0==OPEN_PARENS||LA182_0==OP_DEC||LA182_0==OP_INC||LA182_0==PLUS||LA182_0==REAL_LITERAL||LA182_0==SBYTE||LA182_0==SHORT||LA182_0==SIZEOF||LA182_0==STAR||(LA182_0 >= STRING && LA182_0 <= STRING_LITERAL)||LA182_0==THIS||(LA182_0 >= TILDE && LA182_0 <= TRUE)||LA182_0==TYPEOF||(LA182_0 >= UINT && LA182_0 <= UNCHECKED)||LA182_0==USHORT) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // CSharpAngular.g:2177:9: expr= expression
                    {
                    pushFollow(FOLLOW_expression_in_throw_statement15173);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_throw_statement15177); if (state.failed) return retval;

            // CSharpAngular.g:2177:37: (comts= comments )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==SINGLE_LINE_COMMENT) ) {
                alt183=1;
            }
            else if ( (LA183_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // CSharpAngular.g:2177:38: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_throw_statement15182);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2178:2: -> throwStatement(throwExpr=$expr.st.toString().trim()comments=comts)
              {
                  retval.st = templateLib.getInstanceOf("throwStatement",new STAttrMap().put("throwExpr", (expr!=null?expr.st:null).toString().trim()).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_statement"


    public static class try_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "try_statement"
    // CSharpAngular.g:2187:1: try_statement : TRY bdy= block (cmnt= comments )? (cls= catch_clauses )? (finly= finally_clause )? -> tryStatement(tryBody=bdycmnts=cmntcatchClas=clsfinallyBlk=finly);
    public final CSharpAngular.try_statement_return try_statement() throws RecognitionException {
        CSharpAngular.try_statement_return retval = new CSharpAngular.try_statement_return();
        retval.start = input.LT(1);


        CSharpAngular.block_return bdy =null;

        CSharpAngular.comments_return cmnt =null;

        CSharpAngular.catch_clauses_return cls =null;

        CSharpAngular.finally_clause_return finly =null;


        try {
            // CSharpAngular.g:2188:3: ( TRY bdy= block (cmnt= comments )? (cls= catch_clauses )? (finly= finally_clause )? -> tryStatement(tryBody=bdycmnts=cmntcatchClas=clsfinallyBlk=finly))
            // CSharpAngular.g:2189:3: TRY bdy= block (cmnt= comments )? (cls= catch_clauses )? (finly= finally_clause )?
            {
            match(input,TRY,FOLLOW_TRY_in_try_statement15214); if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_try_statement15218);
            bdy=block();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2189:17: (cmnt= comments )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==SINGLE_LINE_COMMENT) ) {
                alt184=1;
            }
            else if ( (LA184_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // CSharpAngular.g:2189:18: cmnt= comments
                    {
                    pushFollow(FOLLOW_comments_in_try_statement15223);
                    cmnt=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2189:34: (cls= catch_clauses )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==CATCH) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // CSharpAngular.g:2189:35: cls= catch_clauses
                    {
                    pushFollow(FOLLOW_catch_clauses_in_try_statement15230);
                    cls=catch_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2189:55: (finly= finally_clause )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==FINALLY) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // CSharpAngular.g:2189:56: finly= finally_clause
                    {
                    pushFollow(FOLLOW_finally_clause_in_try_statement15237);
                    finly=finally_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2190:3: -> tryStatement(tryBody=bdycmnts=cmntcatchClas=clsfinallyBlk=finly)
              {
                  retval.st = templateLib.getInstanceOf("tryStatement",new STAttrMap().put("tryBody", bdy).put("cmnts", cmnt).put("catchClas", cls).put("finallyBlk", finly));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_statement"


    public static class catch_clauses_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "catch_clauses"
    // CSharpAngular.g:2199:1: catch_clauses : (spCtch= specific_catch_clauses (gnrlCtch= general_catch_clause )? -> catchClauses(specificCatch=spCtchgeneralCatch=gnrlCtch)|ctch= general_catch_clause -> catchClauses2(catchCls=ctch));
    public final CSharpAngular.catch_clauses_return catch_clauses() throws RecognitionException {
        CSharpAngular.catch_clauses_return retval = new CSharpAngular.catch_clauses_return();
        retval.start = input.LT(1);


        CSharpAngular.specific_catch_clauses_return spCtch =null;

        CSharpAngular.general_catch_clause_return gnrlCtch =null;

        CSharpAngular.general_catch_clause_return ctch =null;


        try {
            // CSharpAngular.g:2200:3: (spCtch= specific_catch_clauses (gnrlCtch= general_catch_clause )? -> catchClauses(specificCatch=spCtchgeneralCatch=gnrlCtch)|ctch= general_catch_clause -> catchClauses2(catchCls=ctch))
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==CATCH) ) {
                int LA188_1 = input.LA(2);

                if ( (LA188_1==OPEN_PARENS) ) {
                    alt188=1;
                }
                else if ( (LA188_1==OPEN_BRACE) ) {
                    alt188=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 188, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;

            }
            switch (alt188) {
                case 1 :
                    // CSharpAngular.g:2201:3: spCtch= specific_catch_clauses (gnrlCtch= general_catch_clause )?
                    {
                    pushFollow(FOLLOW_specific_catch_clauses_in_catch_clauses15282);
                    spCtch=specific_catch_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharpAngular.g:2201:33: (gnrlCtch= general_catch_clause )?
                    int alt187=2;
                    int LA187_0 = input.LA(1);

                    if ( (LA187_0==CATCH) ) {
                        alt187=1;
                    }
                    switch (alt187) {
                        case 1 :
                            // CSharpAngular.g:2201:34: gnrlCtch= general_catch_clause
                            {
                            pushFollow(FOLLOW_general_catch_clause_in_catch_clauses15287);
                            gnrlCtch=general_catch_clause();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2202:3: -> catchClauses(specificCatch=spCtchgeneralCatch=gnrlCtch)
                      {
                          retval.st = templateLib.getInstanceOf("catchClauses",new STAttrMap().put("specificCatch", spCtch).put("generalCatch", gnrlCtch));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2203:5: ctch= general_catch_clause
                    {
                    pushFollow(FOLLOW_general_catch_clause_in_catch_clauses15311);
                    ctch=general_catch_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2204:3: -> catchClauses2(catchCls=ctch)
                      {
                          retval.st = templateLib.getInstanceOf("catchClauses2",new STAttrMap().put("catchCls", ctch));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_clauses"


    public static class specific_catch_clauses_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "specific_catch_clauses"
    // CSharpAngular.g:2207:1: specific_catch_clauses : (spccatch= specific_catch_clause )+ -> specificCatchClauses(clauses=spccatch);
    public final CSharpAngular.specific_catch_clauses_return specific_catch_clauses() throws RecognitionException {
        CSharpAngular.specific_catch_clauses_return retval = new CSharpAngular.specific_catch_clauses_return();
        retval.start = input.LT(1);


        CSharpAngular.specific_catch_clause_return spccatch =null;


        try {
            // CSharpAngular.g:2208:2: ( (spccatch= specific_catch_clause )+ -> specificCatchClauses(clauses=spccatch))
            // CSharpAngular.g:2208:3: (spccatch= specific_catch_clause )+
            {
            // CSharpAngular.g:2208:3: (spccatch= specific_catch_clause )+
            int cnt189=0;
            loop189:
            do {
                int alt189=2;
                int LA189_0 = input.LA(1);

                if ( (LA189_0==CATCH) ) {
                    int LA189_1 = input.LA(2);

                    if ( (LA189_1==OPEN_PARENS) ) {
                        alt189=1;
                    }


                }


                switch (alt189) {
            	case 1 :
            	    // CSharpAngular.g:2208:4: spccatch= specific_catch_clause
            	    {
            	    pushFollow(FOLLOW_specific_catch_clause_in_specific_catch_clauses15338);
            	    spccatch=specific_catch_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt189 >= 1 ) break loop189;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(189, input);
                        throw eee;
                }
                cnt189++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2209:2: -> specificCatchClauses(clauses=spccatch)
              {
                  retval.st = templateLib.getInstanceOf("specificCatchClauses",new STAttrMap().put("clauses", spccatch));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "specific_catch_clauses"


    public static class specific_catch_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "specific_catch_clause"
    // CSharpAngular.g:2211:1: specific_catch_clause : CATCH OPEN_PARENS clstype= class_type (tname= IDENTIFIER )? CLOSE_PARENS blk= block -> specificCatchClause(classtype=clstypetypeName=$tname.textbody=blk);
    public final CSharpAngular.specific_catch_clause_return specific_catch_clause() throws RecognitionException {
        CSharpAngular.specific_catch_clause_return retval = new CSharpAngular.specific_catch_clause_return();
        retval.start = input.LT(1);


        Token tname=null;
        CSharpAngular.class_type_return clstype =null;

        CSharpAngular.block_return blk =null;


        try {
            // CSharpAngular.g:2212:2: ( CATCH OPEN_PARENS clstype= class_type (tname= IDENTIFIER )? CLOSE_PARENS blk= block -> specificCatchClause(classtype=clstypetypeName=$tname.textbody=blk))
            // CSharpAngular.g:2212:4: CATCH OPEN_PARENS clstype= class_type (tname= IDENTIFIER )? CLOSE_PARENS blk= block
            {
            match(input,CATCH,FOLLOW_CATCH_in_specific_catch_clause15360); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_specific_catch_clause15362); if (state.failed) return retval;

            pushFollow(FOLLOW_class_type_in_specific_catch_clause15366);
            clstype=class_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2212:41: (tname= IDENTIFIER )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==IDENTIFIER) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // CSharpAngular.g:2212:42: tname= IDENTIFIER
                    {
                    tname=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_specific_catch_clause15371); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_specific_catch_clause15375); if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_specific_catch_clause15379);
            blk=block();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2213:2: -> specificCatchClause(classtype=clstypetypeName=$tname.textbody=blk)
              {
                  retval.st = templateLib.getInstanceOf("specificCatchClause",new STAttrMap().put("classtype", clstype).put("typeName", (tname!=null?tname.getText():null)).put("body", blk));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "specific_catch_clause"


    public static class general_catch_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "general_catch_clause"
    // CSharpAngular.g:2215:1: general_catch_clause : CATCH blk= block -> generalCatchClause(body=blk);
    public final CSharpAngular.general_catch_clause_return general_catch_clause() throws RecognitionException {
        CSharpAngular.general_catch_clause_return retval = new CSharpAngular.general_catch_clause_return();
        retval.start = input.LT(1);


        CSharpAngular.block_return blk =null;


        try {
            // CSharpAngular.g:2216:3: ( CATCH blk= block -> generalCatchClause(body=blk))
            // CSharpAngular.g:2217:3: CATCH blk= block
            {
            match(input,CATCH,FOLLOW_CATCH_in_general_catch_clause15411); if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_general_catch_clause15415);
            blk=block();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2218:3: -> generalCatchClause(body=blk)
              {
                  retval.st = templateLib.getInstanceOf("generalCatchClause",new STAttrMap().put("body", blk));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "general_catch_clause"


    public static class finally_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "finally_clause"
    // CSharpAngular.g:2220:1: finally_clause : FINALLY blk= block -> finallyClause(body=blk);
    public final CSharpAngular.finally_clause_return finally_clause() throws RecognitionException {
        CSharpAngular.finally_clause_return retval = new CSharpAngular.finally_clause_return();
        retval.start = input.LT(1);


        CSharpAngular.block_return blk =null;


        try {
            // CSharpAngular.g:2221:3: ( FINALLY blk= block -> finallyClause(body=blk))
            // CSharpAngular.g:2222:3: FINALLY blk= block
            {
            match(input,FINALLY,FOLLOW_FINALLY_in_finally_clause15441); if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_finally_clause15445);
            blk=block();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2223:3: -> finallyClause(body=blk)
              {
                  retval.st = templateLib.getInstanceOf("finallyClause",new STAttrMap().put("body", blk));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "finally_clause"


    public static class checked_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "checked_statement"
    // CSharpAngular.g:2225:1: checked_statement : CHECKED block ;
    public final CSharpAngular.checked_statement_return checked_statement() throws RecognitionException {
        CSharpAngular.checked_statement_return retval = new CSharpAngular.checked_statement_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2226:2: ( CHECKED block )
            // CSharpAngular.g:2226:4: CHECKED block
            {
            match(input,CHECKED,FOLLOW_CHECKED_in_checked_statement15467); if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_checked_statement15469);
            block();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "checked_statement"


    public static class unchecked_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unchecked_statement"
    // CSharpAngular.g:2228:1: unchecked_statement : UNCHECKED block ;
    public final CSharpAngular.unchecked_statement_return unchecked_statement() throws RecognitionException {
        CSharpAngular.unchecked_statement_return retval = new CSharpAngular.unchecked_statement_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2229:2: ( UNCHECKED block )
            // CSharpAngular.g:2229:4: UNCHECKED block
            {
            match(input,UNCHECKED,FOLLOW_UNCHECKED_in_unchecked_statement15480); if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_unchecked_statement15482);
            block();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unchecked_statement"


    public static class lock_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "lock_statement"
    // CSharpAngular.g:2231:1: lock_statement : LOCK OPEN_PARENS expression CLOSE_PARENS embedded_statement ;
    public final CSharpAngular.lock_statement_return lock_statement() throws RecognitionException {
        CSharpAngular.lock_statement_return retval = new CSharpAngular.lock_statement_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2232:2: ( LOCK OPEN_PARENS expression CLOSE_PARENS embedded_statement )
            // CSharpAngular.g:2232:4: LOCK OPEN_PARENS expression CLOSE_PARENS embedded_statement
            {
            match(input,LOCK,FOLLOW_LOCK_in_lock_statement15493); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_lock_statement15495); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_lock_statement15497);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_lock_statement15499); if (state.failed) return retval;

            pushFollow(FOLLOW_embedded_statement_in_lock_statement15501);
            embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lock_statement"


    public static class using_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "using_statement"
    // CSharpAngular.g:2234:1: using_statement : kwd= USING OPEN_PARENS raq= resource_acquisition CLOSE_PARENS bdy= embedded_statement -> usingStatement(resourceAcq=$raq.textbody=$bdy.text);
    public final CSharpAngular.using_statement_return using_statement() throws RecognitionException {
        CSharpAngular.using_statement_return retval = new CSharpAngular.using_statement_return();
        retval.start = input.LT(1);


        Token kwd=null;
        CSharpAngular.resource_acquisition_return raq =null;

        CSharpAngular.embedded_statement_return bdy =null;


        try {
            // CSharpAngular.g:2235:2: (kwd= USING OPEN_PARENS raq= resource_acquisition CLOSE_PARENS bdy= embedded_statement -> usingStatement(resourceAcq=$raq.textbody=$bdy.text))
            // CSharpAngular.g:2236:2: kwd= USING OPEN_PARENS raq= resource_acquisition CLOSE_PARENS bdy= embedded_statement
            {
            kwd=(Token)match(input,USING,FOLLOW_USING_in_using_statement15516); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_using_statement15518); if (state.failed) return retval;

            pushFollow(FOLLOW_resource_acquisition_in_using_statement15522);
            raq=resource_acquisition();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_using_statement15524); if (state.failed) return retval;

            pushFollow(FOLLOW_embedded_statement_in_using_statement15528);
            bdy=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2237:2: -> usingStatement(resourceAcq=$raq.textbody=$bdy.text)
              {
                  retval.st = templateLib.getInstanceOf("usingStatement",new STAttrMap().put("resourceAcq", (raq!=null?input.toString(raq.start,raq.stop):null)).put("body", (bdy!=null?input.toString(bdy.start,bdy.stop):null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "using_statement"


    public static class resource_acquisition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "resource_acquisition"
    // CSharpAngular.g:2245:1: resource_acquisition : ( ( local_variable_declaration )=>lvd= local_variable_declaration -> resourceAcquisition(stmt=lvd)|expr= expression -> resourceAcquisition(stmt=expr));
    public final CSharpAngular.resource_acquisition_return resource_acquisition() throws RecognitionException {
        CSharpAngular.resource_acquisition_return retval = new CSharpAngular.resource_acquisition_return();
        retval.start = input.LT(1);


        CSharpAngular.local_variable_declaration_return lvd =null;

        CSharpAngular.expression_return expr =null;


        try {
            // CSharpAngular.g:2246:2: ( ( local_variable_declaration )=>lvd= local_variable_declaration -> resourceAcquisition(stmt=lvd)|expr= expression -> resourceAcquisition(stmt=expr))
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==SBYTE) ) {
                int LA191_1 = input.LA(2);

                if ( (synpred72_CSharpAngular()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA191_0==BYTE) ) {
                int LA191_2 = input.LA(2);

                if ( (synpred72_CSharpAngular()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA191_0==SHORT) ) {
                int LA191_3 = input.LA(2);

                if ( (synpred72_CSharpAngular()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA191_0==USHORT) ) {
                int LA191_4 = input.LA(2);

                if ( (synpred72_CSharpAngular()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA191_0==INT) ) {
                int LA191_5 = input.LA(2);

                if ( (synpred72_CSharpAngular()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA191_0==UINT) ) {
                int LA191_6 = input.LA(2);

                if ( (synpred72_CSharpAngular()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA191_0==LONG) ) {
                int LA191_7 = input.LA(2);

                if ( (synpred72_CSharpAngular()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA191_0==ULONG) ) {
                int LA191_8 = input.LA(2);

                if ( (synpred72_CSharpAngular()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA191_0==CHAR) ) {
                int LA191_9 = input.LA(2);

                if ( (synpred72_CSharpAngular()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA191_0==FLOAT) ) {
                int LA191_10 = input.LA(2);

                if ( (synpred72_CSharpAngular()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA191_0==DOUBLE) ) {
                int LA191_11 = input.LA(2);

                if ( (synpred72_CSharpAngular()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA191_0==DECIMAL) ) {
                int LA191_12 = input.LA(2);

                if ( (synpred72_CSharpAngular()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA191_0==BOOL) ) {
                int LA191_13 = input.LA(2);

                if ( (synpred72_CSharpAngular()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 13, input);

                    throw nvae;

                }
            }
            else if ( (LA191_0==IDENTIFIER) ) {
                int LA191_14 = input.LA(2);

                if ( (synpred72_CSharpAngular()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 14, input);

                    throw nvae;

                }
            }
            else if ( (LA191_0==OBJECT) ) {
                int LA191_15 = input.LA(2);

                if ( (synpred72_CSharpAngular()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 15, input);

                    throw nvae;

                }
            }
            else if ( (LA191_0==STRING) ) {
                int LA191_16 = input.LA(2);

                if ( (synpred72_CSharpAngular()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 16, input);

                    throw nvae;

                }
            }
            else if ( (LA191_0==VOID) && (synpred72_CSharpAngular())) {
                alt191=1;
            }
            else if ( (LA191_0==AMP||(LA191_0 >= BANG && LA191_0 <= BASE)||(LA191_0 >= CHARACTER_LITERAL && LA191_0 <= CHECKED)||(LA191_0 >= DEFAULT && LA191_0 <= DELEGATE)||LA191_0==FALSE||LA191_0==INTEGER_LITERAL||LA191_0==MINUS||LA191_0==NEW||LA191_0==NULL||LA191_0==OPEN_PARENS||LA191_0==OP_DEC||LA191_0==OP_INC||LA191_0==PLUS||LA191_0==REAL_LITERAL||LA191_0==SIZEOF||LA191_0==STAR||LA191_0==STRING_LITERAL||LA191_0==THIS||(LA191_0 >= TILDE && LA191_0 <= TRUE)||LA191_0==TYPEOF||LA191_0==UNCHECKED) ) {
                alt191=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;

            }
            switch (alt191) {
                case 1 :
                    // CSharpAngular.g:2247:2: ( local_variable_declaration )=>lvd= local_variable_declaration
                    {
                    pushFollow(FOLLOW_local_variable_declaration_in_resource_acquisition15564);
                    lvd=local_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2248:2: -> resourceAcquisition(stmt=lvd)
                      {
                          retval.st = templateLib.getInstanceOf("resourceAcquisition",new STAttrMap().put("stmt", lvd));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2249:4: expr= expression
                    {
                    pushFollow(FOLLOW_expression_in_resource_acquisition15580);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2250:2: -> resourceAcquisition(stmt=expr)
                      {
                          retval.st = templateLib.getInstanceOf("resourceAcquisition",new STAttrMap().put("stmt", expr));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "resource_acquisition"


    public static class yield_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "yield_statement"
    // CSharpAngular.g:2252:1: yield_statement : (key= yield_contextual_keyword RETURN exp= expression SEMICOLON -> yieldstatement(yieldkey=keyexpr=exp)|key1= yield_contextual_keyword BREAK SEMICOLON -> yieldstatement1(yieldkey=key1));
    public final CSharpAngular.yield_statement_return yield_statement() throws RecognitionException {
        CSharpAngular.yield_statement_return retval = new CSharpAngular.yield_statement_return();
        retval.start = input.LT(1);


        CSharpAngular.yield_contextual_keyword_return key =null;

        CSharpAngular.expression_return exp =null;

        CSharpAngular.yield_contextual_keyword_return key1 =null;


        try {
            // CSharpAngular.g:2253:2: (key= yield_contextual_keyword RETURN exp= expression SEMICOLON -> yieldstatement(yieldkey=keyexpr=exp)|key1= yield_contextual_keyword BREAK SEMICOLON -> yieldstatement1(yieldkey=key1))
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==IDENTIFIER) ) {
                int LA192_1 = input.LA(2);

                if ( (LA192_1==RETURN) ) {
                    alt192=1;
                }
                else if ( (LA192_1==BREAK) ) {
                    alt192=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 192, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;

            }
            switch (alt192) {
                case 1 :
                    // CSharpAngular.g:2253:4: key= yield_contextual_keyword RETURN exp= expression SEMICOLON
                    {
                    pushFollow(FOLLOW_yield_contextual_keyword_in_yield_statement15602);
                    key=yield_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,RETURN,FOLLOW_RETURN_in_yield_statement15604); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_in_yield_statement15608);
                    exp=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_yield_statement15610); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2254:2: -> yieldstatement(yieldkey=keyexpr=exp)
                      {
                          retval.st = templateLib.getInstanceOf("yieldstatement",new STAttrMap().put("yieldkey", key).put("expr", exp));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2255:4: key1= yield_contextual_keyword BREAK SEMICOLON
                    {
                    pushFollow(FOLLOW_yield_contextual_keyword_in_yield_statement15630);
                    key1=yield_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,BREAK,FOLLOW_BREAK_in_yield_statement15632); if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_yield_statement15634); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2256:2: -> yieldstatement1(yieldkey=key1)
                      {
                          retval.st = templateLib.getInstanceOf("yieldstatement1",new STAttrMap().put("yieldkey", key1));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "yield_statement"


    public static class compilation_unit_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "compilation_unit"
    // CSharpAngular.g:2268:1: compilation_unit : (adtvs= extern_alias_directives )? (imprtStmts= using_directives )? ( ( ( global_attribute_section )=>glbAttSec= global_attribute_section ) )* (nspcmems= namespace_member_declarations )? EOF -> writeCompUnit(alisDRctv=adtvsimports=imprtStmtsgas=glbAttSecnmspMemDec=nspcmems);
    public final CSharpAngular.compilation_unit_return compilation_unit() throws RecognitionException {
        CSharpAngular.compilation_unit_return retval = new CSharpAngular.compilation_unit_return();
        retval.start = input.LT(1);


        CSharpAngular.extern_alias_directives_return adtvs =null;

        CSharpAngular.using_directives_return imprtStmts =null;

        CSharpAngular.global_attribute_section_return glbAttSec =null;

        CSharpAngular.namespace_member_declarations_return nspcmems =null;


        try {
            // CSharpAngular.g:2269:3: ( (adtvs= extern_alias_directives )? (imprtStmts= using_directives )? ( ( ( global_attribute_section )=>glbAttSec= global_attribute_section ) )* (nspcmems= namespace_member_declarations )? EOF -> writeCompUnit(alisDRctv=adtvsimports=imprtStmtsgas=glbAttSecnmspMemDec=nspcmems))
            // CSharpAngular.g:2270:3: (adtvs= extern_alias_directives )? (imprtStmts= using_directives )? ( ( ( global_attribute_section )=>glbAttSec= global_attribute_section ) )* (nspcmems= namespace_member_declarations )? EOF
            {
            // CSharpAngular.g:2270:3: (adtvs= extern_alias_directives )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==EXTERN) ) {
                int LA193_1 = input.LA(2);

                if ( (LA193_1==IDENTIFIER) ) {
                    int LA193_3 = input.LA(3);

                    if ( (LA193_3==IDENTIFIER) ) {
                        int LA193_4 = input.LA(4);

                        if ( (LA193_4==SEMICOLON) ) {
                            alt193=1;
                        }
                    }
                }
            }
            switch (alt193) {
                case 1 :
                    // CSharpAngular.g:2270:4: adtvs= extern_alias_directives
                    {
                    pushFollow(FOLLOW_extern_alias_directives_in_compilation_unit15668);
                    adtvs=extern_alias_directives();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2270:36: (imprtStmts= using_directives )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==USING) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    // CSharpAngular.g:2270:37: imprtStmts= using_directives
                    {
                    pushFollow(FOLLOW_using_directives_in_compilation_unit15675);
                    imprtStmts=using_directives();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2271:5: ( ( ( global_attribute_section )=>glbAttSec= global_attribute_section ) )*
            loop195:
            do {
                int alt195=2;
                int LA195_0 = input.LA(1);

                if ( (LA195_0==OPEN_BRACKET) ) {
                    int LA195_2 = input.LA(2);

                    if ( (synpred73_CSharpAngular()) ) {
                        alt195=1;
                    }


                }


                switch (alt195) {
            	case 1 :
            	    // CSharpAngular.g:2271:7: ( ( global_attribute_section )=>glbAttSec= global_attribute_section )
            	    {
            	    // CSharpAngular.g:2271:7: ( ( global_attribute_section )=>glbAttSec= global_attribute_section )
            	    // CSharpAngular.g:2271:8: ( global_attribute_section )=>glbAttSec= global_attribute_section
            	    {
            	    pushFollow(FOLLOW_global_attribute_section_in_compilation_unit15694);
            	    glbAttSec=global_attribute_section();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop195;
                }
            } while (true);


            // CSharpAngular.g:2272:5: (nspcmems= namespace_member_declarations )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==ABSTRACT||LA196_0==CLASS||LA196_0==DELEGATE||LA196_0==ENUM||LA196_0==EXTERN||LA196_0==IDENTIFIER||(LA196_0 >= INTERFACE && LA196_0 <= INTERNAL)||(LA196_0 >= NAMESPACE && LA196_0 <= NEW)||LA196_0==OPEN_BRACKET||LA196_0==OVERRIDE||(LA196_0 >= PRIVATE && LA196_0 <= PUBLIC)||LA196_0==READONLY||LA196_0==SEALED||(LA196_0 >= SINGLE_LINE_COMMENT && LA196_0 <= SINGLE_LINE_DOC_COMMENT)||LA196_0==STATIC||LA196_0==STRUCT||LA196_0==UNSAFE||LA196_0==VIRTUAL||LA196_0==VOLATILE) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // CSharpAngular.g:2272:6: nspcmems= namespace_member_declarations
                    {
                    pushFollow(FOLLOW_namespace_member_declarations_in_compilation_unit15707);
                    nspcmems=namespace_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_compilation_unit15711); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2273:5: -> writeCompUnit(alisDRctv=adtvsimports=imprtStmtsgas=glbAttSecnmspMemDec=nspcmems)
              {
                  retval.st = templateLib.getInstanceOf("writeCompUnit",new STAttrMap().put("alisDRctv", adtvs).put("imports", imprtStmts).put("gas", glbAttSec).put("nmspMemDec", nspcmems));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compilation_unit"


    public static class namespace_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_declaration"
    // CSharpAngular.g:2275:1: namespace_declaration : NAMESPACE qi= qualified_identifier nmsBdy= namespace_body (dl= SEMICOLON )? (comts= comments )? -> pkgDeclarationandClassBody(packageName=\"\"nameSpaceBody=nmsBdydeleimiter=dlcomments=comts);
    public final CSharpAngular.namespace_declaration_return namespace_declaration() throws RecognitionException {
        CSharpAngular.namespace_declaration_return retval = new CSharpAngular.namespace_declaration_return();
        retval.start = input.LT(1);


        Token dl=null;
        CSharpAngular.qualified_identifier_return qi =null;

        CSharpAngular.namespace_body_return nmsBdy =null;

        CSharpAngular.comments_return comts =null;


        try {
            // CSharpAngular.g:2276:2: ( NAMESPACE qi= qualified_identifier nmsBdy= namespace_body (dl= SEMICOLON )? (comts= comments )? -> pkgDeclarationandClassBody(packageName=\"\"nameSpaceBody=nmsBdydeleimiter=dlcomments=comts))
            // CSharpAngular.g:2276:4: NAMESPACE qi= qualified_identifier nmsBdy= namespace_body (dl= SEMICOLON )? (comts= comments )?
            {
            match(input,NAMESPACE,FOLLOW_NAMESPACE_in_namespace_declaration15747); if (state.failed) return retval;

            pushFollow(FOLLOW_qualified_identifier_in_namespace_declaration15751);
            qi=qualified_identifier();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_namespace_body_in_namespace_declaration15755);
            nmsBdy=namespace_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2276:60: (dl= SEMICOLON )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==SEMICOLON) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // CSharpAngular.g:2276:61: dl= SEMICOLON
                    {
                    dl=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_namespace_declaration15760); if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2276:76: (comts= comments )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==SINGLE_LINE_COMMENT) ) {
                alt198=1;
            }
            else if ( (LA198_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // CSharpAngular.g:2276:77: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_namespace_declaration15767);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2277:2: -> pkgDeclarationandClassBody(packageName=\"\"nameSpaceBody=nmsBdydeleimiter=dlcomments=comts)
              {
                  retval.st = templateLib.getInstanceOf("pkgDeclarationandClassBody",new STAttrMap().put("packageName", "").put("nameSpaceBody", nmsBdy).put("deleimiter", dl).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "namespace_declaration"


    public static class qualified_identifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "qualified_identifier"
    // CSharpAngular.g:2279:1: qualified_identifier : id1= IDENTIFIER (idChldLst+= qualified_identifier_Chld )* -> pkgDeclChld(root=$id1.textchldLst=$idChldLst);
    public final CSharpAngular.qualified_identifier_return qualified_identifier() throws RecognitionException {
        CSharpAngular.qualified_identifier_return retval = new CSharpAngular.qualified_identifier_return();
        retval.start = input.LT(1);


        Token id1=null;
        List list_idChldLst=null;
        RuleReturnScope idChldLst = null;
        try {
            // CSharpAngular.g:2280:2: (id1= IDENTIFIER (idChldLst+= qualified_identifier_Chld )* -> pkgDeclChld(root=$id1.textchldLst=$idChldLst))
            // CSharpAngular.g:2281:2: id1= IDENTIFIER (idChldLst+= qualified_identifier_Chld )*
            {
            id1=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualified_identifier15805); if (state.failed) return retval;

            // CSharpAngular.g:2281:17: (idChldLst+= qualified_identifier_Chld )*
            loop199:
            do {
                int alt199=2;
                int LA199_0 = input.LA(1);

                if ( (LA199_0==DOT) ) {
                    alt199=1;
                }


                switch (alt199) {
            	case 1 :
            	    // CSharpAngular.g:2281:18: idChldLst+= qualified_identifier_Chld
            	    {
            	    pushFollow(FOLLOW_qualified_identifier_Chld_in_qualified_identifier15810);
            	    idChldLst=qualified_identifier_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_idChldLst==null) list_idChldLst=new ArrayList();
            	    list_idChldLst.add(idChldLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop199;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2282:2: -> pkgDeclChld(root=$id1.textchldLst=$idChldLst)
              {
                  retval.st = templateLib.getInstanceOf("pkgDeclChld",new STAttrMap().put("root", (id1!=null?id1.getText():null)).put("chldLst", list_idChldLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "qualified_identifier"


    public static class qualified_identifier_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "qualified_identifier_Chld"
    // CSharpAngular.g:2284:1: qualified_identifier_Chld : DOT id= IDENTIFIER -> text(value=\".\"+NamingUtil.toCamelCase($id.text));
    public final CSharpAngular.qualified_identifier_Chld_return qualified_identifier_Chld() throws RecognitionException {
        CSharpAngular.qualified_identifier_Chld_return retval = new CSharpAngular.qualified_identifier_Chld_return();
        retval.start = input.LT(1);


        Token id=null;

        try {
            // CSharpAngular.g:2285:3: ( DOT id= IDENTIFIER -> text(value=\".\"+NamingUtil.toCamelCase($id.text)))
            // CSharpAngular.g:2286:3: DOT id= IDENTIFIER
            {
            match(input,DOT,FOLLOW_DOT_in_qualified_identifier_Chld15838); if (state.failed) return retval;

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualified_identifier_Chld15843); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2287:3: -> text(value=\".\"+NamingUtil.toCamelCase($id.text))
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "."+NamingUtil.toCamelCase((id!=null?id.getText():null))));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "qualified_identifier_Chld"


    public static class namespace_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_body"
    // CSharpAngular.g:2290:1: namespace_body : OPEN_BRACE (cmnts= comments )? (alsDct= extern_alias_directives )? (imps= using_directives )? (nspcmems= namespace_member_declarations )? CLOSE_BRACE -> createClassBody(cmnt=cmntsalisDRctv=alsDctimports=impsnmspMemDec=nspcmems);
    public final CSharpAngular.namespace_body_return namespace_body() throws RecognitionException {
        CSharpAngular.namespace_body_return retval = new CSharpAngular.namespace_body_return();
        retval.start = input.LT(1);


        CSharpAngular.comments_return cmnts =null;

        CSharpAngular.extern_alias_directives_return alsDct =null;

        CSharpAngular.using_directives_return imps =null;

        CSharpAngular.namespace_member_declarations_return nspcmems =null;


        try {
            // CSharpAngular.g:2291:2: ( OPEN_BRACE (cmnts= comments )? (alsDct= extern_alias_directives )? (imps= using_directives )? (nspcmems= namespace_member_declarations )? CLOSE_BRACE -> createClassBody(cmnt=cmntsalisDRctv=alsDctimports=impsnmspMemDec=nspcmems))
            // CSharpAngular.g:2292:2: OPEN_BRACE (cmnts= comments )? (alsDct= extern_alias_directives )? (imps= using_directives )? (nspcmems= namespace_member_declarations )? CLOSE_BRACE
            {
            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_namespace_body15870); if (state.failed) return retval;

            // CSharpAngular.g:2292:13: (cmnts= comments )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==SINGLE_LINE_COMMENT) ) {
                alt200=1;
            }
            else if ( (LA200_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // CSharpAngular.g:2292:14: cmnts= comments
                    {
                    pushFollow(FOLLOW_comments_in_namespace_body15875);
                    cmnts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2292:31: (alsDct= extern_alias_directives )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==EXTERN) ) {
                int LA201_1 = input.LA(2);

                if ( (LA201_1==IDENTIFIER) ) {
                    int LA201_3 = input.LA(3);

                    if ( (LA201_3==IDENTIFIER) ) {
                        int LA201_4 = input.LA(4);

                        if ( (LA201_4==SEMICOLON) ) {
                            alt201=1;
                        }
                    }
                }
            }
            switch (alt201) {
                case 1 :
                    // CSharpAngular.g:2292:32: alsDct= extern_alias_directives
                    {
                    pushFollow(FOLLOW_extern_alias_directives_in_namespace_body15882);
                    alsDct=extern_alias_directives();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2292:65: (imps= using_directives )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==USING) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    // CSharpAngular.g:2292:66: imps= using_directives
                    {
                    pushFollow(FOLLOW_using_directives_in_namespace_body15889);
                    imps=using_directives();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2292:90: (nspcmems= namespace_member_declarations )?
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==ABSTRACT||LA203_0==CLASS||LA203_0==DELEGATE||LA203_0==ENUM||LA203_0==EXTERN||LA203_0==IDENTIFIER||(LA203_0 >= INTERFACE && LA203_0 <= INTERNAL)||(LA203_0 >= NAMESPACE && LA203_0 <= NEW)||LA203_0==OPEN_BRACKET||LA203_0==OVERRIDE||(LA203_0 >= PRIVATE && LA203_0 <= PUBLIC)||LA203_0==READONLY||LA203_0==SEALED||(LA203_0 >= SINGLE_LINE_COMMENT && LA203_0 <= SINGLE_LINE_DOC_COMMENT)||LA203_0==STATIC||LA203_0==STRUCT||LA203_0==UNSAFE||LA203_0==VIRTUAL||LA203_0==VOLATILE) ) {
                alt203=1;
            }
            switch (alt203) {
                case 1 :
                    // CSharpAngular.g:2292:91: nspcmems= namespace_member_declarations
                    {
                    pushFollow(FOLLOW_namespace_member_declarations_in_namespace_body15896);
                    nspcmems=namespace_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_namespace_body15900); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2293:2: -> createClassBody(cmnt=cmntsalisDRctv=alsDctimports=impsnmspMemDec=nspcmems)
              {
                  retval.st = templateLib.getInstanceOf("createClassBody",new STAttrMap().put("cmnt", cmnts).put("alisDRctv", alsDct).put("imports", imps).put("nmspMemDec", nspcmems));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "namespace_body"


    public static class extern_alias_directives_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "extern_alias_directives"
    // CSharpAngular.g:2295:1: extern_alias_directives : (extrnLst+= extern_alias_directive )+ -> lineIterator(list=$extrnLst);
    public final CSharpAngular.extern_alias_directives_return extern_alias_directives() throws RecognitionException {
        CSharpAngular.extern_alias_directives_return retval = new CSharpAngular.extern_alias_directives_return();
        retval.start = input.LT(1);


        List list_extrnLst=null;
        RuleReturnScope extrnLst = null;
        try {
            // CSharpAngular.g:2296:2: ( (extrnLst+= extern_alias_directive )+ -> lineIterator(list=$extrnLst))
            // CSharpAngular.g:2297:2: (extrnLst+= extern_alias_directive )+
            {
            // CSharpAngular.g:2297:2: (extrnLst+= extern_alias_directive )+
            int cnt204=0;
            loop204:
            do {
                int alt204=2;
                int LA204_0 = input.LA(1);

                if ( (LA204_0==EXTERN) ) {
                    int LA204_2 = input.LA(2);

                    if ( (LA204_2==IDENTIFIER) ) {
                        int LA204_3 = input.LA(3);

                        if ( (LA204_3==IDENTIFIER) ) {
                            int LA204_4 = input.LA(4);

                            if ( (LA204_4==SEMICOLON) ) {
                                alt204=1;
                            }


                        }


                    }


                }


                switch (alt204) {
            	case 1 :
            	    // CSharpAngular.g:2297:3: extrnLst+= extern_alias_directive
            	    {
            	    pushFollow(FOLLOW_extern_alias_directive_in_extern_alias_directives15937);
            	    extrnLst=extern_alias_directive();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_extrnLst==null) list_extrnLst=new ArrayList();
            	    list_extrnLst.add(extrnLst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt204 >= 1 ) break loop204;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(204, input);
                        throw eee;
                }
                cnt204++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2298:2: -> lineIterator(list=$extrnLst)
              {
                  retval.st = templateLib.getInstanceOf("lineIterator",new STAttrMap().put("list", list_extrnLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_alias_directives"


    public static class extern_alias_directive_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "extern_alias_directive"
    // CSharpAngular.g:2300:1: extern_alias_directive : EXTERN alias_contextual_keyword IDENTIFIER SEMICOLON -> text(value=\"//TODO Extern alias directive\");
    public final CSharpAngular.extern_alias_directive_return extern_alias_directive() throws RecognitionException {
        CSharpAngular.extern_alias_directive_return retval = new CSharpAngular.extern_alias_directive_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2301:2: ( EXTERN alias_contextual_keyword IDENTIFIER SEMICOLON -> text(value=\"//TODO Extern alias directive\"))
            // CSharpAngular.g:2302:2: EXTERN alias_contextual_keyword IDENTIFIER SEMICOLON
            {
            match(input,EXTERN,FOLLOW_EXTERN_in_extern_alias_directive15961); if (state.failed) return retval;

            pushFollow(FOLLOW_alias_contextual_keyword_in_extern_alias_directive15963);
            alias_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_extern_alias_directive15965); if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_extern_alias_directive15967); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2303:2: -> text(value=\"//TODO Extern alias directive\")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "//TODO Extern alias directive"));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_alias_directive"


    public static class using_directives_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "using_directives"
    // CSharpAngular.g:2305:1: using_directives : (dirLst+= using_directive )+ -> importStmts(lstImports=$dirLst);
    public final CSharpAngular.using_directives_return using_directives() throws RecognitionException {
        CSharpAngular.using_directives_return retval = new CSharpAngular.using_directives_return();
        retval.start = input.LT(1);


        List list_dirLst=null;
        RuleReturnScope dirLst = null;
        try {
            // CSharpAngular.g:2306:2: ( (dirLst+= using_directive )+ -> importStmts(lstImports=$dirLst))
            // CSharpAngular.g:2307:2: (dirLst+= using_directive )+
            {
            // CSharpAngular.g:2307:2: (dirLst+= using_directive )+
            int cnt205=0;
            loop205:
            do {
                int alt205=2;
                int LA205_0 = input.LA(1);

                if ( (LA205_0==USING) ) {
                    alt205=1;
                }


                switch (alt205) {
            	case 1 :
            	    // CSharpAngular.g:2307:3: dirLst+= using_directive
            	    {
            	    pushFollow(FOLLOW_using_directive_in_using_directives15992);
            	    dirLst=using_directive();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_dirLst==null) list_dirLst=new ArrayList();
            	    list_dirLst.add(dirLst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt205 >= 1 ) break loop205;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(205, input);
                        throw eee;
                }
                cnt205++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2308:2: -> importStmts(lstImports=$dirLst)
              {
                  retval.st = templateLib.getInstanceOf("importStmts",new STAttrMap().put("lstImports", list_dirLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "using_directives"


    public static class using_directive_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "using_directive"
    // CSharpAngular.g:2310:1: using_directive : (usngalsDrctv= using_alias_directive -> text(value=$usngalsDrctv.text)|usngnmsDrctv= using_namespace_directive -> text(value=usngnmsDrctv));
    public final CSharpAngular.using_directive_return using_directive() throws RecognitionException {
        CSharpAngular.using_directive_return retval = new CSharpAngular.using_directive_return();
        retval.start = input.LT(1);


        CSharpAngular.using_alias_directive_return usngalsDrctv =null;

        CSharpAngular.using_namespace_directive_return usngnmsDrctv =null;


        try {
            // CSharpAngular.g:2311:2: (usngalsDrctv= using_alias_directive -> text(value=$usngalsDrctv.text)|usngnmsDrctv= using_namespace_directive -> text(value=usngnmsDrctv))
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==USING) ) {
                int LA206_1 = input.LA(2);

                if ( (LA206_1==IDENTIFIER) ) {
                    int LA206_2 = input.LA(3);

                    if ( (LA206_2==ASSIGNMENT) ) {
                        alt206=1;
                    }
                    else if ( (LA206_2==DOT||LA206_2==DOUBLE_COLON||LA206_2==LT||LA206_2==SEMICOLON) ) {
                        alt206=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 206, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 206, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);

                throw nvae;

            }
            switch (alt206) {
                case 1 :
                    // CSharpAngular.g:2312:2: usngalsDrctv= using_alias_directive
                    {
                    pushFollow(FOLLOW_using_alias_directive_in_using_directive16018);
                    usngalsDrctv=using_alias_directive();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2312:46: -> text(value=$usngalsDrctv.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (usngalsDrctv!=null?input.toString(usngalsDrctv.start,usngalsDrctv.stop):null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2313:3: usngnmsDrctv= using_namespace_directive
                    {
                    pushFollow(FOLLOW_using_namespace_directive_in_using_directive16041);
                    usngnmsDrctv=using_namespace_directive();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2313:46: -> text(value=usngnmsDrctv)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", usngnmsDrctv));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "using_directive"


    public static class using_alias_directive_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "using_alias_directive"
    // CSharpAngular.g:2315:1: using_alias_directive : USING IDENTIFIER ASSIGNMENT namespace_or_type_name SEMICOLON -> text(value=\"//TODO Using alias directive\");
    public final CSharpAngular.using_alias_directive_return using_alias_directive() throws RecognitionException {
        CSharpAngular.using_alias_directive_return retval = new CSharpAngular.using_alias_directive_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2316:2: ( USING IDENTIFIER ASSIGNMENT namespace_or_type_name SEMICOLON -> text(value=\"//TODO Using alias directive\"))
            // CSharpAngular.g:2317:2: USING IDENTIFIER ASSIGNMENT namespace_or_type_name SEMICOLON
            {
            match(input,USING,FOLLOW_USING_in_using_alias_directive16066); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_using_alias_directive16068); if (state.failed) return retval;

            match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_using_alias_directive16070); if (state.failed) return retval;

            pushFollow(FOLLOW_namespace_or_type_name_in_using_alias_directive16072);
            namespace_or_type_name();

            state._fsp--;
            if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_using_alias_directive16074); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2318:2: -> text(value=\"//TODO Using alias directive\")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "//TODO Using alias directive"));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "using_alias_directive"


    public static class using_namespace_directive_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "using_namespace_directive"
    // CSharpAngular.g:2320:1: using_namespace_directive : USING pkgName= namespace_name SEMICOLON (comts= comments )? -> importStmt(packName=$pkgName.textcomments=comts);
    public final CSharpAngular.using_namespace_directive_return using_namespace_directive() throws RecognitionException {
        CSharpAngular.using_namespace_directive_return retval = new CSharpAngular.using_namespace_directive_return();
        retval.start = input.LT(1);


        CSharpAngular.namespace_name_return pkgName =null;

        CSharpAngular.comments_return comts =null;


        try {
            // CSharpAngular.g:2321:2: ( USING pkgName= namespace_name SEMICOLON (comts= comments )? -> importStmt(packName=$pkgName.textcomments=comts))
            // CSharpAngular.g:2322:2: USING pkgName= namespace_name SEMICOLON (comts= comments )?
            {
            match(input,USING,FOLLOW_USING_in_using_namespace_directive16096); if (state.failed) return retval;

            pushFollow(FOLLOW_namespace_name_in_using_namespace_directive16100);
            pkgName=namespace_name();

            state._fsp--;
            if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_using_namespace_directive16102); if (state.failed) return retval;

            // CSharpAngular.g:2322:41: (comts= comments )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==SINGLE_LINE_COMMENT) ) {
                alt207=1;
            }
            else if ( (LA207_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // CSharpAngular.g:2322:42: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_using_namespace_directive16107);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2323:2: -> importStmt(packName=$pkgName.textcomments=comts)
              {
                  retval.st = templateLib.getInstanceOf("importStmt",new STAttrMap().put("packName", (pkgName!=null?input.toString(pkgName.start,pkgName.stop):null)).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "using_namespace_directive"


    public static class namespace_member_declarations_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_member_declarations"
    // CSharpAngular.g:2325:1: namespace_member_declarations : (nameSpaceMemLst+= namespace_member_declaration )+ -> lineIterator(list=CSharpHelper.filterOriginalMember($nameSpaceMemLst));
    public final CSharpAngular.namespace_member_declarations_return namespace_member_declarations() throws RecognitionException {
        CSharpAngular.namespace_member_declarations_return retval = new CSharpAngular.namespace_member_declarations_return();
        retval.start = input.LT(1);


        List list_nameSpaceMemLst=null;
        RuleReturnScope nameSpaceMemLst = null;
        try {
            // CSharpAngular.g:2326:2: ( (nameSpaceMemLst+= namespace_member_declaration )+ -> lineIterator(list=CSharpHelper.filterOriginalMember($nameSpaceMemLst)))
            // CSharpAngular.g:2327:2: (nameSpaceMemLst+= namespace_member_declaration )+
            {
            // CSharpAngular.g:2327:2: (nameSpaceMemLst+= namespace_member_declaration )+
            int cnt208=0;
            loop208:
            do {
                int alt208=2;
                int LA208_0 = input.LA(1);

                if ( (LA208_0==ABSTRACT||LA208_0==CLASS||LA208_0==DELEGATE||LA208_0==ENUM||LA208_0==EXTERN||LA208_0==IDENTIFIER||(LA208_0 >= INTERFACE && LA208_0 <= INTERNAL)||(LA208_0 >= NAMESPACE && LA208_0 <= NEW)||LA208_0==OPEN_BRACKET||LA208_0==OVERRIDE||(LA208_0 >= PRIVATE && LA208_0 <= PUBLIC)||LA208_0==READONLY||LA208_0==SEALED||(LA208_0 >= SINGLE_LINE_COMMENT && LA208_0 <= SINGLE_LINE_DOC_COMMENT)||LA208_0==STATIC||LA208_0==STRUCT||LA208_0==UNSAFE||LA208_0==VIRTUAL||LA208_0==VOLATILE) ) {
                    alt208=1;
                }


                switch (alt208) {
            	case 1 :
            	    // CSharpAngular.g:2327:3: nameSpaceMemLst+= namespace_member_declaration
            	    {
            	    pushFollow(FOLLOW_namespace_member_declaration_in_namespace_member_declarations16138);
            	    nameSpaceMemLst=namespace_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_nameSpaceMemLst==null) list_nameSpaceMemLst=new ArrayList();
            	    list_nameSpaceMemLst.add(nameSpaceMemLst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt208 >= 1 ) break loop208;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(208, input);
                        throw eee;
                }
                cnt208++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2328:2: -> lineIterator(list=CSharpHelper.filterOriginalMember($nameSpaceMemLst))
              {
                  retval.st = templateLib.getInstanceOf("lineIterator",new STAttrMap().put("list", CSharpHelper.filterOriginalMember(list_nameSpaceMemLst)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "namespace_member_declarations"


    public static class namespace_member_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_member_declaration"
    // CSharpAngular.g:2330:1: namespace_member_declaration : (nmsDec= namespace_declaration -> text(value=nmsDec)|typeDec= type_declaration -> text(value=typeDec));
    public final CSharpAngular.namespace_member_declaration_return namespace_member_declaration() throws RecognitionException {
        CSharpAngular.namespace_member_declaration_return retval = new CSharpAngular.namespace_member_declaration_return();
        retval.start = input.LT(1);


        CSharpAngular.namespace_declaration_return nmsDec =null;

        CSharpAngular.type_declaration_return typeDec =null;


        try {
            // CSharpAngular.g:2331:2: (nmsDec= namespace_declaration -> text(value=nmsDec)|typeDec= type_declaration -> text(value=typeDec))
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==NAMESPACE) ) {
                alt209=1;
            }
            else if ( (LA209_0==ABSTRACT||LA209_0==CLASS||LA209_0==DELEGATE||LA209_0==ENUM||LA209_0==EXTERN||LA209_0==IDENTIFIER||(LA209_0 >= INTERFACE && LA209_0 <= INTERNAL)||LA209_0==NEW||LA209_0==OPEN_BRACKET||LA209_0==OVERRIDE||(LA209_0 >= PRIVATE && LA209_0 <= PUBLIC)||LA209_0==READONLY||LA209_0==SEALED||(LA209_0 >= SINGLE_LINE_COMMENT && LA209_0 <= SINGLE_LINE_DOC_COMMENT)||LA209_0==STATIC||LA209_0==STRUCT||LA209_0==UNSAFE||LA209_0==VIRTUAL||LA209_0==VOLATILE) ) {
                alt209=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;

            }
            switch (alt209) {
                case 1 :
                    // CSharpAngular.g:2332:2: nmsDec= namespace_declaration
                    {
                    pushFollow(FOLLOW_namespace_declaration_in_namespace_member_declaration16164);
                    nmsDec=namespace_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2332:40: -> text(value=nmsDec)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", nmsDec));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2333:3: typeDec= type_declaration
                    {
                    pushFollow(FOLLOW_type_declaration_in_namespace_member_declaration16187);
                    typeDec=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2333:40: -> text(value=typeDec)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", typeDec));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "namespace_member_declaration"


    public static class type_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_declaration"
    // CSharpAngular.g:2358:1: type_declaration : (at= attributes )? (comts= comments )? (accModfs= all_member_modifiers )? chld= type_declaration_Chld -> typeDeclaration(attributes=atcomments=comtsaccessModifiers=accModfsbodyDefintion=chld);
    public final CSharpAngular.type_declaration_return type_declaration() throws RecognitionException {
        CSharpAngular.type_declaration_return retval = new CSharpAngular.type_declaration_return();
        retval.start = input.LT(1);


        CSharpAngular.attributes_return at =null;

        CSharpAngular.comments_return comts =null;

        CSharpAngular.all_member_modifiers_return accModfs =null;

        CSharpAngular.type_declaration_Chld_return chld =null;


        try {
            // CSharpAngular.g:2359:3: ( (at= attributes )? (comts= comments )? (accModfs= all_member_modifiers )? chld= type_declaration_Chld -> typeDeclaration(attributes=atcomments=comtsaccessModifiers=accModfsbodyDefintion=chld))
            // CSharpAngular.g:2360:3: (at= attributes )? (comts= comments )? (accModfs= all_member_modifiers )? chld= type_declaration_Chld
            {
            // CSharpAngular.g:2360:3: (at= attributes )?
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==OPEN_BRACKET) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    // CSharpAngular.g:2360:4: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_type_declaration16229);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2360:20: (comts= comments )?
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( ((LA211_0 >= SINGLE_LINE_COMMENT && LA211_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    // CSharpAngular.g:2360:21: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_type_declaration16236);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2360:38: (accModfs= all_member_modifiers )?
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==ABSTRACT||LA212_0==EXTERN||LA212_0==IDENTIFIER||LA212_0==INTERNAL||LA212_0==NEW||LA212_0==OVERRIDE||(LA212_0 >= PRIVATE && LA212_0 <= PUBLIC)||LA212_0==READONLY||LA212_0==SEALED||LA212_0==STATIC||LA212_0==UNSAFE||LA212_0==VIRTUAL||LA212_0==VOLATILE) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    // CSharpAngular.g:2360:39: accModfs= all_member_modifiers
                    {
                    pushFollow(FOLLOW_all_member_modifiers_in_type_declaration16243);
                    accModfs=all_member_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_declaration_Chld_in_type_declaration16250);
            chld=type_declaration_Chld();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2361:3: -> typeDeclaration(attributes=atcomments=comtsaccessModifiers=accModfsbodyDefintion=chld)
              {
                  retval.st = templateLib.getInstanceOf("typeDeclaration",new STAttrMap().put("attributes", at).put("comments", comts).put("accessModifiers", accModfs).put("bodyDefintion", chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration"


    public static class type_declaration_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_declaration_Chld"
    // CSharpAngular.g:2364:1: type_declaration_Chld : (classDef= class_definition -> typeDeclarationChld(decl=classDef)|structDef= struct_definition -> typeDeclarationChld(decl=structDef)|interfaceDef= interface_definition -> typeDeclarationChld(decl=interfaceDef)|enumDef= enum_definition -> typeDeclarationChld(decl=enumDef)|delegateDef= delegate_definition -> typeDeclarationChld(decl=delegateDef));
    public final CSharpAngular.type_declaration_Chld_return type_declaration_Chld() throws RecognitionException {
        CSharpAngular.type_declaration_Chld_return retval = new CSharpAngular.type_declaration_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.class_definition_return classDef =null;

        CSharpAngular.struct_definition_return structDef =null;

        CSharpAngular.interface_definition_return interfaceDef =null;

        CSharpAngular.enum_definition_return enumDef =null;

        CSharpAngular.delegate_definition_return delegateDef =null;


        try {
            // CSharpAngular.g:2365:3: (classDef= class_definition -> typeDeclarationChld(decl=classDef)|structDef= struct_definition -> typeDeclarationChld(decl=structDef)|interfaceDef= interface_definition -> typeDeclarationChld(decl=interfaceDef)|enumDef= enum_definition -> typeDeclarationChld(decl=enumDef)|delegateDef= delegate_definition -> typeDeclarationChld(decl=delegateDef))
            int alt213=5;
            switch ( input.LA(1) ) {
            case CLASS:
                {
                alt213=1;
                }
                break;
            case STRUCT:
                {
                alt213=2;
                }
                break;
            case INTERFACE:
                {
                alt213=3;
                }
                break;
            case ENUM:
                {
                alt213=4;
                }
                break;
            case DELEGATE:
                {
                alt213=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 213, 0, input);

                throw nvae;

            }

            switch (alt213) {
                case 1 :
                    // CSharpAngular.g:2366:3: classDef= class_definition
                    {
                    pushFollow(FOLLOW_class_definition_in_type_declaration_Chld16292);
                    classDef=class_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2367:3: -> typeDeclarationChld(decl=classDef)
                      {
                          retval.st = templateLib.getInstanceOf("typeDeclarationChld",new STAttrMap().put("decl", classDef));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2368:4: structDef= struct_definition
                    {
                    pushFollow(FOLLOW_struct_definition_in_type_declaration_Chld16310);
                    structDef=struct_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2369:3: -> typeDeclarationChld(decl=structDef)
                      {
                          retval.st = templateLib.getInstanceOf("typeDeclarationChld",new STAttrMap().put("decl", structDef));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:2370:4: interfaceDef= interface_definition
                    {
                    pushFollow(FOLLOW_interface_definition_in_type_declaration_Chld16328);
                    interfaceDef=interface_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2371:3: -> typeDeclarationChld(decl=interfaceDef)
                      {
                          retval.st = templateLib.getInstanceOf("typeDeclarationChld",new STAttrMap().put("decl", interfaceDef));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:2372:4: enumDef= enum_definition
                    {
                    pushFollow(FOLLOW_enum_definition_in_type_declaration_Chld16346);
                    enumDef=enum_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2373:3: -> typeDeclarationChld(decl=enumDef)
                      {
                          retval.st = templateLib.getInstanceOf("typeDeclarationChld",new STAttrMap().put("decl", enumDef));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:2374:4: delegateDef= delegate_definition
                    {
                    pushFollow(FOLLOW_delegate_definition_in_type_declaration_Chld16364);
                    delegateDef=delegate_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2375:3: -> typeDeclarationChld(decl=delegateDef)
                      {
                          retval.st = templateLib.getInstanceOf("typeDeclarationChld",new STAttrMap().put("decl", delegateDef));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_Chld"


    public static class qualified_alias_member_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "qualified_alias_member"
    // CSharpAngular.g:2379:1: qualified_alias_member : rlNm= IDENTIFIER DOUBLE_COLON alsNam= IDENTIFIER tal= type_argument_list_opt -> qualifiedAliasMember(actName=rlNmaliasName=alsNamargList=tal);
    public final CSharpAngular.qualified_alias_member_return qualified_alias_member() throws RecognitionException {
        CSharpAngular.qualified_alias_member_return retval = new CSharpAngular.qualified_alias_member_return();
        retval.start = input.LT(1);


        Token rlNm=null;
        Token alsNam=null;
        CSharpAngular.type_argument_list_opt_return tal =null;


        try {
            // CSharpAngular.g:2380:2: (rlNm= IDENTIFIER DOUBLE_COLON alsNam= IDENTIFIER tal= type_argument_list_opt -> qualifiedAliasMember(actName=rlNmaliasName=alsNamargList=tal))
            // CSharpAngular.g:2381:2: rlNm= IDENTIFIER DOUBLE_COLON alsNam= IDENTIFIER tal= type_argument_list_opt
            {
            rlNm=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualified_alias_member16393); if (state.failed) return retval;

            match(input,DOUBLE_COLON,FOLLOW_DOUBLE_COLON_in_qualified_alias_member16395); if (state.failed) return retval;

            alsNam=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualified_alias_member16399); if (state.failed) return retval;

            pushFollow(FOLLOW_type_argument_list_opt_in_qualified_alias_member16403);
            tal=type_argument_list_opt();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2382:2: -> qualifiedAliasMember(actName=rlNmaliasName=alsNamargList=tal)
              {
                  retval.st = templateLib.getInstanceOf("qualifiedAliasMember",new STAttrMap().put("actName", rlNm).put("aliasName", alsNam).put("argList", tal));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "qualified_alias_member"


    public static class class_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_declaration"
    // CSharpAngular.g:2387:1: class_declaration : ( attributes )? ( class_modifiers )? ( partial_contextual_keyword )? CLASS IDENTIFIER ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( SEMICOLON )? ;
    public final CSharpAngular.class_declaration_return class_declaration() throws RecognitionException {
        CSharpAngular.class_declaration_return retval = new CSharpAngular.class_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2388:2: ( ( attributes )? ( class_modifiers )? ( partial_contextual_keyword )? CLASS IDENTIFIER ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( SEMICOLON )? )
            // CSharpAngular.g:2388:4: ( attributes )? ( class_modifiers )? ( partial_contextual_keyword )? CLASS IDENTIFIER ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( SEMICOLON )?
            {
            // CSharpAngular.g:2388:4: ( attributes )?
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==OPEN_BRACKET) ) {
                alt214=1;
            }
            switch (alt214) {
                case 1 :
                    // CSharpAngular.g:2388:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_class_declaration16434);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2388:16: ( class_modifiers )?
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==ABSTRACT||LA215_0==INTERNAL||LA215_0==NEW||(LA215_0 >= PRIVATE && LA215_0 <= PUBLIC)||LA215_0==SEALED||LA215_0==STATIC||LA215_0==UNSAFE) ) {
                alt215=1;
            }
            switch (alt215) {
                case 1 :
                    // CSharpAngular.g:2388:16: class_modifiers
                    {
                    pushFollow(FOLLOW_class_modifiers_in_class_declaration16437);
                    class_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2388:33: ( partial_contextual_keyword )?
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==IDENTIFIER) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    // CSharpAngular.g:2388:33: partial_contextual_keyword
                    {
                    pushFollow(FOLLOW_partial_contextual_keyword_in_class_declaration16440);
                    partial_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLASS,FOLLOW_CLASS_in_class_declaration16443); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_class_declaration16445); if (state.failed) return retval;

            // CSharpAngular.g:2388:78: ( type_parameter_list )?
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==LT) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    // CSharpAngular.g:2388:78: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_class_declaration16447);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2389:6: ( class_base )?
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==COLON) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    // CSharpAngular.g:2389:6: class_base
                    {
                    pushFollow(FOLLOW_class_base_in_class_declaration16455);
                    class_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2389:18: ( type_parameter_constraints_clauses )?
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==IDENTIFIER) ) {
                alt219=1;
            }
            switch (alt219) {
                case 1 :
                    // CSharpAngular.g:2389:18: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_class_declaration16458);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_class_body_in_class_declaration16461);
            class_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2389:65: ( SEMICOLON )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==SEMICOLON) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    // CSharpAngular.g:2389:65: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_class_declaration16463); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_declaration"


    public static class class_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_modifiers"
    // CSharpAngular.g:2391:1: class_modifiers : class_modifier ( class_modifier )* ;
    public final CSharpAngular.class_modifiers_return class_modifiers() throws RecognitionException {
        CSharpAngular.class_modifiers_return retval = new CSharpAngular.class_modifiers_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2392:2: ( class_modifier ( class_modifier )* )
            // CSharpAngular.g:2392:4: class_modifier ( class_modifier )*
            {
            pushFollow(FOLLOW_class_modifier_in_class_modifiers16475);
            class_modifier();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2392:19: ( class_modifier )*
            loop221:
            do {
                int alt221=2;
                int LA221_0 = input.LA(1);

                if ( (LA221_0==ABSTRACT||LA221_0==INTERNAL||LA221_0==NEW||(LA221_0 >= PRIVATE && LA221_0 <= PUBLIC)||LA221_0==SEALED||LA221_0==STATIC||LA221_0==UNSAFE) ) {
                    alt221=1;
                }


                switch (alt221) {
            	case 1 :
            	    // CSharpAngular.g:2392:21: class_modifier
            	    {
            	    pushFollow(FOLLOW_class_modifier_in_class_modifiers16479);
            	    class_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop221;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_modifiers"


    public static class class_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_modifier"
    // CSharpAngular.g:2394:1: class_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)| ABSTRACT -> text(value=$ABSTRACT.text)| SEALED -> text(value=$SEALED.text)| STATIC -> text(value=$STATIC.text)|cmu= class_modifier_unsafe -> text(value=cmu));
    public final CSharpAngular.class_modifier_return class_modifier() throws RecognitionException {
        CSharpAngular.class_modifier_return retval = new CSharpAngular.class_modifier_return();
        retval.start = input.LT(1);


        Token NEW170=null;
        Token PUBLIC171=null;
        Token PROTECTED172=null;
        Token INTERNAL173=null;
        Token PRIVATE174=null;
        Token ABSTRACT175=null;
        Token SEALED176=null;
        Token STATIC177=null;
        CSharpAngular.class_modifier_unsafe_return cmu =null;


        try {
            // CSharpAngular.g:2395:2: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)| ABSTRACT -> text(value=$ABSTRACT.text)| SEALED -> text(value=$SEALED.text)| STATIC -> text(value=$STATIC.text)|cmu= class_modifier_unsafe -> text(value=cmu))
            int alt222=9;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt222=1;
                }
                break;
            case PUBLIC:
                {
                alt222=2;
                }
                break;
            case PROTECTED:
                {
                alt222=3;
                }
                break;
            case INTERNAL:
                {
                alt222=4;
                }
                break;
            case PRIVATE:
                {
                alt222=5;
                }
                break;
            case ABSTRACT:
                {
                alt222=6;
                }
                break;
            case SEALED:
                {
                alt222=7;
                }
                break;
            case STATIC:
                {
                alt222=8;
                }
                break;
            case UNSAFE:
                {
                alt222=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);

                throw nvae;

            }

            switch (alt222) {
                case 1 :
                    // CSharpAngular.g:2396:3: NEW
                    {
                    NEW170=(Token)match(input,NEW,FOLLOW_NEW_in_class_modifier16502); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2396:42: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW170!=null?NEW170.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2397:5: PUBLIC
                    {
                    PUBLIC171=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_class_modifier16551); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2397:42: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC171!=null?PUBLIC171.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:2398:5: PROTECTED
                    {
                    PROTECTED172=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_class_modifier16595); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2398:42: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED172!=null?PROTECTED172.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:2399:5: INTERNAL
                    {
                    INTERNAL173=(Token)match(input,INTERNAL,FOLLOW_INTERNAL_in_class_modifier16636); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2399:42: -> text(value=$INTERNAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERNAL173!=null?INTERNAL173.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:2400:5: PRIVATE
                    {
                    PRIVATE174=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_class_modifier16678); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2400:42: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE174!=null?PRIVATE174.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:2401:5: ABSTRACT
                    {
                    ABSTRACT175=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_class_modifier16721); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2401:42: -> text(value=$ABSTRACT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ABSTRACT175!=null?ABSTRACT175.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:2402:5: SEALED
                    {
                    SEALED176=(Token)match(input,SEALED,FOLLOW_SEALED_in_class_modifier16763); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2402:42: -> text(value=$SEALED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEALED176!=null?SEALED176.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:2403:5: STATIC
                    {
                    STATIC177=(Token)match(input,STATIC,FOLLOW_STATIC_in_class_modifier16807); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2403:42: -> text(value=$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STATIC177!=null?STATIC177.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:2404:5: cmu= class_modifier_unsafe
                    {
                    pushFollow(FOLLOW_class_modifier_unsafe_in_class_modifier16853);
                    cmu=class_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2404:42: -> text(value=cmu)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", cmu));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_modifier"


    public static class type_parameter_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameter_list"
    // CSharpAngular.g:2406:1: type_parameter_list : LT lst= type_parameters GT -> typeParameterList(paramList=\"<\"+$lst.st.toString().trim()+\">\");
    public final CSharpAngular.type_parameter_list_return type_parameter_list() throws RecognitionException {
        CSharpAngular.type_parameter_list_return retval = new CSharpAngular.type_parameter_list_return();
        retval.start = input.LT(1);


        CSharpAngular.type_parameters_return lst =null;


        try {
            // CSharpAngular.g:2407:2: ( LT lst= type_parameters GT -> typeParameterList(paramList=\"<\"+$lst.st.toString().trim()+\">\"))
            // CSharpAngular.g:2408:2: LT lst= type_parameters GT
            {
            match(input,LT,FOLLOW_LT_in_type_parameter_list16885); if (state.failed) return retval;

            pushFollow(FOLLOW_type_parameters_in_type_parameter_list16889);
            lst=type_parameters();

            state._fsp--;
            if (state.failed) return retval;

            match(input,GT,FOLLOW_GT_in_type_parameter_list16891); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2409:2: -> typeParameterList(paramList=\"<\"+$lst.st.toString().trim()+\">\")
              {
                  retval.st = templateLib.getInstanceOf("typeParameterList",new STAttrMap().put("paramList", "<"+(lst!=null?lst.st:null).toString().trim()+">"));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_parameter_list"


    public static class type_parameters_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameters"
    // CSharpAngular.g:2411:1: type_parameters : (at= attributes )? tp= type_parameter (chld+= type_parameters_Chld )* -> typeParameters(attr=attype=tpchldList=$chld);
    public final CSharpAngular.type_parameters_return type_parameters() throws RecognitionException {
        CSharpAngular.type_parameters_return retval = new CSharpAngular.type_parameters_return();
        retval.start = input.LT(1);


        List list_chld=null;
        CSharpAngular.attributes_return at =null;

        CSharpAngular.type_parameter_return tp =null;

        RuleReturnScope chld = null;
        try {
            // CSharpAngular.g:2412:2: ( (at= attributes )? tp= type_parameter (chld+= type_parameters_Chld )* -> typeParameters(attr=attype=tpchldList=$chld))
            // CSharpAngular.g:2413:2: (at= attributes )? tp= type_parameter (chld+= type_parameters_Chld )*
            {
            // CSharpAngular.g:2413:2: (at= attributes )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==OPEN_BRACKET) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // CSharpAngular.g:2413:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_type_parameters16916);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_parameter_in_type_parameters16922);
            tp=type_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2413:37: (chld+= type_parameters_Chld )*
            loop224:
            do {
                int alt224=2;
                int LA224_0 = input.LA(1);

                if ( (LA224_0==COMMA) ) {
                    alt224=1;
                }


                switch (alt224) {
            	case 1 :
            	    // CSharpAngular.g:2413:39: chld+= type_parameters_Chld
            	    {
            	    pushFollow(FOLLOW_type_parameters_Chld_in_type_parameters16928);
            	    chld=type_parameters_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_chld==null) list_chld=new ArrayList();
            	    list_chld.add(chld.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop224;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2414:2: -> typeParameters(attr=attype=tpchldList=$chld)
              {
                  retval.st = templateLib.getInstanceOf("typeParameters",new STAttrMap().put("attr", at).put("type", tp).put("chldList", list_chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_parameters"


    public static class type_parameters_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameters_Chld"
    // CSharpAngular.g:2417:1: type_parameters_Chld : COMMA (attr= attributes )? par= type_parameter -> typeParametersChld(attribytes=attrparam=par);
    public final CSharpAngular.type_parameters_Chld_return type_parameters_Chld() throws RecognitionException {
        CSharpAngular.type_parameters_Chld_return retval = new CSharpAngular.type_parameters_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.attributes_return attr =null;

        CSharpAngular.type_parameter_return par =null;


        try {
            // CSharpAngular.g:2418:2: ( COMMA (attr= attributes )? par= type_parameter -> typeParametersChld(attribytes=attrparam=par))
            // CSharpAngular.g:2419:3: COMMA (attr= attributes )? par= type_parameter
            {
            match(input,COMMA,FOLLOW_COMMA_in_type_parameters_Chld16961); if (state.failed) return retval;

            // CSharpAngular.g:2419:10: (attr= attributes )?
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==OPEN_BRACKET) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    // CSharpAngular.g:2419:11: attr= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_type_parameters_Chld16967);
                    attr=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_parameter_in_type_parameters_Chld16974);
            par=type_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2420:3: -> typeParametersChld(attribytes=attrparam=par)
              {
                  retval.st = templateLib.getInstanceOf("typeParametersChld",new STAttrMap().put("attribytes", attr).put("param", par));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_parameters_Chld"


    public static class type_parameter_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameter"
    // CSharpAngular.g:2423:1: type_parameter : IDENTIFIER -> text(value=$IDENTIFIER.text);
    public final CSharpAngular.type_parameter_return type_parameter() throws RecognitionException {
        CSharpAngular.type_parameter_return retval = new CSharpAngular.type_parameter_return();
        retval.start = input.LT(1);


        Token IDENTIFIER178=null;

        try {
            // CSharpAngular.g:2424:2: ( IDENTIFIER -> text(value=$IDENTIFIER.text))
            // CSharpAngular.g:2425:2: IDENTIFIER
            {
            IDENTIFIER178=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_type_parameter17005); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2425:19: -> text(value=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IDENTIFIER178!=null?IDENTIFIER178.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_parameter"


    public static class class_base_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_base"
    // CSharpAngular.g:2435:1: class_base : COLON cType= class_type (clsInfChldLst+= classbaseandInterfaceChld )* -> text(value=\"\");
    public final CSharpAngular.class_base_return class_base() throws RecognitionException {
        CSharpAngular.class_base_return retval = new CSharpAngular.class_base_return();
        retval.start = input.LT(1);


        List list_clsInfChldLst=null;
        CSharpAngular.class_type_return cType =null;

        RuleReturnScope clsInfChldLst = null;
        try {
            // CSharpAngular.g:2436:3: ( COLON cType= class_type (clsInfChldLst+= classbaseandInterfaceChld )* -> text(value=\"\"))
            // CSharpAngular.g:2437:3: COLON cType= class_type (clsInfChldLst+= classbaseandInterfaceChld )*
            {
            match(input,COLON,FOLLOW_COLON_in_class_base17037); if (state.failed) return retval;

            pushFollow(FOLLOW_class_type_in_class_base17041);
            cType=class_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2437:26: (clsInfChldLst+= classbaseandInterfaceChld )*
            loop226:
            do {
                int alt226=2;
                int LA226_0 = input.LA(1);

                if ( (LA226_0==COMMA) ) {
                    alt226=1;
                }


                switch (alt226) {
            	case 1 :
            	    // CSharpAngular.g:2437:27: clsInfChldLst+= classbaseandInterfaceChld
            	    {
            	    pushFollow(FOLLOW_classbaseandInterfaceChld_in_class_base17046);
            	    clsInfChldLst=classbaseandInterfaceChld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_clsInfChldLst==null) list_clsInfChldLst=new ArrayList();
            	    list_clsInfChldLst.add(clsInfChldLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop226;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2438:3: -> text(value=\"\")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_base"


    public static class interface_type_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_type_list"
    // CSharpAngular.g:2441:1: interface_type_list : iType= interface_type (clsInfChldLst+= classbaseandInterfaceChld )* -> interfacetypelist(val1=$iType.textval2=$clsInfChldLst);
    public final CSharpAngular.interface_type_list_return interface_type_list() throws RecognitionException {
        CSharpAngular.interface_type_list_return retval = new CSharpAngular.interface_type_list_return();
        retval.start = input.LT(1);


        List list_clsInfChldLst=null;
        CSharpAngular.interface_type_return iType =null;

        RuleReturnScope clsInfChldLst = null;
        try {
            // CSharpAngular.g:2442:2: (iType= interface_type (clsInfChldLst+= classbaseandInterfaceChld )* -> interfacetypelist(val1=$iType.textval2=$clsInfChldLst))
            // CSharpAngular.g:2443:2: iType= interface_type (clsInfChldLst+= classbaseandInterfaceChld )*
            {
            pushFollow(FOLLOW_interface_type_in_interface_type_list17077);
            iType=interface_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2443:23: (clsInfChldLst+= classbaseandInterfaceChld )*
            loop227:
            do {
                int alt227=2;
                int LA227_0 = input.LA(1);

                if ( (LA227_0==COMMA) ) {
                    alt227=1;
                }


                switch (alt227) {
            	case 1 :
            	    // CSharpAngular.g:2443:24: clsInfChldLst+= classbaseandInterfaceChld
            	    {
            	    pushFollow(FOLLOW_classbaseandInterfaceChld_in_interface_type_list17082);
            	    clsInfChldLst=classbaseandInterfaceChld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_clsInfChldLst==null) list_clsInfChldLst=new ArrayList();
            	    list_clsInfChldLst.add(clsInfChldLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop227;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2444:2: -> interfacetypelist(val1=$iType.textval2=$clsInfChldLst)
              {
                  retval.st = templateLib.getInstanceOf("interfacetypelist",new STAttrMap().put("val1", (iType!=null?input.toString(iType.start,iType.stop):null)).put("val2", list_clsInfChldLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_type_list"


    public static class classbaseandInterfaceChld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "classbaseandInterfaceChld"
    // CSharpAngular.g:2447:1: classbaseandInterfaceChld : COMMA intFaceName= interface_type -> text(value=\",\"+$intFaceName.text);
    public final CSharpAngular.classbaseandInterfaceChld_return classbaseandInterfaceChld() throws RecognitionException {
        CSharpAngular.classbaseandInterfaceChld_return retval = new CSharpAngular.classbaseandInterfaceChld_return();
        retval.start = input.LT(1);


        CSharpAngular.interface_type_return intFaceName =null;


        try {
            // CSharpAngular.g:2448:3: ( COMMA intFaceName= interface_type -> text(value=\",\"+$intFaceName.text))
            // CSharpAngular.g:2449:3: COMMA intFaceName= interface_type
            {
            match(input,COMMA,FOLLOW_COMMA_in_classbaseandInterfaceChld17112); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_type_in_classbaseandInterfaceChld17117);
            intFaceName=interface_type();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2450:3: -> text(value=\",\"+$intFaceName.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ","+(intFaceName!=null?input.toString(intFaceName.start,intFaceName.stop):null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classbaseandInterfaceChld"


    public static class type_parameter_constraints_clauses_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameter_constraints_clauses"
    // CSharpAngular.g:2453:1: type_parameter_constraints_clauses : (clauses= type_parameter_constraints_clause )+ -> typeparameterconstraintsclauses(tclauses=clauses);
    public final CSharpAngular.type_parameter_constraints_clauses_return type_parameter_constraints_clauses() throws RecognitionException {
        CSharpAngular.type_parameter_constraints_clauses_return retval = new CSharpAngular.type_parameter_constraints_clauses_return();
        retval.start = input.LT(1);


        CSharpAngular.type_parameter_constraints_clause_return clauses =null;


        try {
            // CSharpAngular.g:2454:2: ( (clauses= type_parameter_constraints_clause )+ -> typeparameterconstraintsclauses(tclauses=clauses))
            // CSharpAngular.g:2454:4: (clauses= type_parameter_constraints_clause )+
            {
            // CSharpAngular.g:2454:4: (clauses= type_parameter_constraints_clause )+
            int cnt228=0;
            loop228:
            do {
                int alt228=2;
                int LA228_0 = input.LA(1);

                if ( (LA228_0==IDENTIFIER) ) {
                    alt228=1;
                }


                switch (alt228) {
            	case 1 :
            	    // CSharpAngular.g:2454:5: clauses= type_parameter_constraints_clause
            	    {
            	    pushFollow(FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses17145);
            	    clauses=type_parameter_constraints_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt228 >= 1 ) break loop228;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(228, input);
                        throw eee;
                }
                cnt228++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2455:2: -> typeparameterconstraintsclauses(tclauses=clauses)
              {
                  retval.st = templateLib.getInstanceOf("typeparameterconstraintsclauses",new STAttrMap().put("tclauses", clauses));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraints_clauses"


    public static class type_parameter_constraints_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameter_constraints_clause"
    // CSharpAngular.g:2457:1: type_parameter_constraints_clause : wkey= where_contextual_keyword tparam= type_parameter COLON tcons= type_parameter_constraints -> typeparameterconstraintsclause(wkeyword=wkeytyparam=tparamtpcons=tcons);
    public final CSharpAngular.type_parameter_constraints_clause_return type_parameter_constraints_clause() throws RecognitionException {
        CSharpAngular.type_parameter_constraints_clause_return retval = new CSharpAngular.type_parameter_constraints_clause_return();
        retval.start = input.LT(1);


        CSharpAngular.where_contextual_keyword_return wkey =null;

        CSharpAngular.type_parameter_return tparam =null;

        CSharpAngular.type_parameter_constraints_return tcons =null;


        try {
            // CSharpAngular.g:2458:2: (wkey= where_contextual_keyword tparam= type_parameter COLON tcons= type_parameter_constraints -> typeparameterconstraintsclause(wkeyword=wkeytyparam=tparamtpcons=tcons))
            // CSharpAngular.g:2458:4: wkey= where_contextual_keyword tparam= type_parameter COLON tcons= type_parameter_constraints
            {
            pushFollow(FOLLOW_where_contextual_keyword_in_type_parameter_constraints_clause17169);
            wkey=where_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_type_parameter_in_type_parameter_constraints_clause17173);
            tparam=type_parameter();

            state._fsp--;
            if (state.failed) return retval;

            match(input,COLON,FOLLOW_COLON_in_type_parameter_constraints_clause17175); if (state.failed) return retval;

            pushFollow(FOLLOW_type_parameter_constraints_in_type_parameter_constraints_clause17179);
            tcons=type_parameter_constraints();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2459:2: -> typeparameterconstraintsclause(wkeyword=wkeytyparam=tparamtpcons=tcons)
              {
                  retval.st = templateLib.getInstanceOf("typeparameterconstraintsclause",new STAttrMap().put("wkeyword", wkey).put("typaram", tparam).put("tpcons", tcons));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraints_clause"


    public static class type_parameter_constraints_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameter_constraints"
    // CSharpAngular.g:2472:1: type_parameter_constraints : ( constructor_constraint |pri= primary_constraint ( COMMA secondary_constraints )? ( COMMA constructor_constraint )? -> typeparameterconstraints(prim=pri));
    public final CSharpAngular.type_parameter_constraints_return type_parameter_constraints() throws RecognitionException {
        CSharpAngular.type_parameter_constraints_return retval = new CSharpAngular.type_parameter_constraints_return();
        retval.start = input.LT(1);


        CSharpAngular.primary_constraint_return pri =null;


        try {
            // CSharpAngular.g:2473:3: ( constructor_constraint |pri= primary_constraint ( COMMA secondary_constraints )? ( COMMA constructor_constraint )? -> typeparameterconstraints(prim=pri))
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==NEW) ) {
                alt231=1;
            }
            else if ( (LA231_0==CLASS||LA231_0==IDENTIFIER||LA231_0==OBJECT||LA231_0==STRING||LA231_0==STRUCT) ) {
                alt231=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 231, 0, input);

                throw nvae;

            }
            switch (alt231) {
                case 1 :
                    // CSharpAngular.g:2473:5: constructor_constraint
                    {
                    pushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraints17210);
                    constructor_constraint();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2474:5: pri= primary_constraint ( COMMA secondary_constraints )? ( COMMA constructor_constraint )?
                    {
                    pushFollow(FOLLOW_primary_constraint_in_type_parameter_constraints17218);
                    pri=primary_constraint();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharpAngular.g:2474:28: ( COMMA secondary_constraints )?
                    int alt229=2;
                    int LA229_0 = input.LA(1);

                    if ( (LA229_0==COMMA) ) {
                        int LA229_1 = input.LA(2);

                        if ( (LA229_1==IDENTIFIER) ) {
                            alt229=1;
                        }
                    }
                    switch (alt229) {
                        case 1 :
                            // CSharpAngular.g:2474:29: COMMA secondary_constraints
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_type_parameter_constraints17221); if (state.failed) return retval;

                            pushFollow(FOLLOW_secondary_constraints_in_type_parameter_constraints17223);
                            secondary_constraints();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharpAngular.g:2474:59: ( COMMA constructor_constraint )?
                    int alt230=2;
                    int LA230_0 = input.LA(1);

                    if ( (LA230_0==COMMA) ) {
                        alt230=1;
                    }
                    switch (alt230) {
                        case 1 :
                            // CSharpAngular.g:2474:60: COMMA constructor_constraint
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_type_parameter_constraints17228); if (state.failed) return retval;

                            pushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraints17230);
                            constructor_constraint();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2475:3: -> typeparameterconstraints(prim=pri)
                      {
                          retval.st = templateLib.getInstanceOf("typeparameterconstraints",new STAttrMap().put("prim", pri));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraints"


    public static class primary_constraint_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_constraint"
    // CSharpAngular.g:2477:1: primary_constraint : (clstyp= class_type -> text(value=clstyp)| CLASS -> text(value=$CLASS.text)| STRUCT -> text(value=$STRUCT.text));
    public final CSharpAngular.primary_constraint_return primary_constraint() throws RecognitionException {
        CSharpAngular.primary_constraint_return retval = new CSharpAngular.primary_constraint_return();
        retval.start = input.LT(1);


        Token CLASS179=null;
        Token STRUCT180=null;
        CSharpAngular.class_type_return clstyp =null;


        try {
            // CSharpAngular.g:2478:2: (clstyp= class_type -> text(value=clstyp)| CLASS -> text(value=$CLASS.text)| STRUCT -> text(value=$STRUCT.text))
            int alt232=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case OBJECT:
            case STRING:
                {
                alt232=1;
                }
                break;
            case CLASS:
                {
                alt232=2;
                }
                break;
            case STRUCT:
                {
                alt232=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;

            }

            switch (alt232) {
                case 1 :
                    // CSharpAngular.g:2479:2: clstyp= class_type
                    {
                    pushFollow(FOLLOW_class_type_in_primary_constraint17265);
                    clstyp=class_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2479:25: -> text(value=clstyp)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", clstyp));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2480:4: CLASS
                    {
                    CLASS179=(Token)match(input,CLASS,FOLLOW_CLASS_in_primary_constraint17283); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2480:25: -> text(value=$CLASS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CLASS179!=null?CLASS179.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:2481:4: STRUCT
                    {
                    STRUCT180=(Token)match(input,STRUCT,FOLLOW_STRUCT_in_primary_constraint17311); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2481:25: -> text(value=$STRUCT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STRUCT180!=null?STRUCT180.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primary_constraint"


    public static class secondary_constraints_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "secondary_constraints"
    // CSharpAngular.g:2492:1: secondary_constraints : interface_type ( COMMA interface_type )* ;
    public final CSharpAngular.secondary_constraints_return secondary_constraints() throws RecognitionException {
        CSharpAngular.secondary_constraints_return retval = new CSharpAngular.secondary_constraints_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2493:3: ( interface_type ( COMMA interface_type )* )
            // CSharpAngular.g:2493:5: interface_type ( COMMA interface_type )*
            {
            pushFollow(FOLLOW_interface_type_in_secondary_constraints17347);
            interface_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2493:20: ( COMMA interface_type )*
            loop233:
            do {
                int alt233=2;
                int LA233_0 = input.LA(1);

                if ( (LA233_0==COMMA) ) {
                    int LA233_1 = input.LA(2);

                    if ( (LA233_1==IDENTIFIER) ) {
                        alt233=1;
                    }


                }


                switch (alt233) {
            	case 1 :
            	    // CSharpAngular.g:2493:21: COMMA interface_type
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_secondary_constraints17350); if (state.failed) return retval;

            	    pushFollow(FOLLOW_interface_type_in_secondary_constraints17352);
            	    interface_type();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop233;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "secondary_constraints"


    public static class constructor_constraint_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_constraint"
    // CSharpAngular.g:2495:1: constructor_constraint : NEW OPEN_PARENS CLOSE_PARENS ;
    public final CSharpAngular.constructor_constraint_return constructor_constraint() throws RecognitionException {
        CSharpAngular.constructor_constraint_return retval = new CSharpAngular.constructor_constraint_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2496:2: ( NEW OPEN_PARENS CLOSE_PARENS )
            // CSharpAngular.g:2496:4: NEW OPEN_PARENS CLOSE_PARENS
            {
            match(input,NEW,FOLLOW_NEW_in_constructor_constraint17366); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_constructor_constraint17368); if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_constructor_constraint17370); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_constraint"


    public static class class_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_body"
    // CSharpAngular.g:2498:1: class_body : OPEN_BRACE (clsMemDecs= class_member_declarations )? CLOSE_BRACE -> classBody(classMemdeclarations=clsMemDecs);
    public final CSharpAngular.class_body_return class_body() throws RecognitionException {
        CSharpAngular.class_body_return retval = new CSharpAngular.class_body_return();
        retval.start = input.LT(1);


        CSharpAngular.class_member_declarations_return clsMemDecs =null;


        try {
            // CSharpAngular.g:2499:2: ( OPEN_BRACE (clsMemDecs= class_member_declarations )? CLOSE_BRACE -> classBody(classMemdeclarations=clsMemDecs))
            // CSharpAngular.g:2500:2: OPEN_BRACE (clsMemDecs= class_member_declarations )? CLOSE_BRACE
            {
            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_class_body17383); if (state.failed) return retval;

            // CSharpAngular.g:2500:14: (clsMemDecs= class_member_declarations )?
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==ABSTRACT||LA234_0==BOOL||LA234_0==BYTE||LA234_0==CHAR||LA234_0==CLASS||LA234_0==CONST||LA234_0==DECIMAL||LA234_0==DELEGATE||LA234_0==DOUBLE||(LA234_0 >= ENUM && LA234_0 <= EXTERN)||LA234_0==FLOAT||LA234_0==IDENTIFIER||LA234_0==IMPLICIT||LA234_0==INT||(LA234_0 >= INTERFACE && LA234_0 <= INTERNAL)||LA234_0==LONG||LA234_0==NEW||LA234_0==OBJECT||LA234_0==OPEN_BRACKET||LA234_0==OVERRIDE||(LA234_0 >= PRIVATE && LA234_0 <= PUBLIC)||LA234_0==READONLY||(LA234_0 >= SBYTE && LA234_0 <= SEALED)||(LA234_0 >= SHORT && LA234_0 <= SINGLE_LINE_DOC_COMMENT)||(LA234_0 >= STATIC && LA234_0 <= STRING)||LA234_0==STRUCT||LA234_0==TILDE||(LA234_0 >= UINT && LA234_0 <= ULONG)||(LA234_0 >= UNSAFE && LA234_0 <= USHORT)||(LA234_0 >= VIRTUAL && LA234_0 <= VOLATILE)) ) {
                alt234=1;
            }
            switch (alt234) {
                case 1 :
                    // CSharpAngular.g:2500:15: clsMemDecs= class_member_declarations
                    {
                    pushFollow(FOLLOW_class_member_declarations_in_class_body17389);
                    clsMemDecs=class_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_class_body17394); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2501:2: -> classBody(classMemdeclarations=clsMemDecs)
              {
                  retval.st = templateLib.getInstanceOf("classBody",new STAttrMap().put("classMemdeclarations", clsMemDecs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_body"


    public static class class_member_declarations_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_member_declarations"
    // CSharpAngular.g:2503:1: class_member_declarations : (clsmemDecLst+= class_member_declaration )+ -> classMemberDeclarations(classMembersList=$clsmemDecLstclassName=CSharpAngularHelper.classNameDataUpdater(getClassName()));
    public final CSharpAngular.class_member_declarations_return class_member_declarations() throws RecognitionException {
        CSharpAngular.class_member_declarations_return retval = new CSharpAngular.class_member_declarations_return();
        retval.start = input.LT(1);


        List list_clsmemDecLst=null;
        RuleReturnScope clsmemDecLst = null;
        try {
            // CSharpAngular.g:2504:2: ( (clsmemDecLst+= class_member_declaration )+ -> classMemberDeclarations(classMembersList=$clsmemDecLstclassName=CSharpAngularHelper.classNameDataUpdater(getClassName())))
            // CSharpAngular.g:2505:2: (clsmemDecLst+= class_member_declaration )+
            {
            // CSharpAngular.g:2505:2: (clsmemDecLst+= class_member_declaration )+
            int cnt235=0;
            loop235:
            do {
                int alt235=2;
                int LA235_0 = input.LA(1);

                if ( (LA235_0==ABSTRACT||LA235_0==BOOL||LA235_0==BYTE||LA235_0==CHAR||LA235_0==CLASS||LA235_0==CONST||LA235_0==DECIMAL||LA235_0==DELEGATE||LA235_0==DOUBLE||(LA235_0 >= ENUM && LA235_0 <= EXTERN)||LA235_0==FLOAT||LA235_0==IDENTIFIER||LA235_0==IMPLICIT||LA235_0==INT||(LA235_0 >= INTERFACE && LA235_0 <= INTERNAL)||LA235_0==LONG||LA235_0==NEW||LA235_0==OBJECT||LA235_0==OPEN_BRACKET||LA235_0==OVERRIDE||(LA235_0 >= PRIVATE && LA235_0 <= PUBLIC)||LA235_0==READONLY||(LA235_0 >= SBYTE && LA235_0 <= SEALED)||(LA235_0 >= SHORT && LA235_0 <= SINGLE_LINE_DOC_COMMENT)||(LA235_0 >= STATIC && LA235_0 <= STRING)||LA235_0==STRUCT||LA235_0==TILDE||(LA235_0 >= UINT && LA235_0 <= ULONG)||(LA235_0 >= UNSAFE && LA235_0 <= USHORT)||(LA235_0 >= VIRTUAL && LA235_0 <= VOLATILE)) ) {
                    alt235=1;
                }


                switch (alt235) {
            	case 1 :
            	    // CSharpAngular.g:2505:3: clsmemDecLst+= class_member_declaration
            	    {
            	    pushFollow(FOLLOW_class_member_declaration_in_class_member_declarations17419);
            	    clsmemDecLst=class_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_clsmemDecLst==null) list_clsmemDecLst=new ArrayList();
            	    list_clsmemDecLst.add(clsmemDecLst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt235 >= 1 ) break loop235;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(235, input);
                        throw eee;
                }
                cnt235++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2506:2: -> classMemberDeclarations(classMembersList=$clsmemDecLstclassName=CSharpAngularHelper.classNameDataUpdater(getClassName()))
              {
                  retval.st = templateLib.getInstanceOf("classMemberDeclarations",new STAttrMap().put("classMembersList", list_clsmemDecLst).put("className", CSharpAngularHelper.classNameDataUpdater(getClassName())));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_member_declarations"


    public static class class_member_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_member_declaration"
    // CSharpAngular.g:2523:1: class_member_declaration : ( (attrs1= attributes )? (acsModfrs1= all_member_modifiers )? cmd= common_member_declaration -> classMemberDeclaration(attributes=attrs1accessModifiers=acsModfrs1comMemDec=cmd)| (attrs2= attributes )? (acsModfrs2= all_member_modifiers )? TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body -> classMemberDeclaration(attributes=attrs2accessModifiers=acsModfrs1));
    public final CSharpAngular.class_member_declaration_return class_member_declaration() throws RecognitionException {
        CSharpAngular.class_member_declaration_return retval = new CSharpAngular.class_member_declaration_return();
        retval.start = input.LT(1);


        CSharpAngular.attributes_return attrs1 =null;

        CSharpAngular.all_member_modifiers_return acsModfrs1 =null;

        CSharpAngular.common_member_declaration_return cmd =null;

        CSharpAngular.attributes_return attrs2 =null;

        CSharpAngular.all_member_modifiers_return acsModfrs2 =null;


        try {
            // CSharpAngular.g:2524:3: ( (attrs1= attributes )? (acsModfrs1= all_member_modifiers )? cmd= common_member_declaration -> classMemberDeclaration(attributes=attrs1accessModifiers=acsModfrs1comMemDec=cmd)| (attrs2= attributes )? (acsModfrs2= all_member_modifiers )? TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body -> classMemberDeclaration(attributes=attrs2accessModifiers=acsModfrs1))
            int alt240=2;
            switch ( input.LA(1) ) {
            case OPEN_BRACKET:
                {
                alt240=1;
                }
                break;
            case NEW:
                {
                alt240=1;
                }
                break;
            case PUBLIC:
                {
                alt240=1;
                }
                break;
            case PROTECTED:
                {
                alt240=1;
                }
                break;
            case INTERNAL:
                {
                alt240=1;
                }
                break;
            case PRIVATE:
                {
                alt240=1;
                }
                break;
            case READONLY:
                {
                alt240=1;
                }
                break;
            case VOLATILE:
                {
                alt240=1;
                }
                break;
            case VIRTUAL:
                {
                alt240=1;
                }
                break;
            case SEALED:
                {
                alt240=1;
                }
                break;
            case OVERRIDE:
                {
                alt240=1;
                }
                break;
            case ABSTRACT:
                {
                alt240=1;
                }
                break;
            case STATIC:
                {
                alt240=1;
                }
                break;
            case UNSAFE:
                {
                alt240=1;
                }
                break;
            case EXTERN:
                {
                alt240=1;
                }
                break;
            case IDENTIFIER:
                {
                int LA240_16 = input.LA(2);

                if ( (!(((input.LT(1).getText().equals("partial"))))) ) {
                    alt240=1;
                }
                else if ( ((input.LT(1).getText().equals("partial"))) ) {
                    alt240=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 240, 16, input);

                    throw nvae;

                }
                }
                break;
            case BOOL:
            case BYTE:
            case CHAR:
            case CLASS:
            case CONST:
            case DECIMAL:
            case DELEGATE:
            case DOUBLE:
            case ENUM:
            case EVENT:
            case EXPLICIT:
            case FLOAT:
            case IMPLICIT:
            case INT:
            case INTERFACE:
            case LONG:
            case OBJECT:
            case SBYTE:
            case SHORT:
            case SINGLE_LINE_COMMENT:
            case SINGLE_LINE_DOC_COMMENT:
            case STRING:
            case STRUCT:
            case UINT:
            case ULONG:
            case USHORT:
            case VOID:
                {
                alt240=1;
                }
                break;
            case TILDE:
                {
                alt240=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 240, 0, input);

                throw nvae;

            }

            switch (alt240) {
                case 1 :
                    // CSharpAngular.g:2525:3: (attrs1= attributes )? (acsModfrs1= all_member_modifiers )? cmd= common_member_declaration
                    {
                    // CSharpAngular.g:2525:3: (attrs1= attributes )?
                    int alt236=2;
                    int LA236_0 = input.LA(1);

                    if ( (LA236_0==OPEN_BRACKET) ) {
                        alt236=1;
                    }
                    switch (alt236) {
                        case 1 :
                            // CSharpAngular.g:2525:4: attrs1= attributes
                            {
                            pushFollow(FOLLOW_attributes_in_class_member_declaration17454);
                            attrs1=attributes();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharpAngular.g:2525:24: (acsModfrs1= all_member_modifiers )?
                    int alt237=2;
                    int LA237_0 = input.LA(1);

                    if ( (LA237_0==ABSTRACT||LA237_0==EXTERN||LA237_0==INTERNAL||LA237_0==NEW||LA237_0==OVERRIDE||(LA237_0 >= PRIVATE && LA237_0 <= PUBLIC)||LA237_0==READONLY||LA237_0==SEALED||LA237_0==STATIC||LA237_0==UNSAFE||LA237_0==VIRTUAL||LA237_0==VOLATILE) ) {
                        alt237=1;
                    }
                    else if ( (LA237_0==IDENTIFIER) ) {
                        int LA237_15 = input.LA(2);

                        if ( ((input.LT(1).getText().equals("partial"))) ) {
                            alt237=1;
                        }
                    }
                    switch (alt237) {
                        case 1 :
                            // CSharpAngular.g:2525:25: acsModfrs1= all_member_modifiers
                            {
                            pushFollow(FOLLOW_all_member_modifiers_in_class_member_declaration17461);
                            acsModfrs1=all_member_modifiers();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_common_member_declaration_in_class_member_declaration17467);
                    cmd=common_member_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2526:2: -> classMemberDeclaration(attributes=attrs1accessModifiers=acsModfrs1comMemDec=cmd)
                      {
                          retval.st = templateLib.getInstanceOf("classMemberDeclaration",new STAttrMap().put("attributes", attrs1).put("accessModifiers", acsModfrs1).put("comMemDec", cmd));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2527:3: (attrs2= attributes )? (acsModfrs2= all_member_modifiers )? TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body
                    {
                    // CSharpAngular.g:2527:3: (attrs2= attributes )?
                    int alt238=2;
                    int LA238_0 = input.LA(1);

                    if ( (LA238_0==OPEN_BRACKET) ) {
                        alt238=1;
                    }
                    switch (alt238) {
                        case 1 :
                            // CSharpAngular.g:2527:4: attrs2= attributes
                            {
                            pushFollow(FOLLOW_attributes_in_class_member_declaration17491);
                            attrs2=attributes();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharpAngular.g:2527:24: (acsModfrs2= all_member_modifiers )?
                    int alt239=2;
                    int LA239_0 = input.LA(1);

                    if ( (LA239_0==ABSTRACT||LA239_0==EXTERN||LA239_0==IDENTIFIER||LA239_0==INTERNAL||LA239_0==NEW||LA239_0==OVERRIDE||(LA239_0 >= PRIVATE && LA239_0 <= PUBLIC)||LA239_0==READONLY||LA239_0==SEALED||LA239_0==STATIC||LA239_0==UNSAFE||LA239_0==VIRTUAL||LA239_0==VOLATILE) ) {
                        alt239=1;
                    }
                    switch (alt239) {
                        case 1 :
                            // CSharpAngular.g:2527:25: acsModfrs2= all_member_modifiers
                            {
                            pushFollow(FOLLOW_all_member_modifiers_in_class_member_declaration17498);
                            acsModfrs2=all_member_modifiers();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,TILDE,FOLLOW_TILDE_in_class_member_declaration17502); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_class_member_declaration17504); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_class_member_declaration17506); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_class_member_declaration17508); if (state.failed) return retval;

                    pushFollow(FOLLOW_destructor_body_in_class_member_declaration17510);
                    destructor_body();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2528:3: -> classMemberDeclaration(attributes=attrs2accessModifiers=acsModfrs1)
                      {
                          retval.st = templateLib.getInstanceOf("classMemberDeclaration",new STAttrMap().put("attributes", attrs2).put("accessModifiers", acsModfrs1));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_member_declaration"


    public static class all_member_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "all_member_modifiers"
    // CSharpAngular.g:2532:1: all_member_modifiers : (m+= all_member_modifier )+ -> text(value=\"\");
    public final CSharpAngular.all_member_modifiers_return all_member_modifiers() throws RecognitionException {
        CSharpAngular.all_member_modifiers_return retval = new CSharpAngular.all_member_modifiers_return();
        retval.start = input.LT(1);


        List list_m=null;
        RuleReturnScope m = null;
        try {
            // CSharpAngular.g:2533:3: ( (m+= all_member_modifier )+ -> text(value=\"\"))
            // CSharpAngular.g:2534:3: (m+= all_member_modifier )+
            {
            // CSharpAngular.g:2534:3: (m+= all_member_modifier )+
            int cnt241=0;
            loop241:
            do {
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( (LA241_0==IDENTIFIER) ) {
                    int LA241_22 = input.LA(2);

                    if ( ((input.LT(1).getText().equals("partial"))) ) {
                        alt241=1;
                    }


                }
                else if ( (LA241_0==ABSTRACT||LA241_0==EXTERN||LA241_0==INTERNAL||LA241_0==NEW||LA241_0==OVERRIDE||(LA241_0 >= PRIVATE && LA241_0 <= PUBLIC)||LA241_0==READONLY||LA241_0==SEALED||LA241_0==STATIC||LA241_0==UNSAFE||LA241_0==VIRTUAL||LA241_0==VOLATILE) ) {
                    alt241=1;
                }


                switch (alt241) {
            	case 1 :
            	    // CSharpAngular.g:2534:4: m+= all_member_modifier
            	    {
            	    pushFollow(FOLLOW_all_member_modifier_in_all_member_modifiers17544);
            	    m=all_member_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_m==null) list_m=new ArrayList();
            	    list_m.add(m.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt241 >= 1 ) break loop241;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(241, input);
                        throw eee;
                }
                cnt241++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2535:3: -> text(value=\"\")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "all_member_modifiers"


    public static class all_member_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "all_member_modifier"
    // CSharpAngular.g:2537:1: all_member_modifier : (accsMod1= NEW -> allMemberModifier(value=$accsMod1.text)|accsMod2= PUBLIC -> allMemberModifier(value=$accsMod2.text)|accsMod3= PROTECTED -> allMemberModifier(value=$accsMod3.text)|accsMod4= INTERNAL -> allMemberModifier(value=$accsMod4.text)|accsMod5= PRIVATE -> allMemberModifier(value=$accsMod5.text)|accsMod6= READONLY -> allMemberModifier(value=$accsMod6.text)|accsMod7= VOLATILE -> allMemberModifier(value=$accsMod7.text)|accsMod8= VIRTUAL -> allMemberModifier(value=$accsMod8.text)|accsMod9= SEALED -> allMemberModifier(value=$accsMod9.text)|accsMod10= OVERRIDE -> allMemberModifier(value=$accsMod10.text)|accsMod11= ABSTRACT -> allMemberModifier(value=$accsMod11.text)|accsMod12= STATIC -> allMemberModifier(value=$accsMod12.text)|accsMod13= UNSAFE -> allMemberModifier(value=$accsMod13.text)|accsMod14= EXTERN -> allMemberModifier(value=$accsMod14.text)|pck= partial_contextual_keyword -> allMemberModifier(value=pck));
    public final CSharpAngular.all_member_modifier_return all_member_modifier() throws RecognitionException {
        CSharpAngular.all_member_modifier_return retval = new CSharpAngular.all_member_modifier_return();
        retval.start = input.LT(1);


        Token accsMod1=null;
        Token accsMod2=null;
        Token accsMod3=null;
        Token accsMod4=null;
        Token accsMod5=null;
        Token accsMod6=null;
        Token accsMod7=null;
        Token accsMod8=null;
        Token accsMod9=null;
        Token accsMod10=null;
        Token accsMod11=null;
        Token accsMod12=null;
        Token accsMod13=null;
        Token accsMod14=null;
        CSharpAngular.partial_contextual_keyword_return pck =null;


        try {
            // CSharpAngular.g:2538:3: (accsMod1= NEW -> allMemberModifier(value=$accsMod1.text)|accsMod2= PUBLIC -> allMemberModifier(value=$accsMod2.text)|accsMod3= PROTECTED -> allMemberModifier(value=$accsMod3.text)|accsMod4= INTERNAL -> allMemberModifier(value=$accsMod4.text)|accsMod5= PRIVATE -> allMemberModifier(value=$accsMod5.text)|accsMod6= READONLY -> allMemberModifier(value=$accsMod6.text)|accsMod7= VOLATILE -> allMemberModifier(value=$accsMod7.text)|accsMod8= VIRTUAL -> allMemberModifier(value=$accsMod8.text)|accsMod9= SEALED -> allMemberModifier(value=$accsMod9.text)|accsMod10= OVERRIDE -> allMemberModifier(value=$accsMod10.text)|accsMod11= ABSTRACT -> allMemberModifier(value=$accsMod11.text)|accsMod12= STATIC -> allMemberModifier(value=$accsMod12.text)|accsMod13= UNSAFE -> allMemberModifier(value=$accsMod13.text)|accsMod14= EXTERN -> allMemberModifier(value=$accsMod14.text)|pck= partial_contextual_keyword -> allMemberModifier(value=pck))
            int alt242=15;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt242=1;
                }
                break;
            case PUBLIC:
                {
                alt242=2;
                }
                break;
            case PROTECTED:
                {
                alt242=3;
                }
                break;
            case INTERNAL:
                {
                alt242=4;
                }
                break;
            case PRIVATE:
                {
                alt242=5;
                }
                break;
            case READONLY:
                {
                alt242=6;
                }
                break;
            case VOLATILE:
                {
                alt242=7;
                }
                break;
            case VIRTUAL:
                {
                alt242=8;
                }
                break;
            case SEALED:
                {
                alt242=9;
                }
                break;
            case OVERRIDE:
                {
                alt242=10;
                }
                break;
            case ABSTRACT:
                {
                alt242=11;
                }
                break;
            case STATIC:
                {
                alt242=12;
                }
                break;
            case UNSAFE:
                {
                alt242=13;
                }
                break;
            case EXTERN:
                {
                alt242=14;
                }
                break;
            case IDENTIFIER:
                {
                alt242=15;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;

            }

            switch (alt242) {
                case 1 :
                    // CSharpAngular.g:2539:3: accsMod1= NEW
                    {
                    accsMod1=(Token)match(input,NEW,FOLLOW_NEW_in_all_member_modifier17573); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2540:3: -> allMemberModifier(value=$accsMod1.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (accsMod1!=null?accsMod1.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2541:5: accsMod2= PUBLIC
                    {
                    accsMod2=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_all_member_modifier17591); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2542:3: -> allMemberModifier(value=$accsMod2.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (accsMod2!=null?accsMod2.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:2543:5: accsMod3= PROTECTED
                    {
                    accsMod3=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_all_member_modifier17609); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2544:3: -> allMemberModifier(value=$accsMod3.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (accsMod3!=null?accsMod3.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:2545:5: accsMod4= INTERNAL
                    {
                    accsMod4=(Token)match(input,INTERNAL,FOLLOW_INTERNAL_in_all_member_modifier17627); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2546:3: -> allMemberModifier(value=$accsMod4.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (accsMod4!=null?accsMod4.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:2547:5: accsMod5= PRIVATE
                    {
                    accsMod5=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_all_member_modifier17645); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2548:3: -> allMemberModifier(value=$accsMod5.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (accsMod5!=null?accsMod5.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:2549:5: accsMod6= READONLY
                    {
                    accsMod6=(Token)match(input,READONLY,FOLLOW_READONLY_in_all_member_modifier17663); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2550:3: -> allMemberModifier(value=$accsMod6.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (accsMod6!=null?accsMod6.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:2551:5: accsMod7= VOLATILE
                    {
                    accsMod7=(Token)match(input,VOLATILE,FOLLOW_VOLATILE_in_all_member_modifier17681); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2552:3: -> allMemberModifier(value=$accsMod7.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (accsMod7!=null?accsMod7.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:2553:5: accsMod8= VIRTUAL
                    {
                    accsMod8=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_all_member_modifier17699); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2554:3: -> allMemberModifier(value=$accsMod8.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (accsMod8!=null?accsMod8.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:2555:5: accsMod9= SEALED
                    {
                    accsMod9=(Token)match(input,SEALED,FOLLOW_SEALED_in_all_member_modifier17717); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2556:3: -> allMemberModifier(value=$accsMod9.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (accsMod9!=null?accsMod9.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:2557:5: accsMod10= OVERRIDE
                    {
                    accsMod10=(Token)match(input,OVERRIDE,FOLLOW_OVERRIDE_in_all_member_modifier17735); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2558:3: -> allMemberModifier(value=$accsMod10.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (accsMod10!=null?accsMod10.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:2559:5: accsMod11= ABSTRACT
                    {
                    accsMod11=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_all_member_modifier17753); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2560:3: -> allMemberModifier(value=$accsMod11.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (accsMod11!=null?accsMod11.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharpAngular.g:2561:5: accsMod12= STATIC
                    {
                    accsMod12=(Token)match(input,STATIC,FOLLOW_STATIC_in_all_member_modifier17771); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2562:3: -> allMemberModifier(value=$accsMod12.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (accsMod12!=null?accsMod12.getText():null)));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharpAngular.g:2563:5: accsMod13= UNSAFE
                    {
                    accsMod13=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_all_member_modifier17789); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2564:3: -> allMemberModifier(value=$accsMod13.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (accsMod13!=null?accsMod13.getText():null)));
                      }


                    }

                    }
                    break;
                case 14 :
                    // CSharpAngular.g:2565:5: accsMod14= EXTERN
                    {
                    accsMod14=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_all_member_modifier17807); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2566:3: -> allMemberModifier(value=$accsMod14.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (accsMod14!=null?accsMod14.getText():null)));
                      }


                    }

                    }
                    break;
                case 15 :
                    // CSharpAngular.g:2567:5: pck= partial_contextual_keyword
                    {
                    pushFollow(FOLLOW_partial_contextual_keyword_in_all_member_modifier17825);
                    pck=partial_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2568:3: -> allMemberModifier(value=pck)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", pck));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "all_member_modifier"


    protected static class common_member_declaration_scope {
        Object type;
    }
    protected Stack common_member_declaration_stack = new Stack();


    public static class common_member_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "common_member_declaration"
    // CSharpAngular.g:2585:1: common_member_declaration : (coms= comments -> commonMemberDeclaration(arg1=nullarg2=coms)|constDedcl= constant_declaration2 -> commonMemberDeclaration(arg1=nullarg2=constDedcl)|typMemDecl= typed_member_declaration -> commonMemberDeclaration(arg1=nullarg2=typMemDecl)|evntDecl= event_declaration2 -> commonMemberDeclaration(arg1=nullarg2=evntDecl)|convOprtDecl= conversion_operator_declarator oprtrBdy= operator_body -> commonMemberDeclaration(arg1=convOprtDeclarg2=oprtrBdy)|conDec2= constructor_declaration2 -> commonMemberDeclaration(arg1=nullarg2=conDec2)|typVoid= type_void methdDecl= method_declaration2 -> commonMemberDeclaration(arg1=typVoidarg2=methdDecl)|clsDef= class_definition -> commonMemberDeclaration(arg1=nullarg2=clsDef)|strtDef= struct_definition -> commonMemberDeclaration(arg1=nullarg2=strtDef)|infcDecl= interface_definition -> commonMemberDeclaration(arg1=nullarg2=infcDecl)|enumDef= enum_definition -> commonMemberDeclaration(arg1=nullarg2=enumDef)|delgDef= delegate_definition -> commonMemberDeclaration(arg1=nullarg2=delgDef));
    public final CSharpAngular.common_member_declaration_return common_member_declaration() throws RecognitionException {
        common_member_declaration_stack.push(new common_member_declaration_scope());
        CSharpAngular.common_member_declaration_return retval = new CSharpAngular.common_member_declaration_return();
        retval.start = input.LT(1);


        CSharpAngular.comments_return coms =null;

        CSharpAngular.constant_declaration2_return constDedcl =null;

        CSharpAngular.typed_member_declaration_return typMemDecl =null;

        CSharpAngular.event_declaration2_return evntDecl =null;

        CSharpAngular.conversion_operator_declarator_return convOprtDecl =null;

        CSharpAngular.operator_body_return oprtrBdy =null;

        CSharpAngular.constructor_declaration2_return conDec2 =null;

        CSharpAngular.type_void_return typVoid =null;

        CSharpAngular.method_declaration2_return methdDecl =null;

        CSharpAngular.class_definition_return clsDef =null;

        CSharpAngular.struct_definition_return strtDef =null;

        CSharpAngular.interface_definition_return infcDecl =null;

        CSharpAngular.enum_definition_return enumDef =null;

        CSharpAngular.delegate_definition_return delgDef =null;


        try {
            // CSharpAngular.g:2589:3: (coms= comments -> commonMemberDeclaration(arg1=nullarg2=coms)|constDedcl= constant_declaration2 -> commonMemberDeclaration(arg1=nullarg2=constDedcl)|typMemDecl= typed_member_declaration -> commonMemberDeclaration(arg1=nullarg2=typMemDecl)|evntDecl= event_declaration2 -> commonMemberDeclaration(arg1=nullarg2=evntDecl)|convOprtDecl= conversion_operator_declarator oprtrBdy= operator_body -> commonMemberDeclaration(arg1=convOprtDeclarg2=oprtrBdy)|conDec2= constructor_declaration2 -> commonMemberDeclaration(arg1=nullarg2=conDec2)|typVoid= type_void methdDecl= method_declaration2 -> commonMemberDeclaration(arg1=typVoidarg2=methdDecl)|clsDef= class_definition -> commonMemberDeclaration(arg1=nullarg2=clsDef)|strtDef= struct_definition -> commonMemberDeclaration(arg1=nullarg2=strtDef)|infcDecl= interface_definition -> commonMemberDeclaration(arg1=nullarg2=infcDecl)|enumDef= enum_definition -> commonMemberDeclaration(arg1=nullarg2=enumDef)|delgDef= delegate_definition -> commonMemberDeclaration(arg1=nullarg2=delgDef))
            int alt243=12;
            switch ( input.LA(1) ) {
            case SINGLE_LINE_COMMENT:
            case SINGLE_LINE_DOC_COMMENT:
                {
                alt243=1;
                }
                break;
            case CONST:
                {
                alt243=2;
                }
                break;
            case BOOL:
            case BYTE:
            case CHAR:
            case DECIMAL:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case OBJECT:
            case SBYTE:
            case SHORT:
            case STRING:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt243=3;
                }
                break;
            case IDENTIFIER:
                {
                int LA243_4 = input.LA(2);

                if ( (LA243_4==DOT||LA243_4==DOUBLE_COLON||LA243_4==IDENTIFIER||LA243_4==INTERR||LA243_4==LT||LA243_4==OPEN_BRACKET||LA243_4==OPERATOR||LA243_4==STAR||LA243_4==THIS) ) {
                    alt243=3;
                }
                else if ( (LA243_4==OPEN_PARENS) ) {
                    alt243=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 4, input);

                    throw nvae;

                }
                }
                break;
            case VOID:
                {
                int LA243_5 = input.LA(2);

                if ( (LA243_5==STAR) ) {
                    alt243=3;
                }
                else if ( (LA243_5==IDENTIFIER) ) {
                    alt243=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 5, input);

                    throw nvae;

                }
                }
                break;
            case EVENT:
                {
                alt243=4;
                }
                break;
            case EXPLICIT:
            case IMPLICIT:
                {
                alt243=5;
                }
                break;
            case CLASS:
                {
                alt243=8;
                }
                break;
            case STRUCT:
                {
                alt243=9;
                }
                break;
            case INTERFACE:
                {
                alt243=10;
                }
                break;
            case ENUM:
                {
                alt243=11;
                }
                break;
            case DELEGATE:
                {
                alt243=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 243, 0, input);

                throw nvae;

            }

            switch (alt243) {
                case 1 :
                    // CSharpAngular.g:2590:3: coms= comments
                    {
                    pushFollow(FOLLOW_comments_in_common_member_declaration17861);
                    coms=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2591:3: -> commonMemberDeclaration(arg1=nullarg2=coms)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", coms));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2592:4: constDedcl= constant_declaration2
                    {
                    pushFollow(FOLLOW_constant_declaration2_in_common_member_declaration17882);
                    constDedcl=constant_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2593:3: -> commonMemberDeclaration(arg1=nullarg2=constDedcl)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", constDedcl));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:2594:5: typMemDecl= typed_member_declaration
                    {
                    pushFollow(FOLLOW_typed_member_declaration_in_common_member_declaration17904);
                    typMemDecl=typed_member_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2595:3: -> commonMemberDeclaration(arg1=nullarg2=typMemDecl)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", typMemDecl));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:2596:5: evntDecl= event_declaration2
                    {
                    pushFollow(FOLLOW_event_declaration2_in_common_member_declaration17926);
                    evntDecl=event_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2597:3: -> commonMemberDeclaration(arg1=nullarg2=evntDecl)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", evntDecl));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:2598:5: convOprtDecl= conversion_operator_declarator oprtrBdy= operator_body
                    {
                    pushFollow(FOLLOW_conversion_operator_declarator_in_common_member_declaration17948);
                    convOprtDecl=conversion_operator_declarator();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_operator_body_in_common_member_declaration17952);
                    oprtrBdy=operator_body();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2599:3: -> commonMemberDeclaration(arg1=convOprtDeclarg2=oprtrBdy)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", convOprtDecl).put("arg2", oprtrBdy));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:2600:5: conDec2= constructor_declaration2
                    {
                    pushFollow(FOLLOW_constructor_declaration2_in_common_member_declaration17974);
                    conDec2=constructor_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2601:3: -> commonMemberDeclaration(arg1=nullarg2=conDec2)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", conDec2));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:2602:5: typVoid= type_void methdDecl= method_declaration2
                    {
                    pushFollow(FOLLOW_type_void_in_common_member_declaration17996);
                    typVoid=type_void();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_method_declaration2_in_common_member_declaration18002);
                    methdDecl=method_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2603:3: -> commonMemberDeclaration(arg1=typVoidarg2=methdDecl)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", typVoid).put("arg2", methdDecl));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:2604:5: clsDef= class_definition
                    {
                    pushFollow(FOLLOW_class_definition_in_common_member_declaration18026);
                    clsDef=class_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2605:3: -> commonMemberDeclaration(arg1=nullarg2=clsDef)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", clsDef));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:2606:5: strtDef= struct_definition
                    {
                    pushFollow(FOLLOW_struct_definition_in_common_member_declaration18048);
                    strtDef=struct_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2607:3: -> commonMemberDeclaration(arg1=nullarg2=strtDef)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", strtDef));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:2608:5: infcDecl= interface_definition
                    {
                    pushFollow(FOLLOW_interface_definition_in_common_member_declaration18070);
                    infcDecl=interface_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2609:3: -> commonMemberDeclaration(arg1=nullarg2=infcDecl)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", infcDecl));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:2610:5: enumDef= enum_definition
                    {
                    pushFollow(FOLLOW_enum_definition_in_common_member_declaration18092);
                    enumDef=enum_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2611:3: -> commonMemberDeclaration(arg1=nullarg2=enumDef)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", enumDef));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharpAngular.g:2612:5: delgDef= delegate_definition
                    {
                    pushFollow(FOLLOW_delegate_definition_in_common_member_declaration18114);
                    delgDef=delegate_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2613:3: -> commonMemberDeclaration(arg1=nullarg2=delgDef)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", delgDef));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            common_member_declaration_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "common_member_declaration"


    public static class typed_member_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "typed_member_declaration"
    // CSharpAngular.g:2617:1: typed_member_declaration : t= type bdy= typed_member_declaration_Chld -> typedMemberDeclaration(type=\"var\"body=bdy);
    public final CSharpAngular.typed_member_declaration_return typed_member_declaration() throws RecognitionException {
        CSharpAngular.typed_member_declaration_return retval = new CSharpAngular.typed_member_declaration_return();
        retval.start = input.LT(1);


        CSharpAngular.type_return t =null;

        CSharpAngular.typed_member_declaration_Chld_return bdy =null;


        try {
            // CSharpAngular.g:2618:3: (t= type bdy= typed_member_declaration_Chld -> typedMemberDeclaration(type=\"var\"body=bdy))
            // CSharpAngular.g:2619:3: t= type bdy= typed_member_declaration_Chld
            {
            pushFollow(FOLLOW_type_in_typed_member_declaration18147);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) {((common_member_declaration_scope)common_member_declaration_stack.peek()).type = (t!=null?((Object)t.tree):null);}

            pushFollow(FOLLOW_typed_member_declaration_Chld_in_typed_member_declaration18153);
            bdy=typed_member_declaration_Chld();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2620:3: -> typedMemberDeclaration(type=\"var\"body=bdy)
              {
                  retval.st = templateLib.getInstanceOf("typedMemberDeclaration",new STAttrMap().put("type", "var").put("body", bdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typed_member_declaration"


    public static class typed_member_declaration_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "typed_member_declaration_Chld"
    // CSharpAngular.g:2622:1: typed_member_declaration_Chld : ( ( interface_type DOT THIS )=> interface_type DOT indexerDecl= indexer_declaration2 -> typedMemberDeclarationChld(declaration=indexerDecl)| ( member_name ( type_parameter_list )? OPEN_PARENS )=>methdDec= method_declaration2 -> typedMemberDeclarationChld(declaration=methdDec)| ( member_name OPEN_BRACE )=>propDecl= property_declaration2 -> typedMemberDeclarationChld(declaration=propDecl)|indDecl= indexer_declaration2 -> typedMemberDeclarationChld(declaration=indDecl)|optrDecl= operator_declaration2 -> typedMemberDeclarationChld(declaration=optrDecl)|fldDecl= field_declaration2 -> typedMemberDeclarationChld(declaration=fldDecl));
    public final CSharpAngular.typed_member_declaration_Chld_return typed_member_declaration_Chld() throws RecognitionException {
        CSharpAngular.typed_member_declaration_Chld_return retval = new CSharpAngular.typed_member_declaration_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.indexer_declaration2_return indexerDecl =null;

        CSharpAngular.method_declaration2_return methdDec =null;

        CSharpAngular.property_declaration2_return propDecl =null;

        CSharpAngular.indexer_declaration2_return indDecl =null;

        CSharpAngular.operator_declaration2_return optrDecl =null;

        CSharpAngular.field_declaration2_return fldDecl =null;


        try {
            // CSharpAngular.g:2623:3: ( ( interface_type DOT THIS )=> interface_type DOT indexerDecl= indexer_declaration2 -> typedMemberDeclarationChld(declaration=indexerDecl)| ( member_name ( type_parameter_list )? OPEN_PARENS )=>methdDec= method_declaration2 -> typedMemberDeclarationChld(declaration=methdDec)| ( member_name OPEN_BRACE )=>propDecl= property_declaration2 -> typedMemberDeclarationChld(declaration=propDecl)|indDecl= indexer_declaration2 -> typedMemberDeclarationChld(declaration=indDecl)|optrDecl= operator_declaration2 -> typedMemberDeclarationChld(declaration=optrDecl)|fldDecl= field_declaration2 -> typedMemberDeclarationChld(declaration=fldDecl))
            int alt244=6;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
                {
                int LA244_1 = input.LA(2);

                if ( (synpred74_CSharpAngular()) ) {
                    alt244=1;
                }
                else if ( (synpred75_CSharpAngular()) ) {
                    alt244=2;
                }
                else if ( (synpred76_CSharpAngular()) ) {
                    alt244=3;
                }
                else if ( (true) ) {
                    alt244=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 244, 1, input);

                    throw nvae;

                }
                }
                break;
            case THIS:
                {
                alt244=4;
                }
                break;
            case OPERATOR:
                {
                alt244=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 244, 0, input);

                throw nvae;

            }

            switch (alt244) {
                case 1 :
                    // CSharpAngular.g:2624:5: ( interface_type DOT THIS )=> interface_type DOT indexerDecl= indexer_declaration2
                    {
                    pushFollow(FOLLOW_interface_type_in_typed_member_declaration_Chld18193);
                    interface_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_typed_member_declaration_Chld18195); if (state.failed) return retval;

                    pushFollow(FOLLOW_indexer_declaration2_in_typed_member_declaration_Chld18199);
                    indexerDecl=indexer_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2625:5: -> typedMemberDeclarationChld(declaration=indexerDecl)
                      {
                          retval.st = templateLib.getInstanceOf("typedMemberDeclarationChld",new STAttrMap().put("declaration", indexerDecl));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2626:7: ( member_name ( type_parameter_list )? OPEN_PARENS )=>methdDec= method_declaration2
                    {
                    pushFollow(FOLLOW_method_declaration2_in_typed_member_declaration_Chld18232);
                    methdDec=method_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2627:5: -> typedMemberDeclarationChld(declaration=methdDec)
                      {
                          retval.st = templateLib.getInstanceOf("typedMemberDeclarationChld",new STAttrMap().put("declaration", methdDec));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:2628:7: ( member_name OPEN_BRACE )=>propDecl= property_declaration2
                    {
                    pushFollow(FOLLOW_property_declaration2_in_typed_member_declaration_Chld18262);
                    propDecl=property_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2629:5: -> typedMemberDeclarationChld(declaration=propDecl)
                      {
                          retval.st = templateLib.getInstanceOf("typedMemberDeclarationChld",new STAttrMap().put("declaration", propDecl));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:2630:7: indDecl= indexer_declaration2
                    {
                    pushFollow(FOLLOW_indexer_declaration2_in_typed_member_declaration_Chld18284);
                    indDecl=indexer_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2631:5: -> typedMemberDeclarationChld(declaration=indDecl)
                      {
                          retval.st = templateLib.getInstanceOf("typedMemberDeclarationChld",new STAttrMap().put("declaration", indDecl));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:2632:7: optrDecl= operator_declaration2
                    {
                    pushFollow(FOLLOW_operator_declaration2_in_typed_member_declaration_Chld18306);
                    optrDecl=operator_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2633:5: -> typedMemberDeclarationChld(declaration=optrDecl)
                      {
                          retval.st = templateLib.getInstanceOf("typedMemberDeclarationChld",new STAttrMap().put("declaration", optrDecl));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:2634:7: fldDecl= field_declaration2
                    {
                    pushFollow(FOLLOW_field_declaration2_in_typed_member_declaration_Chld18328);
                    fldDecl=field_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2635:5: -> typedMemberDeclarationChld(declaration=fldDecl)
                      {
                          retval.st = templateLib.getInstanceOf("typedMemberDeclarationChld",new STAttrMap().put("declaration", fldDecl));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typed_member_declaration_Chld"


    public static class constant_declarators_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constant_declarators"
    // CSharpAngular.g:2664:1: constant_declarators : fstDec= constant_declarator (conDecLst+= constant_declarators_Chld )* -> constantDeclarators(firstDecl=fstDeclist=$conDecLst);
    public final CSharpAngular.constant_declarators_return constant_declarators() throws RecognitionException {
        CSharpAngular.constant_declarators_return retval = new CSharpAngular.constant_declarators_return();
        retval.start = input.LT(1);


        List list_conDecLst=null;
        CSharpAngular.constant_declarator_return fstDec =null;

        RuleReturnScope conDecLst = null;
        try {
            // CSharpAngular.g:2665:2: (fstDec= constant_declarator (conDecLst+= constant_declarators_Chld )* -> constantDeclarators(firstDecl=fstDeclist=$conDecLst))
            // CSharpAngular.g:2666:2: fstDec= constant_declarator (conDecLst+= constant_declarators_Chld )*
            {
            pushFollow(FOLLOW_constant_declarator_in_constant_declarators18370);
            fstDec=constant_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2666:29: (conDecLst+= constant_declarators_Chld )*
            loop245:
            do {
                int alt245=2;
                int LA245_0 = input.LA(1);

                if ( (LA245_0==COMMA) ) {
                    alt245=1;
                }


                switch (alt245) {
            	case 1 :
            	    // CSharpAngular.g:2666:31: conDecLst+= constant_declarators_Chld
            	    {
            	    pushFollow(FOLLOW_constant_declarators_Chld_in_constant_declarators18376);
            	    conDecLst=constant_declarators_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_conDecLst==null) list_conDecLst=new ArrayList();
            	    list_conDecLst.add(conDecLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop245;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2667:2: -> constantDeclarators(firstDecl=fstDeclist=$conDecLst)
              {
                  retval.st = templateLib.getInstanceOf("constantDeclarators",new STAttrMap().put("firstDecl", fstDec).put("list", list_conDecLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constant_declarators"


    public static class constant_declarators_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constant_declarators_Chld"
    // CSharpAngular.g:2669:1: constant_declarators_Chld : COMMA conDec= constant_declarator -> constantDeclaratorsChld(constDecl=conDec);
    public final CSharpAngular.constant_declarators_Chld_return constant_declarators_Chld() throws RecognitionException {
        CSharpAngular.constant_declarators_Chld_return retval = new CSharpAngular.constant_declarators_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.constant_declarator_return conDec =null;


        try {
            // CSharpAngular.g:2670:3: ( COMMA conDec= constant_declarator -> constantDeclaratorsChld(constDecl=conDec))
            // CSharpAngular.g:2671:3: COMMA conDec= constant_declarator
            {
            match(input,COMMA,FOLLOW_COMMA_in_constant_declarators_Chld18404); if (state.failed) return retval;

            pushFollow(FOLLOW_constant_declarator_in_constant_declarators_Chld18409);
            conDec=constant_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2672:3: -> constantDeclaratorsChld(constDecl=conDec)
              {
                  retval.st = templateLib.getInstanceOf("constantDeclaratorsChld",new STAttrMap().put("constDecl", conDec));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constant_declarators_Chld"


    public static class constant_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constant_declarator"
    // CSharpAngular.g:2675:1: constant_declarator : IDENTIFIER ASSIGNMENT constexpr= constant_expression -> constantDeclarator(constexpr=constexpr);
    public final CSharpAngular.constant_declarator_return constant_declarator() throws RecognitionException {
        CSharpAngular.constant_declarator_return retval = new CSharpAngular.constant_declarator_return();
        retval.start = input.LT(1);


        CSharpAngular.constant_expression_return constexpr =null;


        try {
            // CSharpAngular.g:2676:2: ( IDENTIFIER ASSIGNMENT constexpr= constant_expression -> constantDeclarator(constexpr=constexpr))
            // CSharpAngular.g:2676:4: IDENTIFIER ASSIGNMENT constexpr= constant_expression
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_constant_declarator18436); if (state.failed) return retval;

            match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_constant_declarator18438); if (state.failed) return retval;

            pushFollow(FOLLOW_constant_expression_in_constant_declarator18442);
            constexpr=constant_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2677:2: -> constantDeclarator(constexpr=constexpr)
              {
                  retval.st = templateLib.getInstanceOf("constantDeclarator",new STAttrMap().put("constexpr", constexpr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constant_declarator"


    public static class variable_declarators_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_declarators"
    // CSharpAngular.g:2699:1: variable_declarators : fstDec= variable_declarator (lst+= variable_declarators_Chld )* -> variableDeclarators(firstDecl=fstDeclist=$lst);
    public final CSharpAngular.variable_declarators_return variable_declarators() throws RecognitionException {
        CSharpAngular.variable_declarators_return retval = new CSharpAngular.variable_declarators_return();
        retval.start = input.LT(1);


        List list_lst=null;
        CSharpAngular.variable_declarator_return fstDec =null;

        RuleReturnScope lst = null;
        try {
            // CSharpAngular.g:2700:2: (fstDec= variable_declarator (lst+= variable_declarators_Chld )* -> variableDeclarators(firstDecl=fstDeclist=$lst))
            // CSharpAngular.g:2701:2: fstDec= variable_declarator (lst+= variable_declarators_Chld )*
            {
            pushFollow(FOLLOW_variable_declarator_in_variable_declarators18469);
            fstDec=variable_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2701:29: (lst+= variable_declarators_Chld )*
            loop246:
            do {
                int alt246=2;
                int LA246_0 = input.LA(1);

                if ( (LA246_0==COMMA) ) {
                    alt246=1;
                }


                switch (alt246) {
            	case 1 :
            	    // CSharpAngular.g:2701:32: lst+= variable_declarators_Chld
            	    {
            	    pushFollow(FOLLOW_variable_declarators_Chld_in_variable_declarators18476);
            	    lst=variable_declarators_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop246;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2702:2: -> variableDeclarators(firstDecl=fstDeclist=$lst)
              {
                  retval.st = templateLib.getInstanceOf("variableDeclarators",new STAttrMap().put("firstDecl", fstDec).put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_declarators"


    public static class variable_declarators_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_declarators_Chld"
    // CSharpAngular.g:2705:1: variable_declarators_Chld : COMMA vd= variable_declarator -> variableDeclaratorsChld(decl=vd);
    public final CSharpAngular.variable_declarators_Chld_return variable_declarators_Chld() throws RecognitionException {
        CSharpAngular.variable_declarators_Chld_return retval = new CSharpAngular.variable_declarators_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.variable_declarator_return vd =null;


        try {
            // CSharpAngular.g:2706:3: ( COMMA vd= variable_declarator -> variableDeclaratorsChld(decl=vd))
            // CSharpAngular.g:2707:3: COMMA vd= variable_declarator
            {
            match(input,COMMA,FOLLOW_COMMA_in_variable_declarators_Chld18505); if (state.failed) return retval;

            pushFollow(FOLLOW_variable_declarator_in_variable_declarators_Chld18510);
            vd=variable_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2708:3: -> variableDeclaratorsChld(decl=vd)
              {
                  retval.st = templateLib.getInstanceOf("variableDeclaratorsChld",new STAttrMap().put("decl", vd));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_declarators_Chld"


    public static class variable_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_declarator"
    // CSharpAngular.g:2711:1: variable_declarator : ( IDENTIFIER -> variableDeclarator(value=NamingUtil.toCamelCase($IDENTIFIER.text))| IDENTIFIER ASSIGNMENT rside= variable_initializer -> variableDeclarator2(lhs=NamingUtil.toCamelCase($IDENTIFIER.text)rhs=rside));
    public final CSharpAngular.variable_declarator_return variable_declarator() throws RecognitionException {
        CSharpAngular.variable_declarator_return retval = new CSharpAngular.variable_declarator_return();
        retval.start = input.LT(1);


        Token IDENTIFIER181=null;
        Token IDENTIFIER182=null;
        CSharpAngular.variable_initializer_return rside =null;


        try {
            // CSharpAngular.g:2712:2: ( IDENTIFIER -> variableDeclarator(value=NamingUtil.toCamelCase($IDENTIFIER.text))| IDENTIFIER ASSIGNMENT rside= variable_initializer -> variableDeclarator2(lhs=NamingUtil.toCamelCase($IDENTIFIER.text)rhs=rside))
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==IDENTIFIER) ) {
                int LA247_1 = input.LA(2);

                if ( (LA247_1==ASSIGNMENT) ) {
                    alt247=2;
                }
                else if ( (LA247_1==COMMA||LA247_1==SEMICOLON) ) {
                    alt247=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 247, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 247, 0, input);

                throw nvae;

            }
            switch (alt247) {
                case 1 :
                    // CSharpAngular.g:2713:2: IDENTIFIER
                    {
                    IDENTIFIER181=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_variable_declarator18536); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2714:2: -> variableDeclarator(value=NamingUtil.toCamelCase($IDENTIFIER.text))
                      {
                          retval.st = templateLib.getInstanceOf("variableDeclarator",new STAttrMap().put("value", NamingUtil.toCamelCase((IDENTIFIER181!=null?IDENTIFIER181.getText():null))));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2715:4: IDENTIFIER ASSIGNMENT rside= variable_initializer
                    {
                    IDENTIFIER182=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_variable_declarator18550); if (state.failed) return retval;

                    match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_variable_declarator18552); if (state.failed) return retval;

                    pushFollow(FOLLOW_variable_initializer_in_variable_declarator18556);
                    rside=variable_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2716:2: -> variableDeclarator2(lhs=NamingUtil.toCamelCase($IDENTIFIER.text)rhs=rside)
                      {
                          retval.st = templateLib.getInstanceOf("variableDeclarator2",new STAttrMap().put("lhs", NamingUtil.toCamelCase((IDENTIFIER182!=null?IDENTIFIER182.getText():null))).put("rhs", rside));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_declarator"


    public static class variable_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_initializer"
    // CSharpAngular.g:2718:1: variable_initializer : (vi1= expression -> variableInitializer(init=$vi1.text)|vi2= array_initializer -> variableInitializer(init=vi2));
    public final CSharpAngular.variable_initializer_return variable_initializer() throws RecognitionException {
        CSharpAngular.variable_initializer_return retval = new CSharpAngular.variable_initializer_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_return vi1 =null;

        CSharpAngular.array_initializer_return vi2 =null;


        try {
            // CSharpAngular.g:2719:2: (vi1= expression -> variableInitializer(init=$vi1.text)|vi2= array_initializer -> variableInitializer(init=vi2))
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==AMP||(LA248_0 >= BANG && LA248_0 <= BASE)||LA248_0==BOOL||LA248_0==BYTE||(LA248_0 >= CHAR && LA248_0 <= CHECKED)||LA248_0==DECIMAL||(LA248_0 >= DEFAULT && LA248_0 <= DELEGATE)||LA248_0==DOUBLE||LA248_0==FALSE||LA248_0==FLOAT||LA248_0==IDENTIFIER||(LA248_0 >= INT && LA248_0 <= INTEGER_LITERAL)||LA248_0==LONG||LA248_0==MINUS||LA248_0==NEW||LA248_0==NULL||LA248_0==OBJECT||LA248_0==OPEN_PARENS||LA248_0==OP_DEC||LA248_0==OP_INC||LA248_0==PLUS||LA248_0==REAL_LITERAL||LA248_0==SBYTE||LA248_0==SHORT||LA248_0==SIZEOF||LA248_0==STAR||(LA248_0 >= STRING && LA248_0 <= STRING_LITERAL)||LA248_0==THIS||(LA248_0 >= TILDE && LA248_0 <= TRUE)||LA248_0==TYPEOF||(LA248_0 >= UINT && LA248_0 <= UNCHECKED)||LA248_0==USHORT) ) {
                alt248=1;
            }
            else if ( (LA248_0==OPEN_BRACE) ) {
                alt248=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 248, 0, input);

                throw nvae;

            }
            switch (alt248) {
                case 1 :
                    // CSharpAngular.g:2720:2: vi1= expression
                    {
                    pushFollow(FOLLOW_expression_in_variable_initializer18584);
                    vi1=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2721:2: -> variableInitializer(init=$vi1.text)
                      {
                          retval.st = templateLib.getInstanceOf("variableInitializer",new STAttrMap().put("init", (vi1!=null?input.toString(vi1.start,vi1.stop):null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2722:4: vi2= array_initializer
                    {
                    pushFollow(FOLLOW_array_initializer_in_variable_initializer18600);
                    vi2=array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2723:2: -> variableInitializer(init=vi2)
                      {
                          retval.st = templateLib.getInstanceOf("variableInitializer",new STAttrMap().put("init", vi2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_initializer"


    public static class method_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_declaration"
    // CSharpAngular.g:2725:1: method_declaration : method_header method_body ;
    public final CSharpAngular.method_declaration_return method_declaration() throws RecognitionException {
        CSharpAngular.method_declaration_return retval = new CSharpAngular.method_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2726:2: ( method_header method_body )
            // CSharpAngular.g:2726:4: method_header method_body
            {
            pushFollow(FOLLOW_method_header_in_method_declaration18620);
            method_header();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_method_body_in_method_declaration18622);
            method_body();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration"


    public static class method_header_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_header"
    // CSharpAngular.g:2728:1: method_header : ( attributes )? ( method_modifiers )? ( partial_contextual_keyword )? return_type member_name ( type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? ;
    public final CSharpAngular.method_header_return method_header() throws RecognitionException {
        CSharpAngular.method_header_return retval = new CSharpAngular.method_header_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2729:2: ( ( attributes )? ( method_modifiers )? ( partial_contextual_keyword )? return_type member_name ( type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? )
            // CSharpAngular.g:2729:4: ( attributes )? ( method_modifiers )? ( partial_contextual_keyword )? return_type member_name ( type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )?
            {
            // CSharpAngular.g:2729:4: ( attributes )?
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==OPEN_BRACKET) ) {
                alt249=1;
            }
            switch (alt249) {
                case 1 :
                    // CSharpAngular.g:2729:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_method_header18633);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2729:16: ( method_modifiers )?
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( (LA250_0==ABSTRACT||LA250_0==EXTERN||LA250_0==INTERNAL||LA250_0==NEW||LA250_0==OVERRIDE||(LA250_0 >= PRIVATE && LA250_0 <= PUBLIC)||LA250_0==SEALED||LA250_0==STATIC||LA250_0==UNSAFE||LA250_0==VIRTUAL) ) {
                alt250=1;
            }
            switch (alt250) {
                case 1 :
                    // CSharpAngular.g:2729:16: method_modifiers
                    {
                    pushFollow(FOLLOW_method_modifiers_in_method_header18636);
                    method_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2729:34: ( partial_contextual_keyword )?
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==IDENTIFIER) ) {
                int LA251_1 = input.LA(2);

                if ( ((input.LT(1).getText().equals("partial"))) ) {
                    alt251=1;
                }
            }
            switch (alt251) {
                case 1 :
                    // CSharpAngular.g:2729:34: partial_contextual_keyword
                    {
                    pushFollow(FOLLOW_partial_contextual_keyword_in_method_header18639);
                    partial_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_return_type_in_method_header18642);
            return_type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_member_name_in_method_header18644);
            member_name();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2729:86: ( type_parameter_list )?
            int alt252=2;
            int LA252_0 = input.LA(1);

            if ( (LA252_0==LT) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    // CSharpAngular.g:2729:86: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_method_header18646);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_method_header18649); if (state.failed) return retval;

            // CSharpAngular.g:2729:119: ( formal_parameter_list )?
            int alt253=2;
            int LA253_0 = input.LA(1);

            if ( (LA253_0==BOOL||LA253_0==BYTE||LA253_0==CHAR||LA253_0==DECIMAL||LA253_0==DOUBLE||LA253_0==FLOAT||LA253_0==IDENTIFIER||LA253_0==INT||LA253_0==LONG||LA253_0==OBJECT||LA253_0==OPEN_BRACKET||LA253_0==OUT||LA253_0==PARAMS||LA253_0==REF||LA253_0==SBYTE||LA253_0==SHORT||LA253_0==STRING||LA253_0==THIS||(LA253_0 >= UINT && LA253_0 <= ULONG)||LA253_0==USHORT||LA253_0==VOID) ) {
                alt253=1;
            }
            switch (alt253) {
                case 1 :
                    // CSharpAngular.g:2729:119: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_method_header18651);
                    formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_method_header18654); if (state.failed) return retval;

            // CSharpAngular.g:2729:155: ( type_parameter_constraints_clauses )?
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==IDENTIFIER) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    // CSharpAngular.g:2729:155: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_method_header18656);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header"


    public static class method_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_modifiers"
    // CSharpAngular.g:2731:1: method_modifiers : ( method_modifier )+ ;
    public final CSharpAngular.method_modifiers_return method_modifiers() throws RecognitionException {
        CSharpAngular.method_modifiers_return retval = new CSharpAngular.method_modifiers_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2732:2: ( ( method_modifier )+ )
            // CSharpAngular.g:2732:4: ( method_modifier )+
            {
            // CSharpAngular.g:2732:4: ( method_modifier )+
            int cnt255=0;
            loop255:
            do {
                int alt255=2;
                int LA255_0 = input.LA(1);

                if ( (LA255_0==ABSTRACT||LA255_0==EXTERN||LA255_0==INTERNAL||LA255_0==NEW||LA255_0==OVERRIDE||(LA255_0 >= PRIVATE && LA255_0 <= PUBLIC)||LA255_0==SEALED||LA255_0==STATIC||LA255_0==UNSAFE||LA255_0==VIRTUAL) ) {
                    alt255=1;
                }


                switch (alt255) {
            	case 1 :
            	    // CSharpAngular.g:2732:4: method_modifier
            	    {
            	    pushFollow(FOLLOW_method_modifier_in_method_modifiers18668);
            	    method_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt255 >= 1 ) break loop255;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(255, input);
                        throw eee;
                }
                cnt255++;
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifiers"


    public static class method_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_modifier"
    // CSharpAngular.g:2734:1: method_modifier : ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE | STATIC | VIRTUAL | SEALED | OVERRIDE | ABSTRACT | EXTERN | method_modifier_unsafe );
    public final CSharpAngular.method_modifier_return method_modifier() throws RecognitionException {
        CSharpAngular.method_modifier_return retval = new CSharpAngular.method_modifier_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2735:2: ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE | STATIC | VIRTUAL | SEALED | OVERRIDE | ABSTRACT | EXTERN | method_modifier_unsafe )
            int alt256=12;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt256=1;
                }
                break;
            case PUBLIC:
                {
                alt256=2;
                }
                break;
            case PROTECTED:
                {
                alt256=3;
                }
                break;
            case INTERNAL:
                {
                alt256=4;
                }
                break;
            case PRIVATE:
                {
                alt256=5;
                }
                break;
            case STATIC:
                {
                alt256=6;
                }
                break;
            case VIRTUAL:
                {
                alt256=7;
                }
                break;
            case SEALED:
                {
                alt256=8;
                }
                break;
            case OVERRIDE:
                {
                alt256=9;
                }
                break;
            case ABSTRACT:
                {
                alt256=10;
                }
                break;
            case EXTERN:
                {
                alt256=11;
                }
                break;
            case UNSAFE:
                {
                alt256=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 256, 0, input);

                throw nvae;

            }

            switch (alt256) {
                case 1 :
                    // CSharpAngular.g:2735:4: NEW
                    {
                    match(input,NEW,FOLLOW_NEW_in_method_modifier18680); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2736:4: PUBLIC
                    {
                    match(input,PUBLIC,FOLLOW_PUBLIC_in_method_modifier18685); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:2737:4: PROTECTED
                    {
                    match(input,PROTECTED,FOLLOW_PROTECTED_in_method_modifier18690); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:2738:4: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_method_modifier18695); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:2739:4: PRIVATE
                    {
                    match(input,PRIVATE,FOLLOW_PRIVATE_in_method_modifier18700); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:2740:4: STATIC
                    {
                    match(input,STATIC,FOLLOW_STATIC_in_method_modifier18705); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:2741:4: VIRTUAL
                    {
                    match(input,VIRTUAL,FOLLOW_VIRTUAL_in_method_modifier18710); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:2742:4: SEALED
                    {
                    match(input,SEALED,FOLLOW_SEALED_in_method_modifier18715); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:2743:4: OVERRIDE
                    {
                    match(input,OVERRIDE,FOLLOW_OVERRIDE_in_method_modifier18720); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:2744:4: ABSTRACT
                    {
                    match(input,ABSTRACT,FOLLOW_ABSTRACT_in_method_modifier18725); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:2745:4: EXTERN
                    {
                    match(input,EXTERN,FOLLOW_EXTERN_in_method_modifier18730); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // CSharpAngular.g:2746:4: method_modifier_unsafe
                    {
                    pushFollow(FOLLOW_method_modifier_unsafe_in_method_modifier18735);
                    method_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class return_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "return_type"
    // CSharpAngular.g:2749:1: return_type : ( type | VOID );
    public final CSharpAngular.return_type_return return_type() throws RecognitionException {
        CSharpAngular.return_type_return retval = new CSharpAngular.return_type_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2750:2: ( type | VOID )
            int alt257=2;
            int LA257_0 = input.LA(1);

            if ( (LA257_0==BOOL||LA257_0==BYTE||LA257_0==CHAR||LA257_0==DECIMAL||LA257_0==DOUBLE||LA257_0==FLOAT||LA257_0==IDENTIFIER||LA257_0==INT||LA257_0==LONG||LA257_0==OBJECT||LA257_0==SBYTE||LA257_0==SHORT||LA257_0==STRING||(LA257_0 >= UINT && LA257_0 <= ULONG)||LA257_0==USHORT) ) {
                alt257=1;
            }
            else if ( (LA257_0==VOID) ) {
                int LA257_2 = input.LA(2);

                if ( (LA257_2==STAR) ) {
                    alt257=1;
                }
                else if ( (LA257_2==IDENTIFIER) ) {
                    alt257=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);

                throw nvae;

            }
            switch (alt257) {
                case 1 :
                    // CSharpAngular.g:2750:4: type
                    {
                    pushFollow(FOLLOW_type_in_return_type18748);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2751:4: VOID
                    {
                    match(input,VOID,FOLLOW_VOID_in_return_type18753); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_type"


    public static class member_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_name"
    // CSharpAngular.g:2760:1: member_name : intFTyp= interface_type -> memberName(type=intFTyp);
    public final CSharpAngular.member_name_return member_name() throws RecognitionException {
        CSharpAngular.member_name_return retval = new CSharpAngular.member_name_return();
        retval.start = input.LT(1);


        CSharpAngular.interface_type_return intFTyp =null;


        try {
            // CSharpAngular.g:2761:3: (intFTyp= interface_type -> memberName(type=intFTyp))
            // CSharpAngular.g:2762:3: intFTyp= interface_type
            {
            pushFollow(FOLLOW_interface_type_in_member_name18774);
            intFTyp=interface_type();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2763:3: -> memberName(type=intFTyp)
              {
                  retval.st = templateLib.getInstanceOf("memberName",new STAttrMap().put("type", intFTyp));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_name"


    public static class method_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_body"
    // CSharpAngular.g:2765:1: method_body : (blk= block -> methodBody(body=blk)|scln= SEMICOLON (comts2= comments )? -> methodBody(body=$scln.textcomments=comts2));
    public final CSharpAngular.method_body_return method_body() throws RecognitionException {
        CSharpAngular.method_body_return retval = new CSharpAngular.method_body_return();
        retval.start = input.LT(1);


        Token scln=null;
        CSharpAngular.block_return blk =null;

        CSharpAngular.comments_return comts2 =null;


        try {
            // CSharpAngular.g:2766:2: (blk= block -> methodBody(body=blk)|scln= SEMICOLON (comts2= comments )? -> methodBody(body=$scln.textcomments=comts2))
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==OPEN_BRACE) ) {
                alt259=1;
            }
            else if ( (LA259_0==SEMICOLON) ) {
                alt259=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);

                throw nvae;

            }
            switch (alt259) {
                case 1 :
                    // CSharpAngular.g:2767:2: blk= block
                    {
                    pushFollow(FOLLOW_block_in_method_body18800);
                    blk=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2768:2: -> methodBody(body=blk)
                      {
                          retval.st = templateLib.getInstanceOf("methodBody",new STAttrMap().put("body", blk));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2769:4: scln= SEMICOLON (comts2= comments )?
                    {
                    scln=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_method_body18817); if (state.failed) return retval;

                    // CSharpAngular.g:2769:19: (comts2= comments )?
                    int alt258=2;
                    int LA258_0 = input.LA(1);

                    if ( (LA258_0==SINGLE_LINE_COMMENT) ) {
                        alt258=1;
                    }
                    else if ( (LA258_0==SINGLE_LINE_DOC_COMMENT) ) {
                        alt258=1;
                    }
                    switch (alt258) {
                        case 1 :
                            // CSharpAngular.g:2769:20: comts2= comments
                            {
                            pushFollow(FOLLOW_comments_in_method_body18822);
                            comts2=comments();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2770:2: -> methodBody(body=$scln.textcomments=comts2)
                      {
                          retval.st = templateLib.getInstanceOf("methodBody",new STAttrMap().put("body", (scln!=null?scln.getText():null)).put("comments", comts2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_body"


    public static class formal_parameter_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "formal_parameter_list"
    // CSharpAngular.g:2779:1: formal_parameter_list : ( ( ( attributes )? PARAMS )=>parArr= parameter_array -> formalParameterList(fixedParams=nulllist=parArr)|fp= fixed_parameters (list= formal_parameter_list_Chld )? -> formalParameterList(fixedParams=fplist=parArr));
    public final CSharpAngular.formal_parameter_list_return formal_parameter_list() throws RecognitionException {
        CSharpAngular.formal_parameter_list_return retval = new CSharpAngular.formal_parameter_list_return();
        retval.start = input.LT(1);


        CSharpAngular.parameter_array_return parArr =null;

        CSharpAngular.fixed_parameters_return fp =null;

        CSharpAngular.formal_parameter_list_Chld_return list =null;


        try {
            // CSharpAngular.g:2780:3: ( ( ( attributes )? PARAMS )=>parArr= parameter_array -> formalParameterList(fixedParams=nulllist=parArr)|fp= fixed_parameters (list= formal_parameter_list_Chld )? -> formalParameterList(fixedParams=fplist=parArr))
            int alt261=2;
            switch ( input.LA(1) ) {
            case OPEN_BRACKET:
                {
                int LA261_1 = input.LA(2);

                if ( (synpred77_CSharpAngular()) ) {
                    alt261=1;
                }
                else if ( (true) ) {
                    alt261=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 1, input);

                    throw nvae;

                }
                }
                break;
            case PARAMS:
                {
                int LA261_2 = input.LA(2);

                if ( (synpred77_CSharpAngular()) ) {
                    alt261=1;
                }
                else if ( (true) ) {
                    alt261=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 2, input);

                    throw nvae;

                }
                }
                break;
            case BOOL:
            case BYTE:
            case CHAR:
            case DECIMAL:
            case DOUBLE:
            case FLOAT:
            case IDENTIFIER:
            case INT:
            case LONG:
            case OBJECT:
            case OUT:
            case REF:
            case SBYTE:
            case SHORT:
            case STRING:
            case THIS:
            case UINT:
            case ULONG:
            case USHORT:
            case VOID:
                {
                alt261=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);

                throw nvae;

            }

            switch (alt261) {
                case 1 :
                    // CSharpAngular.g:2781:3: ( ( attributes )? PARAMS )=>parArr= parameter_array
                    {
                    pushFollow(FOLLOW_parameter_array_in_formal_parameter_list18865);
                    parArr=parameter_array();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2782:3: -> formalParameterList(fixedParams=nulllist=parArr)
                      {
                          retval.st = templateLib.getInstanceOf("formalParameterList",new STAttrMap().put("fixedParams", null).put("list", parArr));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2783:5: fp= fixed_parameters (list= formal_parameter_list_Chld )?
                    {
                    pushFollow(FOLLOW_fixed_parameters_in_formal_parameter_list18887);
                    fp=fixed_parameters();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharpAngular.g:2783:25: (list= formal_parameter_list_Chld )?
                    int alt260=2;
                    int LA260_0 = input.LA(1);

                    if ( (LA260_0==COMMA) ) {
                        alt260=1;
                    }
                    switch (alt260) {
                        case 1 :
                            // CSharpAngular.g:2783:27: list= formal_parameter_list_Chld
                            {
                            pushFollow(FOLLOW_formal_parameter_list_Chld_in_formal_parameter_list18893);
                            list=formal_parameter_list_Chld();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2784:3: -> formalParameterList(fixedParams=fplist=parArr)
                      {
                          retval.st = templateLib.getInstanceOf("formalParameterList",new STAttrMap().put("fixedParams", fp).put("list", parArr));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "formal_parameter_list"


    public static class formal_parameter_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "formal_parameter_list_Chld"
    // CSharpAngular.g:2787:1: formal_parameter_list_Chld : ( COMMA parameter_array )=> COMMA arr= parameter_array -> formalParameterListChld(params=arr);
    public final CSharpAngular.formal_parameter_list_Chld_return formal_parameter_list_Chld() throws RecognitionException {
        CSharpAngular.formal_parameter_list_Chld_return retval = new CSharpAngular.formal_parameter_list_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.parameter_array_return arr =null;


        try {
            // CSharpAngular.g:2788:3: ( ( COMMA parameter_array )=> COMMA arr= parameter_array -> formalParameterListChld(params=arr))
            // CSharpAngular.g:2789:3: ( COMMA parameter_array )=> COMMA arr= parameter_array
            {
            match(input,COMMA,FOLLOW_COMMA_in_formal_parameter_list_Chld18934); if (state.failed) return retval;

            pushFollow(FOLLOW_parameter_array_in_formal_parameter_list_Chld18938);
            arr=parameter_array();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2790:3: -> formalParameterListChld(params=arr)
              {
                  retval.st = templateLib.getInstanceOf("formalParameterListChld",new STAttrMap().put("params", arr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "formal_parameter_list_Chld"


    public static class fixed_parameters_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_parameters"
    // CSharpAngular.g:2792:1: fixed_parameters : fp= fixed_parameter (fpLst+= fixed_parameters_Chld )* -> fixedParameters(firstParam=fplist=$fpLst);
    public final CSharpAngular.fixed_parameters_return fixed_parameters() throws RecognitionException {
        CSharpAngular.fixed_parameters_return retval = new CSharpAngular.fixed_parameters_return();
        retval.start = input.LT(1);


        List list_fpLst=null;
        CSharpAngular.fixed_parameter_return fp =null;

        RuleReturnScope fpLst = null;
        try {
            // CSharpAngular.g:2793:2: (fp= fixed_parameter (fpLst+= fixed_parameters_Chld )* -> fixedParameters(firstParam=fplist=$fpLst))
            // CSharpAngular.g:2794:2: fp= fixed_parameter (fpLst+= fixed_parameters_Chld )*
            {
            pushFollow(FOLLOW_fixed_parameter_in_fixed_parameters18964);
            fp=fixed_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2794:21: (fpLst+= fixed_parameters_Chld )*
            loop262:
            do {
                int alt262=2;
                int LA262_0 = input.LA(1);

                if ( (LA262_0==COMMA) ) {
                    alt262=1;
                }


                switch (alt262) {
            	case 1 :
            	    // CSharpAngular.g:2794:23: fpLst+= fixed_parameters_Chld
            	    {
            	    pushFollow(FOLLOW_fixed_parameters_Chld_in_fixed_parameters18970);
            	    fpLst=fixed_parameters_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_fpLst==null) list_fpLst=new ArrayList();
            	    list_fpLst.add(fpLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop262;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2795:2: -> fixedParameters(firstParam=fplist=$fpLst)
              {
                  retval.st = templateLib.getInstanceOf("fixedParameters",new STAttrMap().put("firstParam", fp).put("list", list_fpLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_parameters"


    public static class fixed_parameters_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_parameters_Chld"
    // CSharpAngular.g:2798:1: fixed_parameters_Chld : ( COMMA fixed_parameter )=> COMMA fixParam= fixed_parameter -> fixedParametersChld(param=fixParam);
    public final CSharpAngular.fixed_parameters_Chld_return fixed_parameters_Chld() throws RecognitionException {
        CSharpAngular.fixed_parameters_Chld_return retval = new CSharpAngular.fixed_parameters_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.fixed_parameter_return fixParam =null;


        try {
            // CSharpAngular.g:2799:2: ( ( COMMA fixed_parameter )=> COMMA fixParam= fixed_parameter -> fixedParametersChld(param=fixParam))
            // CSharpAngular.g:2800:2: ( COMMA fixed_parameter )=> COMMA fixParam= fixed_parameter
            {
            match(input,COMMA,FOLLOW_COMMA_in_fixed_parameters_Chld19007); if (state.failed) return retval;

            pushFollow(FOLLOW_fixed_parameter_in_fixed_parameters_Chld19011);
            fixParam=fixed_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2801:2: -> fixedParametersChld(param=fixParam)
              {
                  retval.st = templateLib.getInstanceOf("fixedParametersChld",new STAttrMap().put("param", fixParam));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_parameters_Chld"


    public static class fixed_parameter_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_parameter"
    // CSharpAngular.g:2809:1: fixed_parameter : ( (at= attributes )? (parModf= parameter_modifier )? fixed= fixed_parameter_child (defArg= default_argument )? -> fixedParameter(attributes=atparamModifier=parModffixedparam=fixeddefaultArgs=defArg)|arLst= arglist -> fixedParameter2(argumentList=arLst));
    public final CSharpAngular.fixed_parameter_return fixed_parameter() throws RecognitionException {
        CSharpAngular.fixed_parameter_return retval = new CSharpAngular.fixed_parameter_return();
        retval.start = input.LT(1);


        CSharpAngular.attributes_return at =null;

        CSharpAngular.parameter_modifier_return parModf =null;

        CSharpAngular.fixed_parameter_child_return fixed =null;

        CSharpAngular.default_argument_return defArg =null;

        CSharpAngular.arglist_return arLst =null;


        try {
            // CSharpAngular.g:2810:3: ( (at= attributes )? (parModf= parameter_modifier )? fixed= fixed_parameter_child (defArg= default_argument )? -> fixedParameter(attributes=atparamModifier=parModffixedparam=fixeddefaultArgs=defArg)|arLst= arglist -> fixedParameter2(argumentList=arLst))
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==BOOL||LA266_0==BYTE||LA266_0==CHAR||LA266_0==DECIMAL||LA266_0==DOUBLE||LA266_0==FLOAT||LA266_0==INT||LA266_0==LONG||LA266_0==OBJECT||LA266_0==OPEN_BRACKET||LA266_0==OUT||LA266_0==PARAMS||LA266_0==REF||LA266_0==SBYTE||LA266_0==SHORT||LA266_0==STRING||LA266_0==THIS||(LA266_0 >= UINT && LA266_0 <= ULONG)||LA266_0==USHORT||LA266_0==VOID) ) {
                alt266=1;
            }
            else if ( (LA266_0==IDENTIFIER) ) {
                int LA266_2 = input.LA(2);

                if ( (LA266_2==DOT||LA266_2==DOUBLE_COLON||LA266_2==IDENTIFIER||LA266_2==INTERR||LA266_2==LT||LA266_2==OPEN_BRACKET||LA266_2==STAR) ) {
                    alt266=1;
                }
                else if ( (LA266_2==EOF||(LA266_2 >= CLOSE_BRACKET && LA266_2 <= CLOSE_PARENS)||LA266_2==COMMA) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);

                throw nvae;

            }
            switch (alt266) {
                case 1 :
                    // CSharpAngular.g:2811:3: (at= attributes )? (parModf= parameter_modifier )? fixed= fixed_parameter_child (defArg= default_argument )?
                    {
                    // CSharpAngular.g:2811:3: (at= attributes )?
                    int alt263=2;
                    int LA263_0 = input.LA(1);

                    if ( (LA263_0==OPEN_BRACKET) ) {
                        alt263=1;
                    }
                    switch (alt263) {
                        case 1 :
                            // CSharpAngular.g:2811:4: at= attributes
                            {
                            pushFollow(FOLLOW_attributes_in_fixed_parameter19040);
                            at=attributes();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharpAngular.g:2811:20: (parModf= parameter_modifier )?
                    int alt264=2;
                    int LA264_0 = input.LA(1);

                    if ( (LA264_0==OUT||LA264_0==REF||LA264_0==THIS) ) {
                        alt264=1;
                    }
                    switch (alt264) {
                        case 1 :
                            // CSharpAngular.g:2811:21: parModf= parameter_modifier
                            {
                            pushFollow(FOLLOW_parameter_modifier_in_fixed_parameter19047);
                            parModf=parameter_modifier();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_fixed_parameter_child_in_fixed_parameter19054);
                    fixed=fixed_parameter_child();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharpAngular.g:2811:79: (defArg= default_argument )?
                    int alt265=2;
                    int LA265_0 = input.LA(1);

                    if ( (LA265_0==ASSIGNMENT) ) {
                        alt265=1;
                    }
                    switch (alt265) {
                        case 1 :
                            // CSharpAngular.g:2811:80: defArg= default_argument
                            {
                            pushFollow(FOLLOW_default_argument_in_fixed_parameter19059);
                            defArg=default_argument();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2812:3: -> fixedParameter(attributes=atparamModifier=parModffixedparam=fixeddefaultArgs=defArg)
                      {
                          retval.st = templateLib.getInstanceOf("fixedParameter",new STAttrMap().put("attributes", at).put("paramModifier", parModf).put("fixedparam", fixed).put("defaultArgs", defArg));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2813:5: arLst= arglist
                    {
                    pushFollow(FOLLOW_arglist_in_fixed_parameter19091);
                    arLst=arglist();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2814:3: -> fixedParameter2(argumentList=arLst)
                      {
                          retval.st = templateLib.getInstanceOf("fixedParameter2",new STAttrMap().put("argumentList", arLst));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_parameter"


    public static class fixed_parameter_child_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_parameter_child"
    // CSharpAngular.g:2817:1: fixed_parameter_child : (par= parameter_array -> fixedparameterchild(pararray=par)|t= type parNam= IDENTIFIER -> fixedparameterchild1(dataType=tparamName=NamingUtil.toCamelCase($parNam.text)));
    public final CSharpAngular.fixed_parameter_child_return fixed_parameter_child() throws RecognitionException {
        CSharpAngular.fixed_parameter_child_return retval = new CSharpAngular.fixed_parameter_child_return();
        retval.start = input.LT(1);


        Token parNam=null;
        CSharpAngular.parameter_array_return par =null;

        CSharpAngular.type_return t =null;


        try {
            // CSharpAngular.g:2818:3: (par= parameter_array -> fixedparameterchild(pararray=par)|t= type parNam= IDENTIFIER -> fixedparameterchild1(dataType=tparamName=NamingUtil.toCamelCase($parNam.text)))
            int alt267=2;
            int LA267_0 = input.LA(1);

            if ( (LA267_0==OPEN_BRACKET||LA267_0==PARAMS) ) {
                alt267=1;
            }
            else if ( (LA267_0==BOOL||LA267_0==BYTE||LA267_0==CHAR||LA267_0==DECIMAL||LA267_0==DOUBLE||LA267_0==FLOAT||LA267_0==IDENTIFIER||LA267_0==INT||LA267_0==LONG||LA267_0==OBJECT||LA267_0==SBYTE||LA267_0==SHORT||LA267_0==STRING||(LA267_0 >= UINT && LA267_0 <= ULONG)||LA267_0==USHORT||LA267_0==VOID) ) {
                alt267=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);

                throw nvae;

            }
            switch (alt267) {
                case 1 :
                    // CSharpAngular.g:2819:3: par= parameter_array
                    {
                    pushFollow(FOLLOW_parameter_array_in_fixed_parameter_child19120);
                    par=parameter_array();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2820:3: -> fixedparameterchild(pararray=par)
                      {
                          retval.st = templateLib.getInstanceOf("fixedparameterchild",new STAttrMap().put("pararray", par));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2821:4: t= type parNam= IDENTIFIER
                    {
                    pushFollow(FOLLOW_type_in_fixed_parameter_child19138);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    parNam=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_fixed_parameter_child19142); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2822:3: -> fixedparameterchild1(dataType=tparamName=NamingUtil.toCamelCase($parNam.text))
                      {
                          retval.st = templateLib.getInstanceOf("fixedparameterchild1",new STAttrMap().put("dataType", t).put("paramName", NamingUtil.toCamelCase((parNam!=null?parNam.getText():null))));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_parameter_child"


    public static class default_argument_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "default_argument"
    // CSharpAngular.g:2825:1: default_argument : ASSIGNMENT expn= expression -> defaultargument(expns=expn);
    public final CSharpAngular.default_argument_return default_argument() throws RecognitionException {
        CSharpAngular.default_argument_return retval = new CSharpAngular.default_argument_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_return expn =null;


        try {
            // CSharpAngular.g:2826:2: ( ASSIGNMENT expn= expression -> defaultargument(expns=expn))
            // CSharpAngular.g:2827:2: ASSIGNMENT expn= expression
            {
            match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_default_argument19173); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_default_argument19177);
            expn=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2828:2: -> defaultargument(expns=expn)
              {
                  retval.st = templateLib.getInstanceOf("defaultargument",new STAttrMap().put("expns", expn));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_argument"


    public static class parameter_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "parameter_modifier"
    // CSharpAngular.g:2831:1: parameter_modifier : ( REF -> text(value=$REF.text)| OUT -> text(value=$OUT.text)| THIS -> text(value=$THIS.text));
    public final CSharpAngular.parameter_modifier_return parameter_modifier() throws RecognitionException {
        CSharpAngular.parameter_modifier_return retval = new CSharpAngular.parameter_modifier_return();
        retval.start = input.LT(1);


        Token REF183=null;
        Token OUT184=null;
        Token THIS185=null;

        try {
            // CSharpAngular.g:2832:2: ( REF -> text(value=$REF.text)| OUT -> text(value=$OUT.text)| THIS -> text(value=$THIS.text))
            int alt268=3;
            switch ( input.LA(1) ) {
            case REF:
                {
                alt268=1;
                }
                break;
            case OUT:
                {
                alt268=2;
                }
                break;
            case THIS:
                {
                alt268=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 268, 0, input);

                throw nvae;

            }

            switch (alt268) {
                case 1 :
                    // CSharpAngular.g:2833:2: REF
                    {
                    REF183=(Token)match(input,REF,FOLLOW_REF_in_parameter_modifier19201); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2833:15: -> text(value=$REF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (REF183!=null?REF183.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2834:4: OUT
                    {
                    OUT184=(Token)match(input,OUT,FOLLOW_OUT_in_parameter_modifier19223); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2834:15: -> text(value=$OUT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OUT184!=null?OUT184.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:2835:4: THIS
                    {
                    THIS185=(Token)match(input,THIS,FOLLOW_THIS_in_parameter_modifier19243); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2835:15: -> text(value=$THIS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (THIS185!=null?THIS185.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parameter_modifier"


    public static class parameter_array_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "parameter_array"
    // CSharpAngular.g:2837:1: parameter_array : (atrs= attributes )? par= PARAMS arr= array_type id= IDENTIFIER -> parameterArray(atbts=atrsparam=$par.texttype=arridName=NamingUtil.toCamelCase($id.text));
    public final CSharpAngular.parameter_array_return parameter_array() throws RecognitionException {
        CSharpAngular.parameter_array_return retval = new CSharpAngular.parameter_array_return();
        retval.start = input.LT(1);


        Token par=null;
        Token id=null;
        CSharpAngular.attributes_return atrs =null;

        CSharpAngular.array_type_return arr =null;


        try {
            // CSharpAngular.g:2838:2: ( (atrs= attributes )? par= PARAMS arr= array_type id= IDENTIFIER -> parameterArray(atbts=atrsparam=$par.texttype=arridName=NamingUtil.toCamelCase($id.text)))
            // CSharpAngular.g:2839:2: (atrs= attributes )? par= PARAMS arr= array_type id= IDENTIFIER
            {
            // CSharpAngular.g:2839:2: (atrs= attributes )?
            int alt269=2;
            int LA269_0 = input.LA(1);

            if ( (LA269_0==OPEN_BRACKET) ) {
                alt269=1;
            }
            switch (alt269) {
                case 1 :
                    // CSharpAngular.g:2839:3: atrs= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_parameter_array19273);
                    atrs=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            par=(Token)match(input,PARAMS,FOLLOW_PARAMS_in_parameter_array19279); if (state.failed) return retval;

            pushFollow(FOLLOW_array_type_in_parameter_array19283);
            arr=array_type();

            state._fsp--;
            if (state.failed) return retval;

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_parameter_array19287); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2840:2: -> parameterArray(atbts=atrsparam=$par.texttype=arridName=NamingUtil.toCamelCase($id.text))
              {
                  retval.st = templateLib.getInstanceOf("parameterArray",new STAttrMap().put("atbts", atrs).put("param", (par!=null?par.getText():null)).put("type", arr).put("idName", NamingUtil.toCamelCase((id!=null?id.getText():null))));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parameter_array"


    public static class property_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "property_declaration"
    // CSharpAngular.g:2842:1: property_declaration : (attr= attributes )? (modfs= property_modifiers )? t= type mname= member_name OPEN_BRACE acDecls= accessor_declarations CLOSE_BRACE -> propertyDeclaration(attributes=attrpropModfs=modfstyp=tmemName=mnameaccessDecls=acDecls);
    public final CSharpAngular.property_declaration_return property_declaration() throws RecognitionException {
        CSharpAngular.property_declaration_return retval = new CSharpAngular.property_declaration_return();
        retval.start = input.LT(1);


        CSharpAngular.attributes_return attr =null;

        CSharpAngular.property_modifiers_return modfs =null;

        CSharpAngular.type_return t =null;

        CSharpAngular.member_name_return mname =null;

        CSharpAngular.accessor_declarations_return acDecls =null;


        try {
            // CSharpAngular.g:2843:2: ( (attr= attributes )? (modfs= property_modifiers )? t= type mname= member_name OPEN_BRACE acDecls= accessor_declarations CLOSE_BRACE -> propertyDeclaration(attributes=attrpropModfs=modfstyp=tmemName=mnameaccessDecls=acDecls))
            // CSharpAngular.g:2844:2: (attr= attributes )? (modfs= property_modifiers )? t= type mname= member_name OPEN_BRACE acDecls= accessor_declarations CLOSE_BRACE
            {
            // CSharpAngular.g:2844:2: (attr= attributes )?
            int alt270=2;
            int LA270_0 = input.LA(1);

            if ( (LA270_0==OPEN_BRACKET) ) {
                alt270=1;
            }
            switch (alt270) {
                case 1 :
                    // CSharpAngular.g:2844:3: attr= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_property_declaration19324);
                    attr=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2844:21: (modfs= property_modifiers )?
            int alt271=2;
            int LA271_0 = input.LA(1);

            if ( (LA271_0==ABSTRACT||LA271_0==EXTERN||LA271_0==INTERNAL||LA271_0==NEW||LA271_0==OVERRIDE||(LA271_0 >= PRIVATE && LA271_0 <= PUBLIC)||LA271_0==SEALED||LA271_0==STATIC||LA271_0==UNSAFE||LA271_0==VIRTUAL) ) {
                alt271=1;
            }
            switch (alt271) {
                case 1 :
                    // CSharpAngular.g:2844:22: modfs= property_modifiers
                    {
                    pushFollow(FOLLOW_property_modifiers_in_property_declaration19331);
                    modfs=property_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_in_property_declaration19337);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_member_name_in_property_declaration19341);
            mname=member_name();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_property_declaration19343); if (state.failed) return retval;

            pushFollow(FOLLOW_accessor_declarations_in_property_declaration19347);
            acDecls=accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_property_declaration19349); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2845:2: -> propertyDeclaration(attributes=attrpropModfs=modfstyp=tmemName=mnameaccessDecls=acDecls)
              {
                  retval.st = templateLib.getInstanceOf("propertyDeclaration",new STAttrMap().put("attributes", attr).put("propModfs", modfs).put("typ", t).put("memName", mname).put("accessDecls", acDecls));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_declaration"


    public static class property_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "property_modifiers"
    // CSharpAngular.g:2847:1: property_modifiers : (lst+= property_modifier )+ -> propertyModifiers(list=$lst);
    public final CSharpAngular.property_modifiers_return property_modifiers() throws RecognitionException {
        CSharpAngular.property_modifiers_return retval = new CSharpAngular.property_modifiers_return();
        retval.start = input.LT(1);


        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharpAngular.g:2848:2: ( (lst+= property_modifier )+ -> propertyModifiers(list=$lst))
            // CSharpAngular.g:2849:2: (lst+= property_modifier )+
            {
            // CSharpAngular.g:2849:2: (lst+= property_modifier )+
            int cnt272=0;
            loop272:
            do {
                int alt272=2;
                int LA272_0 = input.LA(1);

                if ( (LA272_0==ABSTRACT||LA272_0==EXTERN||LA272_0==INTERNAL||LA272_0==NEW||LA272_0==OVERRIDE||(LA272_0 >= PRIVATE && LA272_0 <= PUBLIC)||LA272_0==SEALED||LA272_0==STATIC||LA272_0==UNSAFE||LA272_0==VIRTUAL) ) {
                    alt272=1;
                }


                switch (alt272) {
            	case 1 :
            	    // CSharpAngular.g:2849:3: lst+= property_modifier
            	    {
            	    pushFollow(FOLLOW_property_modifier_in_property_modifiers19390);
            	    lst=property_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt272 >= 1 ) break loop272;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(272, input);
                        throw eee;
                }
                cnt272++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2850:2: -> propertyModifiers(list=$lst)
              {
                  retval.st = templateLib.getInstanceOf("propertyModifiers",new STAttrMap().put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_modifiers"


    public static class property_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "property_modifier"
    // CSharpAngular.g:2852:1: property_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)| STATIC -> text(value=$STATIC.text)| VIRTUAL -> text(value=$VIRTUAL.text)| SEALED -> text(value=$SEALED.text)| OVERRIDE -> text(value=$OVERRIDE.text)| ABSTRACT -> text(value=$ABSTRACT.text)| EXTERN -> text(value=$EXTERN.text)|pmod= property_modifier_unsafe -> text(value=pmod));
    public final CSharpAngular.property_modifier_return property_modifier() throws RecognitionException {
        CSharpAngular.property_modifier_return retval = new CSharpAngular.property_modifier_return();
        retval.start = input.LT(1);


        Token NEW186=null;
        Token PUBLIC187=null;
        Token PROTECTED188=null;
        Token INTERNAL189=null;
        Token PRIVATE190=null;
        Token STATIC191=null;
        Token VIRTUAL192=null;
        Token SEALED193=null;
        Token OVERRIDE194=null;
        Token ABSTRACT195=null;
        Token EXTERN196=null;
        CSharpAngular.property_modifier_unsafe_return pmod =null;


        try {
            // CSharpAngular.g:2853:2: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)| STATIC -> text(value=$STATIC.text)| VIRTUAL -> text(value=$VIRTUAL.text)| SEALED -> text(value=$SEALED.text)| OVERRIDE -> text(value=$OVERRIDE.text)| ABSTRACT -> text(value=$ABSTRACT.text)| EXTERN -> text(value=$EXTERN.text)|pmod= property_modifier_unsafe -> text(value=pmod))
            int alt273=12;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt273=1;
                }
                break;
            case PUBLIC:
                {
                alt273=2;
                }
                break;
            case PROTECTED:
                {
                alt273=3;
                }
                break;
            case INTERNAL:
                {
                alt273=4;
                }
                break;
            case PRIVATE:
                {
                alt273=5;
                }
                break;
            case STATIC:
                {
                alt273=6;
                }
                break;
            case VIRTUAL:
                {
                alt273=7;
                }
                break;
            case SEALED:
                {
                alt273=8;
                }
                break;
            case OVERRIDE:
                {
                alt273=9;
                }
                break;
            case ABSTRACT:
                {
                alt273=10;
                }
                break;
            case EXTERN:
                {
                alt273=11;
                }
                break;
            case UNSAFE:
                {
                alt273=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);

                throw nvae;

            }

            switch (alt273) {
                case 1 :
                    // CSharpAngular.g:2854:3: NEW
                    {
                    NEW186=(Token)match(input,NEW,FOLLOW_NEW_in_property_modifier19415); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2854:41: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW186!=null?NEW186.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2855:5: PUBLIC
                    {
                    PUBLIC187=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_property_modifier19463); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2855:41: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC187!=null?PUBLIC187.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:2856:5: PROTECTED
                    {
                    PROTECTED188=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_property_modifier19506); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2856:41: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED188!=null?PROTECTED188.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:2857:5: INTERNAL
                    {
                    INTERNAL189=(Token)match(input,INTERNAL,FOLLOW_INTERNAL_in_property_modifier19546); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2857:41: -> text(value=$INTERNAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERNAL189!=null?INTERNAL189.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:2858:5: PRIVATE
                    {
                    PRIVATE190=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_property_modifier19587); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2858:41: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE190!=null?PRIVATE190.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:2859:5: STATIC
                    {
                    STATIC191=(Token)match(input,STATIC,FOLLOW_STATIC_in_property_modifier19629); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2859:41: -> text(value=$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STATIC191!=null?STATIC191.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:2860:5: VIRTUAL
                    {
                    VIRTUAL192=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_property_modifier19672); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2860:41: -> text(value=$VIRTUAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VIRTUAL192!=null?VIRTUAL192.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:2861:5: SEALED
                    {
                    SEALED193=(Token)match(input,SEALED,FOLLOW_SEALED_in_property_modifier19714); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2861:41: -> text(value=$SEALED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEALED193!=null?SEALED193.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:2862:5: OVERRIDE
                    {
                    OVERRIDE194=(Token)match(input,OVERRIDE,FOLLOW_OVERRIDE_in_property_modifier19757); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2862:41: -> text(value=$OVERRIDE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OVERRIDE194!=null?OVERRIDE194.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:2863:5: ABSTRACT
                    {
                    ABSTRACT195=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_property_modifier19798); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2863:41: -> text(value=$ABSTRACT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ABSTRACT195!=null?ABSTRACT195.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:2864:5: EXTERN
                    {
                    EXTERN196=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_property_modifier19839); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2864:41: -> text(value=$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXTERN196!=null?EXTERN196.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharpAngular.g:2865:5: pmod= property_modifier_unsafe
                    {
                    pushFollow(FOLLOW_property_modifier_unsafe_in_property_modifier19884);
                    pmod=property_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2865:41: -> text(value=pmod)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", pmod));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_modifier"


    public static class accessor_declarations_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "accessor_declarations"
    // CSharpAngular.g:2873:1: accessor_declarations : ( (attrs1= attributes )? (mods1= accessor_modifier )? gck1= get_contextual_keyword aBdy1= accessor_body (sck1= set_accessor_declaration )? -> accessorDeclarations(attributes=attrs1acsModfs=mods1body=aBdy1ck1=gck1ck2=sck1)| (attrs2= attributes )? (mods2= accessor_modifier )? sck2= set_contextual_keyword aBdy2= accessor_body (gck2= get_accessor_declaration )? -> accessorDeclarations(attributes=attrs2acsModfs=mods2body=aBdy2ck1=sck2ck2=gck2));
    public final CSharpAngular.accessor_declarations_return accessor_declarations() throws RecognitionException {
        CSharpAngular.accessor_declarations_return retval = new CSharpAngular.accessor_declarations_return();
        retval.start = input.LT(1);


        CSharpAngular.attributes_return attrs1 =null;

        CSharpAngular.accessor_modifier_return mods1 =null;

        CSharpAngular.get_contextual_keyword_return gck1 =null;

        CSharpAngular.accessor_body_return aBdy1 =null;

        CSharpAngular.set_accessor_declaration_return sck1 =null;

        CSharpAngular.attributes_return attrs2 =null;

        CSharpAngular.accessor_modifier_return mods2 =null;

        CSharpAngular.set_contextual_keyword_return sck2 =null;

        CSharpAngular.accessor_body_return aBdy2 =null;

        CSharpAngular.get_accessor_declaration_return gck2 =null;


        try {
            // CSharpAngular.g:2874:3: ( (attrs1= attributes )? (mods1= accessor_modifier )? gck1= get_contextual_keyword aBdy1= accessor_body (sck1= set_accessor_declaration )? -> accessorDeclarations(attributes=attrs1acsModfs=mods1body=aBdy1ck1=gck1ck2=sck1)| (attrs2= attributes )? (mods2= accessor_modifier )? sck2= set_contextual_keyword aBdy2= accessor_body (gck2= get_accessor_declaration )? -> accessorDeclarations(attributes=attrs2acsModfs=mods2body=aBdy2ck1=sck2ck2=gck2))
            int alt280=2;
            switch ( input.LA(1) ) {
            case OPEN_BRACKET:
                {
                alt280=1;
                }
                break;
            case PROTECTED:
                {
                alt280=1;
                }
                break;
            case INTERNAL:
                {
                alt280=1;
                }
                break;
            case PRIVATE:
                {
                alt280=1;
                }
                break;
            case IDENTIFIER:
                {
                int LA280_5 = input.LA(2);

                if ( ((input.LT(1).getText().equals("get"))) ) {
                    alt280=1;
                }
                else if ( ((input.LT(1).getText().equals("set"))) ) {
                    alt280=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 280, 5, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 280, 0, input);

                throw nvae;

            }

            switch (alt280) {
                case 1 :
                    // CSharpAngular.g:2875:3: (attrs1= attributes )? (mods1= accessor_modifier )? gck1= get_contextual_keyword aBdy1= accessor_body (sck1= set_accessor_declaration )?
                    {
                    // CSharpAngular.g:2875:3: (attrs1= attributes )?
                    int alt274=2;
                    int LA274_0 = input.LA(1);

                    if ( (LA274_0==OPEN_BRACKET) ) {
                        alt274=1;
                    }
                    switch (alt274) {
                        case 1 :
                            // CSharpAngular.g:2875:4: attrs1= attributes
                            {
                            pushFollow(FOLLOW_attributes_in_accessor_declarations19918);
                            attrs1=attributes();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharpAngular.g:2875:24: (mods1= accessor_modifier )?
                    int alt275=2;
                    int LA275_0 = input.LA(1);

                    if ( (LA275_0==INTERNAL||(LA275_0 >= PRIVATE && LA275_0 <= PROTECTED)) ) {
                        alt275=1;
                    }
                    switch (alt275) {
                        case 1 :
                            // CSharpAngular.g:2875:25: mods1= accessor_modifier
                            {
                            pushFollow(FOLLOW_accessor_modifier_in_accessor_declarations19925);
                            mods1=accessor_modifier();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_get_contextual_keyword_in_accessor_declarations19932);
                    gck1=get_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_accessor_body_in_accessor_declarations19936);
                    aBdy1=accessor_body();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharpAngular.g:2875:100: (sck1= set_accessor_declaration )?
                    int alt276=2;
                    int LA276_0 = input.LA(1);

                    if ( (LA276_0==IDENTIFIER||LA276_0==INTERNAL||LA276_0==OPEN_BRACKET||(LA276_0 >= PRIVATE && LA276_0 <= PROTECTED)) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            // CSharpAngular.g:2875:101: sck1= set_accessor_declaration
                            {
                            pushFollow(FOLLOW_set_accessor_declaration_in_accessor_declarations19941);
                            sck1=set_accessor_declaration();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2876:3: -> accessorDeclarations(attributes=attrs1acsModfs=mods1body=aBdy1ck1=gck1ck2=sck1)
                      {
                          retval.st = templateLib.getInstanceOf("accessorDeclarations",new STAttrMap().put("attributes", attrs1).put("acsModfs", mods1).put("body", aBdy1).put("ck1", gck1).put("ck2", sck1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2877:4: (attrs2= attributes )? (mods2= accessor_modifier )? sck2= set_contextual_keyword aBdy2= accessor_body (gck2= get_accessor_declaration )?
                    {
                    // CSharpAngular.g:2877:4: (attrs2= attributes )?
                    int alt277=2;
                    int LA277_0 = input.LA(1);

                    if ( (LA277_0==OPEN_BRACKET) ) {
                        alt277=1;
                    }
                    switch (alt277) {
                        case 1 :
                            // CSharpAngular.g:2877:5: attrs2= attributes
                            {
                            pushFollow(FOLLOW_attributes_in_accessor_declarations19978);
                            attrs2=attributes();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharpAngular.g:2877:25: (mods2= accessor_modifier )?
                    int alt278=2;
                    int LA278_0 = input.LA(1);

                    if ( (LA278_0==INTERNAL||(LA278_0 >= PRIVATE && LA278_0 <= PROTECTED)) ) {
                        alt278=1;
                    }
                    switch (alt278) {
                        case 1 :
                            // CSharpAngular.g:2877:26: mods2= accessor_modifier
                            {
                            pushFollow(FOLLOW_accessor_modifier_in_accessor_declarations19985);
                            mods2=accessor_modifier();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_set_contextual_keyword_in_accessor_declarations19991);
                    sck2=set_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_accessor_body_in_accessor_declarations19995);
                    aBdy2=accessor_body();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharpAngular.g:2877:100: (gck2= get_accessor_declaration )?
                    int alt279=2;
                    int LA279_0 = input.LA(1);

                    if ( (LA279_0==IDENTIFIER||LA279_0==INTERNAL||LA279_0==OPEN_BRACKET||(LA279_0 >= PRIVATE && LA279_0 <= PROTECTED)) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            // CSharpAngular.g:2877:101: gck2= get_accessor_declaration
                            {
                            pushFollow(FOLLOW_get_accessor_declaration_in_accessor_declarations20000);
                            gck2=get_accessor_declaration();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2878:3: -> accessorDeclarations(attributes=attrs2acsModfs=mods2body=aBdy2ck1=sck2ck2=gck2)
                      {
                          retval.st = templateLib.getInstanceOf("accessorDeclarations",new STAttrMap().put("attributes", attrs2).put("acsModfs", mods2).put("body", aBdy2).put("ck1", sck2).put("ck2", gck2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "accessor_declarations"


    public static class get_accessor_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "get_accessor_declaration"
    // CSharpAngular.g:2880:1: get_accessor_declaration : (at= attributes )? (am= accessor_modifier )? gck= get_contextual_keyword ab= accessor_body -> getAccessorDeclaration(attrs=ataccsModfs=amck=gckbody=ab);
    public final CSharpAngular.get_accessor_declaration_return get_accessor_declaration() throws RecognitionException {
        CSharpAngular.get_accessor_declaration_return retval = new CSharpAngular.get_accessor_declaration_return();
        retval.start = input.LT(1);


        CSharpAngular.attributes_return at =null;

        CSharpAngular.accessor_modifier_return am =null;

        CSharpAngular.get_contextual_keyword_return gck =null;

        CSharpAngular.accessor_body_return ab =null;


        try {
            // CSharpAngular.g:2881:2: ( (at= attributes )? (am= accessor_modifier )? gck= get_contextual_keyword ab= accessor_body -> getAccessorDeclaration(attrs=ataccsModfs=amck=gckbody=ab))
            // CSharpAngular.g:2882:2: (at= attributes )? (am= accessor_modifier )? gck= get_contextual_keyword ab= accessor_body
            {
            // CSharpAngular.g:2882:2: (at= attributes )?
            int alt281=2;
            int LA281_0 = input.LA(1);

            if ( (LA281_0==OPEN_BRACKET) ) {
                alt281=1;
            }
            switch (alt281) {
                case 1 :
                    // CSharpAngular.g:2882:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_get_accessor_declaration20047);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2882:19: (am= accessor_modifier )?
            int alt282=2;
            int LA282_0 = input.LA(1);

            if ( (LA282_0==INTERNAL||(LA282_0 >= PRIVATE && LA282_0 <= PROTECTED)) ) {
                alt282=1;
            }
            switch (alt282) {
                case 1 :
                    // CSharpAngular.g:2882:20: am= accessor_modifier
                    {
                    pushFollow(FOLLOW_accessor_modifier_in_get_accessor_declaration20054);
                    am=accessor_modifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_get_contextual_keyword_in_get_accessor_declaration20060);
            gck=get_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_accessor_body_in_get_accessor_declaration20064);
            ab=accessor_body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2883:2: -> getAccessorDeclaration(attrs=ataccsModfs=amck=gckbody=ab)
              {
                  retval.st = templateLib.getInstanceOf("getAccessorDeclaration",new STAttrMap().put("attrs", at).put("accsModfs", am).put("ck", gck).put("body", ab));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "get_accessor_declaration"


    public static class set_accessor_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "set_accessor_declaration"
    // CSharpAngular.g:2885:1: set_accessor_declaration : (at= attributes )? (am= accessor_modifier )? sck= set_contextual_keyword ab= accessor_body -> setAccessorDeclaration(attrs=ataccsModfs=amck=sckbody=ab);
    public final CSharpAngular.set_accessor_declaration_return set_accessor_declaration() throws RecognitionException {
        CSharpAngular.set_accessor_declaration_return retval = new CSharpAngular.set_accessor_declaration_return();
        retval.start = input.LT(1);


        CSharpAngular.attributes_return at =null;

        CSharpAngular.accessor_modifier_return am =null;

        CSharpAngular.set_contextual_keyword_return sck =null;

        CSharpAngular.accessor_body_return ab =null;


        try {
            // CSharpAngular.g:2886:2: ( (at= attributes )? (am= accessor_modifier )? sck= set_contextual_keyword ab= accessor_body -> setAccessorDeclaration(attrs=ataccsModfs=amck=sckbody=ab))
            // CSharpAngular.g:2887:2: (at= attributes )? (am= accessor_modifier )? sck= set_contextual_keyword ab= accessor_body
            {
            // CSharpAngular.g:2887:2: (at= attributes )?
            int alt283=2;
            int LA283_0 = input.LA(1);

            if ( (LA283_0==OPEN_BRACKET) ) {
                alt283=1;
            }
            switch (alt283) {
                case 1 :
                    // CSharpAngular.g:2887:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_set_accessor_declaration20101);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2887:19: (am= accessor_modifier )?
            int alt284=2;
            int LA284_0 = input.LA(1);

            if ( (LA284_0==INTERNAL||(LA284_0 >= PRIVATE && LA284_0 <= PROTECTED)) ) {
                alt284=1;
            }
            switch (alt284) {
                case 1 :
                    // CSharpAngular.g:2887:20: am= accessor_modifier
                    {
                    pushFollow(FOLLOW_accessor_modifier_in_set_accessor_declaration20108);
                    am=accessor_modifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_set_contextual_keyword_in_set_accessor_declaration20114);
            sck=set_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_accessor_body_in_set_accessor_declaration20118);
            ab=accessor_body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2888:2: -> setAccessorDeclaration(attrs=ataccsModfs=amck=sckbody=ab)
              {
                  retval.st = templateLib.getInstanceOf("setAccessorDeclaration",new STAttrMap().put("attrs", at).put("accsModfs", am).put("ck", sck).put("body", ab));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "set_accessor_declaration"


    public static class accessor_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "accessor_modifier"
    // CSharpAngular.g:2890:1: accessor_modifier : ( PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)| PROTECTED INTERNAL -> text(value=$PROTECTED.text+\" \"+$INTERNAL.text)| INTERNAL PROTECTED -> text(value=$INTERNAL.text+\" \"+$PROTECTED.text));
    public final CSharpAngular.accessor_modifier_return accessor_modifier() throws RecognitionException {
        CSharpAngular.accessor_modifier_return retval = new CSharpAngular.accessor_modifier_return();
        retval.start = input.LT(1);


        Token PROTECTED197=null;
        Token INTERNAL198=null;
        Token PRIVATE199=null;
        Token PROTECTED200=null;
        Token INTERNAL201=null;
        Token INTERNAL202=null;
        Token PROTECTED203=null;

        try {
            // CSharpAngular.g:2891:2: ( PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)| PROTECTED INTERNAL -> text(value=$PROTECTED.text+\" \"+$INTERNAL.text)| INTERNAL PROTECTED -> text(value=$INTERNAL.text+\" \"+$PROTECTED.text))
            int alt285=5;
            switch ( input.LA(1) ) {
            case PROTECTED:
                {
                int LA285_1 = input.LA(2);

                if ( (LA285_1==INTERNAL) ) {
                    alt285=4;
                }
                else if ( (LA285_1==IDENTIFIER) ) {
                    alt285=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 285, 1, input);

                    throw nvae;

                }
                }
                break;
            case INTERNAL:
                {
                int LA285_2 = input.LA(2);

                if ( (LA285_2==PROTECTED) ) {
                    alt285=5;
                }
                else if ( (LA285_2==IDENTIFIER) ) {
                    alt285=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 285, 2, input);

                    throw nvae;

                }
                }
                break;
            case PRIVATE:
                {
                alt285=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 285, 0, input);

                throw nvae;

            }

            switch (alt285) {
                case 1 :
                    // CSharpAngular.g:2892:2: PROTECTED
                    {
                    PROTECTED197=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_accessor_modifier20152); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2892:27: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED197!=null?PROTECTED197.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2893:4: INTERNAL
                    {
                    INTERNAL198=(Token)match(input,INTERNAL,FOLLOW_INTERNAL_in_accessor_modifier20180); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2893:27: -> text(value=$INTERNAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERNAL198!=null?INTERNAL198.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:2894:4: PRIVATE
                    {
                    PRIVATE199=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_accessor_modifier20207); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2894:27: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE199!=null?PRIVATE199.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:2895:4: PROTECTED INTERNAL
                    {
                    PROTECTED200=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_accessor_modifier20235); if (state.failed) return retval;

                    INTERNAL201=(Token)match(input,INTERNAL,FOLLOW_INTERNAL_in_accessor_modifier20237); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2895:27: -> text(value=$PROTECTED.text+\" \"+$INTERNAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED200!=null?PROTECTED200.getText():null)+" "+(INTERNAL201!=null?INTERNAL201.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:2896:4: INTERNAL PROTECTED
                    {
                    INTERNAL202=(Token)match(input,INTERNAL,FOLLOW_INTERNAL_in_accessor_modifier20254); if (state.failed) return retval;

                    PROTECTED203=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_accessor_modifier20256); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2896:27: -> text(value=$INTERNAL.text+\" \"+$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERNAL202!=null?INTERNAL202.getText():null)+" "+(PROTECTED203!=null?PROTECTED203.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "accessor_modifier"


    public static class accessor_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "accessor_body"
    // CSharpAngular.g:2898:1: accessor_body : (blk= block -> accessorBody(body=blk)| SEMICOLON -> text(value=$SEMICOLON.text));
    public final CSharpAngular.accessor_body_return accessor_body() throws RecognitionException {
        CSharpAngular.accessor_body_return retval = new CSharpAngular.accessor_body_return();
        retval.start = input.LT(1);


        Token SEMICOLON204=null;
        CSharpAngular.block_return blk =null;


        try {
            // CSharpAngular.g:2899:2: (blk= block -> accessorBody(body=blk)| SEMICOLON -> text(value=$SEMICOLON.text))
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==OPEN_BRACE) ) {
                alt286=1;
            }
            else if ( (LA286_0==SEMICOLON) ) {
                alt286=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 286, 0, input);

                throw nvae;

            }
            switch (alt286) {
                case 1 :
                    // CSharpAngular.g:2900:2: blk= block
                    {
                    pushFollow(FOLLOW_block_in_accessor_body20283);
                    blk=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2901:2: -> accessorBody(body=blk)
                      {
                          retval.st = templateLib.getInstanceOf("accessorBody",new STAttrMap().put("body", blk));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2902:4: SEMICOLON
                    {
                    SEMICOLON204=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_accessor_body20297); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2903:2: -> text(value=$SEMICOLON.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEMICOLON204!=null?SEMICOLON204.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "accessor_body"


    public static class event_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "event_declaration"
    // CSharpAngular.g:2911:1: event_declaration : ( attributes )? ( event_modifiers )? EVENT type ( variable_declarators SEMICOLON | member_name OPEN_BRACE event_accessor_declarations CLOSE_BRACE ) ;
    public final CSharpAngular.event_declaration_return event_declaration() throws RecognitionException {
        CSharpAngular.event_declaration_return retval = new CSharpAngular.event_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2912:3: ( ( attributes )? ( event_modifiers )? EVENT type ( variable_declarators SEMICOLON | member_name OPEN_BRACE event_accessor_declarations CLOSE_BRACE ) )
            // CSharpAngular.g:2912:5: ( attributes )? ( event_modifiers )? EVENT type ( variable_declarators SEMICOLON | member_name OPEN_BRACE event_accessor_declarations CLOSE_BRACE )
            {
            // CSharpAngular.g:2912:5: ( attributes )?
            int alt287=2;
            int LA287_0 = input.LA(1);

            if ( (LA287_0==OPEN_BRACKET) ) {
                alt287=1;
            }
            switch (alt287) {
                case 1 :
                    // CSharpAngular.g:2912:5: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_event_declaration20320);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2912:17: ( event_modifiers )?
            int alt288=2;
            int LA288_0 = input.LA(1);

            if ( (LA288_0==ABSTRACT||LA288_0==EXTERN||LA288_0==INTERNAL||LA288_0==NEW||LA288_0==OVERRIDE||(LA288_0 >= PRIVATE && LA288_0 <= PUBLIC)||LA288_0==SEALED||LA288_0==STATIC||LA288_0==UNSAFE||LA288_0==VIRTUAL) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    // CSharpAngular.g:2912:17: event_modifiers
                    {
                    pushFollow(FOLLOW_event_modifiers_in_event_declaration20323);
                    event_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,EVENT,FOLLOW_EVENT_in_event_declaration20326); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_event_declaration20328);
            type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2913:5: ( variable_declarators SEMICOLON | member_name OPEN_BRACE event_accessor_declarations CLOSE_BRACE )
            int alt289=2;
            int LA289_0 = input.LA(1);

            if ( (LA289_0==IDENTIFIER) ) {
                int LA289_1 = input.LA(2);

                if ( (LA289_1==ASSIGNMENT||LA289_1==COMMA||LA289_1==SEMICOLON) ) {
                    alt289=1;
                }
                else if ( (LA289_1==DOT||LA289_1==DOUBLE_COLON||LA289_1==LT||LA289_1==OPEN_BRACE) ) {
                    alt289=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 289, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 289, 0, input);

                throw nvae;

            }
            switch (alt289) {
                case 1 :
                    // CSharpAngular.g:2913:7: variable_declarators SEMICOLON
                    {
                    pushFollow(FOLLOW_variable_declarators_in_event_declaration20336);
                    variable_declarators();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_event_declaration20338); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2914:7: member_name OPEN_BRACE event_accessor_declarations CLOSE_BRACE
                    {
                    pushFollow(FOLLOW_member_name_in_event_declaration20346);
                    member_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_event_declaration20348); if (state.failed) return retval;

                    pushFollow(FOLLOW_event_accessor_declarations_in_event_declaration20350);
                    event_accessor_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_event_declaration20352); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "event_declaration"


    public static class event_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "event_modifiers"
    // CSharpAngular.g:2917:1: event_modifiers : event_modifier ( event_modifier )* ;
    public final CSharpAngular.event_modifiers_return event_modifiers() throws RecognitionException {
        CSharpAngular.event_modifiers_return retval = new CSharpAngular.event_modifiers_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2918:2: ( event_modifier ( event_modifier )* )
            // CSharpAngular.g:2918:4: event_modifier ( event_modifier )*
            {
            pushFollow(FOLLOW_event_modifier_in_event_modifiers20370);
            event_modifier();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2918:19: ( event_modifier )*
            loop290:
            do {
                int alt290=2;
                int LA290_0 = input.LA(1);

                if ( (LA290_0==ABSTRACT||LA290_0==EXTERN||LA290_0==INTERNAL||LA290_0==NEW||LA290_0==OVERRIDE||(LA290_0 >= PRIVATE && LA290_0 <= PUBLIC)||LA290_0==SEALED||LA290_0==STATIC||LA290_0==UNSAFE||LA290_0==VIRTUAL) ) {
                    alt290=1;
                }


                switch (alt290) {
            	case 1 :
            	    // CSharpAngular.g:2918:21: event_modifier
            	    {
            	    pushFollow(FOLLOW_event_modifier_in_event_modifiers20374);
            	    event_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop290;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "event_modifiers"


    public static class event_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "event_modifier"
    // CSharpAngular.g:2920:1: event_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)| STATIC -> text(value=$STATIC.text)| VIRTUAL -> text(value=$VIRTUAL.text)| SEALED -> text(value=$SEALED.text)| OVERRIDE -> text(value=$OVERRIDE.text)| ABSTRACT -> text(value=$ABSTRACT.text)| EXTERN -> text(value=$EXTERN.text)|evntmod= event_modifier_unsafe -> text(value=evntmod));
    public final CSharpAngular.event_modifier_return event_modifier() throws RecognitionException {
        CSharpAngular.event_modifier_return retval = new CSharpAngular.event_modifier_return();
        retval.start = input.LT(1);


        Token NEW205=null;
        Token PUBLIC206=null;
        Token PROTECTED207=null;
        Token INTERNAL208=null;
        Token PRIVATE209=null;
        Token STATIC210=null;
        Token VIRTUAL211=null;
        Token SEALED212=null;
        Token OVERRIDE213=null;
        Token ABSTRACT214=null;
        Token EXTERN215=null;
        CSharpAngular.event_modifier_unsafe_return evntmod =null;


        try {
            // CSharpAngular.g:2921:2: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)| STATIC -> text(value=$STATIC.text)| VIRTUAL -> text(value=$VIRTUAL.text)| SEALED -> text(value=$SEALED.text)| OVERRIDE -> text(value=$OVERRIDE.text)| ABSTRACT -> text(value=$ABSTRACT.text)| EXTERN -> text(value=$EXTERN.text)|evntmod= event_modifier_unsafe -> text(value=evntmod))
            int alt291=12;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt291=1;
                }
                break;
            case PUBLIC:
                {
                alt291=2;
                }
                break;
            case PROTECTED:
                {
                alt291=3;
                }
                break;
            case INTERNAL:
                {
                alt291=4;
                }
                break;
            case PRIVATE:
                {
                alt291=5;
                }
                break;
            case STATIC:
                {
                alt291=6;
                }
                break;
            case VIRTUAL:
                {
                alt291=7;
                }
                break;
            case SEALED:
                {
                alt291=8;
                }
                break;
            case OVERRIDE:
                {
                alt291=9;
                }
                break;
            case ABSTRACT:
                {
                alt291=10;
                }
                break;
            case EXTERN:
                {
                alt291=11;
                }
                break;
            case UNSAFE:
                {
                alt291=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 291, 0, input);

                throw nvae;

            }

            switch (alt291) {
                case 1 :
                    // CSharpAngular.g:2921:4: NEW
                    {
                    NEW205=(Token)match(input,NEW,FOLLOW_NEW_in_event_modifier20388); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2921:39: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW205!=null?NEW205.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2922:6: PUBLIC
                    {
                    PUBLIC206=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_event_modifier20434); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2922:39: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC206!=null?PUBLIC206.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:2923:6: PROTECTED
                    {
                    PROTECTED207=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_event_modifier20475); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2923:39: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED207!=null?PROTECTED207.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:2924:6: INTERNAL
                    {
                    INTERNAL208=(Token)match(input,INTERNAL,FOLLOW_INTERNAL_in_event_modifier20513); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2924:39: -> text(value=$INTERNAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERNAL208!=null?INTERNAL208.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:2925:6: PRIVATE
                    {
                    PRIVATE209=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_event_modifier20552); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2925:39: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE209!=null?PRIVATE209.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:2926:6: STATIC
                    {
                    STATIC210=(Token)match(input,STATIC,FOLLOW_STATIC_in_event_modifier20592); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2926:39: -> text(value=$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STATIC210!=null?STATIC210.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:2927:6: VIRTUAL
                    {
                    VIRTUAL211=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_event_modifier20633); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2927:39: -> text(value=$VIRTUAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VIRTUAL211!=null?VIRTUAL211.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:2928:6: SEALED
                    {
                    SEALED212=(Token)match(input,SEALED,FOLLOW_SEALED_in_event_modifier20673); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2928:39: -> text(value=$SEALED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEALED212!=null?SEALED212.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:2929:6: OVERRIDE
                    {
                    OVERRIDE213=(Token)match(input,OVERRIDE,FOLLOW_OVERRIDE_in_event_modifier20714); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2929:39: -> text(value=$OVERRIDE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OVERRIDE213!=null?OVERRIDE213.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:2930:6: ABSTRACT
                    {
                    ABSTRACT214=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_event_modifier20753); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2930:39: -> text(value=$ABSTRACT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ABSTRACT214!=null?ABSTRACT214.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:2931:6: EXTERN
                    {
                    EXTERN215=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_event_modifier20792); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2931:39: -> text(value=$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXTERN215!=null?EXTERN215.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharpAngular.g:2932:6: evntmod= event_modifier_unsafe
                    {
                    pushFollow(FOLLOW_event_modifier_unsafe_in_event_modifier20835);
                    evntmod=event_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2932:39: -> text(value=evntmod)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", evntmod));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "event_modifier"


    public static class event_accessor_declarations_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "event_accessor_declarations"
    // CSharpAngular.g:2934:1: event_accessor_declarations : ( attributes )? ( add_contextual_keyword block remove_accessor_declaration | remove_contextual_keyword block add_accessor_declaration ) ;
    public final CSharpAngular.event_accessor_declarations_return event_accessor_declarations() throws RecognitionException {
        CSharpAngular.event_accessor_declarations_return retval = new CSharpAngular.event_accessor_declarations_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2935:2: ( ( attributes )? ( add_contextual_keyword block remove_accessor_declaration | remove_contextual_keyword block add_accessor_declaration ) )
            // CSharpAngular.g:2935:4: ( attributes )? ( add_contextual_keyword block remove_accessor_declaration | remove_contextual_keyword block add_accessor_declaration )
            {
            // CSharpAngular.g:2935:4: ( attributes )?
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==OPEN_BRACKET) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    // CSharpAngular.g:2935:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_event_accessor_declarations20857);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2936:4: ( add_contextual_keyword block remove_accessor_declaration | remove_contextual_keyword block add_accessor_declaration )
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==IDENTIFIER) ) {
                int LA293_1 = input.LA(2);

                if ( ((input.LT(1).getText().equals("add"))) ) {
                    alt293=1;
                }
                else if ( ((input.LT(1).getText().equals("remove"))) ) {
                    alt293=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 293, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 293, 0, input);

                throw nvae;

            }
            switch (alt293) {
                case 1 :
                    // CSharpAngular.g:2936:6: add_contextual_keyword block remove_accessor_declaration
                    {
                    pushFollow(FOLLOW_add_contextual_keyword_in_event_accessor_declarations20865);
                    add_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_block_in_event_accessor_declarations20867);
                    block();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations20869);
                    remove_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2937:6: remove_contextual_keyword block add_accessor_declaration
                    {
                    pushFollow(FOLLOW_remove_contextual_keyword_in_event_accessor_declarations20876);
                    remove_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_block_in_event_accessor_declarations20878);
                    block();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_add_accessor_declaration_in_event_accessor_declarations20880);
                    add_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "event_accessor_declarations"


    public static class add_accessor_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "add_accessor_declaration"
    // CSharpAngular.g:2940:1: add_accessor_declaration : ( attributes )? add_contextual_keyword block ;
    public final CSharpAngular.add_accessor_declaration_return add_accessor_declaration() throws RecognitionException {
        CSharpAngular.add_accessor_declaration_return retval = new CSharpAngular.add_accessor_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2941:2: ( ( attributes )? add_contextual_keyword block )
            // CSharpAngular.g:2941:4: ( attributes )? add_contextual_keyword block
            {
            // CSharpAngular.g:2941:4: ( attributes )?
            int alt294=2;
            int LA294_0 = input.LA(1);

            if ( (LA294_0==OPEN_BRACKET) ) {
                alt294=1;
            }
            switch (alt294) {
                case 1 :
                    // CSharpAngular.g:2941:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_add_accessor_declaration20896);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_add_contextual_keyword_in_add_accessor_declaration20899);
            add_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_add_accessor_declaration20901);
            block();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "add_accessor_declaration"


    public static class remove_accessor_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "remove_accessor_declaration"
    // CSharpAngular.g:2943:1: remove_accessor_declaration : ( attributes )? remove_contextual_keyword block ;
    public final CSharpAngular.remove_accessor_declaration_return remove_accessor_declaration() throws RecognitionException {
        CSharpAngular.remove_accessor_declaration_return retval = new CSharpAngular.remove_accessor_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2944:2: ( ( attributes )? remove_contextual_keyword block )
            // CSharpAngular.g:2944:4: ( attributes )? remove_contextual_keyword block
            {
            // CSharpAngular.g:2944:4: ( attributes )?
            int alt295=2;
            int LA295_0 = input.LA(1);

            if ( (LA295_0==OPEN_BRACKET) ) {
                alt295=1;
            }
            switch (alt295) {
                case 1 :
                    // CSharpAngular.g:2944:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_remove_accessor_declaration20912);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_remove_contextual_keyword_in_remove_accessor_declaration20915);
            remove_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_remove_accessor_declaration20917);
            block();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "remove_accessor_declaration"


    public static class indexer_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "indexer_declaration"
    // CSharpAngular.g:2946:1: indexer_declaration : ( attributes )? ( indexer_modifiers )? indexer_declarator OPEN_BRACE accessor_declarations CLOSE_BRACE ;
    public final CSharpAngular.indexer_declaration_return indexer_declaration() throws RecognitionException {
        CSharpAngular.indexer_declaration_return retval = new CSharpAngular.indexer_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2947:2: ( ( attributes )? ( indexer_modifiers )? indexer_declarator OPEN_BRACE accessor_declarations CLOSE_BRACE )
            // CSharpAngular.g:2947:4: ( attributes )? ( indexer_modifiers )? indexer_declarator OPEN_BRACE accessor_declarations CLOSE_BRACE
            {
            // CSharpAngular.g:2947:4: ( attributes )?
            int alt296=2;
            int LA296_0 = input.LA(1);

            if ( (LA296_0==OPEN_BRACKET) ) {
                alt296=1;
            }
            switch (alt296) {
                case 1 :
                    // CSharpAngular.g:2947:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_indexer_declaration20928);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:2947:16: ( indexer_modifiers )?
            int alt297=2;
            int LA297_0 = input.LA(1);

            if ( (LA297_0==ABSTRACT||LA297_0==EXTERN||LA297_0==INTERNAL||LA297_0==NEW||LA297_0==OVERRIDE||(LA297_0 >= PRIVATE && LA297_0 <= PUBLIC)||LA297_0==SEALED||LA297_0==UNSAFE||LA297_0==VIRTUAL) ) {
                alt297=1;
            }
            switch (alt297) {
                case 1 :
                    // CSharpAngular.g:2947:16: indexer_modifiers
                    {
                    pushFollow(FOLLOW_indexer_modifiers_in_indexer_declaration20931);
                    indexer_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_indexer_declarator_in_indexer_declaration20934);
            indexer_declarator();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_indexer_declaration20936); if (state.failed) return retval;

            pushFollow(FOLLOW_accessor_declarations_in_indexer_declaration20938);
            accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_indexer_declaration20940); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexer_declaration"


    public static class indexer_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "indexer_modifiers"
    // CSharpAngular.g:2949:1: indexer_modifiers : indexer_modifier ( indexer_modifier )* ;
    public final CSharpAngular.indexer_modifiers_return indexer_modifiers() throws RecognitionException {
        CSharpAngular.indexer_modifiers_return retval = new CSharpAngular.indexer_modifiers_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2950:2: ( indexer_modifier ( indexer_modifier )* )
            // CSharpAngular.g:2950:4: indexer_modifier ( indexer_modifier )*
            {
            pushFollow(FOLLOW_indexer_modifier_in_indexer_modifiers20951);
            indexer_modifier();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2950:21: ( indexer_modifier )*
            loop298:
            do {
                int alt298=2;
                int LA298_0 = input.LA(1);

                if ( (LA298_0==ABSTRACT||LA298_0==EXTERN||LA298_0==INTERNAL||LA298_0==NEW||LA298_0==OVERRIDE||(LA298_0 >= PRIVATE && LA298_0 <= PUBLIC)||LA298_0==SEALED||LA298_0==UNSAFE||LA298_0==VIRTUAL) ) {
                    alt298=1;
                }


                switch (alt298) {
            	case 1 :
            	    // CSharpAngular.g:2950:23: indexer_modifier
            	    {
            	    pushFollow(FOLLOW_indexer_modifier_in_indexer_modifiers20955);
            	    indexer_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop298;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexer_modifiers"


    public static class indexer_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "indexer_modifier"
    // CSharpAngular.g:2952:1: indexer_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)| VIRTUAL -> text(value=$VIRTUAL.text)| SEALED -> text(value=$SEALED.text)| OVERRIDE -> text(value=$OVERRIDE.text)| ABSTRACT -> text(value=$ABSTRACT.text)| EXTERN -> text(value=$EXTERN.text)|indmod= indexer_modifier_unsafe -> text(value=indmod));
    public final CSharpAngular.indexer_modifier_return indexer_modifier() throws RecognitionException {
        CSharpAngular.indexer_modifier_return retval = new CSharpAngular.indexer_modifier_return();
        retval.start = input.LT(1);


        Token NEW216=null;
        Token PUBLIC217=null;
        Token PROTECTED218=null;
        Token INTERNAL219=null;
        Token PRIVATE220=null;
        Token VIRTUAL221=null;
        Token SEALED222=null;
        Token OVERRIDE223=null;
        Token ABSTRACT224=null;
        Token EXTERN225=null;
        CSharpAngular.indexer_modifier_unsafe_return indmod =null;


        try {
            // CSharpAngular.g:2953:2: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)| VIRTUAL -> text(value=$VIRTUAL.text)| SEALED -> text(value=$SEALED.text)| OVERRIDE -> text(value=$OVERRIDE.text)| ABSTRACT -> text(value=$ABSTRACT.text)| EXTERN -> text(value=$EXTERN.text)|indmod= indexer_modifier_unsafe -> text(value=indmod))
            int alt299=11;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt299=1;
                }
                break;
            case PUBLIC:
                {
                alt299=2;
                }
                break;
            case PROTECTED:
                {
                alt299=3;
                }
                break;
            case INTERNAL:
                {
                alt299=4;
                }
                break;
            case PRIVATE:
                {
                alt299=5;
                }
                break;
            case VIRTUAL:
                {
                alt299=6;
                }
                break;
            case SEALED:
                {
                alt299=7;
                }
                break;
            case OVERRIDE:
                {
                alt299=8;
                }
                break;
            case ABSTRACT:
                {
                alt299=9;
                }
                break;
            case EXTERN:
                {
                alt299=10;
                }
                break;
            case UNSAFE:
                {
                alt299=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 299, 0, input);

                throw nvae;

            }

            switch (alt299) {
                case 1 :
                    // CSharpAngular.g:2954:2: NEW
                    {
                    NEW216=(Token)match(input,NEW,FOLLOW_NEW_in_indexer_modifier20978); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2954:41: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW216!=null?NEW216.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2955:4: PUBLIC
                    {
                    PUBLIC217=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_indexer_modifier21026); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2955:41: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC217!=null?PUBLIC217.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:2956:4: PROTECTED
                    {
                    PROTECTED218=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_indexer_modifier21069); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2956:41: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED218!=null?PROTECTED218.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:2957:4: INTERNAL
                    {
                    INTERNAL219=(Token)match(input,INTERNAL,FOLLOW_INTERNAL_in_indexer_modifier21109); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2957:41: -> text(value=$INTERNAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERNAL219!=null?INTERNAL219.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:2958:4: PRIVATE
                    {
                    PRIVATE220=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_indexer_modifier21150); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2958:41: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE220!=null?PRIVATE220.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:2959:4: VIRTUAL
                    {
                    VIRTUAL221=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_indexer_modifier21192); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2959:41: -> text(value=$VIRTUAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VIRTUAL221!=null?VIRTUAL221.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:2960:4: SEALED
                    {
                    SEALED222=(Token)match(input,SEALED,FOLLOW_SEALED_in_indexer_modifier21234); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2960:41: -> text(value=$SEALED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEALED222!=null?SEALED222.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:2961:4: OVERRIDE
                    {
                    OVERRIDE223=(Token)match(input,OVERRIDE,FOLLOW_OVERRIDE_in_indexer_modifier21277); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2961:41: -> text(value=$OVERRIDE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OVERRIDE223!=null?OVERRIDE223.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:2962:4: ABSTRACT
                    {
                    ABSTRACT224=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_indexer_modifier21318); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2962:41: -> text(value=$ABSTRACT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ABSTRACT224!=null?ABSTRACT224.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:2963:4: EXTERN
                    {
                    EXTERN225=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_indexer_modifier21359); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2963:41: -> text(value=$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXTERN225!=null?EXTERN225.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:2964:4: indmod= indexer_modifier_unsafe
                    {
                    pushFollow(FOLLOW_indexer_modifier_unsafe_in_indexer_modifier21404);
                    indmod=indexer_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2964:41: -> text(value=indmod)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", indmod));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexer_modifier"


    public static class indexer_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "indexer_declarator"
    // CSharpAngular.g:2972:1: indexer_declarator : type ( interface_type DOT )? THIS OPEN_BRACKET formal_parameter_list CLOSE_BRACKET ;
    public final CSharpAngular.indexer_declarator_return indexer_declarator() throws RecognitionException {
        CSharpAngular.indexer_declarator_return retval = new CSharpAngular.indexer_declarator_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2973:3: ( type ( interface_type DOT )? THIS OPEN_BRACKET formal_parameter_list CLOSE_BRACKET )
            // CSharpAngular.g:2973:5: type ( interface_type DOT )? THIS OPEN_BRACKET formal_parameter_list CLOSE_BRACKET
            {
            pushFollow(FOLLOW_type_in_indexer_declarator21432);
            type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2973:10: ( interface_type DOT )?
            int alt300=2;
            int LA300_0 = input.LA(1);

            if ( (LA300_0==IDENTIFIER) ) {
                alt300=1;
            }
            switch (alt300) {
                case 1 :
                    // CSharpAngular.g:2973:11: interface_type DOT
                    {
                    pushFollow(FOLLOW_interface_type_in_indexer_declarator21435);
                    interface_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_indexer_declarator21437); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,THIS,FOLLOW_THIS_in_indexer_declarator21441); if (state.failed) return retval;

            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_indexer_declarator21443); if (state.failed) return retval;

            pushFollow(FOLLOW_formal_parameter_list_in_indexer_declarator21445);
            formal_parameter_list();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_indexer_declarator21447); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexer_declarator"


    public static class operator_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_declaration"
    // CSharpAngular.g:2975:1: operator_declaration : ( attributes )? operator_modifiers operator_declarator operator_body ;
    public final CSharpAngular.operator_declaration_return operator_declaration() throws RecognitionException {
        CSharpAngular.operator_declaration_return retval = new CSharpAngular.operator_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2976:2: ( ( attributes )? operator_modifiers operator_declarator operator_body )
            // CSharpAngular.g:2976:4: ( attributes )? operator_modifiers operator_declarator operator_body
            {
            // CSharpAngular.g:2976:4: ( attributes )?
            int alt301=2;
            int LA301_0 = input.LA(1);

            if ( (LA301_0==OPEN_BRACKET) ) {
                alt301=1;
            }
            switch (alt301) {
                case 1 :
                    // CSharpAngular.g:2976:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_operator_declaration21459);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_operator_modifiers_in_operator_declaration21462);
            operator_modifiers();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_operator_declarator_in_operator_declaration21464);
            operator_declarator();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_operator_body_in_operator_declaration21466);
            operator_body();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_declaration"


    public static class operator_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_modifiers"
    // CSharpAngular.g:2978:1: operator_modifiers : operator_modifier ( operator_modifier )* ;
    public final CSharpAngular.operator_modifiers_return operator_modifiers() throws RecognitionException {
        CSharpAngular.operator_modifiers_return retval = new CSharpAngular.operator_modifiers_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2979:2: ( operator_modifier ( operator_modifier )* )
            // CSharpAngular.g:2979:4: operator_modifier ( operator_modifier )*
            {
            pushFollow(FOLLOW_operator_modifier_in_operator_modifiers21477);
            operator_modifier();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:2979:22: ( operator_modifier )*
            loop302:
            do {
                int alt302=2;
                int LA302_0 = input.LA(1);

                if ( (LA302_0==EXTERN||LA302_0==PUBLIC||LA302_0==STATIC||LA302_0==UNSAFE) ) {
                    alt302=1;
                }


                switch (alt302) {
            	case 1 :
            	    // CSharpAngular.g:2979:24: operator_modifier
            	    {
            	    pushFollow(FOLLOW_operator_modifier_in_operator_modifiers21481);
            	    operator_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop302;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_modifiers"


    public static class operator_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_modifier"
    // CSharpAngular.g:2981:1: operator_modifier : ( PUBLIC -> text(value=$PUBLIC.text)| STATIC -> text(value=$STATIC.text)| EXTERN -> text(value=$EXTERN.text)|oprmod= operator_modifier_unsafe -> text(value=oprmod));
    public final CSharpAngular.operator_modifier_return operator_modifier() throws RecognitionException {
        CSharpAngular.operator_modifier_return retval = new CSharpAngular.operator_modifier_return();
        retval.start = input.LT(1);


        Token PUBLIC226=null;
        Token STATIC227=null;
        Token EXTERN228=null;
        CSharpAngular.operator_modifier_unsafe_return oprmod =null;


        try {
            // CSharpAngular.g:2982:3: ( PUBLIC -> text(value=$PUBLIC.text)| STATIC -> text(value=$STATIC.text)| EXTERN -> text(value=$EXTERN.text)|oprmod= operator_modifier_unsafe -> text(value=oprmod))
            int alt303=4;
            switch ( input.LA(1) ) {
            case PUBLIC:
                {
                alt303=1;
                }
                break;
            case STATIC:
                {
                alt303=2;
                }
                break;
            case EXTERN:
                {
                alt303=3;
                }
                break;
            case UNSAFE:
                {
                alt303=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 303, 0, input);

                throw nvae;

            }

            switch (alt303) {
                case 1 :
                    // CSharpAngular.g:2983:3: PUBLIC
                    {
                    PUBLIC226=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_operator_modifier21499); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2983:41: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC226!=null?PUBLIC226.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2984:5: STATIC
                    {
                    STATIC227=(Token)match(input,STATIC,FOLLOW_STATIC_in_operator_modifier21544); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2984:41: -> text(value=$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STATIC227!=null?STATIC227.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:2985:5: EXTERN
                    {
                    EXTERN228=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_operator_modifier21587); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2985:41: -> text(value=$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXTERN228!=null?EXTERN228.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:2986:5: oprmod= operator_modifier_unsafe
                    {
                    pushFollow(FOLLOW_operator_modifier_unsafe_in_operator_modifier21632);
                    oprmod=operator_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2986:41: -> text(value=oprmod)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", oprmod));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_modifier"


    public static class operator_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_declarator"
    // CSharpAngular.g:2996:1: operator_declarator : ( ( unary_operator_declarator )=> unary_operator_declarator | binary_operator_declarator | conversion_operator_declarator );
    public final CSharpAngular.operator_declarator_return operator_declarator() throws RecognitionException {
        CSharpAngular.operator_declarator_return retval = new CSharpAngular.operator_declarator_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:2997:3: ( ( unary_operator_declarator )=> unary_operator_declarator | binary_operator_declarator | conversion_operator_declarator )
            int alt304=3;
            switch ( input.LA(1) ) {
            case SBYTE:
                {
                int LA304_1 = input.LA(2);

                if ( (synpred80_CSharpAngular()) ) {
                    alt304=1;
                }
                else if ( (true) ) {
                    alt304=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 304, 1, input);

                    throw nvae;

                }
                }
                break;
            case BYTE:
                {
                int LA304_2 = input.LA(2);

                if ( (synpred80_CSharpAngular()) ) {
                    alt304=1;
                }
                else if ( (true) ) {
                    alt304=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 304, 2, input);

                    throw nvae;

                }
                }
                break;
            case SHORT:
                {
                int LA304_3 = input.LA(2);

                if ( (synpred80_CSharpAngular()) ) {
                    alt304=1;
                }
                else if ( (true) ) {
                    alt304=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 304, 3, input);

                    throw nvae;

                }
                }
                break;
            case USHORT:
                {
                int LA304_4 = input.LA(2);

                if ( (synpred80_CSharpAngular()) ) {
                    alt304=1;
                }
                else if ( (true) ) {
                    alt304=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 304, 4, input);

                    throw nvae;

                }
                }
                break;
            case INT:
                {
                int LA304_5 = input.LA(2);

                if ( (synpred80_CSharpAngular()) ) {
                    alt304=1;
                }
                else if ( (true) ) {
                    alt304=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 304, 5, input);

                    throw nvae;

                }
                }
                break;
            case UINT:
                {
                int LA304_6 = input.LA(2);

                if ( (synpred80_CSharpAngular()) ) {
                    alt304=1;
                }
                else if ( (true) ) {
                    alt304=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 304, 6, input);

                    throw nvae;

                }
                }
                break;
            case LONG:
                {
                int LA304_7 = input.LA(2);

                if ( (synpred80_CSharpAngular()) ) {
                    alt304=1;
                }
                else if ( (true) ) {
                    alt304=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 304, 7, input);

                    throw nvae;

                }
                }
                break;
            case ULONG:
                {
                int LA304_8 = input.LA(2);

                if ( (synpred80_CSharpAngular()) ) {
                    alt304=1;
                }
                else if ( (true) ) {
                    alt304=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 304, 8, input);

                    throw nvae;

                }
                }
                break;
            case CHAR:
                {
                int LA304_9 = input.LA(2);

                if ( (synpred80_CSharpAngular()) ) {
                    alt304=1;
                }
                else if ( (true) ) {
                    alt304=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 304, 9, input);

                    throw nvae;

                }
                }
                break;
            case FLOAT:
                {
                int LA304_10 = input.LA(2);

                if ( (synpred80_CSharpAngular()) ) {
                    alt304=1;
                }
                else if ( (true) ) {
                    alt304=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 304, 10, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE:
                {
                int LA304_11 = input.LA(2);

                if ( (synpred80_CSharpAngular()) ) {
                    alt304=1;
                }
                else if ( (true) ) {
                    alt304=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 304, 11, input);

                    throw nvae;

                }
                }
                break;
            case DECIMAL:
                {
                int LA304_12 = input.LA(2);

                if ( (synpred80_CSharpAngular()) ) {
                    alt304=1;
                }
                else if ( (true) ) {
                    alt304=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 304, 12, input);

                    throw nvae;

                }
                }
                break;
            case BOOL:
                {
                int LA304_13 = input.LA(2);

                if ( (synpred80_CSharpAngular()) ) {
                    alt304=1;
                }
                else if ( (true) ) {
                    alt304=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 304, 13, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA304_14 = input.LA(2);

                if ( (synpred80_CSharpAngular()) ) {
                    alt304=1;
                }
                else if ( (true) ) {
                    alt304=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 304, 14, input);

                    throw nvae;

                }
                }
                break;
            case OBJECT:
                {
                int LA304_15 = input.LA(2);

                if ( (synpred80_CSharpAngular()) ) {
                    alt304=1;
                }
                else if ( (true) ) {
                    alt304=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 304, 15, input);

                    throw nvae;

                }
                }
                break;
            case STRING:
                {
                int LA304_16 = input.LA(2);

                if ( (synpred80_CSharpAngular()) ) {
                    alt304=1;
                }
                else if ( (true) ) {
                    alt304=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 304, 16, input);

                    throw nvae;

                }
                }
                break;
            case VOID:
                {
                int LA304_17 = input.LA(2);

                if ( (synpred80_CSharpAngular()) ) {
                    alt304=1;
                }
                else if ( (true) ) {
                    alt304=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 304, 17, input);

                    throw nvae;

                }
                }
                break;
            case EXPLICIT:
            case IMPLICIT:
                {
                alt304=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 304, 0, input);

                throw nvae;

            }

            switch (alt304) {
                case 1 :
                    // CSharpAngular.g:2997:5: ( unary_operator_declarator )=> unary_operator_declarator
                    {
                    pushFollow(FOLLOW_unary_operator_declarator_in_operator_declarator21666);
                    unary_operator_declarator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:2998:5: binary_operator_declarator
                    {
                    pushFollow(FOLLOW_binary_operator_declarator_in_operator_declarator21672);
                    binary_operator_declarator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:2999:5: conversion_operator_declarator
                    {
                    pushFollow(FOLLOW_conversion_operator_declarator_in_operator_declarator21678);
                    conversion_operator_declarator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_declarator"


    public static class unary_operator_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unary_operator_declarator"
    // CSharpAngular.g:3001:1: unary_operator_declarator : type OPERATOR overloadable_unary_operator OPEN_PARENS type IDENTIFIER CLOSE_PARENS ;
    public final CSharpAngular.unary_operator_declarator_return unary_operator_declarator() throws RecognitionException {
        CSharpAngular.unary_operator_declarator_return retval = new CSharpAngular.unary_operator_declarator_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3002:2: ( type OPERATOR overloadable_unary_operator OPEN_PARENS type IDENTIFIER CLOSE_PARENS )
            // CSharpAngular.g:3002:4: type OPERATOR overloadable_unary_operator OPEN_PARENS type IDENTIFIER CLOSE_PARENS
            {
            pushFollow(FOLLOW_type_in_unary_operator_declarator21690);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPERATOR,FOLLOW_OPERATOR_in_unary_operator_declarator21692); if (state.failed) return retval;

            pushFollow(FOLLOW_overloadable_unary_operator_in_unary_operator_declarator21694);
            overloadable_unary_operator();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_unary_operator_declarator21696); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_unary_operator_declarator21698);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_unary_operator_declarator21700); if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_unary_operator_declarator21702); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unary_operator_declarator"


    public static class overloadable_unary_operator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "overloadable_unary_operator"
    // CSharpAngular.g:3004:1: overloadable_unary_operator : ( PLUS -> text(value=$PLUS.text)| MINUS -> text(value=$MINUS.text)| BANG -> text(value=$BANG.text)| TILDE -> text(value=$TILDE.text)| OP_INC -> text(value=$OP_INC.text)| OP_DEC -> text(value=$OP_DEC.text)| TRUE -> text(value=$TRUE.text)| FALSE -> text(value=$FALSE.text));
    public final CSharpAngular.overloadable_unary_operator_return overloadable_unary_operator() throws RecognitionException {
        CSharpAngular.overloadable_unary_operator_return retval = new CSharpAngular.overloadable_unary_operator_return();
        retval.start = input.LT(1);


        Token PLUS229=null;
        Token MINUS230=null;
        Token BANG231=null;
        Token TILDE232=null;
        Token OP_INC233=null;
        Token OP_DEC234=null;
        Token TRUE235=null;
        Token FALSE236=null;

        try {
            // CSharpAngular.g:3005:3: ( PLUS -> text(value=$PLUS.text)| MINUS -> text(value=$MINUS.text)| BANG -> text(value=$BANG.text)| TILDE -> text(value=$TILDE.text)| OP_INC -> text(value=$OP_INC.text)| OP_DEC -> text(value=$OP_DEC.text)| TRUE -> text(value=$TRUE.text)| FALSE -> text(value=$FALSE.text))
            int alt305=8;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt305=1;
                }
                break;
            case MINUS:
                {
                alt305=2;
                }
                break;
            case BANG:
                {
                alt305=3;
                }
                break;
            case TILDE:
                {
                alt305=4;
                }
                break;
            case OP_INC:
                {
                alt305=5;
                }
                break;
            case OP_DEC:
                {
                alt305=6;
                }
                break;
            case TRUE:
                {
                alt305=7;
                }
                break;
            case FALSE:
                {
                alt305=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 305, 0, input);

                throw nvae;

            }

            switch (alt305) {
                case 1 :
                    // CSharpAngular.g:3006:3: PLUS
                    {
                    PLUS229=(Token)match(input,PLUS,FOLLOW_PLUS_in_overloadable_unary_operator21717); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3006:19: -> text(value=$PLUS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PLUS229!=null?PLUS229.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3007:5: MINUS
                    {
                    MINUS230=(Token)match(input,MINUS,FOLLOW_MINUS_in_overloadable_unary_operator21742); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3007:19: -> text(value=$MINUS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (MINUS230!=null?MINUS230.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:3008:5: BANG
                    {
                    BANG231=(Token)match(input,BANG,FOLLOW_BANG_in_overloadable_unary_operator21764); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3008:19: -> text(value=$BANG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BANG231!=null?BANG231.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:3009:5: TILDE
                    {
                    TILDE232=(Token)match(input,TILDE,FOLLOW_TILDE_in_overloadable_unary_operator21787); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3009:19: -> text(value=$TILDE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TILDE232!=null?TILDE232.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:3010:5: OP_INC
                    {
                    OP_INC233=(Token)match(input,OP_INC,FOLLOW_OP_INC_in_overloadable_unary_operator21809); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3010:19: -> text(value=$OP_INC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_INC233!=null?OP_INC233.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:3011:5: OP_DEC
                    {
                    OP_DEC234=(Token)match(input,OP_DEC,FOLLOW_OP_DEC_in_overloadable_unary_operator21830); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3011:19: -> text(value=$OP_DEC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_DEC234!=null?OP_DEC234.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:3012:5: TRUE
                    {
                    TRUE235=(Token)match(input,TRUE,FOLLOW_TRUE_in_overloadable_unary_operator21851); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3012:19: -> text(value=$TRUE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TRUE235!=null?TRUE235.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:3013:5: FALSE
                    {
                    FALSE236=(Token)match(input,FALSE,FOLLOW_FALSE_in_overloadable_unary_operator21874); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3013:19: -> text(value=$FALSE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FALSE236!=null?FALSE236.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "overloadable_unary_operator"


    public static class binary_operator_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "binary_operator_declarator"
    // CSharpAngular.g:3016:1: binary_operator_declarator : type OPERATOR overloadable_binary_operator OPEN_PARENS type IDENTIFIER COMMA type IDENTIFIER CLOSE_PARENS ;
    public final CSharpAngular.binary_operator_declarator_return binary_operator_declarator() throws RecognitionException {
        CSharpAngular.binary_operator_declarator_return retval = new CSharpAngular.binary_operator_declarator_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3017:2: ( type OPERATOR overloadable_binary_operator OPEN_PARENS type IDENTIFIER COMMA type IDENTIFIER CLOSE_PARENS )
            // CSharpAngular.g:3017:4: type OPERATOR overloadable_binary_operator OPEN_PARENS type IDENTIFIER COMMA type IDENTIFIER CLOSE_PARENS
            {
            pushFollow(FOLLOW_type_in_binary_operator_declarator21903);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPERATOR,FOLLOW_OPERATOR_in_binary_operator_declarator21905); if (state.failed) return retval;

            pushFollow(FOLLOW_overloadable_binary_operator_in_binary_operator_declarator21907);
            overloadable_binary_operator();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_binary_operator_declarator21909); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_binary_operator_declarator21911);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_binary_operator_declarator21913); if (state.failed) return retval;

            match(input,COMMA,FOLLOW_COMMA_in_binary_operator_declarator21915); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_binary_operator_declarator21917);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_binary_operator_declarator21919); if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_binary_operator_declarator21921); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "binary_operator_declarator"


    public static class overloadable_binary_operator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "overloadable_binary_operator"
    // CSharpAngular.g:3019:1: overloadable_binary_operator : ( PLUS -> text(value=$PLUS.text)| MINUS -> text(value=$MINUS.text)| STAR -> text(value=$STAR.text)| DIV -> text(value=$DIV.text)| PERCENT -> text(value=$PERCENT.text)| AMP -> text(value=$AMP.text)| BITWISE_OR -> text(value=$BITWISE_OR.text)| CARET -> text(value=$CARET.text)| OP_LEFT_SHIFT -> text(value=$OP_LEFT_SHIFT.text)|rst= right_shift -> text(value=rst)| OP_EQ -> text(value=$OP_EQ.text)| OP_NE -> text(value=$OP_NE.text)| GT -> text(value=$GT.text)| LT -> text(value=$LT.text)| OP_GE -> text(value=$OP_GE.text)| OP_LE -> text(value=$OP_LE.text));
    public final CSharpAngular.overloadable_binary_operator_return overloadable_binary_operator() throws RecognitionException {
        CSharpAngular.overloadable_binary_operator_return retval = new CSharpAngular.overloadable_binary_operator_return();
        retval.start = input.LT(1);


        Token PLUS237=null;
        Token MINUS238=null;
        Token STAR239=null;
        Token DIV240=null;
        Token PERCENT241=null;
        Token AMP242=null;
        Token BITWISE_OR243=null;
        Token CARET244=null;
        Token OP_LEFT_SHIFT245=null;
        Token OP_EQ246=null;
        Token OP_NE247=null;
        Token GT248=null;
        Token LT249=null;
        Token OP_GE250=null;
        Token OP_LE251=null;
        CSharpAngular.right_shift_return rst =null;


        try {
            // CSharpAngular.g:3020:4: ( PLUS -> text(value=$PLUS.text)| MINUS -> text(value=$MINUS.text)| STAR -> text(value=$STAR.text)| DIV -> text(value=$DIV.text)| PERCENT -> text(value=$PERCENT.text)| AMP -> text(value=$AMP.text)| BITWISE_OR -> text(value=$BITWISE_OR.text)| CARET -> text(value=$CARET.text)| OP_LEFT_SHIFT -> text(value=$OP_LEFT_SHIFT.text)|rst= right_shift -> text(value=rst)| OP_EQ -> text(value=$OP_EQ.text)| OP_NE -> text(value=$OP_NE.text)| GT -> text(value=$GT.text)| LT -> text(value=$LT.text)| OP_GE -> text(value=$OP_GE.text)| OP_LE -> text(value=$OP_LE.text))
            int alt306=16;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt306=1;
                }
                break;
            case MINUS:
                {
                alt306=2;
                }
                break;
            case STAR:
                {
                alt306=3;
                }
                break;
            case DIV:
                {
                alt306=4;
                }
                break;
            case PERCENT:
                {
                alt306=5;
                }
                break;
            case AMP:
                {
                alt306=6;
                }
                break;
            case BITWISE_OR:
                {
                alt306=7;
                }
                break;
            case CARET:
                {
                alt306=8;
                }
                break;
            case OP_LEFT_SHIFT:
                {
                alt306=9;
                }
                break;
            case GT:
                {
                int LA306_10 = input.LA(2);

                if ( (LA306_10==GT) ) {
                    alt306=10;
                }
                else if ( (LA306_10==OPEN_PARENS) ) {
                    alt306=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 306, 10, input);

                    throw nvae;

                }
                }
                break;
            case OP_EQ:
                {
                alt306=11;
                }
                break;
            case OP_NE:
                {
                alt306=12;
                }
                break;
            case LT:
                {
                alt306=14;
                }
                break;
            case OP_GE:
                {
                alt306=15;
                }
                break;
            case OP_LE:
                {
                alt306=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 306, 0, input);

                throw nvae;

            }

            switch (alt306) {
                case 1 :
                    // CSharpAngular.g:3021:4: PLUS
                    {
                    PLUS237=(Token)match(input,PLUS,FOLLOW_PLUS_in_overloadable_binary_operator21938); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3021:28: -> text(value=$PLUS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PLUS237!=null?PLUS237.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3022:6: MINUS
                    {
                    MINUS238=(Token)match(input,MINUS,FOLLOW_MINUS_in_overloadable_binary_operator21972); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3022:28: -> text(value=$MINUS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (MINUS238!=null?MINUS238.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:3023:6: STAR
                    {
                    STAR239=(Token)match(input,STAR,FOLLOW_STAR_in_overloadable_binary_operator22003); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3023:28: -> text(value=$STAR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STAR239!=null?STAR239.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:3024:6: DIV
                    {
                    DIV240=(Token)match(input,DIV,FOLLOW_DIV_in_overloadable_binary_operator22035); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3024:28: -> text(value=$DIV.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DIV240!=null?DIV240.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:3025:6: PERCENT
                    {
                    PERCENT241=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_overloadable_binary_operator22068); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3025:28: -> text(value=$PERCENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PERCENT241!=null?PERCENT241.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:3026:6: AMP
                    {
                    AMP242=(Token)match(input,AMP,FOLLOW_AMP_in_overloadable_binary_operator22097); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3026:28: -> text(value=$AMP.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (AMP242!=null?AMP242.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:3027:6: BITWISE_OR
                    {
                    BITWISE_OR243=(Token)match(input,BITWISE_OR,FOLLOW_BITWISE_OR_in_overloadable_binary_operator22130); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3027:28: -> text(value=$BITWISE_OR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BITWISE_OR243!=null?BITWISE_OR243.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:3028:6: CARET
                    {
                    CARET244=(Token)match(input,CARET,FOLLOW_CARET_in_overloadable_binary_operator22156); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3028:28: -> text(value=$CARET.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CARET244!=null?CARET244.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:3029:6: OP_LEFT_SHIFT
                    {
                    OP_LEFT_SHIFT245=(Token)match(input,OP_LEFT_SHIFT,FOLLOW_OP_LEFT_SHIFT_in_overloadable_binary_operator22187); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3029:28: -> text(value=$OP_LEFT_SHIFT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_LEFT_SHIFT245!=null?OP_LEFT_SHIFT245.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:3030:6: rst= right_shift
                    {
                    pushFollow(FOLLOW_right_shift_in_overloadable_binary_operator22212);
                    rst=right_shift();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3030:28: -> text(value=rst)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", rst));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:3031:6: OP_EQ
                    {
                    OP_EQ246=(Token)match(input,OP_EQ,FOLLOW_OP_EQ_in_overloadable_binary_operator22233); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3031:28: -> text(value=$OP_EQ.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_EQ246!=null?OP_EQ246.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharpAngular.g:3032:6: OP_NE
                    {
                    OP_NE247=(Token)match(input,OP_NE,FOLLOW_OP_NE_in_overloadable_binary_operator22264); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3032:28: -> text(value=$OP_NE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_NE247!=null?OP_NE247.getText():null)));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharpAngular.g:3033:6: GT
                    {
                    GT248=(Token)match(input,GT,FOLLOW_GT_in_overloadable_binary_operator22295); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3033:28: -> text(value=$GT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (GT248!=null?GT248.getText():null)));
                      }


                    }

                    }
                    break;
                case 14 :
                    // CSharpAngular.g:3034:6: LT
                    {
                    LT249=(Token)match(input,LT,FOLLOW_LT_in_overloadable_binary_operator22329); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3034:28: -> text(value=$LT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (LT249!=null?LT249.getText():null)));
                      }


                    }

                    }
                    break;
                case 15 :
                    // CSharpAngular.g:3035:6: OP_GE
                    {
                    OP_GE250=(Token)match(input,OP_GE,FOLLOW_OP_GE_in_overloadable_binary_operator22363); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3035:28: -> text(value=$OP_GE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_GE250!=null?OP_GE250.getText():null)));
                      }


                    }

                    }
                    break;
                case 16 :
                    // CSharpAngular.g:3036:6: OP_LE
                    {
                    OP_LE251=(Token)match(input,OP_LE,FOLLOW_OP_LE_in_overloadable_binary_operator22394); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3036:28: -> text(value=$OP_LE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_LE251!=null?OP_LE251.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "overloadable_binary_operator"


    public static class overloadable_operator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "overloadable_operator"
    // CSharpAngular.g:3041:1: overloadable_operator : ( PLUS -> text(value=$PLUS.text)| MINUS -> text(value=$MINUS.text)| BANG -> text(value=$BANG.text)| TILDE -> text(value=$TILDE.text)| OP_INC -> text(value=$OP_INC.text)| OP_DEC -> text(value=$OP_DEC.text)| TRUE -> text(value=$TRUE.text)| FALSE -> text(value=$FALSE.text)| STAR -> text(value=$STAR.text)| DIV -> text(value=$DIV.text)| PERCENT -> text(value=$PERCENT.text)| AMP -> text(value=$AMP.text)| BITWISE_OR -> text(value=$BITWISE_OR.text)| CARET -> text(value=$CARET.text)| OP_LEFT_SHIFT -> text(value=$OP_LEFT_SHIFT.text)|rst= right_shift -> text(value=rst)| OP_EQ -> text(value=$OP_EQ.text)| OP_NE -> text(value=$OP_NE.text)| GT -> text(value=$GT.text)| LT -> text(value=$LT.text)| OP_GE -> text(value=$OP_GE.text)| OP_LE -> text(value=$OP_LE.text));
    public final CSharpAngular.overloadable_operator_return overloadable_operator() throws RecognitionException {
        CSharpAngular.overloadable_operator_return retval = new CSharpAngular.overloadable_operator_return();
        retval.start = input.LT(1);


        Token PLUS252=null;
        Token MINUS253=null;
        Token BANG254=null;
        Token TILDE255=null;
        Token OP_INC256=null;
        Token OP_DEC257=null;
        Token TRUE258=null;
        Token FALSE259=null;
        Token STAR260=null;
        Token DIV261=null;
        Token PERCENT262=null;
        Token AMP263=null;
        Token BITWISE_OR264=null;
        Token CARET265=null;
        Token OP_LEFT_SHIFT266=null;
        Token OP_EQ267=null;
        Token OP_NE268=null;
        Token GT269=null;
        Token LT270=null;
        Token OP_GE271=null;
        Token OP_LE272=null;
        CSharpAngular.right_shift_return rst =null;


        try {
            // CSharpAngular.g:3042:3: ( PLUS -> text(value=$PLUS.text)| MINUS -> text(value=$MINUS.text)| BANG -> text(value=$BANG.text)| TILDE -> text(value=$TILDE.text)| OP_INC -> text(value=$OP_INC.text)| OP_DEC -> text(value=$OP_DEC.text)| TRUE -> text(value=$TRUE.text)| FALSE -> text(value=$FALSE.text)| STAR -> text(value=$STAR.text)| DIV -> text(value=$DIV.text)| PERCENT -> text(value=$PERCENT.text)| AMP -> text(value=$AMP.text)| BITWISE_OR -> text(value=$BITWISE_OR.text)| CARET -> text(value=$CARET.text)| OP_LEFT_SHIFT -> text(value=$OP_LEFT_SHIFT.text)|rst= right_shift -> text(value=rst)| OP_EQ -> text(value=$OP_EQ.text)| OP_NE -> text(value=$OP_NE.text)| GT -> text(value=$GT.text)| LT -> text(value=$LT.text)| OP_GE -> text(value=$OP_GE.text)| OP_LE -> text(value=$OP_LE.text))
            int alt307=22;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt307=1;
                }
                break;
            case MINUS:
                {
                alt307=2;
                }
                break;
            case BANG:
                {
                alt307=3;
                }
                break;
            case TILDE:
                {
                alt307=4;
                }
                break;
            case OP_INC:
                {
                alt307=5;
                }
                break;
            case OP_DEC:
                {
                alt307=6;
                }
                break;
            case TRUE:
                {
                alt307=7;
                }
                break;
            case FALSE:
                {
                alt307=8;
                }
                break;
            case STAR:
                {
                alt307=9;
                }
                break;
            case DIV:
                {
                alt307=10;
                }
                break;
            case PERCENT:
                {
                alt307=11;
                }
                break;
            case AMP:
                {
                alt307=12;
                }
                break;
            case BITWISE_OR:
                {
                alt307=13;
                }
                break;
            case CARET:
                {
                alt307=14;
                }
                break;
            case OP_LEFT_SHIFT:
                {
                alt307=15;
                }
                break;
            case GT:
                {
                int LA307_16 = input.LA(2);

                if ( (LA307_16==GT) ) {
                    alt307=16;
                }
                else if ( (LA307_16==OPEN_PARENS) ) {
                    alt307=19;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 307, 16, input);

                    throw nvae;

                }
                }
                break;
            case OP_EQ:
                {
                alt307=17;
                }
                break;
            case OP_NE:
                {
                alt307=18;
                }
                break;
            case LT:
                {
                alt307=20;
                }
                break;
            case OP_GE:
                {
                alt307=21;
                }
                break;
            case OP_LE:
                {
                alt307=22;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 307, 0, input);

                throw nvae;

            }

            switch (alt307) {
                case 1 :
                    // CSharpAngular.g:3042:5: PLUS
                    {
                    PLUS252=(Token)match(input,PLUS,FOLLOW_PLUS_in_overloadable_operator22435); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3042:29: -> text(value=$PLUS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PLUS252!=null?PLUS252.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3043:5: MINUS
                    {
                    MINUS253=(Token)match(input,MINUS,FOLLOW_MINUS_in_overloadable_operator22468); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3043:29: -> text(value=$MINUS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (MINUS253!=null?MINUS253.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:3044:5: BANG
                    {
                    BANG254=(Token)match(input,BANG,FOLLOW_BANG_in_overloadable_operator22500); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3044:29: -> text(value=$BANG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BANG254!=null?BANG254.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:3045:5: TILDE
                    {
                    TILDE255=(Token)match(input,TILDE,FOLLOW_TILDE_in_overloadable_operator22533); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3045:29: -> text(value=$TILDE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TILDE255!=null?TILDE255.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:3046:5: OP_INC
                    {
                    OP_INC256=(Token)match(input,OP_INC,FOLLOW_OP_INC_in_overloadable_operator22565); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3046:29: -> text(value=$OP_INC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_INC256!=null?OP_INC256.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:3047:5: OP_DEC
                    {
                    OP_DEC257=(Token)match(input,OP_DEC,FOLLOW_OP_DEC_in_overloadable_operator22596); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3047:29: -> text(value=$OP_DEC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_DEC257!=null?OP_DEC257.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:3048:5: TRUE
                    {
                    TRUE258=(Token)match(input,TRUE,FOLLOW_TRUE_in_overloadable_operator22627); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3048:29: -> text(value=$TRUE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TRUE258!=null?TRUE258.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:3049:5: FALSE
                    {
                    FALSE259=(Token)match(input,FALSE,FOLLOW_FALSE_in_overloadable_operator22660); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3049:29: -> text(value=$FALSE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FALSE259!=null?FALSE259.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:3050:5: STAR
                    {
                    STAR260=(Token)match(input,STAR,FOLLOW_STAR_in_overloadable_operator22692); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3050:29: -> text(value=$STAR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STAR260!=null?STAR260.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:3051:5: DIV
                    {
                    DIV261=(Token)match(input,DIV,FOLLOW_DIV_in_overloadable_operator22725); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3051:29: -> text(value=$DIV.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DIV261!=null?DIV261.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:3052:5: PERCENT
                    {
                    PERCENT262=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_overloadable_operator22759); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3052:29: -> text(value=$PERCENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PERCENT262!=null?PERCENT262.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharpAngular.g:3053:5: AMP
                    {
                    AMP263=(Token)match(input,AMP,FOLLOW_AMP_in_overloadable_operator22789); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3053:29: -> text(value=$AMP.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (AMP263!=null?AMP263.getText():null)));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharpAngular.g:3054:5: BITWISE_OR
                    {
                    BITWISE_OR264=(Token)match(input,BITWISE_OR,FOLLOW_BITWISE_OR_in_overloadable_operator22823); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3054:29: -> text(value=$BITWISE_OR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BITWISE_OR264!=null?BITWISE_OR264.getText():null)));
                      }


                    }

                    }
                    break;
                case 14 :
                    // CSharpAngular.g:3055:5: CARET
                    {
                    CARET265=(Token)match(input,CARET,FOLLOW_CARET_in_overloadable_operator22850); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3055:29: -> text(value=$CARET.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CARET265!=null?CARET265.getText():null)));
                      }


                    }

                    }
                    break;
                case 15 :
                    // CSharpAngular.g:3056:5: OP_LEFT_SHIFT
                    {
                    OP_LEFT_SHIFT266=(Token)match(input,OP_LEFT_SHIFT,FOLLOW_OP_LEFT_SHIFT_in_overloadable_operator22882); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3056:29: -> text(value=$OP_LEFT_SHIFT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_LEFT_SHIFT266!=null?OP_LEFT_SHIFT266.getText():null)));
                      }


                    }

                    }
                    break;
                case 16 :
                    // CSharpAngular.g:3057:5: rst= right_shift
                    {
                    pushFollow(FOLLOW_right_shift_in_overloadable_operator22908);
                    rst=right_shift();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3057:29: -> text(value=rst)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", rst));
                      }


                    }

                    }
                    break;
                case 17 :
                    // CSharpAngular.g:3058:5: OP_EQ
                    {
                    OP_EQ267=(Token)match(input,OP_EQ,FOLLOW_OP_EQ_in_overloadable_operator22930); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3058:29: -> text(value=$OP_EQ.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_EQ267!=null?OP_EQ267.getText():null)));
                      }


                    }

                    }
                    break;
                case 18 :
                    // CSharpAngular.g:3059:5: OP_NE
                    {
                    OP_NE268=(Token)match(input,OP_NE,FOLLOW_OP_NE_in_overloadable_operator22962); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3059:29: -> text(value=$OP_NE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_NE268!=null?OP_NE268.getText():null)));
                      }


                    }

                    }
                    break;
                case 19 :
                    // CSharpAngular.g:3060:5: GT
                    {
                    GT269=(Token)match(input,GT,FOLLOW_GT_in_overloadable_operator22994); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3060:29: -> text(value=$GT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (GT269!=null?GT269.getText():null)));
                      }


                    }

                    }
                    break;
                case 20 :
                    // CSharpAngular.g:3061:5: LT
                    {
                    LT270=(Token)match(input,LT,FOLLOW_LT_in_overloadable_operator23029); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3061:29: -> text(value=$LT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (LT270!=null?LT270.getText():null)));
                      }


                    }

                    }
                    break;
                case 21 :
                    // CSharpAngular.g:3062:5: OP_GE
                    {
                    OP_GE271=(Token)match(input,OP_GE,FOLLOW_OP_GE_in_overloadable_operator23064); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3062:29: -> text(value=$OP_GE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_GE271!=null?OP_GE271.getText():null)));
                      }


                    }

                    }
                    break;
                case 22 :
                    // CSharpAngular.g:3063:5: OP_LE
                    {
                    OP_LE272=(Token)match(input,OP_LE,FOLLOW_OP_LE_in_overloadable_operator23096); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3063:29: -> text(value=$OP_LE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_LE272!=null?OP_LE272.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "overloadable_operator"


    public static class conversion_operator_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "conversion_operator_declarator"
    // CSharpAngular.g:3067:1: conversion_operator_declarator : ( IMPLICIT OPERATOR type OPEN_PARENS type IDENTIFIER CLOSE_PARENS | EXPLICIT OPERATOR type OPEN_PARENS type IDENTIFIER CLOSE_PARENS );
    public final CSharpAngular.conversion_operator_declarator_return conversion_operator_declarator() throws RecognitionException {
        CSharpAngular.conversion_operator_declarator_return retval = new CSharpAngular.conversion_operator_declarator_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3068:2: ( IMPLICIT OPERATOR type OPEN_PARENS type IDENTIFIER CLOSE_PARENS | EXPLICIT OPERATOR type OPEN_PARENS type IDENTIFIER CLOSE_PARENS )
            int alt308=2;
            int LA308_0 = input.LA(1);

            if ( (LA308_0==IMPLICIT) ) {
                alt308=1;
            }
            else if ( (LA308_0==EXPLICIT) ) {
                alt308=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 308, 0, input);

                throw nvae;

            }
            switch (alt308) {
                case 1 :
                    // CSharpAngular.g:3068:4: IMPLICIT OPERATOR type OPEN_PARENS type IDENTIFIER CLOSE_PARENS
                    {
                    match(input,IMPLICIT,FOLLOW_IMPLICIT_in_conversion_operator_declarator23136); if (state.failed) return retval;

                    match(input,OPERATOR,FOLLOW_OPERATOR_in_conversion_operator_declarator23138); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_conversion_operator_declarator23140);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_conversion_operator_declarator23142); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_conversion_operator_declarator23144);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_conversion_operator_declarator23146); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_conversion_operator_declarator23148); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3069:4: EXPLICIT OPERATOR type OPEN_PARENS type IDENTIFIER CLOSE_PARENS
                    {
                    match(input,EXPLICIT,FOLLOW_EXPLICIT_in_conversion_operator_declarator23153); if (state.failed) return retval;

                    match(input,OPERATOR,FOLLOW_OPERATOR_in_conversion_operator_declarator23155); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_conversion_operator_declarator23157);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_conversion_operator_declarator23159); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_conversion_operator_declarator23161);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_conversion_operator_declarator23163); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_conversion_operator_declarator23165); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conversion_operator_declarator"


    public static class operator_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_body"
    // CSharpAngular.g:3071:1: operator_body : (blk= block -> text(value=blk)| SEMICOLON -> text(value=$SEMICOLON.text));
    public final CSharpAngular.operator_body_return operator_body() throws RecognitionException {
        CSharpAngular.operator_body_return retval = new CSharpAngular.operator_body_return();
        retval.start = input.LT(1);


        Token SEMICOLON273=null;
        CSharpAngular.block_return blk =null;


        try {
            // CSharpAngular.g:3072:4: (blk= block -> text(value=blk)| SEMICOLON -> text(value=$SEMICOLON.text))
            int alt309=2;
            int LA309_0 = input.LA(1);

            if ( (LA309_0==OPEN_BRACE) ) {
                alt309=1;
            }
            else if ( (LA309_0==SEMICOLON) ) {
                alt309=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 309, 0, input);

                throw nvae;

            }
            switch (alt309) {
                case 1 :
                    // CSharpAngular.g:3073:4: blk= block
                    {
                    pushFollow(FOLLOW_block_in_operator_body23184);
                    blk=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3073:20: -> text(value=blk)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", blk));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3074:6: SEMICOLON
                    {
                    SEMICOLON273=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_operator_body23205); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3074:20: -> text(value=$SEMICOLON.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEMICOLON273!=null?SEMICOLON273.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_body"


    public static class constructor_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_declaration"
    // CSharpAngular.g:3077:1: constructor_declaration : ( attributes )? ( constructor_modifiers )? constructor_declarator constructor_body ;
    public final CSharpAngular.constructor_declaration_return constructor_declaration() throws RecognitionException {
        CSharpAngular.constructor_declaration_return retval = new CSharpAngular.constructor_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3078:2: ( ( attributes )? ( constructor_modifiers )? constructor_declarator constructor_body )
            // CSharpAngular.g:3078:4: ( attributes )? ( constructor_modifiers )? constructor_declarator constructor_body
            {
            // CSharpAngular.g:3078:4: ( attributes )?
            int alt310=2;
            int LA310_0 = input.LA(1);

            if ( (LA310_0==OPEN_BRACKET) ) {
                alt310=1;
            }
            switch (alt310) {
                case 1 :
                    // CSharpAngular.g:3078:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_constructor_declaration23231);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3078:16: ( constructor_modifiers )?
            int alt311=2;
            int LA311_0 = input.LA(1);

            if ( (LA311_0==EXTERN||LA311_0==INTERNAL||(LA311_0 >= PRIVATE && LA311_0 <= PUBLIC)||LA311_0==UNSAFE) ) {
                alt311=1;
            }
            switch (alt311) {
                case 1 :
                    // CSharpAngular.g:3078:16: constructor_modifiers
                    {
                    pushFollow(FOLLOW_constructor_modifiers_in_constructor_declaration23234);
                    constructor_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_constructor_declarator_in_constructor_declaration23237);
            constructor_declarator();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_constructor_body_in_constructor_declaration23239);
            constructor_body();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_declaration"


    public static class constructor_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_modifiers"
    // CSharpAngular.g:3080:1: constructor_modifiers : ( constructor_modifier )+ ;
    public final CSharpAngular.constructor_modifiers_return constructor_modifiers() throws RecognitionException {
        CSharpAngular.constructor_modifiers_return retval = new CSharpAngular.constructor_modifiers_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3081:2: ( ( constructor_modifier )+ )
            // CSharpAngular.g:3081:4: ( constructor_modifier )+
            {
            // CSharpAngular.g:3081:4: ( constructor_modifier )+
            int cnt312=0;
            loop312:
            do {
                int alt312=2;
                int LA312_0 = input.LA(1);

                if ( (LA312_0==EXTERN||LA312_0==INTERNAL||(LA312_0 >= PRIVATE && LA312_0 <= PUBLIC)||LA312_0==UNSAFE) ) {
                    alt312=1;
                }


                switch (alt312) {
            	case 1 :
            	    // CSharpAngular.g:3081:4: constructor_modifier
            	    {
            	    pushFollow(FOLLOW_constructor_modifier_in_constructor_modifiers23250);
            	    constructor_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt312 >= 1 ) break loop312;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(312, input);
                        throw eee;
                }
                cnt312++;
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_modifiers"


    public static class constructor_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_modifier"
    // CSharpAngular.g:3083:1: constructor_modifier : ( PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)| EXTERN -> text(value=$EXTERN.text)|consmd= constructor_modifier_unsafe -> text(value=consmd));
    public final CSharpAngular.constructor_modifier_return constructor_modifier() throws RecognitionException {
        CSharpAngular.constructor_modifier_return retval = new CSharpAngular.constructor_modifier_return();
        retval.start = input.LT(1);


        Token PUBLIC274=null;
        Token PROTECTED275=null;
        Token INTERNAL276=null;
        Token PRIVATE277=null;
        Token EXTERN278=null;
        CSharpAngular.constructor_modifier_unsafe_return consmd =null;


        try {
            // CSharpAngular.g:3084:3: ( PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)| EXTERN -> text(value=$EXTERN.text)|consmd= constructor_modifier_unsafe -> text(value=consmd))
            int alt313=6;
            switch ( input.LA(1) ) {
            case PUBLIC:
                {
                alt313=1;
                }
                break;
            case PROTECTED:
                {
                alt313=2;
                }
                break;
            case INTERNAL:
                {
                alt313=3;
                }
                break;
            case PRIVATE:
                {
                alt313=4;
                }
                break;
            case EXTERN:
                {
                alt313=5;
                }
                break;
            case UNSAFE:
                {
                alt313=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 313, 0, input);

                throw nvae;

            }

            switch (alt313) {
                case 1 :
                    // CSharpAngular.g:3085:3: PUBLIC
                    {
                    PUBLIC274=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_constructor_modifier23266); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3085:45: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC274!=null?PUBLIC274.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3086:5: PROTECTED
                    {
                    PROTECTED275=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_constructor_modifier23315); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3086:45: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED275!=null?PROTECTED275.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:3087:5: INTERNAL
                    {
                    INTERNAL276=(Token)match(input,INTERNAL,FOLLOW_INTERNAL_in_constructor_modifier23359); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3087:45: -> text(value=$INTERNAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERNAL276!=null?INTERNAL276.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:3088:5: PRIVATE
                    {
                    PRIVATE277=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_constructor_modifier23404); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3088:45: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE277!=null?PRIVATE277.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:3089:5: EXTERN
                    {
                    EXTERN278=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_constructor_modifier23450); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3089:45: -> text(value=$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXTERN278!=null?EXTERN278.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:3090:5: consmd= constructor_modifier_unsafe
                    {
                    pushFollow(FOLLOW_constructor_modifier_unsafe_in_constructor_modifier23499);
                    consmd=constructor_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3090:45: -> text(value=consmd)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", consmd));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_modifier"


    public static class constructor_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_declarator"
    // CSharpAngular.g:3092:1: constructor_declarator : IDENTIFIER OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( constructor_initializer )? ;
    public final CSharpAngular.constructor_declarator_return constructor_declarator() throws RecognitionException {
        CSharpAngular.constructor_declarator_return retval = new CSharpAngular.constructor_declarator_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3093:2: ( IDENTIFIER OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( constructor_initializer )? )
            // CSharpAngular.g:3093:4: IDENTIFIER OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( constructor_initializer )?
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_constructor_declarator23524); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_constructor_declarator23526); if (state.failed) return retval;

            // CSharpAngular.g:3093:27: ( formal_parameter_list )?
            int alt314=2;
            int LA314_0 = input.LA(1);

            if ( (LA314_0==BOOL||LA314_0==BYTE||LA314_0==CHAR||LA314_0==DECIMAL||LA314_0==DOUBLE||LA314_0==FLOAT||LA314_0==IDENTIFIER||LA314_0==INT||LA314_0==LONG||LA314_0==OBJECT||LA314_0==OPEN_BRACKET||LA314_0==OUT||LA314_0==PARAMS||LA314_0==REF||LA314_0==SBYTE||LA314_0==SHORT||LA314_0==STRING||LA314_0==THIS||(LA314_0 >= UINT && LA314_0 <= ULONG)||LA314_0==USHORT||LA314_0==VOID) ) {
                alt314=1;
            }
            switch (alt314) {
                case 1 :
                    // CSharpAngular.g:3093:27: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_constructor_declarator23528);
                    formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_constructor_declarator23531); if (state.failed) return retval;

            // CSharpAngular.g:3093:63: ( constructor_initializer )?
            int alt315=2;
            int LA315_0 = input.LA(1);

            if ( (LA315_0==COLON) ) {
                alt315=1;
            }
            switch (alt315) {
                case 1 :
                    // CSharpAngular.g:3093:63: constructor_initializer
                    {
                    pushFollow(FOLLOW_constructor_initializer_in_constructor_declarator23533);
                    constructor_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_declarator"


    public static class constructor_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_initializer"
    // CSharpAngular.g:3095:1: constructor_initializer : ( COLON BASE OPEN_PARENS (al= argument_list )? CLOSE_PARENS -> constructorInitializer(kwd=$BASE.textargList=al)| COLON THIS OPEN_PARENS ( argument_list )? CLOSE_PARENS -> constructorInitializer(kwd=$THIS.textargList=al));
    public final CSharpAngular.constructor_initializer_return constructor_initializer() throws RecognitionException {
        CSharpAngular.constructor_initializer_return retval = new CSharpAngular.constructor_initializer_return();
        retval.start = input.LT(1);


        Token BASE279=null;
        Token THIS280=null;
        CSharpAngular.argument_list_return al =null;


        try {
            // CSharpAngular.g:3096:3: ( COLON BASE OPEN_PARENS (al= argument_list )? CLOSE_PARENS -> constructorInitializer(kwd=$BASE.textargList=al)| COLON THIS OPEN_PARENS ( argument_list )? CLOSE_PARENS -> constructorInitializer(kwd=$THIS.textargList=al))
            int alt318=2;
            int LA318_0 = input.LA(1);

            if ( (LA318_0==COLON) ) {
                int LA318_1 = input.LA(2);

                if ( (LA318_1==BASE) ) {
                    alt318=1;
                }
                else if ( (LA318_1==THIS) ) {
                    alt318=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 318, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 318, 0, input);

                throw nvae;

            }
            switch (alt318) {
                case 1 :
                    // CSharpAngular.g:3097:3: COLON BASE OPEN_PARENS (al= argument_list )? CLOSE_PARENS
                    {
                    match(input,COLON,FOLLOW_COLON_in_constructor_initializer23549); if (state.failed) return retval;

                    BASE279=(Token)match(input,BASE,FOLLOW_BASE_in_constructor_initializer23551); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_constructor_initializer23553); if (state.failed) return retval;

                    // CSharpAngular.g:3097:26: (al= argument_list )?
                    int alt316=2;
                    int LA316_0 = input.LA(1);

                    if ( (LA316_0==AMP||(LA316_0 >= BANG && LA316_0 <= BASE)||LA316_0==BOOL||LA316_0==BYTE||(LA316_0 >= CHAR && LA316_0 <= CHECKED)||LA316_0==DECIMAL||(LA316_0 >= DEFAULT && LA316_0 <= DELEGATE)||LA316_0==DOUBLE||LA316_0==FALSE||LA316_0==FLOAT||LA316_0==IDENTIFIER||(LA316_0 >= INT && LA316_0 <= INTEGER_LITERAL)||LA316_0==LONG||LA316_0==MINUS||LA316_0==NEW||LA316_0==NULL||LA316_0==OBJECT||LA316_0==OPEN_PARENS||LA316_0==OP_DEC||LA316_0==OP_INC||LA316_0==OUT||LA316_0==PLUS||(LA316_0 >= REAL_LITERAL && LA316_0 <= REF)||LA316_0==SBYTE||LA316_0==SHORT||LA316_0==SIZEOF||LA316_0==STAR||(LA316_0 >= STRING && LA316_0 <= STRING_LITERAL)||LA316_0==THIS||(LA316_0 >= TILDE && LA316_0 <= TRUE)||LA316_0==TYPEOF||(LA316_0 >= UINT && LA316_0 <= UNCHECKED)||LA316_0==USHORT) ) {
                        alt316=1;
                    }
                    switch (alt316) {
                        case 1 :
                            // CSharpAngular.g:3097:27: al= argument_list
                            {
                            pushFollow(FOLLOW_argument_list_in_constructor_initializer23558);
                            al=argument_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_constructor_initializer23562); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3098:3: -> constructorInitializer(kwd=$BASE.textargList=al)
                      {
                          retval.st = templateLib.getInstanceOf("constructorInitializer",new STAttrMap().put("kwd", (BASE279!=null?BASE279.getText():null)).put("argList", al));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3099:5: COLON THIS OPEN_PARENS ( argument_list )? CLOSE_PARENS
                    {
                    match(input,COLON,FOLLOW_COLON_in_constructor_initializer23582); if (state.failed) return retval;

                    THIS280=(Token)match(input,THIS,FOLLOW_THIS_in_constructor_initializer23584); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_constructor_initializer23586); if (state.failed) return retval;

                    // CSharpAngular.g:3099:28: ( argument_list )?
                    int alt317=2;
                    int LA317_0 = input.LA(1);

                    if ( (LA317_0==AMP||(LA317_0 >= BANG && LA317_0 <= BASE)||LA317_0==BOOL||LA317_0==BYTE||(LA317_0 >= CHAR && LA317_0 <= CHECKED)||LA317_0==DECIMAL||(LA317_0 >= DEFAULT && LA317_0 <= DELEGATE)||LA317_0==DOUBLE||LA317_0==FALSE||LA317_0==FLOAT||LA317_0==IDENTIFIER||(LA317_0 >= INT && LA317_0 <= INTEGER_LITERAL)||LA317_0==LONG||LA317_0==MINUS||LA317_0==NEW||LA317_0==NULL||LA317_0==OBJECT||LA317_0==OPEN_PARENS||LA317_0==OP_DEC||LA317_0==OP_INC||LA317_0==OUT||LA317_0==PLUS||(LA317_0 >= REAL_LITERAL && LA317_0 <= REF)||LA317_0==SBYTE||LA317_0==SHORT||LA317_0==SIZEOF||LA317_0==STAR||(LA317_0 >= STRING && LA317_0 <= STRING_LITERAL)||LA317_0==THIS||(LA317_0 >= TILDE && LA317_0 <= TRUE)||LA317_0==TYPEOF||(LA317_0 >= UINT && LA317_0 <= UNCHECKED)||LA317_0==USHORT) ) {
                        alt317=1;
                    }
                    switch (alt317) {
                        case 1 :
                            // CSharpAngular.g:3099:28: argument_list
                            {
                            pushFollow(FOLLOW_argument_list_in_constructor_initializer23588);
                            argument_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_constructor_initializer23591); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3100:3: -> constructorInitializer(kwd=$THIS.textargList=al)
                      {
                          retval.st = templateLib.getInstanceOf("constructorInitializer",new STAttrMap().put("kwd", (THIS280!=null?THIS280.getText():null)).put("argList", al));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_initializer"


    public static class constructor_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_body"
    // CSharpAngular.g:3103:1: constructor_body : (blk= block -> text(value=blk)| SEMICOLON -> text(value=$SEMICOLON.text));
    public final CSharpAngular.constructor_body_return constructor_body() throws RecognitionException {
        CSharpAngular.constructor_body_return retval = new CSharpAngular.constructor_body_return();
        retval.start = input.LT(1);


        Token SEMICOLON281=null;
        CSharpAngular.block_return blk =null;


        try {
            // CSharpAngular.g:3104:3: (blk= block -> text(value=blk)| SEMICOLON -> text(value=$SEMICOLON.text))
            int alt319=2;
            int LA319_0 = input.LA(1);

            if ( (LA319_0==OPEN_BRACE) ) {
                alt319=1;
            }
            else if ( (LA319_0==SEMICOLON) ) {
                alt319=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 319, 0, input);

                throw nvae;

            }
            switch (alt319) {
                case 1 :
                    // CSharpAngular.g:3105:3: blk= block
                    {
                    pushFollow(FOLLOW_block_in_constructor_body23626);
                    blk=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3105:22: -> text(value=blk)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", blk));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3106:5: SEMICOLON
                    {
                    SEMICOLON281=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_constructor_body23649); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3106:22: -> text(value=$SEMICOLON.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEMICOLON281!=null?SEMICOLON281.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_body"


    public static class static_constructor_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "static_constructor_declaration"
    // CSharpAngular.g:3109:1: static_constructor_declaration : ( attributes )? static_constructor_modifiers IDENTIFIER OPEN_PARENS CLOSE_PARENS static_constructor_body ;
    public final CSharpAngular.static_constructor_declaration_return static_constructor_declaration() throws RecognitionException {
        CSharpAngular.static_constructor_declaration_return retval = new CSharpAngular.static_constructor_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3110:2: ( ( attributes )? static_constructor_modifiers IDENTIFIER OPEN_PARENS CLOSE_PARENS static_constructor_body )
            // CSharpAngular.g:3110:4: ( attributes )? static_constructor_modifiers IDENTIFIER OPEN_PARENS CLOSE_PARENS static_constructor_body
            {
            // CSharpAngular.g:3110:4: ( attributes )?
            int alt320=2;
            int LA320_0 = input.LA(1);

            if ( (LA320_0==OPEN_BRACKET) ) {
                alt320=1;
            }
            switch (alt320) {
                case 1 :
                    // CSharpAngular.g:3110:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_static_constructor_declaration23677);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_static_constructor_modifiers_in_static_constructor_declaration23680);
            static_constructor_modifiers();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_static_constructor_declaration23682); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_static_constructor_declaration23684); if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_static_constructor_declaration23686); if (state.failed) return retval;

            pushFollow(FOLLOW_static_constructor_body_in_static_constructor_declaration23688);
            static_constructor_body();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_constructor_declaration"


    public static class static_constructor_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "static_constructor_modifiers"
    // CSharpAngular.g:3119:1: static_constructor_modifiers : static_constructor_modifiers_unsafe ;
    public final CSharpAngular.static_constructor_modifiers_return static_constructor_modifiers() throws RecognitionException {
        CSharpAngular.static_constructor_modifiers_return retval = new CSharpAngular.static_constructor_modifiers_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3120:3: ( static_constructor_modifiers_unsafe )
            // CSharpAngular.g:3120:5: static_constructor_modifiers_unsafe
            {
            pushFollow(FOLLOW_static_constructor_modifiers_unsafe_in_static_constructor_modifiers23702);
            static_constructor_modifiers_unsafe();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_constructor_modifiers"


    public static class static_constructor_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "static_constructor_body"
    // CSharpAngular.g:3122:1: static_constructor_body : (blk= block -> text(value=blk)| SEMICOLON -> text(value=$SEMICOLON.text));
    public final CSharpAngular.static_constructor_body_return static_constructor_body() throws RecognitionException {
        CSharpAngular.static_constructor_body_return retval = new CSharpAngular.static_constructor_body_return();
        retval.start = input.LT(1);


        Token SEMICOLON282=null;
        CSharpAngular.block_return blk =null;


        try {
            // CSharpAngular.g:3123:4: (blk= block -> text(value=blk)| SEMICOLON -> text(value=$SEMICOLON.text))
            int alt321=2;
            int LA321_0 = input.LA(1);

            if ( (LA321_0==OPEN_BRACE) ) {
                alt321=1;
            }
            else if ( (LA321_0==SEMICOLON) ) {
                alt321=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 321, 0, input);

                throw nvae;

            }
            switch (alt321) {
                case 1 :
                    // CSharpAngular.g:3124:4: blk= block
                    {
                    pushFollow(FOLLOW_block_in_static_constructor_body23722);
                    blk=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3124:23: -> text(value=blk)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", blk));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3125:6: SEMICOLON
                    {
                    SEMICOLON282=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_static_constructor_body23746); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3125:23: -> text(value=$SEMICOLON.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEMICOLON282!=null?SEMICOLON282.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_constructor_body"


    public static class destructor_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "destructor_declaration"
    // CSharpAngular.g:3134:1: destructor_declaration : destructor_declaration_unsafe ;
    public final CSharpAngular.destructor_declaration_return destructor_declaration() throws RecognitionException {
        CSharpAngular.destructor_declaration_return retval = new CSharpAngular.destructor_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3135:2: ( destructor_declaration_unsafe )
            // CSharpAngular.g:3135:4: destructor_declaration_unsafe
            {
            pushFollow(FOLLOW_destructor_declaration_unsafe_in_destructor_declaration23777);
            destructor_declaration_unsafe();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "destructor_declaration"


    public static class destructor_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "destructor_body"
    // CSharpAngular.g:3137:1: destructor_body : (blk= block -> text(value=blk)| SEMICOLON -> text(value=$SEMICOLON.text));
    public final CSharpAngular.destructor_body_return destructor_body() throws RecognitionException {
        CSharpAngular.destructor_body_return retval = new CSharpAngular.destructor_body_return();
        retval.start = input.LT(1);


        Token SEMICOLON283=null;
        CSharpAngular.block_return blk =null;


        try {
            // CSharpAngular.g:3138:3: (blk= block -> text(value=blk)| SEMICOLON -> text(value=$SEMICOLON.text))
            int alt322=2;
            int LA322_0 = input.LA(1);

            if ( (LA322_0==OPEN_BRACE) ) {
                alt322=1;
            }
            else if ( (LA322_0==SEMICOLON) ) {
                alt322=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 322, 0, input);

                throw nvae;

            }
            switch (alt322) {
                case 1 :
                    // CSharpAngular.g:3139:3: blk= block
                    {
                    pushFollow(FOLLOW_block_in_destructor_body23794);
                    blk=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3139:22: -> text(value=blk)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", blk));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3140:5: SEMICOLON
                    {
                    SEMICOLON283=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_destructor_body23817); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3140:22: -> text(value=$SEMICOLON.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEMICOLON283!=null?SEMICOLON283.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "destructor_body"


    public static class body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "body"
    // CSharpAngular.g:3144:1: body : (bdy= block -> body(value=bdy)|empStmt= SEMICOLON -> body(value=$empStmt.text));
    public final CSharpAngular.body_return body() throws RecognitionException {
        CSharpAngular.body_return retval = new CSharpAngular.body_return();
        retval.start = input.LT(1);


        Token empStmt=null;
        CSharpAngular.block_return bdy =null;


        try {
            // CSharpAngular.g:3145:3: (bdy= block -> body(value=bdy)|empStmt= SEMICOLON -> body(value=$empStmt.text))
            int alt323=2;
            int LA323_0 = input.LA(1);

            if ( (LA323_0==OPEN_BRACE) ) {
                alt323=1;
            }
            else if ( (LA323_0==SEMICOLON) ) {
                alt323=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 323, 0, input);

                throw nvae;

            }
            switch (alt323) {
                case 1 :
                    // CSharpAngular.g:3146:3: bdy= block
                    {
                    pushFollow(FOLLOW_block_in_body23851);
                    bdy=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3147:3: -> body(value=bdy)
                      {
                          retval.st = templateLib.getInstanceOf("body",new STAttrMap().put("value", bdy));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3148:5: empStmt= SEMICOLON
                    {
                    empStmt=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_body23869); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3149:3: -> body(value=$empStmt.text)
                      {
                          retval.st = templateLib.getInstanceOf("body",new STAttrMap().put("value", (empStmt!=null?empStmt.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "body"


    public static class struct_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_declaration"
    // CSharpAngular.g:3153:1: struct_declaration : ( attributes )? ( struct_modifiers )? ( partial_contextual_keyword )? STRUCT IDENTIFIER ( type_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( SEMICOLON )? ;
    public final CSharpAngular.struct_declaration_return struct_declaration() throws RecognitionException {
        CSharpAngular.struct_declaration_return retval = new CSharpAngular.struct_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3154:2: ( ( attributes )? ( struct_modifiers )? ( partial_contextual_keyword )? STRUCT IDENTIFIER ( type_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( SEMICOLON )? )
            // CSharpAngular.g:3154:4: ( attributes )? ( struct_modifiers )? ( partial_contextual_keyword )? STRUCT IDENTIFIER ( type_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( SEMICOLON )?
            {
            // CSharpAngular.g:3154:4: ( attributes )?
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( (LA324_0==OPEN_BRACKET) ) {
                alt324=1;
            }
            switch (alt324) {
                case 1 :
                    // CSharpAngular.g:3154:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_struct_declaration23893);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3154:16: ( struct_modifiers )?
            int alt325=2;
            int LA325_0 = input.LA(1);

            if ( (LA325_0==INTERNAL||LA325_0==NEW||(LA325_0 >= PRIVATE && LA325_0 <= PUBLIC)||LA325_0==UNSAFE) ) {
                alt325=1;
            }
            switch (alt325) {
                case 1 :
                    // CSharpAngular.g:3154:16: struct_modifiers
                    {
                    pushFollow(FOLLOW_struct_modifiers_in_struct_declaration23896);
                    struct_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3154:34: ( partial_contextual_keyword )?
            int alt326=2;
            int LA326_0 = input.LA(1);

            if ( (LA326_0==IDENTIFIER) ) {
                alt326=1;
            }
            switch (alt326) {
                case 1 :
                    // CSharpAngular.g:3154:34: partial_contextual_keyword
                    {
                    pushFollow(FOLLOW_partial_contextual_keyword_in_struct_declaration23899);
                    partial_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,STRUCT,FOLLOW_STRUCT_in_struct_declaration23902); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_struct_declaration23904); if (state.failed) return retval;

            // CSharpAngular.g:3154:80: ( type_parameter_list )?
            int alt327=2;
            int LA327_0 = input.LA(1);

            if ( (LA327_0==LT) ) {
                alt327=1;
            }
            switch (alt327) {
                case 1 :
                    // CSharpAngular.g:3154:80: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_struct_declaration23906);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3154:101: ( struct_interfaces )?
            int alt328=2;
            int LA328_0 = input.LA(1);

            if ( (LA328_0==COLON) ) {
                alt328=1;
            }
            switch (alt328) {
                case 1 :
                    // CSharpAngular.g:3154:101: struct_interfaces
                    {
                    pushFollow(FOLLOW_struct_interfaces_in_struct_declaration23909);
                    struct_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3154:120: ( type_parameter_constraints_clauses )?
            int alt329=2;
            int LA329_0 = input.LA(1);

            if ( (LA329_0==IDENTIFIER) ) {
                alt329=1;
            }
            switch (alt329) {
                case 1 :
                    // CSharpAngular.g:3154:120: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_struct_declaration23912);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_struct_body_in_struct_declaration23915);
            struct_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3154:168: ( SEMICOLON )?
            int alt330=2;
            int LA330_0 = input.LA(1);

            if ( (LA330_0==SEMICOLON) ) {
                alt330=1;
            }
            switch (alt330) {
                case 1 :
                    // CSharpAngular.g:3154:168: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_struct_declaration23917); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_declaration"


    public static class struct_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_modifiers"
    // CSharpAngular.g:3156:1: struct_modifiers : struct_modifier ( struct_modifier )* ;
    public final CSharpAngular.struct_modifiers_return struct_modifiers() throws RecognitionException {
        CSharpAngular.struct_modifiers_return retval = new CSharpAngular.struct_modifiers_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3157:2: ( struct_modifier ( struct_modifier )* )
            // CSharpAngular.g:3157:4: struct_modifier ( struct_modifier )*
            {
            pushFollow(FOLLOW_struct_modifier_in_struct_modifiers23929);
            struct_modifier();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3157:20: ( struct_modifier )*
            loop331:
            do {
                int alt331=2;
                int LA331_0 = input.LA(1);

                if ( (LA331_0==INTERNAL||LA331_0==NEW||(LA331_0 >= PRIVATE && LA331_0 <= PUBLIC)||LA331_0==UNSAFE) ) {
                    alt331=1;
                }


                switch (alt331) {
            	case 1 :
            	    // CSharpAngular.g:3157:22: struct_modifier
            	    {
            	    pushFollow(FOLLOW_struct_modifier_in_struct_modifiers23933);
            	    struct_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop331;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_modifiers"


    public static class struct_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_modifier"
    // CSharpAngular.g:3159:1: struct_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)|strmod= struct_modifier_unsafe -> text(value=strmod));
    public final CSharpAngular.struct_modifier_return struct_modifier() throws RecognitionException {
        CSharpAngular.struct_modifier_return retval = new CSharpAngular.struct_modifier_return();
        retval.start = input.LT(1);


        Token NEW284=null;
        Token PUBLIC285=null;
        Token PROTECTED286=null;
        Token INTERNAL287=null;
        Token PRIVATE288=null;
        CSharpAngular.struct_modifier_unsafe_return strmod =null;


        try {
            // CSharpAngular.g:3160:3: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)|strmod= struct_modifier_unsafe -> text(value=strmod))
            int alt332=6;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt332=1;
                }
                break;
            case PUBLIC:
                {
                alt332=2;
                }
                break;
            case PROTECTED:
                {
                alt332=3;
                }
                break;
            case INTERNAL:
                {
                alt332=4;
                }
                break;
            case PRIVATE:
                {
                alt332=5;
                }
                break;
            case UNSAFE:
                {
                alt332=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 332, 0, input);

                throw nvae;

            }

            switch (alt332) {
                case 1 :
                    // CSharpAngular.g:3161:3: NEW
                    {
                    NEW284=(Token)match(input,NEW,FOLLOW_NEW_in_struct_modifier23951); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3161:40: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW284!=null?NEW284.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3162:5: PUBLIC
                    {
                    PUBLIC285=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_struct_modifier23998); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3162:40: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC285!=null?PUBLIC285.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:3163:5: PROTECTED
                    {
                    PROTECTED286=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_struct_modifier24040); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3163:40: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED286!=null?PROTECTED286.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:3164:5: INTERNAL
                    {
                    INTERNAL287=(Token)match(input,INTERNAL,FOLLOW_INTERNAL_in_struct_modifier24079); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3164:40: -> text(value=$INTERNAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERNAL287!=null?INTERNAL287.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:3165:5: PRIVATE
                    {
                    PRIVATE288=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_struct_modifier24119); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3165:40: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE288!=null?PRIVATE288.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:3166:5: strmod= struct_modifier_unsafe
                    {
                    pushFollow(FOLLOW_struct_modifier_unsafe_in_struct_modifier24162);
                    strmod=struct_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3166:40: -> text(value=strmod)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", strmod));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_modifier"


    public static class struct_interfaces_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_interfaces"
    // CSharpAngular.g:3169:1: struct_interfaces : COLON interface_type_list ;
    public final CSharpAngular.struct_interfaces_return struct_interfaces() throws RecognitionException {
        CSharpAngular.struct_interfaces_return retval = new CSharpAngular.struct_interfaces_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3170:2: ( COLON interface_type_list )
            // CSharpAngular.g:3170:4: COLON interface_type_list
            {
            match(input,COLON,FOLLOW_COLON_in_struct_interfaces24188); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_type_list_in_struct_interfaces24190);
            interface_type_list();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_interfaces"


    public static class struct_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_body"
    // CSharpAngular.g:3172:1: struct_body : OPEN_BRACE ( struct_member_declarations )? CLOSE_BRACE ;
    public final CSharpAngular.struct_body_return struct_body() throws RecognitionException {
        CSharpAngular.struct_body_return retval = new CSharpAngular.struct_body_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3173:2: ( OPEN_BRACE ( struct_member_declarations )? CLOSE_BRACE )
            // CSharpAngular.g:3173:4: OPEN_BRACE ( struct_member_declarations )? CLOSE_BRACE
            {
            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_struct_body24201); if (state.failed) return retval;

            // CSharpAngular.g:3173:15: ( struct_member_declarations )?
            int alt333=2;
            int LA333_0 = input.LA(1);

            if ( (LA333_0==ABSTRACT||LA333_0==BOOL||LA333_0==BYTE||LA333_0==CHAR||LA333_0==CLASS||LA333_0==CONST||LA333_0==DECIMAL||LA333_0==DELEGATE||LA333_0==DOUBLE||(LA333_0 >= ENUM && LA333_0 <= EXTERN)||(LA333_0 >= FIXED && LA333_0 <= FLOAT)||LA333_0==IDENTIFIER||LA333_0==IMPLICIT||LA333_0==INT||(LA333_0 >= INTERFACE && LA333_0 <= INTERNAL)||LA333_0==LONG||LA333_0==NEW||LA333_0==OBJECT||LA333_0==OPEN_BRACKET||LA333_0==OVERRIDE||(LA333_0 >= PRIVATE && LA333_0 <= PUBLIC)||LA333_0==READONLY||(LA333_0 >= SBYTE && LA333_0 <= SEALED)||(LA333_0 >= SHORT && LA333_0 <= SINGLE_LINE_DOC_COMMENT)||(LA333_0 >= STATIC && LA333_0 <= STRING)||LA333_0==STRUCT||(LA333_0 >= UINT && LA333_0 <= ULONG)||(LA333_0 >= UNSAFE && LA333_0 <= USHORT)||(LA333_0 >= VIRTUAL && LA333_0 <= VOLATILE)) ) {
                alt333=1;
            }
            switch (alt333) {
                case 1 :
                    // CSharpAngular.g:3173:15: struct_member_declarations
                    {
                    pushFollow(FOLLOW_struct_member_declarations_in_struct_body24203);
                    struct_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_struct_body24206); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_body"


    public static class struct_member_declarations_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_member_declarations"
    // CSharpAngular.g:3175:1: struct_member_declarations : struct_member_declaration ( struct_member_declaration )* ;
    public final CSharpAngular.struct_member_declarations_return struct_member_declarations() throws RecognitionException {
        CSharpAngular.struct_member_declarations_return retval = new CSharpAngular.struct_member_declarations_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3176:2: ( struct_member_declaration ( struct_member_declaration )* )
            // CSharpAngular.g:3176:4: struct_member_declaration ( struct_member_declaration )*
            {
            pushFollow(FOLLOW_struct_member_declaration_in_struct_member_declarations24217);
            struct_member_declaration();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3176:30: ( struct_member_declaration )*
            loop334:
            do {
                int alt334=2;
                int LA334_0 = input.LA(1);

                if ( (LA334_0==ABSTRACT||LA334_0==BOOL||LA334_0==BYTE||LA334_0==CHAR||LA334_0==CLASS||LA334_0==CONST||LA334_0==DECIMAL||LA334_0==DELEGATE||LA334_0==DOUBLE||(LA334_0 >= ENUM && LA334_0 <= EXTERN)||(LA334_0 >= FIXED && LA334_0 <= FLOAT)||LA334_0==IDENTIFIER||LA334_0==IMPLICIT||LA334_0==INT||(LA334_0 >= INTERFACE && LA334_0 <= INTERNAL)||LA334_0==LONG||LA334_0==NEW||LA334_0==OBJECT||LA334_0==OPEN_BRACKET||LA334_0==OVERRIDE||(LA334_0 >= PRIVATE && LA334_0 <= PUBLIC)||LA334_0==READONLY||(LA334_0 >= SBYTE && LA334_0 <= SEALED)||(LA334_0 >= SHORT && LA334_0 <= SINGLE_LINE_DOC_COMMENT)||(LA334_0 >= STATIC && LA334_0 <= STRING)||LA334_0==STRUCT||(LA334_0 >= UINT && LA334_0 <= ULONG)||(LA334_0 >= UNSAFE && LA334_0 <= USHORT)||(LA334_0 >= VIRTUAL && LA334_0 <= VOLATILE)) ) {
                    alt334=1;
                }


                switch (alt334) {
            	case 1 :
            	    // CSharpAngular.g:3176:32: struct_member_declaration
            	    {
            	    pushFollow(FOLLOW_struct_member_declaration_in_struct_member_declarations24221);
            	    struct_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop334;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_member_declarations"


    public static class struct_member_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_member_declaration"
    // CSharpAngular.g:3193:1: struct_member_declaration : ( attributes )? ( all_member_modifiers )? ( common_member_declaration | FIXED buffer_element_type fixed_size_buffer_declarators SEMICOLON ) ;
    public final CSharpAngular.struct_member_declaration_return struct_member_declaration() throws RecognitionException {
        CSharpAngular.struct_member_declaration_return retval = new CSharpAngular.struct_member_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3194:2: ( ( attributes )? ( all_member_modifiers )? ( common_member_declaration | FIXED buffer_element_type fixed_size_buffer_declarators SEMICOLON ) )
            // CSharpAngular.g:3194:4: ( attributes )? ( all_member_modifiers )? ( common_member_declaration | FIXED buffer_element_type fixed_size_buffer_declarators SEMICOLON )
            {
            // CSharpAngular.g:3194:4: ( attributes )?
            int alt335=2;
            int LA335_0 = input.LA(1);

            if ( (LA335_0==OPEN_BRACKET) ) {
                alt335=1;
            }
            switch (alt335) {
                case 1 :
                    // CSharpAngular.g:3194:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_struct_member_declaration24237);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3194:16: ( all_member_modifiers )?
            int alt336=2;
            int LA336_0 = input.LA(1);

            if ( (LA336_0==ABSTRACT||LA336_0==EXTERN||LA336_0==INTERNAL||LA336_0==NEW||LA336_0==OVERRIDE||(LA336_0 >= PRIVATE && LA336_0 <= PUBLIC)||LA336_0==READONLY||LA336_0==SEALED||LA336_0==STATIC||LA336_0==UNSAFE||LA336_0==VIRTUAL||LA336_0==VOLATILE) ) {
                alt336=1;
            }
            else if ( (LA336_0==IDENTIFIER) ) {
                int LA336_15 = input.LA(2);

                if ( ((input.LT(1).getText().equals("partial"))) ) {
                    alt336=1;
                }
            }
            switch (alt336) {
                case 1 :
                    // CSharpAngular.g:3194:16: all_member_modifiers
                    {
                    pushFollow(FOLLOW_all_member_modifiers_in_struct_member_declaration24240);
                    all_member_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3195:3: ( common_member_declaration | FIXED buffer_element_type fixed_size_buffer_declarators SEMICOLON )
            int alt337=2;
            int LA337_0 = input.LA(1);

            if ( (LA337_0==BOOL||LA337_0==BYTE||LA337_0==CHAR||LA337_0==CLASS||LA337_0==CONST||LA337_0==DECIMAL||LA337_0==DELEGATE||LA337_0==DOUBLE||(LA337_0 >= ENUM && LA337_0 <= EXPLICIT)||LA337_0==FLOAT||LA337_0==IDENTIFIER||LA337_0==IMPLICIT||LA337_0==INT||LA337_0==INTERFACE||LA337_0==LONG||LA337_0==OBJECT||LA337_0==SBYTE||(LA337_0 >= SHORT && LA337_0 <= SINGLE_LINE_DOC_COMMENT)||LA337_0==STRING||LA337_0==STRUCT||(LA337_0 >= UINT && LA337_0 <= ULONG)||LA337_0==USHORT||LA337_0==VOID) ) {
                alt337=1;
            }
            else if ( (LA337_0==FIXED) ) {
                alt337=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 337, 0, input);

                throw nvae;

            }
            switch (alt337) {
                case 1 :
                    // CSharpAngular.g:3195:5: common_member_declaration
                    {
                    pushFollow(FOLLOW_common_member_declaration_in_struct_member_declaration24247);
                    common_member_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3196:5: FIXED buffer_element_type fixed_size_buffer_declarators SEMICOLON
                    {
                    match(input,FIXED,FOLLOW_FIXED_in_struct_member_declaration24253); if (state.failed) return retval;

                    pushFollow(FOLLOW_buffer_element_type_in_struct_member_declaration24255);
                    buffer_element_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_fixed_size_buffer_declarators_in_struct_member_declaration24257);
                    fixed_size_buffer_declarators();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_struct_member_declaration24259); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_member_declaration"


    public static class array_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "array_type"
    // CSharpAngular.g:3206:1: array_type : bTyp= base_type (chld+= array_type_Chld )+ -> arrayType(type=bTypchldLst=$chld);
    public final CSharpAngular.array_type_return array_type() throws RecognitionException {
        CSharpAngular.array_type_return retval = new CSharpAngular.array_type_return();
        retval.start = input.LT(1);


        List list_chld=null;
        CSharpAngular.base_type_return bTyp =null;

        RuleReturnScope chld = null;
        try {
            // CSharpAngular.g:3207:2: (bTyp= base_type (chld+= array_type_Chld )+ -> arrayType(type=bTypchldLst=$chld))
            // CSharpAngular.g:3208:2: bTyp= base_type (chld+= array_type_Chld )+
            {
            pushFollow(FOLLOW_base_type_in_array_type24283);
            bTyp=base_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3208:17: (chld+= array_type_Chld )+
            int cnt338=0;
            loop338:
            do {
                int alt338=2;
                int LA338_0 = input.LA(1);

                if ( (LA338_0==OPEN_BRACKET) ) {
                    int LA338_2 = input.LA(2);

                    if ( (LA338_2==CLOSE_BRACKET||LA338_2==COMMA) ) {
                        alt338=1;
                    }


                }
                else if ( (LA338_0==INTERR||LA338_0==STAR) ) {
                    alt338=1;
                }


                switch (alt338) {
            	case 1 :
            	    // CSharpAngular.g:3208:18: chld+= array_type_Chld
            	    {
            	    pushFollow(FOLLOW_array_type_Chld_in_array_type24288);
            	    chld=array_type_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_chld==null) list_chld=new ArrayList();
            	    list_chld.add(chld.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt338 >= 1 ) break loop338;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(338, input);
                        throw eee;
                }
                cnt338++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3209:2: -> arrayType(type=bTypchldLst=$chld)
              {
                  retval.st = templateLib.getInstanceOf("arrayType",new STAttrMap().put("type", bTyp).put("chldLst", list_chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_type"


    public static class array_type_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "array_type_Chld"
    // CSharpAngular.g:3212:1: array_type_Chld : ( (st+= STAR )* rs= rank_specifier -> arrayTypeChld(symbolLst=$strnkSpcr=rs)| (intr+= INTERR )* rns= rank_specifier -> arrayTypeChld(symbolLst=$intrrnkSpcr=rns));
    public final CSharpAngular.array_type_Chld_return array_type_Chld() throws RecognitionException {
        CSharpAngular.array_type_Chld_return retval = new CSharpAngular.array_type_Chld_return();
        retval.start = input.LT(1);


        Token st=null;
        Token intr=null;
        List list_st=null;
        List list_intr=null;
        CSharpAngular.rank_specifier_return rs =null;

        CSharpAngular.rank_specifier_return rns =null;


        try {
            // CSharpAngular.g:3213:2: ( (st+= STAR )* rs= rank_specifier -> arrayTypeChld(symbolLst=$strnkSpcr=rs)| (intr+= INTERR )* rns= rank_specifier -> arrayTypeChld(symbolLst=$intrrnkSpcr=rns))
            int alt341=2;
            alt341 = dfa341.predict(input);
            switch (alt341) {
                case 1 :
                    // CSharpAngular.g:3214:2: (st+= STAR )* rs= rank_specifier
                    {
                    // CSharpAngular.g:3214:2: (st+= STAR )*
                    loop339:
                    do {
                        int alt339=2;
                        int LA339_0 = input.LA(1);

                        if ( (LA339_0==STAR) ) {
                            alt339=1;
                        }


                        switch (alt339) {
                    	case 1 :
                    	    // CSharpAngular.g:3214:3: st+= STAR
                    	    {
                    	    st=(Token)match(input,STAR,FOLLOW_STAR_in_array_type_Chld24318); if (state.failed) return retval;
                    	    if (list_st==null) list_st=new ArrayList();
                    	    list_st.add(st);


                    	    }
                    	    break;

                    	default :
                    	    break loop339;
                        }
                    } while (true);


                    pushFollow(FOLLOW_rank_specifier_in_array_type_Chld24324);
                    rs=rank_specifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3215:2: -> arrayTypeChld(symbolLst=$strnkSpcr=rs)
                      {
                          retval.st = templateLib.getInstanceOf("arrayTypeChld",new STAttrMap().put("symbolLst", list_st).put("rnkSpcr", rs));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3216:4: (intr+= INTERR )* rns= rank_specifier
                    {
                    // CSharpAngular.g:3216:4: (intr+= INTERR )*
                    loop340:
                    do {
                        int alt340=2;
                        int LA340_0 = input.LA(1);

                        if ( (LA340_0==INTERR) ) {
                            alt340=1;
                        }


                        switch (alt340) {
                    	case 1 :
                    	    // CSharpAngular.g:3216:5: intr+= INTERR
                    	    {
                    	    intr=(Token)match(input,INTERR,FOLLOW_INTERR_in_array_type_Chld24345); if (state.failed) return retval;
                    	    if (list_intr==null) list_intr=new ArrayList();
                    	    list_intr.add(intr);


                    	    }
                    	    break;

                    	default :
                    	    break loop340;
                        }
                    } while (true);


                    pushFollow(FOLLOW_rank_specifier_in_array_type_Chld24351);
                    rns=rank_specifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3217:2: -> arrayTypeChld(symbolLst=$intrrnkSpcr=rns)
                      {
                          retval.st = templateLib.getInstanceOf("arrayTypeChld",new STAttrMap().put("symbolLst", list_intr).put("rnkSpcr", rns));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_type_Chld"


    public static class non_array_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "non_array_type"
    // CSharpAngular.g:3225:1: non_array_type : typ1= base_type (chld1+= non_array_type_Chld )* -> nonArrayType(type=typ1rankSpcr=$chld1);
    public final CSharpAngular.non_array_type_return non_array_type() throws RecognitionException {
        CSharpAngular.non_array_type_return retval = new CSharpAngular.non_array_type_return();
        retval.start = input.LT(1);


        List list_chld1=null;
        CSharpAngular.base_type_return typ1 =null;

        RuleReturnScope chld1 = null;
        try {
            // CSharpAngular.g:3226:2: (typ1= base_type (chld1+= non_array_type_Chld )* -> nonArrayType(type=typ1rankSpcr=$chld1))
            // CSharpAngular.g:3227:2: typ1= base_type (chld1+= non_array_type_Chld )*
            {
            pushFollow(FOLLOW_base_type_in_non_array_type24383);
            typ1=base_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3227:17: (chld1+= non_array_type_Chld )*
            loop342:
            do {
                int alt342=2;
                int LA342_0 = input.LA(1);

                if ( (LA342_0==OPEN_BRACKET) ) {
                    int LA342_1 = input.LA(2);

                    if ( (LA342_1==CLOSE_BRACKET||LA342_1==COMMA) ) {
                        alt342=1;
                    }


                }
                else if ( (LA342_0==INTERR||LA342_0==STAR) ) {
                    alt342=1;
                }


                switch (alt342) {
            	case 1 :
            	    // CSharpAngular.g:3227:18: chld1+= non_array_type_Chld
            	    {
            	    pushFollow(FOLLOW_non_array_type_Chld_in_non_array_type24388);
            	    chld1=non_array_type_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_chld1==null) list_chld1=new ArrayList();
            	    list_chld1.add(chld1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop342;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3228:2: -> nonArrayType(type=typ1rankSpcr=$chld1)
              {
                  retval.st = templateLib.getInstanceOf("nonArrayType",new STAttrMap().put("type", typ1).put("rankSpcr", list_chld1));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "non_array_type"


    public static class non_array_type_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "non_array_type_Chld"
    // CSharpAngular.g:3231:1: non_array_type_Chld : (rs= rank_specifier -> nonArrayTypeChld(chld=rs)| INTERR -> nonArrayTypeChld(chld=\"\")| STAR -> nonArrayTypeChld(chld=$STAR.text));
    public final CSharpAngular.non_array_type_Chld_return non_array_type_Chld() throws RecognitionException {
        CSharpAngular.non_array_type_Chld_return retval = new CSharpAngular.non_array_type_Chld_return();
        retval.start = input.LT(1);


        Token STAR289=null;
        CSharpAngular.rank_specifier_return rs =null;


        try {
            // CSharpAngular.g:3232:2: (rs= rank_specifier -> nonArrayTypeChld(chld=rs)| INTERR -> nonArrayTypeChld(chld=\"\")| STAR -> nonArrayTypeChld(chld=$STAR.text))
            int alt343=3;
            switch ( input.LA(1) ) {
            case OPEN_BRACKET:
                {
                alt343=1;
                }
                break;
            case INTERR:
                {
                alt343=2;
                }
                break;
            case STAR:
                {
                alt343=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 343, 0, input);

                throw nvae;

            }

            switch (alt343) {
                case 1 :
                    // CSharpAngular.g:3233:2: rs= rank_specifier
                    {
                    pushFollow(FOLLOW_rank_specifier_in_non_array_type_Chld24419);
                    rs=rank_specifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3234:2: -> nonArrayTypeChld(chld=rs)
                      {
                          retval.st = templateLib.getInstanceOf("nonArrayTypeChld",new STAttrMap().put("chld", rs));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3235:3: INTERR
                    {
                    match(input,INTERR,FOLLOW_INTERR_in_non_array_type_Chld24432); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3236:2: -> nonArrayTypeChld(chld=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("nonArrayTypeChld",new STAttrMap().put("chld", ""));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:3237:3: STAR
                    {
                    STAR289=(Token)match(input,STAR,FOLLOW_STAR_in_non_array_type_Chld24445); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3238:2: -> nonArrayTypeChld(chld=$STAR.text)
                      {
                          retval.st = templateLib.getInstanceOf("nonArrayTypeChld",new STAttrMap().put("chld", (STAR289!=null?STAR289.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "non_array_type_Chld"


    public static class rank_specifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "rank_specifiers"
    // CSharpAngular.g:3246:1: rank_specifiers : (rnkspLst+= rank_specifier )+ -> lineIterator(value=$rnkspLst);
    public final CSharpAngular.rank_specifiers_return rank_specifiers() throws RecognitionException {
        CSharpAngular.rank_specifiers_return retval = new CSharpAngular.rank_specifiers_return();
        retval.start = input.LT(1);


        List list_rnkspLst=null;
        RuleReturnScope rnkspLst = null;
        try {
            // CSharpAngular.g:3247:3: ( (rnkspLst+= rank_specifier )+ -> lineIterator(value=$rnkspLst))
            // CSharpAngular.g:3248:3: (rnkspLst+= rank_specifier )+
            {
            // CSharpAngular.g:3248:3: (rnkspLst+= rank_specifier )+
            int cnt344=0;
            loop344:
            do {
                int alt344=2;
                int LA344_0 = input.LA(1);

                if ( (LA344_0==OPEN_BRACKET) ) {
                    int LA344_2 = input.LA(2);

                    if ( (LA344_2==CLOSE_BRACKET||LA344_2==COMMA) ) {
                        alt344=1;
                    }


                }


                switch (alt344) {
            	case 1 :
            	    // CSharpAngular.g:3248:4: rnkspLst+= rank_specifier
            	    {
            	    pushFollow(FOLLOW_rank_specifier_in_rank_specifiers24476);
            	    rnkspLst=rank_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rnkspLst==null) list_rnkspLst=new ArrayList();
            	    list_rnkspLst.add(rnkspLst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt344 >= 1 ) break loop344;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(344, input);
                        throw eee;
                }
                cnt344++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3249:3: -> lineIterator(value=$rnkspLst)
              {
                  retval.st = templateLib.getInstanceOf("lineIterator",new STAttrMap().put("value", list_rnkspLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_specifiers"


    public static class rank_specifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "rank_specifier"
    // CSharpAngular.g:3253:1: rank_specifier : OPEN_BRACKET (sep= dim_separators )? CLOSE_BRACKET -> rankSpecifier(separatorLst=sep);
    public final CSharpAngular.rank_specifier_return rank_specifier() throws RecognitionException {
        CSharpAngular.rank_specifier_return retval = new CSharpAngular.rank_specifier_return();
        retval.start = input.LT(1);


        CSharpAngular.dim_separators_return sep =null;


        try {
            // CSharpAngular.g:3254:2: ( OPEN_BRACKET (sep= dim_separators )? CLOSE_BRACKET -> rankSpecifier(separatorLst=sep))
            // CSharpAngular.g:3255:2: OPEN_BRACKET (sep= dim_separators )? CLOSE_BRACKET
            {
            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_rank_specifier24505); if (state.failed) return retval;

            // CSharpAngular.g:3255:15: (sep= dim_separators )?
            int alt345=2;
            int LA345_0 = input.LA(1);

            if ( (LA345_0==COMMA) ) {
                alt345=1;
            }
            switch (alt345) {
                case 1 :
                    // CSharpAngular.g:3255:16: sep= dim_separators
                    {
                    pushFollow(FOLLOW_dim_separators_in_rank_specifier24510);
                    sep=dim_separators();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_rank_specifier24514); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3256:2: -> rankSpecifier(separatorLst=sep)
              {
                  retval.st = templateLib.getInstanceOf("rankSpecifier",new STAttrMap().put("separatorLst", sep));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_specifier"


    public static class dim_separators_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "dim_separators"
    // CSharpAngular.g:3258:1: dim_separators : COMMA (lst+= dim_separators_Chld )* -> dimSeparators(list=$lst);
    public final CSharpAngular.dim_separators_return dim_separators() throws RecognitionException {
        CSharpAngular.dim_separators_return retval = new CSharpAngular.dim_separators_return();
        retval.start = input.LT(1);


        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharpAngular.g:3259:2: ( COMMA (lst+= dim_separators_Chld )* -> dimSeparators(list=$lst))
            // CSharpAngular.g:3260:2: COMMA (lst+= dim_separators_Chld )*
            {
            match(input,COMMA,FOLLOW_COMMA_in_dim_separators24536); if (state.failed) return retval;

            // CSharpAngular.g:3260:8: (lst+= dim_separators_Chld )*
            loop346:
            do {
                int alt346=2;
                int LA346_0 = input.LA(1);

                if ( (LA346_0==COMMA) ) {
                    alt346=1;
                }


                switch (alt346) {
            	case 1 :
            	    // CSharpAngular.g:3260:9: lst+= dim_separators_Chld
            	    {
            	    pushFollow(FOLLOW_dim_separators_Chld_in_dim_separators24541);
            	    lst=dim_separators_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop346;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3261:2: -> dimSeparators(list=$lst)
              {
                  retval.st = templateLib.getInstanceOf("dimSeparators",new STAttrMap().put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dim_separators"


    public static class dim_separators_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "dim_separators_Chld"
    // CSharpAngular.g:3264:1: dim_separators_Chld : COMMA -> text(value=$COMMA.text);
    public final CSharpAngular.dim_separators_Chld_return dim_separators_Chld() throws RecognitionException {
        CSharpAngular.dim_separators_Chld_return retval = new CSharpAngular.dim_separators_Chld_return();
        retval.start = input.LT(1);


        Token COMMA290=null;

        try {
            // CSharpAngular.g:3265:2: ( COMMA -> text(value=$COMMA.text))
            // CSharpAngular.g:3266:3: COMMA
            {
            COMMA290=(Token)match(input,COMMA,FOLLOW_COMMA_in_dim_separators_Chld24566); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3267:3: -> text(value=$COMMA.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (COMMA290!=null?COMMA290.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dim_separators_Chld"


    public static class array_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "array_initializer"
    // CSharpAngular.g:3276:1: array_initializer : ( OPEN_BRACE CLOSE_BRACE -> text(value=\"[]\")| OPEN_BRACE vil= variable_initializer_list ( COMMA )? CLOSE_BRACE -> arrayInitializer(varInitList=vil));
    public final CSharpAngular.array_initializer_return array_initializer() throws RecognitionException {
        CSharpAngular.array_initializer_return retval = new CSharpAngular.array_initializer_return();
        retval.start = input.LT(1);


        CSharpAngular.variable_initializer_list_return vil =null;


        try {
            // CSharpAngular.g:3277:3: ( OPEN_BRACE CLOSE_BRACE -> text(value=\"[]\")| OPEN_BRACE vil= variable_initializer_list ( COMMA )? CLOSE_BRACE -> arrayInitializer(varInitList=vil))
            int alt348=2;
            int LA348_0 = input.LA(1);

            if ( (LA348_0==OPEN_BRACE) ) {
                int LA348_1 = input.LA(2);

                if ( (LA348_1==CLOSE_BRACE) ) {
                    alt348=1;
                }
                else if ( (LA348_1==AMP||(LA348_1 >= BANG && LA348_1 <= BASE)||LA348_1==BOOL||LA348_1==BYTE||(LA348_1 >= CHAR && LA348_1 <= CHECKED)||LA348_1==DECIMAL||(LA348_1 >= DEFAULT && LA348_1 <= DELEGATE)||LA348_1==DOUBLE||LA348_1==FALSE||LA348_1==FLOAT||LA348_1==IDENTIFIER||(LA348_1 >= INT && LA348_1 <= INTEGER_LITERAL)||LA348_1==LONG||LA348_1==MINUS||LA348_1==NEW||LA348_1==NULL||(LA348_1 >= OBJECT && LA348_1 <= OPEN_BRACE)||LA348_1==OPEN_PARENS||LA348_1==OP_DEC||LA348_1==OP_INC||LA348_1==PLUS||LA348_1==REAL_LITERAL||LA348_1==SBYTE||LA348_1==SHORT||LA348_1==SIZEOF||LA348_1==STAR||(LA348_1 >= STRING && LA348_1 <= STRING_LITERAL)||LA348_1==THIS||(LA348_1 >= TILDE && LA348_1 <= TRUE)||LA348_1==TYPEOF||(LA348_1 >= UINT && LA348_1 <= UNCHECKED)||LA348_1==USHORT) ) {
                    alt348=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 348, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 348, 0, input);

                throw nvae;

            }
            switch (alt348) {
                case 1 :
                    // CSharpAngular.g:3278:3: OPEN_BRACE CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_array_initializer24598); if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_array_initializer24600); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3279:3: -> text(value=\"[]\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "[]"));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3280:5: OPEN_BRACE vil= variable_initializer_list ( COMMA )? CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_array_initializer24616); if (state.failed) return retval;

                    pushFollow(FOLLOW_variable_initializer_list_in_array_initializer24620);
                    vil=variable_initializer_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharpAngular.g:3280:46: ( COMMA )?
                    int alt347=2;
                    int LA347_0 = input.LA(1);

                    if ( (LA347_0==COMMA) ) {
                        alt347=1;
                    }
                    switch (alt347) {
                        case 1 :
                            // CSharpAngular.g:3280:46: COMMA
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_array_initializer24622); if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_array_initializer24625); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3281:3: -> arrayInitializer(varInitList=vil)
                      {
                          retval.st = templateLib.getInstanceOf("arrayInitializer",new STAttrMap().put("varInitList", vil));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_initializer"


    public static class variable_initializer_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_initializer_list"
    // CSharpAngular.g:3283:1: variable_initializer_list : vini= variable_initializer (varLst+= variable_initializer_list_Chld )* -> variableInitializerList(varIni=vinilist=$varLst);
    public final CSharpAngular.variable_initializer_list_return variable_initializer_list() throws RecognitionException {
        CSharpAngular.variable_initializer_list_return retval = new CSharpAngular.variable_initializer_list_return();
        retval.start = input.LT(1);


        List list_varLst=null;
        CSharpAngular.variable_initializer_return vini =null;

        RuleReturnScope varLst = null;
        try {
            // CSharpAngular.g:3284:2: (vini= variable_initializer (varLst+= variable_initializer_list_Chld )* -> variableInitializerList(varIni=vinilist=$varLst))
            // CSharpAngular.g:3285:2: vini= variable_initializer (varLst+= variable_initializer_list_Chld )*
            {
            pushFollow(FOLLOW_variable_initializer_in_variable_initializer_list24651);
            vini=variable_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3285:28: (varLst+= variable_initializer_list_Chld )*
            loop349:
            do {
                int alt349=2;
                int LA349_0 = input.LA(1);

                if ( (LA349_0==COMMA) ) {
                    int LA349_1 = input.LA(2);

                    if ( (LA349_1==AMP||(LA349_1 >= BANG && LA349_1 <= BASE)||LA349_1==BOOL||LA349_1==BYTE||(LA349_1 >= CHAR && LA349_1 <= CHECKED)||LA349_1==DECIMAL||(LA349_1 >= DEFAULT && LA349_1 <= DELEGATE)||LA349_1==DOUBLE||LA349_1==FALSE||LA349_1==FLOAT||LA349_1==IDENTIFIER||(LA349_1 >= INT && LA349_1 <= INTEGER_LITERAL)||LA349_1==LONG||LA349_1==MINUS||LA349_1==NEW||LA349_1==NULL||(LA349_1 >= OBJECT && LA349_1 <= OPEN_BRACE)||LA349_1==OPEN_PARENS||LA349_1==OP_DEC||LA349_1==OP_INC||LA349_1==PLUS||LA349_1==REAL_LITERAL||LA349_1==SBYTE||LA349_1==SHORT||LA349_1==SIZEOF||LA349_1==STAR||(LA349_1 >= STRING && LA349_1 <= STRING_LITERAL)||LA349_1==THIS||(LA349_1 >= TILDE && LA349_1 <= TRUE)||LA349_1==TYPEOF||(LA349_1 >= UINT && LA349_1 <= UNCHECKED)||LA349_1==USHORT) ) {
                        alt349=1;
                    }


                }


                switch (alt349) {
            	case 1 :
            	    // CSharpAngular.g:3285:29: varLst+= variable_initializer_list_Chld
            	    {
            	    pushFollow(FOLLOW_variable_initializer_list_Chld_in_variable_initializer_list24656);
            	    varLst=variable_initializer_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_varLst==null) list_varLst=new ArrayList();
            	    list_varLst.add(varLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop349;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3286:2: -> variableInitializerList(varIni=vinilist=$varLst)
              {
                  retval.st = templateLib.getInstanceOf("variableInitializerList",new STAttrMap().put("varIni", vini).put("list", list_varLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_initializer_list"


    public static class variable_initializer_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_initializer_list_Chld"
    // CSharpAngular.g:3289:1: variable_initializer_list_Chld : COMMA vrinit= variable_initializer -> variableInitializerListChld(init=vrinit);
    public final CSharpAngular.variable_initializer_list_Chld_return variable_initializer_list_Chld() throws RecognitionException {
        CSharpAngular.variable_initializer_list_Chld_return retval = new CSharpAngular.variable_initializer_list_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.variable_initializer_return vrinit =null;


        try {
            // CSharpAngular.g:3290:2: ( COMMA vrinit= variable_initializer -> variableInitializerListChld(init=vrinit))
            // CSharpAngular.g:3291:2: COMMA vrinit= variable_initializer
            {
            match(input,COMMA,FOLLOW_COMMA_in_variable_initializer_list_Chld24684); if (state.failed) return retval;

            pushFollow(FOLLOW_variable_initializer_in_variable_initializer_list_Chld24689);
            vrinit=variable_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3292:2: -> variableInitializerListChld(init=vrinit)
              {
                  retval.st = templateLib.getInstanceOf("variableInitializerListChld",new STAttrMap().put("init", vrinit));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_initializer_list_Chld"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_declaration"
    // CSharpAngular.g:3295:1: interface_declaration : ( attributes )? ( interface_modifiers )? ( partial_contextual_keyword )? INTERFACE IDENTIFIER ( variant_type_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( SEMICOLON )? ;
    public final CSharpAngular.interface_declaration_return interface_declaration() throws RecognitionException {
        CSharpAngular.interface_declaration_return retval = new CSharpAngular.interface_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3296:2: ( ( attributes )? ( interface_modifiers )? ( partial_contextual_keyword )? INTERFACE IDENTIFIER ( variant_type_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( SEMICOLON )? )
            // CSharpAngular.g:3296:4: ( attributes )? ( interface_modifiers )? ( partial_contextual_keyword )? INTERFACE IDENTIFIER ( variant_type_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( SEMICOLON )?
            {
            // CSharpAngular.g:3296:4: ( attributes )?
            int alt350=2;
            int LA350_0 = input.LA(1);

            if ( (LA350_0==OPEN_BRACKET) ) {
                alt350=1;
            }
            switch (alt350) {
                case 1 :
                    // CSharpAngular.g:3296:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_declaration24710);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3296:16: ( interface_modifiers )?
            int alt351=2;
            int LA351_0 = input.LA(1);

            if ( (LA351_0==INTERNAL||LA351_0==NEW||(LA351_0 >= PRIVATE && LA351_0 <= PUBLIC)||LA351_0==UNSAFE) ) {
                alt351=1;
            }
            switch (alt351) {
                case 1 :
                    // CSharpAngular.g:3296:16: interface_modifiers
                    {
                    pushFollow(FOLLOW_interface_modifiers_in_interface_declaration24713);
                    interface_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3296:37: ( partial_contextual_keyword )?
            int alt352=2;
            int LA352_0 = input.LA(1);

            if ( (LA352_0==IDENTIFIER) ) {
                alt352=1;
            }
            switch (alt352) {
                case 1 :
                    // CSharpAngular.g:3296:37: partial_contextual_keyword
                    {
                    pushFollow(FOLLOW_partial_contextual_keyword_in_interface_declaration24716);
                    partial_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,INTERFACE,FOLLOW_INTERFACE_in_interface_declaration24719); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_declaration24721); if (state.failed) return retval;

            // CSharpAngular.g:3296:86: ( variant_type_parameter_list )?
            int alt353=2;
            int LA353_0 = input.LA(1);

            if ( (LA353_0==LT) ) {
                alt353=1;
            }
            switch (alt353) {
                case 1 :
                    // CSharpAngular.g:3296:86: variant_type_parameter_list
                    {
                    pushFollow(FOLLOW_variant_type_parameter_list_in_interface_declaration24723);
                    variant_type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3296:115: ( interface_base )?
            int alt354=2;
            int LA354_0 = input.LA(1);

            if ( (LA354_0==COLON) ) {
                alt354=1;
            }
            switch (alt354) {
                case 1 :
                    // CSharpAngular.g:3296:115: interface_base
                    {
                    pushFollow(FOLLOW_interface_base_in_interface_declaration24726);
                    interface_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3296:131: ( type_parameter_constraints_clauses )?
            int alt355=2;
            int LA355_0 = input.LA(1);

            if ( (LA355_0==IDENTIFIER) ) {
                alt355=1;
            }
            switch (alt355) {
                case 1 :
                    // CSharpAngular.g:3296:131: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_declaration24729);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_interface_body_in_interface_declaration24732);
            interface_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3296:182: ( SEMICOLON )?
            int alt356=2;
            int LA356_0 = input.LA(1);

            if ( (LA356_0==SEMICOLON) ) {
                alt356=1;
            }
            switch (alt356) {
                case 1 :
                    // CSharpAngular.g:3296:182: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_declaration24734); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class interface_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_modifiers"
    // CSharpAngular.g:3298:1: interface_modifiers : interface_modifier ( interface_modifier )* ;
    public final CSharpAngular.interface_modifiers_return interface_modifiers() throws RecognitionException {
        CSharpAngular.interface_modifiers_return retval = new CSharpAngular.interface_modifiers_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3299:2: ( interface_modifier ( interface_modifier )* )
            // CSharpAngular.g:3299:4: interface_modifier ( interface_modifier )*
            {
            pushFollow(FOLLOW_interface_modifier_in_interface_modifiers24746);
            interface_modifier();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3299:23: ( interface_modifier )*
            loop357:
            do {
                int alt357=2;
                int LA357_0 = input.LA(1);

                if ( (LA357_0==INTERNAL||LA357_0==NEW||(LA357_0 >= PRIVATE && LA357_0 <= PUBLIC)||LA357_0==UNSAFE) ) {
                    alt357=1;
                }


                switch (alt357) {
            	case 1 :
            	    // CSharpAngular.g:3299:25: interface_modifier
            	    {
            	    pushFollow(FOLLOW_interface_modifier_in_interface_modifiers24750);
            	    interface_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop357;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_modifiers"


    public static class interface_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_modifier"
    // CSharpAngular.g:3301:1: interface_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)|intrmod= interface_modifier_unsafe -> text(value=intrmod));
    public final CSharpAngular.interface_modifier_return interface_modifier() throws RecognitionException {
        CSharpAngular.interface_modifier_return retval = new CSharpAngular.interface_modifier_return();
        retval.start = input.LT(1);


        Token NEW291=null;
        Token PUBLIC292=null;
        Token PROTECTED293=null;
        Token INTERNAL294=null;
        Token PRIVATE295=null;
        CSharpAngular.interface_modifier_unsafe_return intrmod =null;


        try {
            // CSharpAngular.g:3302:3: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)|intrmod= interface_modifier_unsafe -> text(value=intrmod))
            int alt358=6;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt358=1;
                }
                break;
            case PUBLIC:
                {
                alt358=2;
                }
                break;
            case PROTECTED:
                {
                alt358=3;
                }
                break;
            case INTERNAL:
                {
                alt358=4;
                }
                break;
            case PRIVATE:
                {
                alt358=5;
                }
                break;
            case UNSAFE:
                {
                alt358=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 358, 0, input);

                throw nvae;

            }

            switch (alt358) {
                case 1 :
                    // CSharpAngular.g:3303:3: NEW
                    {
                    NEW291=(Token)match(input,NEW,FOLLOW_NEW_in_interface_modifier24768); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3303:43: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW291!=null?NEW291.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3304:5: PUBLIC
                    {
                    PUBLIC292=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_interface_modifier24818); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3304:43: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC292!=null?PUBLIC292.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:3305:5: PROTECTED
                    {
                    PROTECTED293=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_interface_modifier24863); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3305:43: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED293!=null?PROTECTED293.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:3306:5: INTERNAL
                    {
                    INTERNAL294=(Token)match(input,INTERNAL,FOLLOW_INTERNAL_in_interface_modifier24905); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3306:43: -> text(value=$INTERNAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERNAL294!=null?INTERNAL294.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:3307:5: PRIVATE
                    {
                    PRIVATE295=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_interface_modifier24948); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3307:43: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE295!=null?PRIVATE295.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:3308:5: intrmod= interface_modifier_unsafe
                    {
                    pushFollow(FOLLOW_interface_modifier_unsafe_in_interface_modifier24994);
                    intrmod=interface_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3308:43: -> text(value=intrmod)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", intrmod));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_modifier"


    public static class variant_type_parameter_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variant_type_parameter_list"
    // CSharpAngular.g:3311:1: variant_type_parameter_list : LT variant_type_parameters GT ;
    public final CSharpAngular.variant_type_parameter_list_return variant_type_parameter_list() throws RecognitionException {
        CSharpAngular.variant_type_parameter_list_return retval = new CSharpAngular.variant_type_parameter_list_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3312:2: ( LT variant_type_parameters GT )
            // CSharpAngular.g:3312:4: LT variant_type_parameters GT
            {
            match(input,LT,FOLLOW_LT_in_variant_type_parameter_list25019); if (state.failed) return retval;

            pushFollow(FOLLOW_variant_type_parameters_in_variant_type_parameter_list25021);
            variant_type_parameters();

            state._fsp--;
            if (state.failed) return retval;

            match(input,GT,FOLLOW_GT_in_variant_type_parameter_list25023); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variant_type_parameter_list"


    public static class variant_type_parameters_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variant_type_parameters"
    // CSharpAngular.g:3314:1: variant_type_parameters : ( attributes )? ( variance_annotation )? type_parameter ( COMMA ( attributes )? ( variance_annotation )? type_parameter )* ;
    public final CSharpAngular.variant_type_parameters_return variant_type_parameters() throws RecognitionException {
        CSharpAngular.variant_type_parameters_return retval = new CSharpAngular.variant_type_parameters_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3315:2: ( ( attributes )? ( variance_annotation )? type_parameter ( COMMA ( attributes )? ( variance_annotation )? type_parameter )* )
            // CSharpAngular.g:3315:4: ( attributes )? ( variance_annotation )? type_parameter ( COMMA ( attributes )? ( variance_annotation )? type_parameter )*
            {
            // CSharpAngular.g:3315:4: ( attributes )?
            int alt359=2;
            int LA359_0 = input.LA(1);

            if ( (LA359_0==OPEN_BRACKET) ) {
                alt359=1;
            }
            switch (alt359) {
                case 1 :
                    // CSharpAngular.g:3315:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_variant_type_parameters25034);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3315:16: ( variance_annotation )?
            int alt360=2;
            int LA360_0 = input.LA(1);

            if ( (LA360_0==IN||LA360_0==OUT) ) {
                alt360=1;
            }
            switch (alt360) {
                case 1 :
                    // CSharpAngular.g:3315:16: variance_annotation
                    {
                    pushFollow(FOLLOW_variance_annotation_in_variant_type_parameters25037);
                    variance_annotation();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_parameter_in_variant_type_parameters25040);
            type_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3315:52: ( COMMA ( attributes )? ( variance_annotation )? type_parameter )*
            loop363:
            do {
                int alt363=2;
                int LA363_0 = input.LA(1);

                if ( (LA363_0==COMMA) ) {
                    alt363=1;
                }


                switch (alt363) {
            	case 1 :
            	    // CSharpAngular.g:3315:54: COMMA ( attributes )? ( variance_annotation )? type_parameter
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_variant_type_parameters25044); if (state.failed) return retval;

            	    // CSharpAngular.g:3315:61: ( attributes )?
            	    int alt361=2;
            	    int LA361_0 = input.LA(1);

            	    if ( (LA361_0==OPEN_BRACKET) ) {
            	        alt361=1;
            	    }
            	    switch (alt361) {
            	        case 1 :
            	            // CSharpAngular.g:3315:61: attributes
            	            {
            	            pushFollow(FOLLOW_attributes_in_variant_type_parameters25047);
            	            attributes();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            }
            	            break;

            	    }


            	    // CSharpAngular.g:3315:74: ( variance_annotation )?
            	    int alt362=2;
            	    int LA362_0 = input.LA(1);

            	    if ( (LA362_0==IN||LA362_0==OUT) ) {
            	        alt362=1;
            	    }
            	    switch (alt362) {
            	        case 1 :
            	            // CSharpAngular.g:3315:74: variance_annotation
            	            {
            	            pushFollow(FOLLOW_variance_annotation_in_variant_type_parameters25051);
            	            variance_annotation();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_type_parameter_in_variant_type_parameters25055);
            	    type_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop363;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variant_type_parameters"


    public static class variance_annotation_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variance_annotation"
    // CSharpAngular.g:3317:1: variance_annotation : ( IN -> text(value=$IN.text)| OUT -> text(value=$OUT.text));
    public final CSharpAngular.variance_annotation_return variance_annotation() throws RecognitionException {
        CSharpAngular.variance_annotation_return retval = new CSharpAngular.variance_annotation_return();
        retval.start = input.LT(1);


        Token IN296=null;
        Token OUT297=null;

        try {
            // CSharpAngular.g:3318:3: ( IN -> text(value=$IN.text)| OUT -> text(value=$OUT.text))
            int alt364=2;
            int LA364_0 = input.LA(1);

            if ( (LA364_0==IN) ) {
                alt364=1;
            }
            else if ( (LA364_0==OUT) ) {
                alt364=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 364, 0, input);

                throw nvae;

            }
            switch (alt364) {
                case 1 :
                    // CSharpAngular.g:3319:3: IN
                    {
                    IN296=(Token)match(input,IN,FOLLOW_IN_in_variance_annotation25073); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3319:15: -> text(value=$IN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IN296!=null?IN296.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3320:5: OUT
                    {
                    OUT297=(Token)match(input,OUT,FOLLOW_OUT_in_variance_annotation25096); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3320:15: -> text(value=$OUT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OUT297!=null?OUT297.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variance_annotation"


    public static class interface_base_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_base"
    // CSharpAngular.g:3323:1: interface_base : COLON itl= interface_type_list -> interfaceBase(intfcTypLst=itl);
    public final CSharpAngular.interface_base_return interface_base() throws RecognitionException {
        CSharpAngular.interface_base_return retval = new CSharpAngular.interface_base_return();
        retval.start = input.LT(1);


        CSharpAngular.interface_type_list_return itl =null;


        try {
            // CSharpAngular.g:3324:3: ( COLON itl= interface_type_list -> interfaceBase(intfcTypLst=itl))
            // CSharpAngular.g:3325:3: COLON itl= interface_type_list
            {
            match(input,COLON,FOLLOW_COLON_in_interface_base25127); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_type_list_in_interface_base25131);
            itl=interface_type_list();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3326:3: -> interfaceBase(intfcTypLst=itl)
              {
                  retval.st = templateLib.getInstanceOf("interfaceBase",new STAttrMap().put("intfcTypLst", itl));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_base"


    public static class interface_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_body"
    // CSharpAngular.g:3328:1: interface_body : OPEN_BRACE (cmnts= comments )? (imd= interface_member_declarations )? CLOSE_BRACE -> interfaceBody(members=imdcmnt=cmnts);
    public final CSharpAngular.interface_body_return interface_body() throws RecognitionException {
        CSharpAngular.interface_body_return retval = new CSharpAngular.interface_body_return();
        retval.start = input.LT(1);


        CSharpAngular.comments_return cmnts =null;

        CSharpAngular.interface_member_declarations_return imd =null;


        try {
            // CSharpAngular.g:3329:3: ( OPEN_BRACE (cmnts= comments )? (imd= interface_member_declarations )? CLOSE_BRACE -> interfaceBody(members=imdcmnt=cmnts))
            // CSharpAngular.g:3330:3: OPEN_BRACE (cmnts= comments )? (imd= interface_member_declarations )? CLOSE_BRACE
            {
            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_body25157); if (state.failed) return retval;

            // CSharpAngular.g:3330:14: (cmnts= comments )?
            int alt365=2;
            int LA365_0 = input.LA(1);

            if ( (LA365_0==SINGLE_LINE_COMMENT) ) {
                alt365=1;
            }
            else if ( (LA365_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt365=1;
            }
            switch (alt365) {
                case 1 :
                    // CSharpAngular.g:3330:15: cmnts= comments
                    {
                    pushFollow(FOLLOW_comments_in_interface_body25162);
                    cmnts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3330:32: (imd= interface_member_declarations )?
            int alt366=2;
            int LA366_0 = input.LA(1);

            if ( (LA366_0==BOOL||LA366_0==BYTE||LA366_0==CHAR||LA366_0==DECIMAL||LA366_0==DOUBLE||LA366_0==EVENT||LA366_0==FLOAT||LA366_0==IDENTIFIER||LA366_0==INT||LA366_0==LONG||LA366_0==NEW||LA366_0==OBJECT||LA366_0==OPEN_BRACKET||LA366_0==SBYTE||(LA366_0 >= SHORT && LA366_0 <= SINGLE_LINE_DOC_COMMENT)||LA366_0==STRING||(LA366_0 >= UINT && LA366_0 <= ULONG)||LA366_0==USHORT||LA366_0==VOID) ) {
                alt366=1;
            }
            switch (alt366) {
                case 1 :
                    // CSharpAngular.g:3330:33: imd= interface_member_declarations
                    {
                    pushFollow(FOLLOW_interface_member_declarations_in_interface_body25169);
                    imd=interface_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_body25173); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3331:3: -> interfaceBody(members=imdcmnt=cmnts)
              {
                  retval.st = templateLib.getInstanceOf("interfaceBody",new STAttrMap().put("members", imd).put("cmnt", cmnts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_body"


    public static class interface_member_declarations_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_member_declarations"
    // CSharpAngular.g:3333:1: interface_member_declarations : (lst+= interface_member_declaration )+ -> interfaceMemberDeclarations(list=$lst);
    public final CSharpAngular.interface_member_declarations_return interface_member_declarations() throws RecognitionException {
        CSharpAngular.interface_member_declarations_return retval = new CSharpAngular.interface_member_declarations_return();
        retval.start = input.LT(1);


        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharpAngular.g:3334:3: ( (lst+= interface_member_declaration )+ -> interfaceMemberDeclarations(list=$lst))
            // CSharpAngular.g:3335:3: (lst+= interface_member_declaration )+
            {
            // CSharpAngular.g:3335:3: (lst+= interface_member_declaration )+
            int cnt367=0;
            loop367:
            do {
                int alt367=2;
                int LA367_0 = input.LA(1);

                if ( (LA367_0==BOOL||LA367_0==BYTE||LA367_0==CHAR||LA367_0==DECIMAL||LA367_0==DOUBLE||LA367_0==EVENT||LA367_0==FLOAT||LA367_0==IDENTIFIER||LA367_0==INT||LA367_0==LONG||LA367_0==NEW||LA367_0==OBJECT||LA367_0==OPEN_BRACKET||LA367_0==SBYTE||(LA367_0 >= SHORT && LA367_0 <= SINGLE_LINE_DOC_COMMENT)||LA367_0==STRING||(LA367_0 >= UINT && LA367_0 <= ULONG)||LA367_0==USHORT||LA367_0==VOID) ) {
                    alt367=1;
                }


                switch (alt367) {
            	case 1 :
            	    // CSharpAngular.g:3335:4: lst+= interface_member_declaration
            	    {
            	    pushFollow(FOLLOW_interface_member_declaration_in_interface_member_declarations25206);
            	    lst=interface_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt367 >= 1 ) break loop367;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(367, input);
                        throw eee;
                }
                cnt367++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3336:3: -> interfaceMemberDeclarations(list=$lst)
              {
                  retval.st = templateLib.getInstanceOf("interfaceMemberDeclarations",new STAttrMap().put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_member_declarations"


    public static class interface_member_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_member_declaration"
    // CSharpAngular.g:3347:1: interface_member_declaration : (cmnt= comments )? (at= attributes )? (n= NEW )? chld= interface_member_declaration_Chld (cmnt2= comments )? -> interfaceMemberDeclaration(cmnts=cmntattributes=atnewKwd=$n.textchild=chldcmnts2=cmnt2);
    public final CSharpAngular.interface_member_declaration_return interface_member_declaration() throws RecognitionException {
        CSharpAngular.interface_member_declaration_return retval = new CSharpAngular.interface_member_declaration_return();
        retval.start = input.LT(1);


        Token n=null;
        CSharpAngular.comments_return cmnt =null;

        CSharpAngular.attributes_return at =null;

        CSharpAngular.interface_member_declaration_Chld_return chld =null;

        CSharpAngular.comments_return cmnt2 =null;


        try {
            // CSharpAngular.g:3348:3: ( (cmnt= comments )? (at= attributes )? (n= NEW )? chld= interface_member_declaration_Chld (cmnt2= comments )? -> interfaceMemberDeclaration(cmnts=cmntattributes=atnewKwd=$n.textchild=chldcmnts2=cmnt2))
            // CSharpAngular.g:3349:3: (cmnt= comments )? (at= attributes )? (n= NEW )? chld= interface_member_declaration_Chld (cmnt2= comments )?
            {
            // CSharpAngular.g:3349:3: (cmnt= comments )?
            int alt368=2;
            int LA368_0 = input.LA(1);

            if ( ((LA368_0 >= SINGLE_LINE_COMMENT && LA368_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt368=1;
            }
            switch (alt368) {
                case 1 :
                    // CSharpAngular.g:3349:4: cmnt= comments
                    {
                    pushFollow(FOLLOW_comments_in_interface_member_declaration25241);
                    cmnt=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3349:20: (at= attributes )?
            int alt369=2;
            int LA369_0 = input.LA(1);

            if ( (LA369_0==OPEN_BRACKET) ) {
                alt369=1;
            }
            switch (alt369) {
                case 1 :
                    // CSharpAngular.g:3349:21: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_member_declaration25248);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3349:37: (n= NEW )?
            int alt370=2;
            int LA370_0 = input.LA(1);

            if ( (LA370_0==NEW) ) {
                alt370=1;
            }
            switch (alt370) {
                case 1 :
                    // CSharpAngular.g:3349:38: n= NEW
                    {
                    n=(Token)match(input,NEW,FOLLOW_NEW_in_interface_member_declaration25255); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_interface_member_declaration_Chld_in_interface_member_declaration25261);
            chld=interface_member_declaration_Chld();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3349:85: (cmnt2= comments )?
            int alt371=2;
            int LA371_0 = input.LA(1);

            if ( (LA371_0==SINGLE_LINE_COMMENT) ) {
                alt371=1;
            }
            else if ( (LA371_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt371=1;
            }
            switch (alt371) {
                case 1 :
                    // CSharpAngular.g:3349:86: cmnt2= comments
                    {
                    pushFollow(FOLLOW_comments_in_interface_member_declaration25266);
                    cmnt2=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3350:3: -> interfaceMemberDeclaration(cmnts=cmntattributes=atnewKwd=$n.textchild=chldcmnts2=cmnt2)
              {
                  retval.st = templateLib.getInstanceOf("interfaceMemberDeclaration",new STAttrMap().put("cmnts", cmnt).put("attributes", at).put("newKwd", (n!=null?n.getText():null)).put("child", chld).put("cmnts2", cmnt2));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_member_declaration"


    public static class interface_member_declaration_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_member_declaration_Chld"
    // CSharpAngular.g:3352:1: interface_member_declaration_Chld : (t= type subChld= interface_member_declaration_sub_Chld -> interfaceMemberDeclarationChld(type=CSharpAngularHelper.replaceJavaType($t.text)subChild=subChld)| VOID IDENTIFIER (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON -> interfaceMemberDeclarationChld2(memNam=NamingUtil.toCamelCase($IDENTIFIER.text)typParLst=tplformlParLst=fpltypParConstCls=tpcc)| EVENT t= type IDENTIFIER SEMICOLON -> interfaceMemberDeclarationChld3(type=tevntName=$IDENTIFIER.text));
    public final CSharpAngular.interface_member_declaration_Chld_return interface_member_declaration_Chld() throws RecognitionException {
        CSharpAngular.interface_member_declaration_Chld_return retval = new CSharpAngular.interface_member_declaration_Chld_return();
        retval.start = input.LT(1);


        Token IDENTIFIER298=null;
        Token IDENTIFIER299=null;
        CSharpAngular.type_return t =null;

        CSharpAngular.interface_member_declaration_sub_Chld_return subChld =null;

        CSharpAngular.type_parameter_list_return tpl =null;

        CSharpAngular.formal_parameter_list_return fpl =null;

        CSharpAngular.type_parameter_constraints_clauses_return tpcc =null;


        try {
            // CSharpAngular.g:3353:3: (t= type subChld= interface_member_declaration_sub_Chld -> interfaceMemberDeclarationChld(type=CSharpAngularHelper.replaceJavaType($t.text)subChild=subChld)| VOID IDENTIFIER (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON -> interfaceMemberDeclarationChld2(memNam=NamingUtil.toCamelCase($IDENTIFIER.text)typParLst=tplformlParLst=fpltypParConstCls=tpcc)| EVENT t= type IDENTIFIER SEMICOLON -> interfaceMemberDeclarationChld3(type=tevntName=$IDENTIFIER.text))
            int alt375=3;
            switch ( input.LA(1) ) {
            case BOOL:
            case BYTE:
            case CHAR:
            case DECIMAL:
            case DOUBLE:
            case FLOAT:
            case IDENTIFIER:
            case INT:
            case LONG:
            case OBJECT:
            case SBYTE:
            case SHORT:
            case STRING:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt375=1;
                }
                break;
            case VOID:
                {
                int LA375_2 = input.LA(2);

                if ( (LA375_2==STAR) ) {
                    alt375=1;
                }
                else if ( (LA375_2==IDENTIFIER) ) {
                    alt375=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 375, 2, input);

                    throw nvae;

                }
                }
                break;
            case EVENT:
                {
                alt375=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 375, 0, input);

                throw nvae;

            }

            switch (alt375) {
                case 1 :
                    // CSharpAngular.g:3354:3: t= type subChld= interface_member_declaration_sub_Chld
                    {
                    pushFollow(FOLLOW_type_in_interface_member_declaration_Chld25310);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_interface_member_declaration_sub_Chld_in_interface_member_declaration_Chld25315);
                    subChld=interface_member_declaration_sub_Chld();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3355:3: -> interfaceMemberDeclarationChld(type=CSharpAngularHelper.replaceJavaType($t.text)subChild=subChld)
                      {
                          retval.st = templateLib.getInstanceOf("interfaceMemberDeclarationChld",new STAttrMap().put("type", CSharpAngularHelper.replaceJavaType((t!=null?input.toString(t.start,t.stop):null))).put("subChild", subChld));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3356:5: VOID IDENTIFIER (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON
                    {
                    match(input,VOID,FOLLOW_VOID_in_interface_member_declaration_Chld25335); if (state.failed) return retval;

                    IDENTIFIER298=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_member_declaration_Chld25337); if (state.failed) return retval;

                    // CSharpAngular.g:3356:21: (tpl= type_parameter_list )?
                    int alt372=2;
                    int LA372_0 = input.LA(1);

                    if ( (LA372_0==LT) ) {
                        alt372=1;
                    }
                    switch (alt372) {
                        case 1 :
                            // CSharpAngular.g:3356:22: tpl= type_parameter_list
                            {
                            pushFollow(FOLLOW_type_parameter_list_in_interface_member_declaration_Chld25342);
                            tpl=type_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_interface_member_declaration_Chld25346); if (state.failed) return retval;

                    // CSharpAngular.g:3356:60: (fpl= formal_parameter_list )?
                    int alt373=2;
                    int LA373_0 = input.LA(1);

                    if ( (LA373_0==BOOL||LA373_0==BYTE||LA373_0==CHAR||LA373_0==DECIMAL||LA373_0==DOUBLE||LA373_0==FLOAT||LA373_0==IDENTIFIER||LA373_0==INT||LA373_0==LONG||LA373_0==OBJECT||LA373_0==OPEN_BRACKET||LA373_0==OUT||LA373_0==PARAMS||LA373_0==REF||LA373_0==SBYTE||LA373_0==SHORT||LA373_0==STRING||LA373_0==THIS||(LA373_0 >= UINT && LA373_0 <= ULONG)||LA373_0==USHORT||LA373_0==VOID) ) {
                        alt373=1;
                    }
                    switch (alt373) {
                        case 1 :
                            // CSharpAngular.g:3356:61: fpl= formal_parameter_list
                            {
                            pushFollow(FOLLOW_formal_parameter_list_in_interface_member_declaration_Chld25351);
                            fpl=formal_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_interface_member_declaration_Chld25355); if (state.failed) return retval;

                    // CSharpAngular.g:3356:102: (tpcc= type_parameter_constraints_clauses )?
                    int alt374=2;
                    int LA374_0 = input.LA(1);

                    if ( (LA374_0==IDENTIFIER) ) {
                        alt374=1;
                    }
                    switch (alt374) {
                        case 1 :
                            // CSharpAngular.g:3356:103: tpcc= type_parameter_constraints_clauses
                            {
                            pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_member_declaration_Chld25360);
                            tpcc=type_parameter_constraints_clauses();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_member_declaration_Chld25364); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3357:3: -> interfaceMemberDeclarationChld2(memNam=NamingUtil.toCamelCase($IDENTIFIER.text)typParLst=tplformlParLst=fpltypParConstCls=tpcc)
                      {
                          retval.st = templateLib.getInstanceOf("interfaceMemberDeclarationChld2",new STAttrMap().put("memNam", NamingUtil.toCamelCase((IDENTIFIER298!=null?IDENTIFIER298.getText():null))).put("typParLst", tpl).put("formlParLst", fpl).put("typParConstCls", tpcc));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:3358:5: EVENT t= type IDENTIFIER SEMICOLON
                    {
                    match(input,EVENT,FOLLOW_EVENT_in_interface_member_declaration_Chld25392); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_interface_member_declaration_Chld25396);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    IDENTIFIER299=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_member_declaration_Chld25398); if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_member_declaration_Chld25400); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3359:3: -> interfaceMemberDeclarationChld3(type=tevntName=$IDENTIFIER.text)
                      {
                          retval.st = templateLib.getInstanceOf("interfaceMemberDeclarationChld3",new STAttrMap().put("type", t).put("evntName", (IDENTIFIER299!=null?IDENTIFIER299.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_member_declaration_Chld"


    public static class interface_member_declaration_sub_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_member_declaration_sub_Chld"
    // CSharpAngular.g:3362:1: interface_member_declaration_sub_Chld : ( IDENTIFIER (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON -> interfaceMemberDeclarationSubChld(memName=NamingUtil.toCamelCase($IDENTIFIER.text)typParLst=tplformlParLst=fpltypParConstrCls=tpcc)| IDENTIFIER OPEN_BRACE ia= interface_accessors CLOSE_BRACE -> interfaceMemberDeclarationSubChld2(memName=NamingUtil.toCamelCase($IDENTIFIER.text)accrs=ia)| THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE iacr= interface_accessors CLOSE_BRACE -> interfaceMemberDeclarationSubChld3(formlParLst=fplintfcAccrs=iacr));
    public final CSharpAngular.interface_member_declaration_sub_Chld_return interface_member_declaration_sub_Chld() throws RecognitionException {
        CSharpAngular.interface_member_declaration_sub_Chld_return retval = new CSharpAngular.interface_member_declaration_sub_Chld_return();
        retval.start = input.LT(1);


        Token IDENTIFIER300=null;
        Token IDENTIFIER301=null;
        CSharpAngular.type_parameter_list_return tpl =null;

        CSharpAngular.formal_parameter_list_return fpl =null;

        CSharpAngular.type_parameter_constraints_clauses_return tpcc =null;

        CSharpAngular.interface_accessors_return ia =null;

        CSharpAngular.interface_accessors_return iacr =null;


        try {
            // CSharpAngular.g:3363:3: ( IDENTIFIER (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON -> interfaceMemberDeclarationSubChld(memName=NamingUtil.toCamelCase($IDENTIFIER.text)typParLst=tplformlParLst=fpltypParConstrCls=tpcc)| IDENTIFIER OPEN_BRACE ia= interface_accessors CLOSE_BRACE -> interfaceMemberDeclarationSubChld2(memName=NamingUtil.toCamelCase($IDENTIFIER.text)accrs=ia)| THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE iacr= interface_accessors CLOSE_BRACE -> interfaceMemberDeclarationSubChld3(formlParLst=fplintfcAccrs=iacr))
            int alt379=3;
            int LA379_0 = input.LA(1);

            if ( (LA379_0==IDENTIFIER) ) {
                int LA379_1 = input.LA(2);

                if ( (LA379_1==OPEN_BRACE) ) {
                    alt379=2;
                }
                else if ( (LA379_1==LT||LA379_1==OPEN_PARENS) ) {
                    alt379=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 379, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA379_0==THIS) ) {
                alt379=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 379, 0, input);

                throw nvae;

            }
            switch (alt379) {
                case 1 :
                    // CSharpAngular.g:3364:3: IDENTIFIER (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON
                    {
                    IDENTIFIER300=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_member_declaration_sub_Chld25432); if (state.failed) return retval;

                    // CSharpAngular.g:3364:14: (tpl= type_parameter_list )?
                    int alt376=2;
                    int LA376_0 = input.LA(1);

                    if ( (LA376_0==LT) ) {
                        alt376=1;
                    }
                    switch (alt376) {
                        case 1 :
                            // CSharpAngular.g:3364:15: tpl= type_parameter_list
                            {
                            pushFollow(FOLLOW_type_parameter_list_in_interface_member_declaration_sub_Chld25437);
                            tpl=type_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_interface_member_declaration_sub_Chld25441); if (state.failed) return retval;

                    // CSharpAngular.g:3364:53: (fpl= formal_parameter_list )?
                    int alt377=2;
                    int LA377_0 = input.LA(1);

                    if ( (LA377_0==BOOL||LA377_0==BYTE||LA377_0==CHAR||LA377_0==DECIMAL||LA377_0==DOUBLE||LA377_0==FLOAT||LA377_0==IDENTIFIER||LA377_0==INT||LA377_0==LONG||LA377_0==OBJECT||LA377_0==OPEN_BRACKET||LA377_0==OUT||LA377_0==PARAMS||LA377_0==REF||LA377_0==SBYTE||LA377_0==SHORT||LA377_0==STRING||LA377_0==THIS||(LA377_0 >= UINT && LA377_0 <= ULONG)||LA377_0==USHORT||LA377_0==VOID) ) {
                        alt377=1;
                    }
                    switch (alt377) {
                        case 1 :
                            // CSharpAngular.g:3364:54: fpl= formal_parameter_list
                            {
                            pushFollow(FOLLOW_formal_parameter_list_in_interface_member_declaration_sub_Chld25446);
                            fpl=formal_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_interface_member_declaration_sub_Chld25450); if (state.failed) return retval;

                    // CSharpAngular.g:3364:95: (tpcc= type_parameter_constraints_clauses )?
                    int alt378=2;
                    int LA378_0 = input.LA(1);

                    if ( (LA378_0==IDENTIFIER) ) {
                        alt378=1;
                    }
                    switch (alt378) {
                        case 1 :
                            // CSharpAngular.g:3364:96: tpcc= type_parameter_constraints_clauses
                            {
                            pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_member_declaration_sub_Chld25455);
                            tpcc=type_parameter_constraints_clauses();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_member_declaration_sub_Chld25459); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3365:3: -> interfaceMemberDeclarationSubChld(memName=NamingUtil.toCamelCase($IDENTIFIER.text)typParLst=tplformlParLst=fpltypParConstrCls=tpcc)
                      {
                          retval.st = templateLib.getInstanceOf("interfaceMemberDeclarationSubChld",new STAttrMap().put("memName", NamingUtil.toCamelCase((IDENTIFIER300!=null?IDENTIFIER300.getText():null))).put("typParLst", tpl).put("formlParLst", fpl).put("typParConstrCls", tpcc));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3366:5: IDENTIFIER OPEN_BRACE ia= interface_accessors CLOSE_BRACE
                    {
                    IDENTIFIER301=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_member_declaration_sub_Chld25487); if (state.failed) return retval;

                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_member_declaration_sub_Chld25489); if (state.failed) return retval;

                    pushFollow(FOLLOW_interface_accessors_in_interface_member_declaration_sub_Chld25493);
                    ia=interface_accessors();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_member_declaration_sub_Chld25495); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3367:3: -> interfaceMemberDeclarationSubChld2(memName=NamingUtil.toCamelCase($IDENTIFIER.text)accrs=ia)
                      {
                          retval.st = templateLib.getInstanceOf("interfaceMemberDeclarationSubChld2",new STAttrMap().put("memName", NamingUtil.toCamelCase((IDENTIFIER301!=null?IDENTIFIER301.getText():null))).put("accrs", ia));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:3368:5: THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE iacr= interface_accessors CLOSE_BRACE
                    {
                    match(input,THIS,FOLLOW_THIS_in_interface_member_declaration_sub_Chld25515); if (state.failed) return retval;

                    match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_interface_member_declaration_sub_Chld25517); if (state.failed) return retval;

                    pushFollow(FOLLOW_formal_parameter_list_in_interface_member_declaration_sub_Chld25521);
                    fpl=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_interface_member_declaration_sub_Chld25523); if (state.failed) return retval;

                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_member_declaration_sub_Chld25525); if (state.failed) return retval;

                    pushFollow(FOLLOW_interface_accessors_in_interface_member_declaration_sub_Chld25529);
                    iacr=interface_accessors();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_member_declaration_sub_Chld25531); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3369:3: -> interfaceMemberDeclarationSubChld3(formlParLst=fplintfcAccrs=iacr)
                      {
                          retval.st = templateLib.getInstanceOf("interfaceMemberDeclarationSubChld3",new STAttrMap().put("formlParLst", fpl).put("intfcAccrs", iacr));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_member_declaration_sub_Chld"


    public static class interface_method_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_method_declaration"
    // CSharpAngular.g:3371:1: interface_method_declaration : ( attributes )? ( NEW )? return_type IDENTIFIER ( type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON ;
    public final CSharpAngular.interface_method_declaration_return interface_method_declaration() throws RecognitionException {
        CSharpAngular.interface_method_declaration_return retval = new CSharpAngular.interface_method_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3372:2: ( ( attributes )? ( NEW )? return_type IDENTIFIER ( type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON )
            // CSharpAngular.g:3372:4: ( attributes )? ( NEW )? return_type IDENTIFIER ( type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON
            {
            // CSharpAngular.g:3372:4: ( attributes )?
            int alt380=2;
            int LA380_0 = input.LA(1);

            if ( (LA380_0==OPEN_BRACKET) ) {
                alt380=1;
            }
            switch (alt380) {
                case 1 :
                    // CSharpAngular.g:3372:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_method_declaration25557);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3372:16: ( NEW )?
            int alt381=2;
            int LA381_0 = input.LA(1);

            if ( (LA381_0==NEW) ) {
                alt381=1;
            }
            switch (alt381) {
                case 1 :
                    // CSharpAngular.g:3372:16: NEW
                    {
                    match(input,NEW,FOLLOW_NEW_in_interface_method_declaration25560); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_return_type_in_interface_method_declaration25563);
            return_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_method_declaration25565); if (state.failed) return retval;

            // CSharpAngular.g:3372:44: ( type_parameter_list )?
            int alt382=2;
            int LA382_0 = input.LA(1);

            if ( (LA382_0==LT) ) {
                alt382=1;
            }
            switch (alt382) {
                case 1 :
                    // CSharpAngular.g:3372:44: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_interface_method_declaration25567);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_interface_method_declaration25570); if (state.failed) return retval;

            // CSharpAngular.g:3372:77: ( formal_parameter_list )?
            int alt383=2;
            int LA383_0 = input.LA(1);

            if ( (LA383_0==BOOL||LA383_0==BYTE||LA383_0==CHAR||LA383_0==DECIMAL||LA383_0==DOUBLE||LA383_0==FLOAT||LA383_0==IDENTIFIER||LA383_0==INT||LA383_0==LONG||LA383_0==OBJECT||LA383_0==OPEN_BRACKET||LA383_0==OUT||LA383_0==PARAMS||LA383_0==REF||LA383_0==SBYTE||LA383_0==SHORT||LA383_0==STRING||LA383_0==THIS||(LA383_0 >= UINT && LA383_0 <= ULONG)||LA383_0==USHORT||LA383_0==VOID) ) {
                alt383=1;
            }
            switch (alt383) {
                case 1 :
                    // CSharpAngular.g:3372:77: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_interface_method_declaration25572);
                    formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_interface_method_declaration25575); if (state.failed) return retval;

            // CSharpAngular.g:3372:113: ( type_parameter_constraints_clauses )?
            int alt384=2;
            int LA384_0 = input.LA(1);

            if ( (LA384_0==IDENTIFIER) ) {
                alt384=1;
            }
            switch (alt384) {
                case 1 :
                    // CSharpAngular.g:3372:113: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration25577);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_method_declaration25580); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_method_declaration"


    public static class interface_property_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_property_declaration"
    // CSharpAngular.g:3374:1: interface_property_declaration : ( attributes )? ( NEW )? type IDENTIFIER OPEN_BRACE interface_accessors CLOSE_BRACE ;
    public final CSharpAngular.interface_property_declaration_return interface_property_declaration() throws RecognitionException {
        CSharpAngular.interface_property_declaration_return retval = new CSharpAngular.interface_property_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3375:2: ( ( attributes )? ( NEW )? type IDENTIFIER OPEN_BRACE interface_accessors CLOSE_BRACE )
            // CSharpAngular.g:3375:4: ( attributes )? ( NEW )? type IDENTIFIER OPEN_BRACE interface_accessors CLOSE_BRACE
            {
            // CSharpAngular.g:3375:4: ( attributes )?
            int alt385=2;
            int LA385_0 = input.LA(1);

            if ( (LA385_0==OPEN_BRACKET) ) {
                alt385=1;
            }
            switch (alt385) {
                case 1 :
                    // CSharpAngular.g:3375:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_property_declaration25591);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3375:16: ( NEW )?
            int alt386=2;
            int LA386_0 = input.LA(1);

            if ( (LA386_0==NEW) ) {
                alt386=1;
            }
            switch (alt386) {
                case 1 :
                    // CSharpAngular.g:3375:16: NEW
                    {
                    match(input,NEW,FOLLOW_NEW_in_interface_property_declaration25594); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_in_interface_property_declaration25597);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_property_declaration25599); if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_property_declaration25601); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_accessors_in_interface_property_declaration25603);
            interface_accessors();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_property_declaration25605); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_property_declaration"


    public static class interface_accessors_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_accessors"
    // CSharpAngular.g:3386:1: interface_accessors : (at= attributes )? (getkey= get_contextual_keyword SEMICOLON ( ( attributes )? setkey= set_contextual_keyword SEMICOLON )? -> interfaceAccessors(attributes=atgetckey=getkeysetckey=setkey)|setkey2= set_contextual_keyword SEMICOLON ( ( attributes )? getkey2= get_contextual_keyword SEMICOLON )? -> interfaceAccessors(attributes=atgetckey=getkey2setckey=setkey2)) ;
    public final CSharpAngular.interface_accessors_return interface_accessors() throws RecognitionException {
        CSharpAngular.interface_accessors_return retval = new CSharpAngular.interface_accessors_return();
        retval.start = input.LT(1);


        CSharpAngular.attributes_return at =null;

        CSharpAngular.get_contextual_keyword_return getkey =null;

        CSharpAngular.set_contextual_keyword_return setkey =null;

        CSharpAngular.set_contextual_keyword_return setkey2 =null;

        CSharpAngular.get_contextual_keyword_return getkey2 =null;


        try {
            // CSharpAngular.g:3387:3: ( (at= attributes )? (getkey= get_contextual_keyword SEMICOLON ( ( attributes )? setkey= set_contextual_keyword SEMICOLON )? -> interfaceAccessors(attributes=atgetckey=getkeysetckey=setkey)|setkey2= set_contextual_keyword SEMICOLON ( ( attributes )? getkey2= get_contextual_keyword SEMICOLON )? -> interfaceAccessors(attributes=atgetckey=getkey2setckey=setkey2)) )
            // CSharpAngular.g:3388:3: (at= attributes )? (getkey= get_contextual_keyword SEMICOLON ( ( attributes )? setkey= set_contextual_keyword SEMICOLON )? -> interfaceAccessors(attributes=atgetckey=getkeysetckey=setkey)|setkey2= set_contextual_keyword SEMICOLON ( ( attributes )? getkey2= get_contextual_keyword SEMICOLON )? -> interfaceAccessors(attributes=atgetckey=getkey2setckey=setkey2))
            {
            // CSharpAngular.g:3388:3: (at= attributes )?
            int alt387=2;
            int LA387_0 = input.LA(1);

            if ( (LA387_0==OPEN_BRACKET) ) {
                alt387=1;
            }
            switch (alt387) {
                case 1 :
                    // CSharpAngular.g:3388:4: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_accessors25628);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3389:5: (getkey= get_contextual_keyword SEMICOLON ( ( attributes )? setkey= set_contextual_keyword SEMICOLON )? -> interfaceAccessors(attributes=atgetckey=getkeysetckey=setkey)|setkey2= set_contextual_keyword SEMICOLON ( ( attributes )? getkey2= get_contextual_keyword SEMICOLON )? -> interfaceAccessors(attributes=atgetckey=getkey2setckey=setkey2))
            int alt392=2;
            int LA392_0 = input.LA(1);

            if ( (LA392_0==IDENTIFIER) ) {
                int LA392_1 = input.LA(2);

                if ( (LA392_1==SEMICOLON) ) {
                    int LA392_2 = input.LA(3);

                    if ( ((input.LT(1).getText().equals("get"))) ) {
                        alt392=1;
                    }
                    else if ( ((input.LT(1).getText().equals("set"))) ) {
                        alt392=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 392, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 392, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 392, 0, input);

                throw nvae;

            }
            switch (alt392) {
                case 1 :
                    // CSharpAngular.g:3389:7: getkey= get_contextual_keyword SEMICOLON ( ( attributes )? setkey= set_contextual_keyword SEMICOLON )?
                    {
                    pushFollow(FOLLOW_get_contextual_keyword_in_interface_accessors25640);
                    getkey=get_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_accessors25642); if (state.failed) return retval;

                    // CSharpAngular.g:3389:47: ( ( attributes )? setkey= set_contextual_keyword SEMICOLON )?
                    int alt389=2;
                    int LA389_0 = input.LA(1);

                    if ( (LA389_0==IDENTIFIER||LA389_0==OPEN_BRACKET) ) {
                        alt389=1;
                    }
                    switch (alt389) {
                        case 1 :
                            // CSharpAngular.g:3389:48: ( attributes )? setkey= set_contextual_keyword SEMICOLON
                            {
                            // CSharpAngular.g:3389:48: ( attributes )?
                            int alt388=2;
                            int LA388_0 = input.LA(1);

                            if ( (LA388_0==OPEN_BRACKET) ) {
                                alt388=1;
                            }
                            switch (alt388) {
                                case 1 :
                                    // CSharpAngular.g:3389:48: attributes
                                    {
                                    pushFollow(FOLLOW_attributes_in_interface_accessors25645);
                                    attributes();

                                    state._fsp--;
                                    if (state.failed) return retval;

                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_set_contextual_keyword_in_interface_accessors25650);
                            setkey=set_contextual_keyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_accessors25652); if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3390:5: -> interfaceAccessors(attributes=atgetckey=getkeysetckey=setkey)
                      {
                          retval.st = templateLib.getInstanceOf("interfaceAccessors",new STAttrMap().put("attributes", at).put("getckey", getkey).put("setckey", setkey));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3391:7: setkey2= set_contextual_keyword SEMICOLON ( ( attributes )? getkey2= get_contextual_keyword SEMICOLON )?
                    {
                    pushFollow(FOLLOW_set_contextual_keyword_in_interface_accessors25684);
                    setkey2=set_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_accessors25686); if (state.failed) return retval;

                    // CSharpAngular.g:3391:48: ( ( attributes )? getkey2= get_contextual_keyword SEMICOLON )?
                    int alt391=2;
                    int LA391_0 = input.LA(1);

                    if ( (LA391_0==IDENTIFIER||LA391_0==OPEN_BRACKET) ) {
                        alt391=1;
                    }
                    switch (alt391) {
                        case 1 :
                            // CSharpAngular.g:3391:49: ( attributes )? getkey2= get_contextual_keyword SEMICOLON
                            {
                            // CSharpAngular.g:3391:49: ( attributes )?
                            int alt390=2;
                            int LA390_0 = input.LA(1);

                            if ( (LA390_0==OPEN_BRACKET) ) {
                                alt390=1;
                            }
                            switch (alt390) {
                                case 1 :
                                    // CSharpAngular.g:3391:49: attributes
                                    {
                                    pushFollow(FOLLOW_attributes_in_interface_accessors25689);
                                    attributes();

                                    state._fsp--;
                                    if (state.failed) return retval;

                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_get_contextual_keyword_in_interface_accessors25694);
                            getkey2=get_contextual_keyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_accessors25696); if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3392:5: -> interfaceAccessors(attributes=atgetckey=getkey2setckey=setkey2)
                      {
                          retval.st = templateLib.getInstanceOf("interfaceAccessors",new STAttrMap().put("attributes", at).put("getckey", getkey2).put("setckey", setkey2));
                      }


                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_accessors"


    public static class interface_event_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_event_declaration"
    // CSharpAngular.g:3397:1: interface_event_declaration : ( attributes )? ( NEW )? EVENT type IDENTIFIER SEMICOLON ;
    public final CSharpAngular.interface_event_declaration_return interface_event_declaration() throws RecognitionException {
        CSharpAngular.interface_event_declaration_return retval = new CSharpAngular.interface_event_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3398:2: ( ( attributes )? ( NEW )? EVENT type IDENTIFIER SEMICOLON )
            // CSharpAngular.g:3398:4: ( attributes )? ( NEW )? EVENT type IDENTIFIER SEMICOLON
            {
            // CSharpAngular.g:3398:4: ( attributes )?
            int alt393=2;
            int LA393_0 = input.LA(1);

            if ( (LA393_0==OPEN_BRACKET) ) {
                alt393=1;
            }
            switch (alt393) {
                case 1 :
                    // CSharpAngular.g:3398:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_event_declaration25744);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3398:16: ( NEW )?
            int alt394=2;
            int LA394_0 = input.LA(1);

            if ( (LA394_0==NEW) ) {
                alt394=1;
            }
            switch (alt394) {
                case 1 :
                    // CSharpAngular.g:3398:16: NEW
                    {
                    match(input,NEW,FOLLOW_NEW_in_interface_event_declaration25747); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,EVENT,FOLLOW_EVENT_in_interface_event_declaration25750); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_interface_event_declaration25752);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_event_declaration25754); if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_event_declaration25756); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_event_declaration"


    public static class interface_indexer_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_indexer_declaration"
    // CSharpAngular.g:3400:1: interface_indexer_declaration : ( attributes )? ( NEW )? type THIS OPEN_BRACKET formal_parameter_list CLOSE_BRACKET OPEN_BRACE interface_accessors CLOSE_BRACE ;
    public final CSharpAngular.interface_indexer_declaration_return interface_indexer_declaration() throws RecognitionException {
        CSharpAngular.interface_indexer_declaration_return retval = new CSharpAngular.interface_indexer_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3401:2: ( ( attributes )? ( NEW )? type THIS OPEN_BRACKET formal_parameter_list CLOSE_BRACKET OPEN_BRACE interface_accessors CLOSE_BRACE )
            // CSharpAngular.g:3401:4: ( attributes )? ( NEW )? type THIS OPEN_BRACKET formal_parameter_list CLOSE_BRACKET OPEN_BRACE interface_accessors CLOSE_BRACE
            {
            // CSharpAngular.g:3401:4: ( attributes )?
            int alt395=2;
            int LA395_0 = input.LA(1);

            if ( (LA395_0==OPEN_BRACKET) ) {
                alt395=1;
            }
            switch (alt395) {
                case 1 :
                    // CSharpAngular.g:3401:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_indexer_declaration25767);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3401:16: ( NEW )?
            int alt396=2;
            int LA396_0 = input.LA(1);

            if ( (LA396_0==NEW) ) {
                alt396=1;
            }
            switch (alt396) {
                case 1 :
                    // CSharpAngular.g:3401:16: NEW
                    {
                    match(input,NEW,FOLLOW_NEW_in_interface_indexer_declaration25770); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_in_interface_indexer_declaration25773);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,THIS,FOLLOW_THIS_in_interface_indexer_declaration25775); if (state.failed) return retval;

            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_interface_indexer_declaration25777); if (state.failed) return retval;

            pushFollow(FOLLOW_formal_parameter_list_in_interface_indexer_declaration25779);
            formal_parameter_list();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_interface_indexer_declaration25781); if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_indexer_declaration25783); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_accessors_in_interface_indexer_declaration25785);
            interface_accessors();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_indexer_declaration25787); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_indexer_declaration"


    public static class enum_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_declaration"
    // CSharpAngular.g:3406:1: enum_declaration : ( attributes )? ( enum_modifiers )? ENUM IDENTIFIER ( enum_base )? enum_body ( SEMICOLON )? ;
    public final CSharpAngular.enum_declaration_return enum_declaration() throws RecognitionException {
        CSharpAngular.enum_declaration_return retval = new CSharpAngular.enum_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3407:2: ( ( attributes )? ( enum_modifiers )? ENUM IDENTIFIER ( enum_base )? enum_body ( SEMICOLON )? )
            // CSharpAngular.g:3407:4: ( attributes )? ( enum_modifiers )? ENUM IDENTIFIER ( enum_base )? enum_body ( SEMICOLON )?
            {
            // CSharpAngular.g:3407:4: ( attributes )?
            int alt397=2;
            int LA397_0 = input.LA(1);

            if ( (LA397_0==OPEN_BRACKET) ) {
                alt397=1;
            }
            switch (alt397) {
                case 1 :
                    // CSharpAngular.g:3407:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_enum_declaration25801);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3407:16: ( enum_modifiers )?
            int alt398=2;
            int LA398_0 = input.LA(1);

            if ( (LA398_0==INTERNAL||LA398_0==NEW||(LA398_0 >= PRIVATE && LA398_0 <= PUBLIC)) ) {
                alt398=1;
            }
            switch (alt398) {
                case 1 :
                    // CSharpAngular.g:3407:16: enum_modifiers
                    {
                    pushFollow(FOLLOW_enum_modifiers_in_enum_declaration25804);
                    enum_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,ENUM,FOLLOW_ENUM_in_enum_declaration25807); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enum_declaration25809); if (state.failed) return retval;

            // CSharpAngular.g:3407:48: ( enum_base )?
            int alt399=2;
            int LA399_0 = input.LA(1);

            if ( (LA399_0==COLON) ) {
                alt399=1;
            }
            switch (alt399) {
                case 1 :
                    // CSharpAngular.g:3407:48: enum_base
                    {
                    pushFollow(FOLLOW_enum_base_in_enum_declaration25811);
                    enum_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_enum_body_in_enum_declaration25814);
            enum_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3407:69: ( SEMICOLON )?
            int alt400=2;
            int LA400_0 = input.LA(1);

            if ( (LA400_0==SEMICOLON) ) {
                alt400=1;
            }
            switch (alt400) {
                case 1 :
                    // CSharpAngular.g:3407:69: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_enum_declaration25816); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_declaration"


    public static class enum_base_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_base"
    // CSharpAngular.g:3409:1: enum_base : COLON integral_type ;
    public final CSharpAngular.enum_base_return enum_base() throws RecognitionException {
        CSharpAngular.enum_base_return retval = new CSharpAngular.enum_base_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3410:2: ( COLON integral_type )
            // CSharpAngular.g:3410:4: COLON integral_type
            {
            match(input,COLON,FOLLOW_COLON_in_enum_base25828); if (state.failed) return retval;

            pushFollow(FOLLOW_integral_type_in_enum_base25830);
            integral_type();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_base"


    public static class enum_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_body"
    // CSharpAngular.g:3418:1: enum_body : ( OPEN_BRACE CLOSE_BRACE | OPEN_BRACE enumd= enum_member_declarations (com= COMMA )? CLOSE_BRACE -> enumbody(enumdec=enumdcomm=com));
    public final CSharpAngular.enum_body_return enum_body() throws RecognitionException {
        CSharpAngular.enum_body_return retval = new CSharpAngular.enum_body_return();
        retval.start = input.LT(1);


        Token com=null;
        CSharpAngular.enum_member_declarations_return enumd =null;


        try {
            // CSharpAngular.g:3419:3: ( OPEN_BRACE CLOSE_BRACE | OPEN_BRACE enumd= enum_member_declarations (com= COMMA )? CLOSE_BRACE -> enumbody(enumdec=enumdcomm=com))
            int alt402=2;
            int LA402_0 = input.LA(1);

            if ( (LA402_0==OPEN_BRACE) ) {
                int LA402_1 = input.LA(2);

                if ( (LA402_1==CLOSE_BRACE) ) {
                    alt402=1;
                }
                else if ( (LA402_1==IDENTIFIER||LA402_1==OPEN_BRACKET) ) {
                    alt402=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 402, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 402, 0, input);

                throw nvae;

            }
            switch (alt402) {
                case 1 :
                    // CSharpAngular.g:3419:5: OPEN_BRACE CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_enum_body25844); if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_enum_body25846); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3420:5: OPEN_BRACE enumd= enum_member_declarations (com= COMMA )? CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_enum_body25852); if (state.failed) return retval;

                    pushFollow(FOLLOW_enum_member_declarations_in_enum_body25856);
                    enumd=enum_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharpAngular.g:3420:47: (com= COMMA )?
                    int alt401=2;
                    int LA401_0 = input.LA(1);

                    if ( (LA401_0==COMMA) ) {
                        alt401=1;
                    }
                    switch (alt401) {
                        case 1 :
                            // CSharpAngular.g:3420:48: com= COMMA
                            {
                            com=(Token)match(input,COMMA,FOLLOW_COMMA_in_enum_body25861); if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_enum_body25865); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3421:3: -> enumbody(enumdec=enumdcomm=com)
                      {
                          retval.st = templateLib.getInstanceOf("enumbody",new STAttrMap().put("enumdec", enumd).put("comm", com));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_body"


    public static class enum_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_modifiers"
    // CSharpAngular.g:3423:1: enum_modifiers : ( enum_modifier )+ ;
    public final CSharpAngular.enum_modifiers_return enum_modifiers() throws RecognitionException {
        CSharpAngular.enum_modifiers_return retval = new CSharpAngular.enum_modifiers_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3424:2: ( ( enum_modifier )+ )
            // CSharpAngular.g:3424:4: ( enum_modifier )+
            {
            // CSharpAngular.g:3424:4: ( enum_modifier )+
            int cnt403=0;
            loop403:
            do {
                int alt403=2;
                int LA403_0 = input.LA(1);

                if ( (LA403_0==INTERNAL||LA403_0==NEW||(LA403_0 >= PRIVATE && LA403_0 <= PUBLIC)) ) {
                    alt403=1;
                }


                switch (alt403) {
            	case 1 :
            	    // CSharpAngular.g:3424:4: enum_modifier
            	    {
            	    pushFollow(FOLLOW_enum_modifier_in_enum_modifiers25891);
            	    enum_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt403 >= 1 ) break loop403;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(403, input);
                        throw eee;
                }
                cnt403++;
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_modifiers"


    public static class enum_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_modifier"
    // CSharpAngular.g:3426:1: enum_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text));
    public final CSharpAngular.enum_modifier_return enum_modifier() throws RecognitionException {
        CSharpAngular.enum_modifier_return retval = new CSharpAngular.enum_modifier_return();
        retval.start = input.LT(1);


        Token NEW302=null;
        Token PUBLIC303=null;
        Token PROTECTED304=null;
        Token INTERNAL305=null;
        Token PRIVATE306=null;

        try {
            // CSharpAngular.g:3427:3: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text))
            int alt404=5;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt404=1;
                }
                break;
            case PUBLIC:
                {
                alt404=2;
                }
                break;
            case PROTECTED:
                {
                alt404=3;
                }
                break;
            case INTERNAL:
                {
                alt404=4;
                }
                break;
            case PRIVATE:
                {
                alt404=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 404, 0, input);

                throw nvae;

            }

            switch (alt404) {
                case 1 :
                    // CSharpAngular.g:3428:3: NEW
                    {
                    NEW302=(Token)match(input,NEW,FOLLOW_NEW_in_enum_modifier25907); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3428:21: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW302!=null?NEW302.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3429:5: PUBLIC
                    {
                    PUBLIC303=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_enum_modifier25935); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3429:21: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC303!=null?PUBLIC303.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:3430:5: PROTECTED
                    {
                    PROTECTED304=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_enum_modifier25958); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3430:21: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED304!=null?PROTECTED304.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:3431:5: INTERNAL
                    {
                    INTERNAL305=(Token)match(input,INTERNAL,FOLLOW_INTERNAL_in_enum_modifier25978); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3431:21: -> text(value=$INTERNAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERNAL305!=null?INTERNAL305.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:3432:5: PRIVATE
                    {
                    PRIVATE306=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_enum_modifier25999); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3432:21: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE306!=null?PRIVATE306.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_modifier"


    public static class enum_member_declarations_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_member_declarations"
    // CSharpAngular.g:3435:1: enum_member_declarations : mem= enum_member_declaration ( COMMA mem1+= enum_member_declaration )* -> enummemberdeclarations(memb=memmemb1=$mem1);
    public final CSharpAngular.enum_member_declarations_return enum_member_declarations() throws RecognitionException {
        CSharpAngular.enum_member_declarations_return retval = new CSharpAngular.enum_member_declarations_return();
        retval.start = input.LT(1);


        List list_mem1=null;
        CSharpAngular.enum_member_declaration_return mem =null;

        RuleReturnScope mem1 = null;
        try {
            // CSharpAngular.g:3436:2: (mem= enum_member_declaration ( COMMA mem1+= enum_member_declaration )* -> enummemberdeclarations(memb=memmemb1=$mem1))
            // CSharpAngular.g:3436:4: mem= enum_member_declaration ( COMMA mem1+= enum_member_declaration )*
            {
            pushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations26030);
            mem=enum_member_declaration();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3436:32: ( COMMA mem1+= enum_member_declaration )*
            loop405:
            do {
                int alt405=2;
                int LA405_0 = input.LA(1);

                if ( (LA405_0==COMMA) ) {
                    int LA405_1 = input.LA(2);

                    if ( (LA405_1==IDENTIFIER||LA405_1==OPEN_BRACKET) ) {
                        alt405=1;
                    }


                }


                switch (alt405) {
            	case 1 :
            	    // CSharpAngular.g:3436:34: COMMA mem1+= enum_member_declaration
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_enum_member_declarations26034); if (state.failed) return retval;

            	    pushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations26039);
            	    mem1=enum_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_mem1==null) list_mem1=new ArrayList();
            	    list_mem1.add(mem1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop405;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3437:2: -> enummemberdeclarations(memb=memmemb1=$mem1)
              {
                  retval.st = templateLib.getInstanceOf("enummemberdeclarations",new STAttrMap().put("memb", mem).put("memb1", list_mem1));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_member_declarations"


    public static class enum_member_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_member_declaration"
    // CSharpAngular.g:3445:1: enum_member_declaration : (att= attributes )? id= IDENTIFIER ( ASSIGNMENT exp= constant_expression )? -> enummemberdeclaration(attr=attidenti=idexpr=exp);
    public final CSharpAngular.enum_member_declaration_return enum_member_declaration() throws RecognitionException {
        CSharpAngular.enum_member_declaration_return retval = new CSharpAngular.enum_member_declaration_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharpAngular.attributes_return att =null;

        CSharpAngular.constant_expression_return exp =null;


        try {
            // CSharpAngular.g:3446:3: ( (att= attributes )? id= IDENTIFIER ( ASSIGNMENT exp= constant_expression )? -> enummemberdeclaration(attr=attidenti=idexpr=exp))
            // CSharpAngular.g:3446:5: (att= attributes )? id= IDENTIFIER ( ASSIGNMENT exp= constant_expression )?
            {
            // CSharpAngular.g:3446:8: (att= attributes )?
            int alt406=2;
            int LA406_0 = input.LA(1);

            if ( (LA406_0==OPEN_BRACKET) ) {
                alt406=1;
            }
            switch (alt406) {
                case 1 :
                    // CSharpAngular.g:3446:8: att= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_enum_member_declaration26071);
                    att=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enum_member_declaration26076); if (state.failed) return retval;

            // CSharpAngular.g:3446:35: ( ASSIGNMENT exp= constant_expression )?
            int alt407=2;
            int LA407_0 = input.LA(1);

            if ( (LA407_0==ASSIGNMENT) ) {
                alt407=1;
            }
            switch (alt407) {
                case 1 :
                    // CSharpAngular.g:3446:36: ASSIGNMENT exp= constant_expression
                    {
                    match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_enum_member_declaration26079); if (state.failed) return retval;

                    pushFollow(FOLLOW_constant_expression_in_enum_member_declaration26083);
                    exp=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3447:3: -> enummemberdeclaration(attr=attidenti=idexpr=exp)
              {
                  retval.st = templateLib.getInstanceOf("enummemberdeclaration",new STAttrMap().put("attr", att).put("identi", id).put("expr", exp));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_member_declaration"


    public static class delegate_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_declaration"
    // CSharpAngular.g:3451:1: delegate_declaration : ( attributes )? ( delegate_modifiers )? DELEGATE return_type IDENTIFIER ( variant_type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON ;
    public final CSharpAngular.delegate_declaration_return delegate_declaration() throws RecognitionException {
        CSharpAngular.delegate_declaration_return retval = new CSharpAngular.delegate_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3452:2: ( ( attributes )? ( delegate_modifiers )? DELEGATE return_type IDENTIFIER ( variant_type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON )
            // CSharpAngular.g:3452:4: ( attributes )? ( delegate_modifiers )? DELEGATE return_type IDENTIFIER ( variant_type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON
            {
            // CSharpAngular.g:3452:4: ( attributes )?
            int alt408=2;
            int LA408_0 = input.LA(1);

            if ( (LA408_0==OPEN_BRACKET) ) {
                alt408=1;
            }
            switch (alt408) {
                case 1 :
                    // CSharpAngular.g:3452:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_delegate_declaration26117);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3452:16: ( delegate_modifiers )?
            int alt409=2;
            int LA409_0 = input.LA(1);

            if ( (LA409_0==INTERNAL||LA409_0==NEW||(LA409_0 >= PRIVATE && LA409_0 <= PUBLIC)||LA409_0==UNSAFE) ) {
                alt409=1;
            }
            switch (alt409) {
                case 1 :
                    // CSharpAngular.g:3452:16: delegate_modifiers
                    {
                    pushFollow(FOLLOW_delegate_modifiers_in_delegate_declaration26120);
                    delegate_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,DELEGATE,FOLLOW_DELEGATE_in_delegate_declaration26123); if (state.failed) return retval;

            pushFollow(FOLLOW_return_type_in_delegate_declaration26125);
            return_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_delegate_declaration26127); if (state.failed) return retval;

            // CSharpAngular.g:3452:68: ( variant_type_parameter_list )?
            int alt410=2;
            int LA410_0 = input.LA(1);

            if ( (LA410_0==LT) ) {
                alt410=1;
            }
            switch (alt410) {
                case 1 :
                    // CSharpAngular.g:3452:68: variant_type_parameter_list
                    {
                    pushFollow(FOLLOW_variant_type_parameter_list_in_delegate_declaration26129);
                    variant_type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_delegate_declaration26138); if (state.failed) return retval;

            // CSharpAngular.g:3453:18: ( formal_parameter_list )?
            int alt411=2;
            int LA411_0 = input.LA(1);

            if ( (LA411_0==BOOL||LA411_0==BYTE||LA411_0==CHAR||LA411_0==DECIMAL||LA411_0==DOUBLE||LA411_0==FLOAT||LA411_0==IDENTIFIER||LA411_0==INT||LA411_0==LONG||LA411_0==OBJECT||LA411_0==OPEN_BRACKET||LA411_0==OUT||LA411_0==PARAMS||LA411_0==REF||LA411_0==SBYTE||LA411_0==SHORT||LA411_0==STRING||LA411_0==THIS||(LA411_0 >= UINT && LA411_0 <= ULONG)||LA411_0==USHORT||LA411_0==VOID) ) {
                alt411=1;
            }
            switch (alt411) {
                case 1 :
                    // CSharpAngular.g:3453:18: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_delegate_declaration26140);
                    formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_delegate_declaration26143); if (state.failed) return retval;

            // CSharpAngular.g:3453:54: ( type_parameter_constraints_clauses )?
            int alt412=2;
            int LA412_0 = input.LA(1);

            if ( (LA412_0==IDENTIFIER) ) {
                alt412=1;
            }
            switch (alt412) {
                case 1 :
                    // CSharpAngular.g:3453:54: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration26145);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_delegate_declaration26148); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delegate_declaration"


    public static class delegate_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_modifiers"
    // CSharpAngular.g:3455:1: delegate_modifiers : delegate_modifier ( delegate_modifier )* ;
    public final CSharpAngular.delegate_modifiers_return delegate_modifiers() throws RecognitionException {
        CSharpAngular.delegate_modifiers_return retval = new CSharpAngular.delegate_modifiers_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3456:2: ( delegate_modifier ( delegate_modifier )* )
            // CSharpAngular.g:3456:4: delegate_modifier ( delegate_modifier )*
            {
            pushFollow(FOLLOW_delegate_modifier_in_delegate_modifiers26159);
            delegate_modifier();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3456:22: ( delegate_modifier )*
            loop413:
            do {
                int alt413=2;
                int LA413_0 = input.LA(1);

                if ( (LA413_0==INTERNAL||LA413_0==NEW||(LA413_0 >= PRIVATE && LA413_0 <= PUBLIC)||LA413_0==UNSAFE) ) {
                    alt413=1;
                }


                switch (alt413) {
            	case 1 :
            	    // CSharpAngular.g:3456:24: delegate_modifier
            	    {
            	    pushFollow(FOLLOW_delegate_modifier_in_delegate_modifiers26163);
            	    delegate_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop413;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delegate_modifiers"


    public static class delegate_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_modifier"
    // CSharpAngular.g:3458:1: delegate_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)|delmd= delegate_modifier_unsafe -> text(value=delmd));
    public final CSharpAngular.delegate_modifier_return delegate_modifier() throws RecognitionException {
        CSharpAngular.delegate_modifier_return retval = new CSharpAngular.delegate_modifier_return();
        retval.start = input.LT(1);


        Token NEW307=null;
        Token PUBLIC308=null;
        Token PROTECTED309=null;
        Token INTERNAL310=null;
        Token PRIVATE311=null;
        CSharpAngular.delegate_modifier_unsafe_return delmd =null;


        try {
            // CSharpAngular.g:3459:3: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)|delmd= delegate_modifier_unsafe -> text(value=delmd))
            int alt414=6;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt414=1;
                }
                break;
            case PUBLIC:
                {
                alt414=2;
                }
                break;
            case PROTECTED:
                {
                alt414=3;
                }
                break;
            case INTERNAL:
                {
                alt414=4;
                }
                break;
            case PRIVATE:
                {
                alt414=5;
                }
                break;
            case UNSAFE:
                {
                alt414=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 414, 0, input);

                throw nvae;

            }

            switch (alt414) {
                case 1 :
                    // CSharpAngular.g:3460:3: NEW
                    {
                    NEW307=(Token)match(input,NEW,FOLLOW_NEW_in_delegate_modifier26181); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3460:42: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW307!=null?NEW307.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3461:5: PUBLIC
                    {
                    PUBLIC308=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_delegate_modifier26230); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3461:42: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC308!=null?PUBLIC308.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:3462:5: PROTECTED
                    {
                    PROTECTED309=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_delegate_modifier26274); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3462:42: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED309!=null?PROTECTED309.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:3463:5: INTERNAL
                    {
                    INTERNAL310=(Token)match(input,INTERNAL,FOLLOW_INTERNAL_in_delegate_modifier26315); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3463:42: -> text(value=$INTERNAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERNAL310!=null?INTERNAL310.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:3464:5: PRIVATE
                    {
                    PRIVATE311=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_delegate_modifier26357); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3464:42: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE311!=null?PRIVATE311.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:3465:5: delmd= delegate_modifier_unsafe
                    {
                    pushFollow(FOLLOW_delegate_modifier_unsafe_in_delegate_modifier26402);
                    delmd=delegate_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3465:42: -> text(value=delmd)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", delmd));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delegate_modifier"


    public static class global_attributes_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "global_attributes"
    // CSharpAngular.g:3472:1: global_attributes : attrs= global_attribute_sections -> globalAttributes(attributes=attrs);
    public final CSharpAngular.global_attributes_return global_attributes() throws RecognitionException {
        CSharpAngular.global_attributes_return retval = new CSharpAngular.global_attributes_return();
        retval.start = input.LT(1);


        CSharpAngular.global_attribute_sections_return attrs =null;


        try {
            // CSharpAngular.g:3473:2: (attrs= global_attribute_sections -> globalAttributes(attributes=attrs))
            // CSharpAngular.g:3474:2: attrs= global_attribute_sections
            {
            pushFollow(FOLLOW_global_attribute_sections_in_global_attributes26437);
            attrs=global_attribute_sections();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3475:2: -> globalAttributes(attributes=attrs)
              {
                  retval.st = templateLib.getInstanceOf("globalAttributes",new STAttrMap().put("attributes", attrs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "global_attributes"


    public static class global_attribute_sections_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "global_attribute_sections"
    // CSharpAngular.g:3477:1: global_attribute_sections : (secs+= global_attribute_section )+ -> globalAttributeSections(sections=$secs);
    public final CSharpAngular.global_attribute_sections_return global_attribute_sections() throws RecognitionException {
        CSharpAngular.global_attribute_sections_return retval = new CSharpAngular.global_attribute_sections_return();
        retval.start = input.LT(1);


        List list_secs=null;
        RuleReturnScope secs = null;
        try {
            // CSharpAngular.g:3478:2: ( (secs+= global_attribute_section )+ -> globalAttributeSections(sections=$secs))
            // CSharpAngular.g:3479:2: (secs+= global_attribute_section )+
            {
            // CSharpAngular.g:3479:2: (secs+= global_attribute_section )+
            int cnt415=0;
            loop415:
            do {
                int alt415=2;
                int LA415_0 = input.LA(1);

                if ( (LA415_0==OPEN_BRACKET) ) {
                    alt415=1;
                }


                switch (alt415) {
            	case 1 :
            	    // CSharpAngular.g:3479:3: secs+= global_attribute_section
            	    {
            	    pushFollow(FOLLOW_global_attribute_section_in_global_attribute_sections26462);
            	    secs=global_attribute_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_secs==null) list_secs=new ArrayList();
            	    list_secs.add(secs.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt415 >= 1 ) break loop415;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(415, input);
                        throw eee;
                }
                cnt415++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3480:2: -> globalAttributeSections(sections=$secs)
              {
                  retval.st = templateLib.getInstanceOf("globalAttributeSections",new STAttrMap().put("sections", list_secs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "global_attribute_sections"


    public static class global_attribute_section_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "global_attribute_section"
    // CSharpAngular.g:3488:1: global_attribute_section : OPEN_BRACKET global_attribute_target_specifier attribute_list ( COMMA )? CLOSE_BRACKET ;
    public final CSharpAngular.global_attribute_section_return global_attribute_section() throws RecognitionException {
        CSharpAngular.global_attribute_section_return retval = new CSharpAngular.global_attribute_section_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3489:3: ( OPEN_BRACKET global_attribute_target_specifier attribute_list ( COMMA )? CLOSE_BRACKET )
            // CSharpAngular.g:3490:3: OPEN_BRACKET global_attribute_target_specifier attribute_list ( COMMA )? CLOSE_BRACKET
            {
            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_global_attribute_section26490); if (state.failed) return retval;

            pushFollow(FOLLOW_global_attribute_target_specifier_in_global_attribute_section26492);
            global_attribute_target_specifier();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_attribute_list_in_global_attribute_section26494);
            attribute_list();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3490:65: ( COMMA )?
            int alt416=2;
            int LA416_0 = input.LA(1);

            if ( (LA416_0==COMMA) ) {
                alt416=1;
            }
            switch (alt416) {
                case 1 :
                    // CSharpAngular.g:3490:65: COMMA
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_global_attribute_section26496); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_global_attribute_section26499); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "global_attribute_section"


    public static class global_attribute_target_specifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "global_attribute_target_specifier"
    // CSharpAngular.g:3492:1: global_attribute_target_specifier : global_attribute_target COLON ;
    public final CSharpAngular.global_attribute_target_specifier_return global_attribute_target_specifier() throws RecognitionException {
        CSharpAngular.global_attribute_target_specifier_return retval = new CSharpAngular.global_attribute_target_specifier_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3493:2: ( global_attribute_target COLON )
            // CSharpAngular.g:3493:4: global_attribute_target COLON
            {
            pushFollow(FOLLOW_global_attribute_target_in_global_attribute_target_specifier26511);
            global_attribute_target();

            state._fsp--;
            if (state.failed) return retval;

            match(input,COLON,FOLLOW_COLON_in_global_attribute_target_specifier26513); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "global_attribute_target_specifier"


    public static class global_attribute_target_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "global_attribute_target"
    // CSharpAngular.g:3495:1: global_attribute_target : (kyd= keyword -> text(value=kyd)| IDENTIFIER -> text(value=$IDENTIFIER.text));
    public final CSharpAngular.global_attribute_target_return global_attribute_target() throws RecognitionException {
        CSharpAngular.global_attribute_target_return retval = new CSharpAngular.global_attribute_target_return();
        retval.start = input.LT(1);


        Token IDENTIFIER312=null;
        CSharpAngular.keyword_return kyd =null;


        try {
            // CSharpAngular.g:3496:3: (kyd= keyword -> text(value=kyd)| IDENTIFIER -> text(value=$IDENTIFIER.text))
            int alt417=2;
            int LA417_0 = input.LA(1);

            if ( (LA417_0==ABSTRACT||LA417_0==AS||LA417_0==BASE||(LA417_0 >= BOOL && LA417_0 <= BYTE)||(LA417_0 >= CASE && LA417_0 <= CHAR)||(LA417_0 >= CHECKED && LA417_0 <= CLASS)||(LA417_0 >= CONST && LA417_0 <= CONTINUE)||LA417_0==DECIMAL||(LA417_0 >= DEFAULT && LA417_0 <= DELEGATE)||LA417_0==DO||LA417_0==DOUBLE||LA417_0==ELSE||(LA417_0 >= ENUM && LA417_0 <= EXTERN)||(LA417_0 >= FALSE && LA417_0 <= FOREACH)||LA417_0==GOTO||(LA417_0 >= IF && LA417_0 <= INT)||(LA417_0 >= INTERFACE && LA417_0 <= INTERNAL)||LA417_0==IS||(LA417_0 >= LOCK && LA417_0 <= LONG)||(LA417_0 >= NAMESPACE && LA417_0 <= NEW)||LA417_0==NULL||LA417_0==OBJECT||LA417_0==OPERATOR||(LA417_0 >= OUT && LA417_0 <= PARAMS)||(LA417_0 >= PRIVATE && LA417_0 <= PUBLIC)||LA417_0==READONLY||(LA417_0 >= REF && LA417_0 <= RETURN)||(LA417_0 >= SBYTE && LA417_0 <= SEALED)||LA417_0==SHORT||(LA417_0 >= SIZEOF && LA417_0 <= STACKALLOC)||(LA417_0 >= STATIC && LA417_0 <= STRING)||(LA417_0 >= STRUCT && LA417_0 <= SWITCH)||(LA417_0 >= THIS && LA417_0 <= THROW)||(LA417_0 >= TRUE && LA417_0 <= TYPEOF)||(LA417_0 >= UINT && LA417_0 <= UNCHECKED)||(LA417_0 >= UNSAFE && LA417_0 <= USING)||(LA417_0 >= VIRTUAL && LA417_0 <= VOLATILE)||LA417_0==WHILE) ) {
                alt417=1;
            }
            else if ( (LA417_0==IDENTIFIER) ) {
                alt417=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 417, 0, input);

                throw nvae;

            }
            switch (alt417) {
                case 1 :
                    // CSharpAngular.g:3497:3: kyd= keyword
                    {
                    pushFollow(FOLLOW_keyword_in_global_attribute_target26530);
                    kyd=keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3497:23: -> text(value=kyd)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", kyd));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3498:5: IDENTIFIER
                    {
                    IDENTIFIER312=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_global_attribute_target26552); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3498:23: -> text(value=$IDENTIFIER.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IDENTIFIER312!=null?IDENTIFIER312.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "global_attribute_target"


    public static class attributes_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attributes"
    // CSharpAngular.g:3507:1: attributes : attSec= attribute_sections -> text(value=attSec);
    public final CSharpAngular.attributes_return attributes() throws RecognitionException {
        CSharpAngular.attributes_return retval = new CSharpAngular.attributes_return();
        retval.start = input.LT(1);


        CSharpAngular.attribute_sections_return attSec =null;


        try {
            // CSharpAngular.g:3508:2: (attSec= attribute_sections -> text(value=attSec))
            // CSharpAngular.g:3509:2: attSec= attribute_sections
            {
            pushFollow(FOLLOW_attribute_sections_in_attributes26586);
            attSec=attribute_sections();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3509:35: -> text(value=attSec)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", attSec));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attributes"


    public static class attribute_sections_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_sections"
    // CSharpAngular.g:3511:1: attribute_sections : (attSecLst+= attribute_section )+ -> lineIterator(list=$attSecLst);
    public final CSharpAngular.attribute_sections_return attribute_sections() throws RecognitionException {
        CSharpAngular.attribute_sections_return retval = new CSharpAngular.attribute_sections_return();
        retval.start = input.LT(1);


        List list_attSecLst=null;
        RuleReturnScope attSecLst = null;
        try {
            // CSharpAngular.g:3512:2: ( (attSecLst+= attribute_section )+ -> lineIterator(list=$attSecLst))
            // CSharpAngular.g:3513:2: (attSecLst+= attribute_section )+
            {
            // CSharpAngular.g:3513:2: (attSecLst+= attribute_section )+
            int cnt418=0;
            loop418:
            do {
                int alt418=2;
                int LA418_0 = input.LA(1);

                if ( (LA418_0==OPEN_BRACKET) ) {
                    alt418=1;
                }


                switch (alt418) {
            	case 1 :
            	    // CSharpAngular.g:3513:3: attSecLst+= attribute_section
            	    {
            	    pushFollow(FOLLOW_attribute_section_in_attribute_sections26617);
            	    attSecLst=attribute_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_attSecLst==null) list_attSecLst=new ArrayList();
            	    list_attSecLst.add(attSecLst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt418 >= 1 ) break loop418;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(418, input);
                        throw eee;
                }
                cnt418++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3514:2: -> lineIterator(list=$attSecLst)
              {
                  retval.st = templateLib.getInstanceOf("lineIterator",new STAttrMap().put("list", list_attSecLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_sections"


    public static class attribute_section_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_section"
    // CSharpAngular.g:3522:1: attribute_section : OPEN_BRACKET (attTarSpec= attribute_target_specifier )? attLst= attribute_list ( COMMA )? CLOSE_BRACKET -> attributeSection(attributeTargetSpecifier=attTarSpecattributeList=attLst);
    public final CSharpAngular.attribute_section_return attribute_section() throws RecognitionException {
        CSharpAngular.attribute_section_return retval = new CSharpAngular.attribute_section_return();
        retval.start = input.LT(1);


        CSharpAngular.attribute_target_specifier_return attTarSpec =null;

        CSharpAngular.attribute_list_return attLst =null;


        try {
            // CSharpAngular.g:3523:3: ( OPEN_BRACKET (attTarSpec= attribute_target_specifier )? attLst= attribute_list ( COMMA )? CLOSE_BRACKET -> attributeSection(attributeTargetSpecifier=attTarSpecattributeList=attLst))
            // CSharpAngular.g:3524:3: OPEN_BRACKET (attTarSpec= attribute_target_specifier )? attLst= attribute_list ( COMMA )? CLOSE_BRACKET
            {
            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_attribute_section26645); if (state.failed) return retval;

            // CSharpAngular.g:3524:16: (attTarSpec= attribute_target_specifier )?
            int alt419=2;
            int LA419_0 = input.LA(1);

            if ( (LA419_0==ABSTRACT||LA419_0==AS||LA419_0==BASE||(LA419_0 >= BOOL && LA419_0 <= BYTE)||(LA419_0 >= CASE && LA419_0 <= CHAR)||(LA419_0 >= CHECKED && LA419_0 <= CLASS)||(LA419_0 >= CONST && LA419_0 <= CONTINUE)||LA419_0==DECIMAL||(LA419_0 >= DEFAULT && LA419_0 <= DELEGATE)||LA419_0==DO||LA419_0==DOUBLE||LA419_0==ELSE||(LA419_0 >= ENUM && LA419_0 <= EXTERN)||(LA419_0 >= FALSE && LA419_0 <= FOREACH)||LA419_0==GOTO||(LA419_0 >= IF && LA419_0 <= INT)||(LA419_0 >= INTERFACE && LA419_0 <= INTERNAL)||LA419_0==IS||(LA419_0 >= LOCK && LA419_0 <= LONG)||(LA419_0 >= NAMESPACE && LA419_0 <= NEW)||LA419_0==NULL||LA419_0==OBJECT||LA419_0==OPERATOR||(LA419_0 >= OUT && LA419_0 <= PARAMS)||(LA419_0 >= PRIVATE && LA419_0 <= PUBLIC)||LA419_0==READONLY||(LA419_0 >= REF && LA419_0 <= RETURN)||(LA419_0 >= SBYTE && LA419_0 <= SEALED)||LA419_0==SHORT||(LA419_0 >= SIZEOF && LA419_0 <= STACKALLOC)||(LA419_0 >= STATIC && LA419_0 <= STRING)||(LA419_0 >= STRUCT && LA419_0 <= SWITCH)||(LA419_0 >= THIS && LA419_0 <= THROW)||(LA419_0 >= TRUE && LA419_0 <= TYPEOF)||(LA419_0 >= UINT && LA419_0 <= UNCHECKED)||(LA419_0 >= UNSAFE && LA419_0 <= USING)||(LA419_0 >= VIRTUAL && LA419_0 <= VOLATILE)||LA419_0==WHILE) ) {
                alt419=1;
            }
            else if ( (LA419_0==IDENTIFIER) ) {
                int LA419_2 = input.LA(2);

                if ( (LA419_2==COLON) ) {
                    alt419=1;
                }
            }
            switch (alt419) {
                case 1 :
                    // CSharpAngular.g:3524:17: attTarSpec= attribute_target_specifier
                    {
                    pushFollow(FOLLOW_attribute_target_specifier_in_attribute_section26650);
                    attTarSpec=attribute_target_specifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_attribute_list_in_attribute_section26656);
            attLst=attribute_list();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3524:79: ( COMMA )?
            int alt420=2;
            int LA420_0 = input.LA(1);

            if ( (LA420_0==COMMA) ) {
                alt420=1;
            }
            switch (alt420) {
                case 1 :
                    // CSharpAngular.g:3524:79: COMMA
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_attribute_section26658); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_attribute_section26661); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3525:3: -> attributeSection(attributeTargetSpecifier=attTarSpecattributeList=attLst)
              {
                  retval.st = templateLib.getInstanceOf("attributeSection",new STAttrMap().put("attributeTargetSpecifier", attTarSpec).put("attributeList", attLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_section"


    public static class attribute_target_specifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_target_specifier"
    // CSharpAngular.g:3527:1: attribute_target_specifier : attTar= attribute_target COLON -> text(value=$attTar.text);
    public final CSharpAngular.attribute_target_specifier_return attribute_target_specifier() throws RecognitionException {
        CSharpAngular.attribute_target_specifier_return retval = new CSharpAngular.attribute_target_specifier_return();
        retval.start = input.LT(1);


        CSharpAngular.attribute_target_return attTar =null;


        try {
            // CSharpAngular.g:3528:2: (attTar= attribute_target COLON -> text(value=$attTar.text))
            // CSharpAngular.g:3529:2: attTar= attribute_target COLON
            {
            pushFollow(FOLLOW_attribute_target_in_attribute_target_specifier26691);
            attTar=attribute_target();

            state._fsp--;
            if (state.failed) return retval;

            match(input,COLON,FOLLOW_COLON_in_attribute_target_specifier26693); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3530:2: -> text(value=$attTar.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (attTar!=null?input.toString(attTar.start,attTar.stop):null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_target_specifier"


    public static class attribute_target_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_target"
    // CSharpAngular.g:3532:1: attribute_target : (keyWrd= keyword -> text(value=$keyWrd.text)|id= IDENTIFIER -> text(value=$id.text));
    public final CSharpAngular.attribute_target_return attribute_target() throws RecognitionException {
        CSharpAngular.attribute_target_return retval = new CSharpAngular.attribute_target_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharpAngular.keyword_return keyWrd =null;


        try {
            // CSharpAngular.g:3533:3: (keyWrd= keyword -> text(value=$keyWrd.text)|id= IDENTIFIER -> text(value=$id.text))
            int alt421=2;
            int LA421_0 = input.LA(1);

            if ( (LA421_0==ABSTRACT||LA421_0==AS||LA421_0==BASE||(LA421_0 >= BOOL && LA421_0 <= BYTE)||(LA421_0 >= CASE && LA421_0 <= CHAR)||(LA421_0 >= CHECKED && LA421_0 <= CLASS)||(LA421_0 >= CONST && LA421_0 <= CONTINUE)||LA421_0==DECIMAL||(LA421_0 >= DEFAULT && LA421_0 <= DELEGATE)||LA421_0==DO||LA421_0==DOUBLE||LA421_0==ELSE||(LA421_0 >= ENUM && LA421_0 <= EXTERN)||(LA421_0 >= FALSE && LA421_0 <= FOREACH)||LA421_0==GOTO||(LA421_0 >= IF && LA421_0 <= INT)||(LA421_0 >= INTERFACE && LA421_0 <= INTERNAL)||LA421_0==IS||(LA421_0 >= LOCK && LA421_0 <= LONG)||(LA421_0 >= NAMESPACE && LA421_0 <= NEW)||LA421_0==NULL||LA421_0==OBJECT||LA421_0==OPERATOR||(LA421_0 >= OUT && LA421_0 <= PARAMS)||(LA421_0 >= PRIVATE && LA421_0 <= PUBLIC)||LA421_0==READONLY||(LA421_0 >= REF && LA421_0 <= RETURN)||(LA421_0 >= SBYTE && LA421_0 <= SEALED)||LA421_0==SHORT||(LA421_0 >= SIZEOF && LA421_0 <= STACKALLOC)||(LA421_0 >= STATIC && LA421_0 <= STRING)||(LA421_0 >= STRUCT && LA421_0 <= SWITCH)||(LA421_0 >= THIS && LA421_0 <= THROW)||(LA421_0 >= TRUE && LA421_0 <= TYPEOF)||(LA421_0 >= UINT && LA421_0 <= UNCHECKED)||(LA421_0 >= UNSAFE && LA421_0 <= USING)||(LA421_0 >= VIRTUAL && LA421_0 <= VOLATILE)||LA421_0==WHILE) ) {
                alt421=1;
            }
            else if ( (LA421_0==IDENTIFIER) ) {
                alt421=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 421, 0, input);

                throw nvae;

            }
            switch (alt421) {
                case 1 :
                    // CSharpAngular.g:3533:5: keyWrd= keyword
                    {
                    pushFollow(FOLLOW_keyword_in_attribute_target26716);
                    keyWrd=keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3533:25: -> text(value=$keyWrd.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (keyWrd!=null?input.toString(keyWrd.start,keyWrd.stop):null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3534:5: id= IDENTIFIER
                    {
                    id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_attribute_target26737); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3534:25: -> text(value=$id.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (id!=null?id.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_target"


    public static class attribute_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_list"
    // CSharpAngular.g:3547:1: attribute_list : fstAtt= attribute (attrLst+= attribute_list_Chld )* -> attributeList(firstAttribute=fstAttattributeList=$attrLst);
    public final CSharpAngular.attribute_list_return attribute_list() throws RecognitionException {
        CSharpAngular.attribute_list_return retval = new CSharpAngular.attribute_list_return();
        retval.start = input.LT(1);


        List list_attrLst=null;
        CSharpAngular.attribute_return fstAtt =null;

        RuleReturnScope attrLst = null;
        try {
            // CSharpAngular.g:3548:2: (fstAtt= attribute (attrLst+= attribute_list_Chld )* -> attributeList(firstAttribute=fstAttattributeList=$attrLst))
            // CSharpAngular.g:3549:2: fstAtt= attribute (attrLst+= attribute_list_Chld )*
            {
            pushFollow(FOLLOW_attribute_in_attribute_list26769);
            fstAtt=attribute();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3549:19: (attrLst+= attribute_list_Chld )*
            loop422:
            do {
                int alt422=2;
                int LA422_0 = input.LA(1);

                if ( (LA422_0==COMMA) ) {
                    int LA422_1 = input.LA(2);

                    if ( (LA422_1==IDENTIFIER) ) {
                        alt422=1;
                    }


                }


                switch (alt422) {
            	case 1 :
            	    // CSharpAngular.g:3549:20: attrLst+= attribute_list_Chld
            	    {
            	    pushFollow(FOLLOW_attribute_list_Chld_in_attribute_list26774);
            	    attrLst=attribute_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_attrLst==null) list_attrLst=new ArrayList();
            	    list_attrLst.add(attrLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop422;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3550:2: -> attributeList(firstAttribute=fstAttattributeList=$attrLst)
              {
                  retval.st = templateLib.getInstanceOf("attributeList",new STAttrMap().put("firstAttribute", fstAtt).put("attributeList", list_attrLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_list"


    public static class attribute_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_list_Chld"
    // CSharpAngular.g:3553:1: attribute_list_Chld : COMMA atr= attribute -> text(value=\",\"+$atr.text);
    public final CSharpAngular.attribute_list_Chld_return attribute_list_Chld() throws RecognitionException {
        CSharpAngular.attribute_list_Chld_return retval = new CSharpAngular.attribute_list_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.attribute_return atr =null;


        try {
            // CSharpAngular.g:3554:2: ( COMMA atr= attribute -> text(value=\",\"+$atr.text))
            // CSharpAngular.g:3555:2: COMMA atr= attribute
            {
            match(input,COMMA,FOLLOW_COMMA_in_attribute_list_Chld26802); if (state.failed) return retval;

            pushFollow(FOLLOW_attribute_in_attribute_list_Chld26806);
            atr=attribute();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3556:2: -> text(value=\",\"+$atr.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ","+(atr!=null?input.toString(atr.start,atr.stop):null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_list_Chld"


    public static class attribute_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute"
    // CSharpAngular.g:3559:1: attribute : attNam= attribute_name (attArgs= attribute_arguments )? -> attribute1(attributeName=attNamattributeArgs=attArgs);
    public final CSharpAngular.attribute_return attribute() throws RecognitionException {
        CSharpAngular.attribute_return retval = new CSharpAngular.attribute_return();
        retval.start = input.LT(1);


        CSharpAngular.attribute_name_return attNam =null;

        CSharpAngular.attribute_arguments_return attArgs =null;


        try {
            // CSharpAngular.g:3560:2: (attNam= attribute_name (attArgs= attribute_arguments )? -> attribute1(attributeName=attNamattributeArgs=attArgs))
            // CSharpAngular.g:3561:2: attNam= attribute_name (attArgs= attribute_arguments )?
            {
            pushFollow(FOLLOW_attribute_name_in_attribute26832);
            attNam=attribute_name();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3561:24: (attArgs= attribute_arguments )?
            int alt423=2;
            int LA423_0 = input.LA(1);

            if ( (LA423_0==OPEN_PARENS) ) {
                alt423=1;
            }
            switch (alt423) {
                case 1 :
                    // CSharpAngular.g:3561:25: attArgs= attribute_arguments
                    {
                    pushFollow(FOLLOW_attribute_arguments_in_attribute26837);
                    attArgs=attribute_arguments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3562:2: -> attribute1(attributeName=attNamattributeArgs=attArgs)
              {
                  retval.st = templateLib.getInstanceOf("attribute1",new STAttrMap().put("attributeName", attNam).put("attributeArgs", attArgs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute"


    public static class attribute_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_name"
    // CSharpAngular.g:3565:1: attribute_name : typName= type_name -> text(value=typName);
    public final CSharpAngular.attribute_name_return attribute_name() throws RecognitionException {
        CSharpAngular.attribute_name_return retval = new CSharpAngular.attribute_name_return();
        retval.start = input.LT(1);


        CSharpAngular.type_name_return typName =null;


        try {
            // CSharpAngular.g:3566:2: (typName= type_name -> text(value=typName))
            // CSharpAngular.g:3567:2: typName= type_name
            {
            pushFollow(FOLLOW_type_name_in_attribute_name26868);
            typName=type_name();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3567:27: -> text(value=typName)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", typName));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_name"


    public static class attribute_arguments_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_arguments"
    // CSharpAngular.g:3577:1: attribute_arguments : OPEN_PARENS (posArgsList= positional_argument_list )? CLOSE_PARENS -> attributeArguments(positionalArgumentList=posArgsList);
    public final CSharpAngular.attribute_arguments_return attribute_arguments() throws RecognitionException {
        CSharpAngular.attribute_arguments_return retval = new CSharpAngular.attribute_arguments_return();
        retval.start = input.LT(1);


        CSharpAngular.positional_argument_list_return posArgsList =null;


        try {
            // CSharpAngular.g:3578:3: ( OPEN_PARENS (posArgsList= positional_argument_list )? CLOSE_PARENS -> attributeArguments(positionalArgumentList=posArgsList))
            // CSharpAngular.g:3579:3: OPEN_PARENS (posArgsList= positional_argument_list )? CLOSE_PARENS
            {
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_attribute_arguments26903); if (state.failed) return retval;

            // CSharpAngular.g:3579:15: (posArgsList= positional_argument_list )?
            int alt424=2;
            int LA424_0 = input.LA(1);

            if ( (LA424_0==AMP||(LA424_0 >= BANG && LA424_0 <= BASE)||LA424_0==BOOL||LA424_0==BYTE||(LA424_0 >= CHAR && LA424_0 <= CHECKED)||LA424_0==DECIMAL||(LA424_0 >= DEFAULT && LA424_0 <= DELEGATE)||LA424_0==DOUBLE||LA424_0==FALSE||LA424_0==FLOAT||LA424_0==IDENTIFIER||(LA424_0 >= INT && LA424_0 <= INTEGER_LITERAL)||LA424_0==LONG||LA424_0==MINUS||LA424_0==NEW||LA424_0==NULL||LA424_0==OBJECT||LA424_0==OPEN_PARENS||LA424_0==OP_DEC||LA424_0==OP_INC||LA424_0==PLUS||LA424_0==REAL_LITERAL||LA424_0==SBYTE||LA424_0==SHORT||LA424_0==SIZEOF||LA424_0==STAR||(LA424_0 >= STRING && LA424_0 <= STRING_LITERAL)||LA424_0==THIS||(LA424_0 >= TILDE && LA424_0 <= TRUE)||LA424_0==TYPEOF||(LA424_0 >= UINT && LA424_0 <= UNCHECKED)||LA424_0==USHORT) ) {
                alt424=1;
            }
            switch (alt424) {
                case 1 :
                    // CSharpAngular.g:3579:16: posArgsList= positional_argument_list
                    {
                    pushFollow(FOLLOW_positional_argument_list_in_attribute_arguments26908);
                    posArgsList=positional_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_attribute_arguments26912); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3580:3: -> attributeArguments(positionalArgumentList=posArgsList)
              {
                  retval.st = templateLib.getInstanceOf("attributeArguments",new STAttrMap().put("positionalArgumentList", posArgsList));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_arguments"


    public static class positional_argument_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "positional_argument_list"
    // CSharpAngular.g:3582:1: positional_argument_list : arg= positional_argument (posLst+= positional_argument_list_Chld )* -> positionalArgumentList(firstArg=argrestArgsLst=$posLst);
    public final CSharpAngular.positional_argument_list_return positional_argument_list() throws RecognitionException {
        CSharpAngular.positional_argument_list_return retval = new CSharpAngular.positional_argument_list_return();
        retval.start = input.LT(1);


        List list_posLst=null;
        CSharpAngular.positional_argument_return arg =null;

        RuleReturnScope posLst = null;
        try {
            // CSharpAngular.g:3583:2: (arg= positional_argument (posLst+= positional_argument_list_Chld )* -> positionalArgumentList(firstArg=argrestArgsLst=$posLst))
            // CSharpAngular.g:3584:2: arg= positional_argument (posLst+= positional_argument_list_Chld )*
            {
            pushFollow(FOLLOW_positional_argument_in_positional_argument_list26938);
            arg=positional_argument();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3584:26: (posLst+= positional_argument_list_Chld )*
            loop425:
            do {
                int alt425=2;
                int LA425_0 = input.LA(1);

                if ( (LA425_0==COMMA) ) {
                    alt425=1;
                }


                switch (alt425) {
            	case 1 :
            	    // CSharpAngular.g:3584:27: posLst+= positional_argument_list_Chld
            	    {
            	    pushFollow(FOLLOW_positional_argument_list_Chld_in_positional_argument_list26943);
            	    posLst=positional_argument_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_posLst==null) list_posLst=new ArrayList();
            	    list_posLst.add(posLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop425;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3585:2: -> positionalArgumentList(firstArg=argrestArgsLst=$posLst)
              {
                  retval.st = templateLib.getInstanceOf("positionalArgumentList",new STAttrMap().put("firstArg", arg).put("restArgsLst", list_posLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "positional_argument_list"


    public static class positional_argument_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "positional_argument_list_Chld"
    // CSharpAngular.g:3588:1: positional_argument_list_Chld : COMMA arg= positional_argument -> text(value=\",\"+arg);
    public final CSharpAngular.positional_argument_list_Chld_return positional_argument_list_Chld() throws RecognitionException {
        CSharpAngular.positional_argument_list_Chld_return retval = new CSharpAngular.positional_argument_list_Chld_return();
        retval.start = input.LT(1);


        CSharpAngular.positional_argument_return arg =null;


        try {
            // CSharpAngular.g:3589:2: ( COMMA arg= positional_argument -> text(value=\",\"+arg))
            // CSharpAngular.g:3590:2: COMMA arg= positional_argument
            {
            match(input,COMMA,FOLLOW_COMMA_in_positional_argument_list_Chld26971); if (state.failed) return retval;

            pushFollow(FOLLOW_positional_argument_in_positional_argument_list_Chld26976);
            arg=positional_argument();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3591:2: -> text(value=\",\"+arg)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ","+arg));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "positional_argument_list_Chld"


    public static class positional_argument_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "positional_argument"
    // CSharpAngular.g:3594:1: positional_argument : attArgExpr= attribute_argument_expression -> positionalArgument(attributeArgExpr=attArgExpr);
    public final CSharpAngular.positional_argument_return positional_argument() throws RecognitionException {
        CSharpAngular.positional_argument_return retval = new CSharpAngular.positional_argument_return();
        retval.start = input.LT(1);


        CSharpAngular.attribute_argument_expression_return attArgExpr =null;


        try {
            // CSharpAngular.g:3595:2: (attArgExpr= attribute_argument_expression -> positionalArgument(attributeArgExpr=attArgExpr))
            // CSharpAngular.g:3596:2: attArgExpr= attribute_argument_expression
            {
            pushFollow(FOLLOW_attribute_argument_expression_in_positional_argument27002);
            attArgExpr=attribute_argument_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3597:2: -> positionalArgument(attributeArgExpr=attArgExpr)
              {
                  retval.st = templateLib.getInstanceOf("positionalArgument",new STAttrMap().put("attributeArgExpr", attArgExpr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "positional_argument"


    public static class named_argument_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "named_argument_list"
    // CSharpAngular.g:3600:1: named_argument_list : named_argument ( COMMA named_argument )* ;
    public final CSharpAngular.named_argument_list_return named_argument_list() throws RecognitionException {
        CSharpAngular.named_argument_list_return retval = new CSharpAngular.named_argument_list_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3601:2: ( named_argument ( COMMA named_argument )* )
            // CSharpAngular.g:3601:4: named_argument ( COMMA named_argument )*
            {
            pushFollow(FOLLOW_named_argument_in_named_argument_list27024);
            named_argument();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3601:19: ( COMMA named_argument )*
            loop426:
            do {
                int alt426=2;
                int LA426_0 = input.LA(1);

                if ( (LA426_0==COMMA) ) {
                    alt426=1;
                }


                switch (alt426) {
            	case 1 :
            	    // CSharpAngular.g:3601:21: COMMA named_argument
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_named_argument_list27028); if (state.failed) return retval;

            	    pushFollow(FOLLOW_named_argument_in_named_argument_list27031);
            	    named_argument();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop426;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "named_argument_list"


    public static class named_argument_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "named_argument"
    // CSharpAngular.g:3604:1: named_argument : IDENTIFIER ASSIGNMENT attribute_argument_expression ;
    public final CSharpAngular.named_argument_return named_argument() throws RecognitionException {
        CSharpAngular.named_argument_return retval = new CSharpAngular.named_argument_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3605:2: ( IDENTIFIER ASSIGNMENT attribute_argument_expression )
            // CSharpAngular.g:3605:4: IDENTIFIER ASSIGNMENT attribute_argument_expression
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_named_argument27047); if (state.failed) return retval;

            match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_named_argument27049); if (state.failed) return retval;

            pushFollow(FOLLOW_attribute_argument_expression_in_named_argument27051);
            attribute_argument_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "named_argument"


    public static class attribute_argument_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_argument_expression"
    // CSharpAngular.g:3607:1: attribute_argument_expression : expr= expression -> attributeArgumentExpression(expr=expr);
    public final CSharpAngular.attribute_argument_expression_return attribute_argument_expression() throws RecognitionException {
        CSharpAngular.attribute_argument_expression_return retval = new CSharpAngular.attribute_argument_expression_return();
        retval.start = input.LT(1);


        CSharpAngular.expression_return expr =null;


        try {
            // CSharpAngular.g:3608:2: (expr= expression -> attributeArgumentExpression(expr=expr))
            // CSharpAngular.g:3609:2: expr= expression
            {
            pushFollow(FOLLOW_expression_in_attribute_argument_expression27066);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3610:2: -> attributeArgumentExpression(expr=expr)
              {
                  retval.st = templateLib.getInstanceOf("attributeArgumentExpression",new STAttrMap().put("expr", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_argument_expression"


    public static class class_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_modifier_unsafe"
    // CSharpAngular.g:3615:1: class_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharpAngular.class_modifier_unsafe_return class_modifier_unsafe() throws RecognitionException {
        CSharpAngular.class_modifier_unsafe_return retval = new CSharpAngular.class_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE313=null;

        try {
            // CSharpAngular.g:3616:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharpAngular.g:3617:2: UNSAFE
            {
            UNSAFE313=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_class_modifier_unsafe27091); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3617:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE313!=null?UNSAFE313.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_modifier_unsafe"


    public static class struct_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_modifier_unsafe"
    // CSharpAngular.g:3619:1: struct_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharpAngular.struct_modifier_unsafe_return struct_modifier_unsafe() throws RecognitionException {
        CSharpAngular.struct_modifier_unsafe_return retval = new CSharpAngular.struct_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE314=null;

        try {
            // CSharpAngular.g:3620:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharpAngular.g:3620:4: UNSAFE
            {
            UNSAFE314=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_struct_modifier_unsafe27116); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3620:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE314!=null?UNSAFE314.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_modifier_unsafe"


    public static class interface_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_modifier_unsafe"
    // CSharpAngular.g:3622:1: interface_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharpAngular.interface_modifier_unsafe_return interface_modifier_unsafe() throws RecognitionException {
        CSharpAngular.interface_modifier_unsafe_return retval = new CSharpAngular.interface_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE315=null;

        try {
            // CSharpAngular.g:3623:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharpAngular.g:3623:4: UNSAFE
            {
            UNSAFE315=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_interface_modifier_unsafe27139); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3623:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE315!=null?UNSAFE315.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_modifier_unsafe"


    public static class delegate_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_modifier_unsafe"
    // CSharpAngular.g:3625:1: delegate_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharpAngular.delegate_modifier_unsafe_return delegate_modifier_unsafe() throws RecognitionException {
        CSharpAngular.delegate_modifier_unsafe_return retval = new CSharpAngular.delegate_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE316=null;

        try {
            // CSharpAngular.g:3626:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharpAngular.g:3626:4: UNSAFE
            {
            UNSAFE316=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_delegate_modifier_unsafe27162); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3626:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE316!=null?UNSAFE316.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delegate_modifier_unsafe"


    public static class field_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "field_modifier_unsafe"
    // CSharpAngular.g:3628:1: field_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharpAngular.field_modifier_unsafe_return field_modifier_unsafe() throws RecognitionException {
        CSharpAngular.field_modifier_unsafe_return retval = new CSharpAngular.field_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE317=null;

        try {
            // CSharpAngular.g:3629:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharpAngular.g:3629:4: UNSAFE
            {
            UNSAFE317=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_field_modifier_unsafe27185); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3629:16: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE317!=null?UNSAFE317.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier_unsafe"


    public static class method_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_modifier_unsafe"
    // CSharpAngular.g:3631:1: method_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharpAngular.method_modifier_unsafe_return method_modifier_unsafe() throws RecognitionException {
        CSharpAngular.method_modifier_unsafe_return retval = new CSharpAngular.method_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE318=null;

        try {
            // CSharpAngular.g:3632:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharpAngular.g:3632:4: UNSAFE
            {
            UNSAFE318=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_method_modifier_unsafe27209); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3632:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE318!=null?UNSAFE318.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_unsafe"


    public static class property_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "property_modifier_unsafe"
    // CSharpAngular.g:3634:1: property_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharpAngular.property_modifier_unsafe_return property_modifier_unsafe() throws RecognitionException {
        CSharpAngular.property_modifier_unsafe_return retval = new CSharpAngular.property_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE319=null;

        try {
            // CSharpAngular.g:3635:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharpAngular.g:3636:2: UNSAFE
            {
            UNSAFE319=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_property_modifier_unsafe27234); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3636:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE319!=null?UNSAFE319.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_modifier_unsafe"


    public static class event_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "event_modifier_unsafe"
    // CSharpAngular.g:3638:1: event_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharpAngular.event_modifier_unsafe_return event_modifier_unsafe() throws RecognitionException {
        CSharpAngular.event_modifier_unsafe_return retval = new CSharpAngular.event_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE320=null;

        try {
            // CSharpAngular.g:3639:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharpAngular.g:3639:4: UNSAFE
            {
            UNSAFE320=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_event_modifier_unsafe27259); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3639:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE320!=null?UNSAFE320.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "event_modifier_unsafe"


    public static class indexer_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "indexer_modifier_unsafe"
    // CSharpAngular.g:3641:1: indexer_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharpAngular.indexer_modifier_unsafe_return indexer_modifier_unsafe() throws RecognitionException {
        CSharpAngular.indexer_modifier_unsafe_return retval = new CSharpAngular.indexer_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE321=null;

        try {
            // CSharpAngular.g:3642:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharpAngular.g:3642:4: UNSAFE
            {
            UNSAFE321=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_indexer_modifier_unsafe27282); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3642:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE321!=null?UNSAFE321.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexer_modifier_unsafe"


    public static class operator_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_modifier_unsafe"
    // CSharpAngular.g:3644:1: operator_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharpAngular.operator_modifier_unsafe_return operator_modifier_unsafe() throws RecognitionException {
        CSharpAngular.operator_modifier_unsafe_return retval = new CSharpAngular.operator_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE322=null;

        try {
            // CSharpAngular.g:3645:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharpAngular.g:3645:4: UNSAFE
            {
            UNSAFE322=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_operator_modifier_unsafe27305); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3645:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE322!=null?UNSAFE322.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_modifier_unsafe"


    public static class constructor_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_modifier_unsafe"
    // CSharpAngular.g:3647:1: constructor_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharpAngular.constructor_modifier_unsafe_return constructor_modifier_unsafe() throws RecognitionException {
        CSharpAngular.constructor_modifier_unsafe_return retval = new CSharpAngular.constructor_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE323=null;

        try {
            // CSharpAngular.g:3648:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharpAngular.g:3648:4: UNSAFE
            {
            UNSAFE323=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_constructor_modifier_unsafe27328); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3648:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE323!=null?UNSAFE323.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_modifier_unsafe"


    public static class destructor_declaration_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "destructor_declaration_unsafe"
    // CSharpAngular.g:3656:1: destructor_declaration_unsafe : ( attributes )? ( ( EXTERN )? ( UNSAFE )? | UNSAFE EXTERN ) TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body ;
    public final CSharpAngular.destructor_declaration_unsafe_return destructor_declaration_unsafe() throws RecognitionException {
        CSharpAngular.destructor_declaration_unsafe_return retval = new CSharpAngular.destructor_declaration_unsafe_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3657:3: ( ( attributes )? ( ( EXTERN )? ( UNSAFE )? | UNSAFE EXTERN ) TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body )
            // CSharpAngular.g:3657:5: ( attributes )? ( ( EXTERN )? ( UNSAFE )? | UNSAFE EXTERN ) TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body
            {
            // CSharpAngular.g:3657:5: ( attributes )?
            int alt427=2;
            int LA427_0 = input.LA(1);

            if ( (LA427_0==OPEN_BRACKET) ) {
                alt427=1;
            }
            switch (alt427) {
                case 1 :
                    // CSharpAngular.g:3657:5: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_destructor_declaration_unsafe27354);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3658:5: ( ( EXTERN )? ( UNSAFE )? | UNSAFE EXTERN )
            int alt430=2;
            int LA430_0 = input.LA(1);

            if ( (LA430_0==EXTERN||LA430_0==TILDE) ) {
                alt430=1;
            }
            else if ( (LA430_0==UNSAFE) ) {
                int LA430_2 = input.LA(2);

                if ( (LA430_2==EXTERN) ) {
                    alt430=2;
                }
                else if ( (LA430_2==TILDE) ) {
                    alt430=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 430, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 430, 0, input);

                throw nvae;

            }
            switch (alt430) {
                case 1 :
                    // CSharpAngular.g:3658:7: ( EXTERN )? ( UNSAFE )?
                    {
                    // CSharpAngular.g:3658:7: ( EXTERN )?
                    int alt428=2;
                    int LA428_0 = input.LA(1);

                    if ( (LA428_0==EXTERN) ) {
                        alt428=1;
                    }
                    switch (alt428) {
                        case 1 :
                            // CSharpAngular.g:3658:7: EXTERN
                            {
                            match(input,EXTERN,FOLLOW_EXTERN_in_destructor_declaration_unsafe27363); if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharpAngular.g:3658:15: ( UNSAFE )?
                    int alt429=2;
                    int LA429_0 = input.LA(1);

                    if ( (LA429_0==UNSAFE) ) {
                        alt429=1;
                    }
                    switch (alt429) {
                        case 1 :
                            // CSharpAngular.g:3658:15: UNSAFE
                            {
                            match(input,UNSAFE,FOLLOW_UNSAFE_in_destructor_declaration_unsafe27366); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3659:7: UNSAFE EXTERN
                    {
                    match(input,UNSAFE,FOLLOW_UNSAFE_in_destructor_declaration_unsafe27375); if (state.failed) return retval;

                    match(input,EXTERN,FOLLOW_EXTERN_in_destructor_declaration_unsafe27377); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,TILDE,FOLLOW_TILDE_in_destructor_declaration_unsafe27391); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_destructor_declaration_unsafe27393); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_destructor_declaration_unsafe27395); if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_destructor_declaration_unsafe27397); if (state.failed) return retval;

            pushFollow(FOLLOW_destructor_body_in_destructor_declaration_unsafe27399);
            destructor_body();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "destructor_declaration_unsafe"


    public static class static_constructor_modifiers_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "static_constructor_modifiers_unsafe"
    // CSharpAngular.g:3673:1: static_constructor_modifiers_unsafe : ( ( EXTERN | UNSAFE )? STATIC | EXTERN UNSAFE STATIC | UNSAFE EXTERN STATIC | EXTERN STATIC UNSAFE | UNSAFE STATIC EXTERN | STATIC ( EXTERN | UNSAFE ) | STATIC EXTERN UNSAFE | STATIC UNSAFE EXTERN );
    public final CSharpAngular.static_constructor_modifiers_unsafe_return static_constructor_modifiers_unsafe() throws RecognitionException {
        CSharpAngular.static_constructor_modifiers_unsafe_return retval = new CSharpAngular.static_constructor_modifiers_unsafe_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3674:3: ( ( EXTERN | UNSAFE )? STATIC | EXTERN UNSAFE STATIC | UNSAFE EXTERN STATIC | EXTERN STATIC UNSAFE | UNSAFE STATIC EXTERN | STATIC ( EXTERN | UNSAFE ) | STATIC EXTERN UNSAFE | STATIC UNSAFE EXTERN )
            int alt432=8;
            switch ( input.LA(1) ) {
            case EXTERN:
                {
                int LA432_1 = input.LA(2);

                if ( (LA432_1==UNSAFE) ) {
                    alt432=2;
                }
                else if ( (LA432_1==STATIC) ) {
                    int LA432_5 = input.LA(3);

                    if ( (LA432_5==UNSAFE) ) {
                        alt432=4;
                    }
                    else if ( (LA432_5==IDENTIFIER) ) {
                        alt432=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 432, 5, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 432, 1, input);

                    throw nvae;

                }
                }
                break;
            case STATIC:
                {
                switch ( input.LA(2) ) {
                case EXTERN:
                    {
                    int LA432_6 = input.LA(3);

                    if ( (LA432_6==UNSAFE) ) {
                        alt432=7;
                    }
                    else if ( (LA432_6==IDENTIFIER) ) {
                        alt432=6;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 432, 6, input);

                        throw nvae;

                    }
                    }
                    break;
                case UNSAFE:
                    {
                    int LA432_7 = input.LA(3);

                    if ( (LA432_7==EXTERN) ) {
                        alt432=8;
                    }
                    else if ( (LA432_7==IDENTIFIER) ) {
                        alt432=6;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 432, 7, input);

                        throw nvae;

                    }
                    }
                    break;
                case IDENTIFIER:
                    {
                    alt432=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 432, 2, input);

                    throw nvae;

                }

                }
                break;
            case UNSAFE:
                {
                int LA432_3 = input.LA(2);

                if ( (LA432_3==EXTERN) ) {
                    alt432=3;
                }
                else if ( (LA432_3==STATIC) ) {
                    int LA432_10 = input.LA(3);

                    if ( (LA432_10==EXTERN) ) {
                        alt432=5;
                    }
                    else if ( (LA432_10==IDENTIFIER) ) {
                        alt432=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 432, 10, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 432, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 432, 0, input);

                throw nvae;

            }

            switch (alt432) {
                case 1 :
                    // CSharpAngular.g:3674:5: ( EXTERN | UNSAFE )? STATIC
                    {
                    // CSharpAngular.g:3674:5: ( EXTERN | UNSAFE )?
                    int alt431=2;
                    int LA431_0 = input.LA(1);

                    if ( (LA431_0==EXTERN||LA431_0==UNSAFE) ) {
                        alt431=1;
                    }
                    switch (alt431) {
                        case 1 :
                            // CSharpAngular.g:
                            {
                            if ( input.LA(1)==EXTERN||input.LA(1)==UNSAFE ) {
                                input.consume();
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe27423); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3675:5: EXTERN UNSAFE STATIC
                    {
                    match(input,EXTERN,FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe27429); if (state.failed) return retval;

                    match(input,UNSAFE,FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe27431); if (state.failed) return retval;

                    match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe27433); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:3676:5: UNSAFE EXTERN STATIC
                    {
                    match(input,UNSAFE,FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe27439); if (state.failed) return retval;

                    match(input,EXTERN,FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe27441); if (state.failed) return retval;

                    match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe27443); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:3677:5: EXTERN STATIC UNSAFE
                    {
                    match(input,EXTERN,FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe27449); if (state.failed) return retval;

                    match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe27451); if (state.failed) return retval;

                    match(input,UNSAFE,FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe27453); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:3678:5: UNSAFE STATIC EXTERN
                    {
                    match(input,UNSAFE,FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe27459); if (state.failed) return retval;

                    match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe27461); if (state.failed) return retval;

                    match(input,EXTERN,FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe27463); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:3679:5: STATIC ( EXTERN | UNSAFE )
                    {
                    match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe27469); if (state.failed) return retval;

                    if ( input.LA(1)==EXTERN||input.LA(1)==UNSAFE ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 7 :
                    // CSharpAngular.g:3680:5: STATIC EXTERN UNSAFE
                    {
                    match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe27483); if (state.failed) return retval;

                    match(input,EXTERN,FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe27485); if (state.failed) return retval;

                    match(input,UNSAFE,FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe27487); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:3681:5: STATIC UNSAFE EXTERN
                    {
                    match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe27493); if (state.failed) return retval;

                    match(input,UNSAFE,FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe27495); if (state.failed) return retval;

                    match(input,EXTERN,FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe27497); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_constructor_modifiers_unsafe"


    public static class embedded_statement_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "embedded_statement_unsafe"
    // CSharpAngular.g:3684:1: embedded_statement_unsafe : ( unsafe_statement | fixed_statement );
    public final CSharpAngular.embedded_statement_unsafe_return embedded_statement_unsafe() throws RecognitionException {
        CSharpAngular.embedded_statement_unsafe_return retval = new CSharpAngular.embedded_statement_unsafe_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3685:2: ( unsafe_statement | fixed_statement )
            int alt433=2;
            int LA433_0 = input.LA(1);

            if ( (LA433_0==UNSAFE) ) {
                alt433=1;
            }
            else if ( (LA433_0==FIXED) ) {
                alt433=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 433, 0, input);

                throw nvae;

            }
            switch (alt433) {
                case 1 :
                    // CSharpAngular.g:3685:4: unsafe_statement
                    {
                    pushFollow(FOLLOW_unsafe_statement_in_embedded_statement_unsafe27511);
                    unsafe_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3686:4: fixed_statement
                    {
                    pushFollow(FOLLOW_fixed_statement_in_embedded_statement_unsafe27516);
                    fixed_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "embedded_statement_unsafe"


    public static class unsafe_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unsafe_statement"
    // CSharpAngular.g:3688:1: unsafe_statement : UNSAFE block ;
    public final CSharpAngular.unsafe_statement_return unsafe_statement() throws RecognitionException {
        CSharpAngular.unsafe_statement_return retval = new CSharpAngular.unsafe_statement_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3689:2: ( UNSAFE block )
            // CSharpAngular.g:3689:4: UNSAFE block
            {
            match(input,UNSAFE,FOLLOW_UNSAFE_in_unsafe_statement27527); if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_unsafe_statement27529);
            block();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unsafe_statement"


    public static class type_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_unsafe"
    // CSharpAngular.g:3691:1: type_unsafe : pointer_type ;
    public final CSharpAngular.type_unsafe_return type_unsafe() throws RecognitionException {
        CSharpAngular.type_unsafe_return retval = new CSharpAngular.type_unsafe_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3692:2: ( pointer_type )
            // CSharpAngular.g:3692:4: pointer_type
            {
            pushFollow(FOLLOW_pointer_type_in_type_unsafe27540);
            pointer_type();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_unsafe"


    public static class pointer_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "pointer_type"
    // CSharpAngular.g:3701:1: pointer_type : ( simple_type | class_type | VOID ) ({...}? => rank_specifier |{...}? => INTERR | STAR )* STAR ;
    public final CSharpAngular.pointer_type_return pointer_type() throws RecognitionException {
        CSharpAngular.pointer_type_return retval = new CSharpAngular.pointer_type_return();
        retval.start = input.LT(1);



            boolean allowAll = true;

        try {
            // CSharpAngular.g:3705:3: ( ( simple_type | class_type | VOID ) ({...}? => rank_specifier |{...}? => INTERR | STAR )* STAR )
            // CSharpAngular.g:3705:5: ( simple_type | class_type | VOID ) ({...}? => rank_specifier |{...}? => INTERR | STAR )* STAR
            {
            // CSharpAngular.g:3705:5: ( simple_type | class_type | VOID )
            int alt434=3;
            switch ( input.LA(1) ) {
            case BOOL:
            case BYTE:
            case CHAR:
            case DECIMAL:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SBYTE:
            case SHORT:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt434=1;
                }
                break;
            case IDENTIFIER:
            case OBJECT:
            case STRING:
                {
                alt434=2;
                }
                break;
            case VOID:
                {
                alt434=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 434, 0, input);

                throw nvae;

            }

            switch (alt434) {
                case 1 :
                    // CSharpAngular.g:3705:7: simple_type
                    {
                    pushFollow(FOLLOW_simple_type_in_pointer_type27562);
                    simple_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3706:6: class_type
                    {
                    pushFollow(FOLLOW_class_type_in_pointer_type27569);
                    class_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:3707:6: VOID
                    {
                    match(input,VOID,FOLLOW_VOID_in_pointer_type27576); if (state.failed) return retval;

                    if ( state.backtracking==0 ) {allowAll = false;}

                    }
                    break;

            }


            // CSharpAngular.g:3708:5: ({...}? => rank_specifier |{...}? => INTERR | STAR )*
            loop435:
            do {
                int alt435=4;
                int LA435_0 = input.LA(1);

                if ( (LA435_0==STAR) ) {
                    int LA435_1 = input.LA(2);

                    if ( (LA435_1==INTERR||LA435_1==OPEN_BRACKET||LA435_1==STAR) ) {
                        alt435=3;
                    }


                }
                else if ( (LA435_0==OPEN_BRACKET) && ((allowAll))) {
                    alt435=1;
                }
                else if ( (LA435_0==INTERR) && ((allowAll))) {
                    alt435=2;
                }


                switch (alt435) {
            	case 1 :
            	    // CSharpAngular.g:3708:7: {...}? => rank_specifier
            	    {
            	    if ( !((allowAll)) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "pointer_type", "allowAll");
            	    }

            	    pushFollow(FOLLOW_rank_specifier_in_pointer_type27590);
            	    rank_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;
            	case 2 :
            	    // CSharpAngular.g:3709:7: {...}? => INTERR
            	    {
            	    if ( !((allowAll)) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "pointer_type", "allowAll");
            	    }

            	    match(input,INTERR,FOLLOW_INTERR_in_pointer_type27602); if (state.failed) return retval;

            	    }
            	    break;
            	case 3 :
            	    // CSharpAngular.g:3710:7: STAR
            	    {
            	    match(input,STAR,FOLLOW_STAR_in_pointer_type27610); if (state.failed) return retval;

            	    if ( state.backtracking==0 ) {allowAll = true;}

            	    }
            	    break;

            	default :
            	    break loop435;
                }
            } while (true);


            match(input,STAR,FOLLOW_STAR_in_pointer_type27621); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pointer_type"


    public static class unmanaged_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unmanaged_type"
    // CSharpAngular.g:3724:1: unmanaged_type : t= type -> unmanagedType(type=t);
    public final CSharpAngular.unmanaged_type_return unmanaged_type() throws RecognitionException {
        CSharpAngular.unmanaged_type_return retval = new CSharpAngular.unmanaged_type_return();
        retval.start = input.LT(1);


        CSharpAngular.type_return t =null;


        try {
            // CSharpAngular.g:3725:2: (t= type -> unmanagedType(type=t))
            // CSharpAngular.g:3726:2: t= type
            {
            pushFollow(FOLLOW_type_in_unmanaged_type27648);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3727:2: -> unmanagedType(type=t)
              {
                  retval.st = templateLib.getInstanceOf("unmanagedType",new STAttrMap().put("type", t));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unmanaged_type"


    public static class primary_no_array_creation_expression_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_no_array_creation_expression_unsafe"
    // CSharpAngular.g:3736:1: primary_no_array_creation_expression_unsafe : expr= primary_expression -> primaryNoArrayCreationExpressionUnsafe(expression=expr);
    public final CSharpAngular.primary_no_array_creation_expression_unsafe_return primary_no_array_creation_expression_unsafe() throws RecognitionException {
        CSharpAngular.primary_no_array_creation_expression_unsafe_return retval = new CSharpAngular.primary_no_array_creation_expression_unsafe_return();
        retval.start = input.LT(1);


        CSharpAngular.primary_expression_return expr =null;


        try {
            // CSharpAngular.g:3737:2: (expr= primary_expression -> primaryNoArrayCreationExpressionUnsafe(expression=expr))
            // CSharpAngular.g:3738:2: expr= primary_expression
            {
            pushFollow(FOLLOW_primary_expression_in_primary_no_array_creation_expression_unsafe27674);
            expr=primary_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3739:2: -> primaryNoArrayCreationExpressionUnsafe(expression=expr)
              {
                  retval.st = templateLib.getInstanceOf("primaryNoArrayCreationExpressionUnsafe",new STAttrMap().put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primary_no_array_creation_expression_unsafe"


    public static class unary_expression_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unary_expression_unsafe"
    // CSharpAngular.g:3742:1: unary_expression_unsafe : ( pointer_indirection_expression | addressof_expression );
    public final CSharpAngular.unary_expression_unsafe_return unary_expression_unsafe() throws RecognitionException {
        CSharpAngular.unary_expression_unsafe_return retval = new CSharpAngular.unary_expression_unsafe_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3743:2: ( pointer_indirection_expression | addressof_expression )
            int alt436=2;
            int LA436_0 = input.LA(1);

            if ( (LA436_0==STAR) ) {
                alt436=1;
            }
            else if ( (LA436_0==AMP) ) {
                alt436=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 436, 0, input);

                throw nvae;

            }
            switch (alt436) {
                case 1 :
                    // CSharpAngular.g:3743:4: pointer_indirection_expression
                    {
                    pushFollow(FOLLOW_pointer_indirection_expression_in_unary_expression_unsafe27696);
                    pointer_indirection_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3744:4: addressof_expression
                    {
                    pushFollow(FOLLOW_addressof_expression_in_unary_expression_unsafe27701);
                    addressof_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unary_expression_unsafe"


    public static class pointer_indirection_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "pointer_indirection_expression"
    // CSharpAngular.g:3746:1: pointer_indirection_expression : STAR unary_expression ;
    public final CSharpAngular.pointer_indirection_expression_return pointer_indirection_expression() throws RecognitionException {
        CSharpAngular.pointer_indirection_expression_return retval = new CSharpAngular.pointer_indirection_expression_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3747:2: ( STAR unary_expression )
            // CSharpAngular.g:3747:4: STAR unary_expression
            {
            match(input,STAR,FOLLOW_STAR_in_pointer_indirection_expression27712); if (state.failed) return retval;

            pushFollow(FOLLOW_unary_expression_in_pointer_indirection_expression27714);
            unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pointer_indirection_expression"


    public static class addressof_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "addressof_expression"
    // CSharpAngular.g:3760:1: addressof_expression : AMP unary_expression ;
    public final CSharpAngular.addressof_expression_return addressof_expression() throws RecognitionException {
        CSharpAngular.addressof_expression_return retval = new CSharpAngular.addressof_expression_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3761:2: ( AMP unary_expression )
            // CSharpAngular.g:3761:4: AMP unary_expression
            {
            match(input,AMP,FOLLOW_AMP_in_addressof_expression27731); if (state.failed) return retval;

            pushFollow(FOLLOW_unary_expression_in_addressof_expression27733);
            unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "addressof_expression"


    public static class sizeof_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "sizeof_expression"
    // CSharpAngular.g:3763:1: sizeof_expression : SIZEOF OPEN_PARENS unmanaged_type CLOSE_PARENS ;
    public final CSharpAngular.sizeof_expression_return sizeof_expression() throws RecognitionException {
        CSharpAngular.sizeof_expression_return retval = new CSharpAngular.sizeof_expression_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3764:2: ( SIZEOF OPEN_PARENS unmanaged_type CLOSE_PARENS )
            // CSharpAngular.g:3764:4: SIZEOF OPEN_PARENS unmanaged_type CLOSE_PARENS
            {
            match(input,SIZEOF,FOLLOW_SIZEOF_in_sizeof_expression27744); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_sizeof_expression27746); if (state.failed) return retval;

            pushFollow(FOLLOW_unmanaged_type_in_sizeof_expression27748);
            unmanaged_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_sizeof_expression27750); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sizeof_expression"


    public static class fixed_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_statement"
    // CSharpAngular.g:3766:1: fixed_statement : FIXED OPEN_PARENS pointer_type fixed_pointer_declarators CLOSE_PARENS embedded_statement ;
    public final CSharpAngular.fixed_statement_return fixed_statement() throws RecognitionException {
        CSharpAngular.fixed_statement_return retval = new CSharpAngular.fixed_statement_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3767:2: ( FIXED OPEN_PARENS pointer_type fixed_pointer_declarators CLOSE_PARENS embedded_statement )
            // CSharpAngular.g:3767:4: FIXED OPEN_PARENS pointer_type fixed_pointer_declarators CLOSE_PARENS embedded_statement
            {
            match(input,FIXED,FOLLOW_FIXED_in_fixed_statement27761); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_fixed_statement27763); if (state.failed) return retval;

            pushFollow(FOLLOW_pointer_type_in_fixed_statement27765);
            pointer_type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_fixed_pointer_declarators_in_fixed_statement27767);
            fixed_pointer_declarators();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_fixed_statement27769); if (state.failed) return retval;

            pushFollow(FOLLOW_embedded_statement_in_fixed_statement27771);
            embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_statement"


    public static class fixed_pointer_declarators_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_pointer_declarators"
    // CSharpAngular.g:3769:1: fixed_pointer_declarators : fixed_pointer_declarator ( COMMA fixed_pointer_declarator )* ;
    public final CSharpAngular.fixed_pointer_declarators_return fixed_pointer_declarators() throws RecognitionException {
        CSharpAngular.fixed_pointer_declarators_return retval = new CSharpAngular.fixed_pointer_declarators_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3770:2: ( fixed_pointer_declarator ( COMMA fixed_pointer_declarator )* )
            // CSharpAngular.g:3770:4: fixed_pointer_declarator ( COMMA fixed_pointer_declarator )*
            {
            pushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators27782);
            fixed_pointer_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:3770:29: ( COMMA fixed_pointer_declarator )*
            loop437:
            do {
                int alt437=2;
                int LA437_0 = input.LA(1);

                if ( (LA437_0==COMMA) ) {
                    alt437=1;
                }


                switch (alt437) {
            	case 1 :
            	    // CSharpAngular.g:3770:31: COMMA fixed_pointer_declarator
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_fixed_pointer_declarators27786); if (state.failed) return retval;

            	    pushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators27789);
            	    fixed_pointer_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop437;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_declarators"


    public static class fixed_pointer_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_pointer_declarator"
    // CSharpAngular.g:3772:1: fixed_pointer_declarator : IDENTIFIER ASSIGNMENT fixed_pointer_initializer ;
    public final CSharpAngular.fixed_pointer_declarator_return fixed_pointer_declarator() throws RecognitionException {
        CSharpAngular.fixed_pointer_declarator_return retval = new CSharpAngular.fixed_pointer_declarator_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3773:2: ( IDENTIFIER ASSIGNMENT fixed_pointer_initializer )
            // CSharpAngular.g:3773:4: IDENTIFIER ASSIGNMENT fixed_pointer_initializer
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_fixed_pointer_declarator27803); if (state.failed) return retval;

            match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_fixed_pointer_declarator27805); if (state.failed) return retval;

            pushFollow(FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator27807);
            fixed_pointer_initializer();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_declarator"


    public static class fixed_pointer_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_pointer_initializer"
    // CSharpAngular.g:3781:1: fixed_pointer_initializer : ( ( AMP )=> AMP variable_reference | expression );
    public final CSharpAngular.fixed_pointer_initializer_return fixed_pointer_initializer() throws RecognitionException {
        CSharpAngular.fixed_pointer_initializer_return retval = new CSharpAngular.fixed_pointer_initializer_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3782:3: ( ( AMP )=> AMP variable_reference | expression )
            int alt438=2;
            int LA438_0 = input.LA(1);

            if ( (LA438_0==AMP) ) {
                int LA438_1 = input.LA(2);

                if ( (synpred81_CSharpAngular()) ) {
                    alt438=1;
                }
                else if ( (true) ) {
                    alt438=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 438, 1, input);

                    throw nvae;

                }
            }
            else if ( ((LA438_0 >= BANG && LA438_0 <= BASE)||LA438_0==BOOL||LA438_0==BYTE||(LA438_0 >= CHAR && LA438_0 <= CHECKED)||LA438_0==DECIMAL||(LA438_0 >= DEFAULT && LA438_0 <= DELEGATE)||LA438_0==DOUBLE||LA438_0==FALSE||LA438_0==FLOAT||LA438_0==IDENTIFIER||(LA438_0 >= INT && LA438_0 <= INTEGER_LITERAL)||LA438_0==LONG||LA438_0==MINUS||LA438_0==NEW||LA438_0==NULL||LA438_0==OBJECT||LA438_0==OPEN_PARENS||LA438_0==OP_DEC||LA438_0==OP_INC||LA438_0==PLUS||LA438_0==REAL_LITERAL||LA438_0==SBYTE||LA438_0==SHORT||LA438_0==SIZEOF||LA438_0==STAR||(LA438_0 >= STRING && LA438_0 <= STRING_LITERAL)||LA438_0==THIS||(LA438_0 >= TILDE && LA438_0 <= TRUE)||LA438_0==TYPEOF||(LA438_0 >= UINT && LA438_0 <= UNCHECKED)||LA438_0==USHORT) ) {
                alt438=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 438, 0, input);

                throw nvae;

            }
            switch (alt438) {
                case 1 :
                    // CSharpAngular.g:3782:5: ( AMP )=> AMP variable_reference
                    {
                    match(input,AMP,FOLLOW_AMP_in_fixed_pointer_initializer27827); if (state.failed) return retval;

                    pushFollow(FOLLOW_variable_reference_in_fixed_pointer_initializer27829);
                    variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3783:5: expression
                    {
                    pushFollow(FOLLOW_expression_in_fixed_pointer_initializer27835);
                    expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_initializer"


    public static class struct_member_declaration_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_member_declaration_unsafe"
    // CSharpAngular.g:3785:1: struct_member_declaration_unsafe : fixed_size_buffer_declaration ;
    public final CSharpAngular.struct_member_declaration_unsafe_return struct_member_declaration_unsafe() throws RecognitionException {
        CSharpAngular.struct_member_declaration_unsafe_return retval = new CSharpAngular.struct_member_declaration_unsafe_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3786:2: ( fixed_size_buffer_declaration )
            // CSharpAngular.g:3786:4: fixed_size_buffer_declaration
            {
            pushFollow(FOLLOW_fixed_size_buffer_declaration_in_struct_member_declaration_unsafe27847);
            fixed_size_buffer_declaration();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_member_declaration_unsafe"


    public static class fixed_size_buffer_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_size_buffer_declaration"
    // CSharpAngular.g:3788:1: fixed_size_buffer_declaration : ( attributes )? ( fixed_size_buffer_modifiers )? FIXED buffer_element_type fixed_size_buffer_declarators SEMICOLON ;
    public final CSharpAngular.fixed_size_buffer_declaration_return fixed_size_buffer_declaration() throws RecognitionException {
        CSharpAngular.fixed_size_buffer_declaration_return retval = new CSharpAngular.fixed_size_buffer_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3789:2: ( ( attributes )? ( fixed_size_buffer_modifiers )? FIXED buffer_element_type fixed_size_buffer_declarators SEMICOLON )
            // CSharpAngular.g:3790:2: ( attributes )? ( fixed_size_buffer_modifiers )? FIXED buffer_element_type fixed_size_buffer_declarators SEMICOLON
            {
            // CSharpAngular.g:3790:2: ( attributes )?
            int alt439=2;
            int LA439_0 = input.LA(1);

            if ( (LA439_0==OPEN_BRACKET) ) {
                alt439=1;
            }
            switch (alt439) {
                case 1 :
                    // CSharpAngular.g:3790:2: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_fixed_size_buffer_declaration27860);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:3790:14: ( fixed_size_buffer_modifiers )?
            int alt440=2;
            int LA440_0 = input.LA(1);

            if ( (LA440_0==INTERNAL||LA440_0==NEW||(LA440_0 >= PRIVATE && LA440_0 <= PUBLIC)||LA440_0==UNSAFE) ) {
                alt440=1;
            }
            switch (alt440) {
                case 1 :
                    // CSharpAngular.g:3790:14: fixed_size_buffer_modifiers
                    {
                    pushFollow(FOLLOW_fixed_size_buffer_modifiers_in_fixed_size_buffer_declaration27863);
                    fixed_size_buffer_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,FIXED,FOLLOW_FIXED_in_fixed_size_buffer_declaration27866); if (state.failed) return retval;

            pushFollow(FOLLOW_buffer_element_type_in_fixed_size_buffer_declaration27868);
            buffer_element_type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_fixed_size_buffer_declarators_in_fixed_size_buffer_declaration27870);
            fixed_size_buffer_declarators();

            state._fsp--;
            if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_fixed_size_buffer_declaration27872); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_size_buffer_declaration"


    public static class fixed_size_buffer_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_size_buffer_modifiers"
    // CSharpAngular.g:3793:1: fixed_size_buffer_modifiers : (modf+= fixed_size_buffer_modifier )+ -> fixedSizeBufferModifiers(modfs=$modf);
    public final CSharpAngular.fixed_size_buffer_modifiers_return fixed_size_buffer_modifiers() throws RecognitionException {
        CSharpAngular.fixed_size_buffer_modifiers_return retval = new CSharpAngular.fixed_size_buffer_modifiers_return();
        retval.start = input.LT(1);


        List list_modf=null;
        RuleReturnScope modf = null;
        try {
            // CSharpAngular.g:3794:2: ( (modf+= fixed_size_buffer_modifier )+ -> fixedSizeBufferModifiers(modfs=$modf))
            // CSharpAngular.g:3795:2: (modf+= fixed_size_buffer_modifier )+
            {
            // CSharpAngular.g:3795:2: (modf+= fixed_size_buffer_modifier )+
            int cnt441=0;
            loop441:
            do {
                int alt441=2;
                int LA441_0 = input.LA(1);

                if ( (LA441_0==INTERNAL||LA441_0==NEW||(LA441_0 >= PRIVATE && LA441_0 <= PUBLIC)||LA441_0==UNSAFE) ) {
                    alt441=1;
                }


                switch (alt441) {
            	case 1 :
            	    // CSharpAngular.g:3795:3: modf+= fixed_size_buffer_modifier
            	    {
            	    pushFollow(FOLLOW_fixed_size_buffer_modifier_in_fixed_size_buffer_modifiers27889);
            	    modf=fixed_size_buffer_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_modf==null) list_modf=new ArrayList();
            	    list_modf.add(modf.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt441 >= 1 ) break loop441;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(441, input);
                        throw eee;
                }
                cnt441++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3796:2: -> fixedSizeBufferModifiers(modfs=$modf)
              {
                  retval.st = templateLib.getInstanceOf("fixedSizeBufferModifiers",new STAttrMap().put("modfs", list_modf));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_size_buffer_modifiers"


    public static class fixed_size_buffer_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_size_buffer_modifier"
    // CSharpAngular.g:3798:1: fixed_size_buffer_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)| UNSAFE -> text(value=$UNSAFE.text));
    public final CSharpAngular.fixed_size_buffer_modifier_return fixed_size_buffer_modifier() throws RecognitionException {
        CSharpAngular.fixed_size_buffer_modifier_return retval = new CSharpAngular.fixed_size_buffer_modifier_return();
        retval.start = input.LT(1);


        Token NEW324=null;
        Token PUBLIC325=null;
        Token PROTECTED326=null;
        Token INTERNAL327=null;
        Token PRIVATE328=null;
        Token UNSAFE329=null;

        try {
            // CSharpAngular.g:3799:3: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=$INTERNAL.text)| PRIVATE -> text(value=$PRIVATE.text)| UNSAFE -> text(value=$UNSAFE.text))
            int alt442=6;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt442=1;
                }
                break;
            case PUBLIC:
                {
                alt442=2;
                }
                break;
            case PROTECTED:
                {
                alt442=3;
                }
                break;
            case INTERNAL:
                {
                alt442=4;
                }
                break;
            case PRIVATE:
                {
                alt442=5;
                }
                break;
            case UNSAFE:
                {
                alt442=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 442, 0, input);

                throw nvae;

            }

            switch (alt442) {
                case 1 :
                    // CSharpAngular.g:3800:3: NEW
                    {
                    NEW324=(Token)match(input,NEW,FOLLOW_NEW_in_fixed_size_buffer_modifier27915); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3800:21: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW324!=null?NEW324.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3801:5: PUBLIC
                    {
                    PUBLIC325=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_fixed_size_buffer_modifier27943); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3801:21: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC325!=null?PUBLIC325.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:3802:5: PROTECTED
                    {
                    PROTECTED326=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_fixed_size_buffer_modifier27966); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3802:21: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED326!=null?PROTECTED326.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:3803:5: INTERNAL
                    {
                    INTERNAL327=(Token)match(input,INTERNAL,FOLLOW_INTERNAL_in_fixed_size_buffer_modifier27986); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3803:21: -> text(value=$INTERNAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERNAL327!=null?INTERNAL327.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:3804:5: PRIVATE
                    {
                    PRIVATE328=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_fixed_size_buffer_modifier28007); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3804:21: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE328!=null?PRIVATE328.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:3805:5: UNSAFE
                    {
                    UNSAFE329=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_fixed_size_buffer_modifier28029); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3805:21: -> text(value=$UNSAFE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE329!=null?UNSAFE329.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_size_buffer_modifier"


    public static class buffer_element_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "buffer_element_type"
    // CSharpAngular.g:3808:1: buffer_element_type : type ;
    public final CSharpAngular.buffer_element_type_return buffer_element_type() throws RecognitionException {
        CSharpAngular.buffer_element_type_return retval = new CSharpAngular.buffer_element_type_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3809:2: ( type )
            // CSharpAngular.g:3809:4: type
            {
            pushFollow(FOLLOW_type_in_buffer_element_type28059);
            type();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "buffer_element_type"


    public static class fixed_size_buffer_declarators_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_size_buffer_declarators"
    // CSharpAngular.g:3811:1: fixed_size_buffer_declarators : ( fixed_size_buffer_declarator )+ ;
    public final CSharpAngular.fixed_size_buffer_declarators_return fixed_size_buffer_declarators() throws RecognitionException {
        CSharpAngular.fixed_size_buffer_declarators_return retval = new CSharpAngular.fixed_size_buffer_declarators_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3812:2: ( ( fixed_size_buffer_declarator )+ )
            // CSharpAngular.g:3812:4: ( fixed_size_buffer_declarator )+
            {
            // CSharpAngular.g:3812:4: ( fixed_size_buffer_declarator )+
            int cnt443=0;
            loop443:
            do {
                int alt443=2;
                int LA443_0 = input.LA(1);

                if ( (LA443_0==IDENTIFIER) ) {
                    alt443=1;
                }


                switch (alt443) {
            	case 1 :
            	    // CSharpAngular.g:3812:4: fixed_size_buffer_declarator
            	    {
            	    pushFollow(FOLLOW_fixed_size_buffer_declarator_in_fixed_size_buffer_declarators28070);
            	    fixed_size_buffer_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt443 >= 1 ) break loop443;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(443, input);
                        throw eee;
                }
                cnt443++;
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_size_buffer_declarators"


    public static class fixed_size_buffer_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_size_buffer_declarator"
    // CSharpAngular.g:3814:1: fixed_size_buffer_declarator : IDENTIFIER OPEN_BRACKET constant_expression CLOSE_BRACKET ;
    public final CSharpAngular.fixed_size_buffer_declarator_return fixed_size_buffer_declarator() throws RecognitionException {
        CSharpAngular.fixed_size_buffer_declarator_return retval = new CSharpAngular.fixed_size_buffer_declarator_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3815:2: ( IDENTIFIER OPEN_BRACKET constant_expression CLOSE_BRACKET )
            // CSharpAngular.g:3815:4: IDENTIFIER OPEN_BRACKET constant_expression CLOSE_BRACKET
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_fixed_size_buffer_declarator28082); if (state.failed) return retval;

            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_fixed_size_buffer_declarator28084); if (state.failed) return retval;

            pushFollow(FOLLOW_constant_expression_in_fixed_size_buffer_declarator28086);
            constant_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_fixed_size_buffer_declarator28088); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_size_buffer_declarator"


    public static class local_variable_initializer_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_initializer_unsafe"
    // CSharpAngular.g:3818:1: local_variable_initializer_unsafe : stkInit= stackalloc_initializer -> localVariableInitializerUnsafe(init=stkInit);
    public final CSharpAngular.local_variable_initializer_unsafe_return local_variable_initializer_unsafe() throws RecognitionException {
        CSharpAngular.local_variable_initializer_unsafe_return retval = new CSharpAngular.local_variable_initializer_unsafe_return();
        retval.start = input.LT(1);


        CSharpAngular.stackalloc_initializer_return stkInit =null;


        try {
            // CSharpAngular.g:3819:2: (stkInit= stackalloc_initializer -> localVariableInitializerUnsafe(init=stkInit))
            // CSharpAngular.g:3820:2: stkInit= stackalloc_initializer
            {
            pushFollow(FOLLOW_stackalloc_initializer_in_local_variable_initializer_unsafe28105);
            stkInit=stackalloc_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3821:2: -> localVariableInitializerUnsafe(init=stkInit)
              {
                  retval.st = templateLib.getInstanceOf("localVariableInitializerUnsafe",new STAttrMap().put("init", stkInit));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "local_variable_initializer_unsafe"


    public static class stackalloc_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "stackalloc_initializer"
    // CSharpAngular.g:3823:1: stackalloc_initializer : STACKALLOC unmanaged_type OPEN_BRACKET expression CLOSE_BRACKET ;
    public final CSharpAngular.stackalloc_initializer_return stackalloc_initializer() throws RecognitionException {
        CSharpAngular.stackalloc_initializer_return retval = new CSharpAngular.stackalloc_initializer_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3824:2: ( STACKALLOC unmanaged_type OPEN_BRACKET expression CLOSE_BRACKET )
            // CSharpAngular.g:3825:2: STACKALLOC unmanaged_type OPEN_BRACKET expression CLOSE_BRACKET
            {
            match(input,STACKALLOC,FOLLOW_STACKALLOC_in_stackalloc_initializer28127); if (state.failed) return retval;

            pushFollow(FOLLOW_unmanaged_type_in_stackalloc_initializer28129);
            unmanaged_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_stackalloc_initializer28131); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_stackalloc_initializer28133);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_stackalloc_initializer28135); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stackalloc_initializer"


    public static class from_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "from_contextual_keyword"
    // CSharpAngular.g:3835:1: from_contextual_keyword : ( ({...}? ( type )? IDENTIFIER IN expression join_contextual_keyword )=> IDENTIFIER -> text(value=\"Stream.concat(\")| ({...}? ( type )? IDENTIFIER IN expression where_contextual_keyword )=> IDENTIFIER -> text(value=\"\")| ({...}? ( type )? IDENTIFIER IN expression {...}?)=> IDENTIFIER -> text(value=\"Stream.concat(\")| ({...}? ( type )? IDENTIFIER IN expression {...}?)=> IDENTIFIER -> text(value=\"\")| ({...}? ( type )? IDENTIFIER IN expression {...}?)=> IDENTIFIER -> text(value=\"\")| ({...}? ( type )? IDENTIFIER IN expression {...}?)=> IDENTIFIER -> text(value=\"\")| ({...}? ( type )? IDENTIFIER IN expression {...}?)=> IDENTIFIER -> text(value=\"\")|{...}? IDENTIFIER -> text(value=\"from\"));
    public final CSharpAngular.from_contextual_keyword_return from_contextual_keyword() throws RecognitionException {
        CSharpAngular.from_contextual_keyword_return retval = new CSharpAngular.from_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3836:3: ( ({...}? ( type )? IDENTIFIER IN expression join_contextual_keyword )=> IDENTIFIER -> text(value=\"Stream.concat(\")| ({...}? ( type )? IDENTIFIER IN expression where_contextual_keyword )=> IDENTIFIER -> text(value=\"\")| ({...}? ( type )? IDENTIFIER IN expression {...}?)=> IDENTIFIER -> text(value=\"Stream.concat(\")| ({...}? ( type )? IDENTIFIER IN expression {...}?)=> IDENTIFIER -> text(value=\"\")| ({...}? ( type )? IDENTIFIER IN expression {...}?)=> IDENTIFIER -> text(value=\"\")| ({...}? ( type )? IDENTIFIER IN expression {...}?)=> IDENTIFIER -> text(value=\"\")| ({...}? ( type )? IDENTIFIER IN expression {...}?)=> IDENTIFIER -> text(value=\"\")|{...}? IDENTIFIER -> text(value=\"from\"))
            int alt444=8;
            int LA444_0 = input.LA(1);

            if ( (LA444_0==IDENTIFIER) ) {
                int LA444_1 = input.LA(2);

                if ( (synpred82_CSharpAngular()) ) {
                    alt444=1;
                }
                else if ( (synpred83_CSharpAngular()) ) {
                    alt444=2;
                }
                else if ( (synpred84_CSharpAngular()) ) {
                    alt444=3;
                }
                else if ( (synpred85_CSharpAngular()) ) {
                    alt444=4;
                }
                else if ( (synpred86_CSharpAngular()) ) {
                    alt444=5;
                }
                else if ( (synpred87_CSharpAngular()) ) {
                    alt444=6;
                }
                else if ( (synpred88_CSharpAngular()) ) {
                    alt444=7;
                }
                else if ( ((input.LT(1).getText().equals("from"))) ) {
                    alt444=8;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 444, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 444, 0, input);

                throw nvae;

            }
            switch (alt444) {
                case 1 :
                    // CSharpAngular.g:3837:3: ({...}? ( type )? IDENTIFIER IN expression join_contextual_keyword )=> IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_from_contextual_keyword28175); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3838:3: -> text(value=\"Stream.concat(\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "Stream.concat("));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3840:3: ({...}? ( type )? IDENTIFIER IN expression where_contextual_keyword )=> IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_from_contextual_keyword28212); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3841:3: -> text(value=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:3843:3: ({...}? ( type )? IDENTIFIER IN expression {...}?)=> IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_from_contextual_keyword28248); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3844:3: -> text(value=\"Stream.concat(\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "Stream.concat("));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:3846:3: ({...}? ( type )? IDENTIFIER IN expression {...}?)=> IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_from_contextual_keyword28284); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3847:3: -> text(value=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:3849:3: ({...}? ( type )? IDENTIFIER IN expression {...}?)=> IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_from_contextual_keyword28320); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3850:3: -> text(value=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:3852:3: ({...}? ( type )? IDENTIFIER IN expression {...}?)=> IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_from_contextual_keyword28356); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3853:3: -> text(value=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:3855:3: ({...}? ( type )? IDENTIFIER IN expression {...}?)=> IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_from_contextual_keyword28392); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3856:3: -> text(value=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:3858:3: {...}? IDENTIFIER
                    {
                    if ( !((input.LT(1).getText().equals("from"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "from_contextual_keyword", "input.LT(1).getText().equals(\"from\")");
                    }

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_from_contextual_keyword28412); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3859:3: -> text(value=\"from\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "from"));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "from_contextual_keyword"


    public static class let_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "let_contextual_keyword"
    // CSharpAngular.g:3861:1: let_contextual_keyword :{...}? IDENTIFIER -> text(value=$IDENTIFIER.text);
    public final CSharpAngular.let_contextual_keyword_return let_contextual_keyword() throws RecognitionException {
        CSharpAngular.let_contextual_keyword_return retval = new CSharpAngular.let_contextual_keyword_return();
        retval.start = input.LT(1);


        Token IDENTIFIER330=null;

        try {
            // CSharpAngular.g:3862:3: ({...}? IDENTIFIER -> text(value=$IDENTIFIER.text))
            // CSharpAngular.g:3862:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("let"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "let_contextual_keyword", "input.LT(1).getText().equals(\"let\")");
            }

            IDENTIFIER330=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_let_contextual_keyword28436); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3863:4: -> text(value=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IDENTIFIER330!=null?IDENTIFIER330.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "let_contextual_keyword"


    public static class where_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "where_contextual_keyword"
    // CSharpAngular.g:3865:1: where_contextual_keyword :{...}? IDENTIFIER -> text(value=\".filter(\");
    public final CSharpAngular.where_contextual_keyword_return where_contextual_keyword() throws RecognitionException {
        CSharpAngular.where_contextual_keyword_return retval = new CSharpAngular.where_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3866:3: ({...}? IDENTIFIER -> text(value=\".filter(\"))
            // CSharpAngular.g:3867:3: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("where"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "where_contextual_keyword", "input.LT(1).getText().equals(\"where\")");
            }

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_where_contextual_keyword28463); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3868:3: -> text(value=\".filter(\")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".filter("));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "where_contextual_keyword"


    public static class join_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "join_contextual_keyword"
    // CSharpAngular.g:3871:1: join_contextual_keyword :{...}? IDENTIFIER -> text(value=\"join \");
    public final CSharpAngular.join_contextual_keyword_return join_contextual_keyword() throws RecognitionException {
        CSharpAngular.join_contextual_keyword_return retval = new CSharpAngular.join_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:3872:3: ({...}? IDENTIFIER -> text(value=\"join \"))
            // CSharpAngular.g:3872:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("join"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "join_contextual_keyword", "input.LT(1).getText().equals(\"join\")");
            }

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_join_contextual_keyword28490); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3873:4: -> text(value=\"join \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "join "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_contextual_keyword"


    public static class on_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "on_contextual_keyword"
    // CSharpAngular.g:3879:1: on_contextual_keyword :{...}? IDENTIFIER -> text(value=$IDENTIFIER.text);
    public final CSharpAngular.on_contextual_keyword_return on_contextual_keyword() throws RecognitionException {
        CSharpAngular.on_contextual_keyword_return retval = new CSharpAngular.on_contextual_keyword_return();
        retval.start = input.LT(1);


        Token IDENTIFIER331=null;

        try {
            // CSharpAngular.g:3880:3: ({...}? IDENTIFIER -> text(value=$IDENTIFIER.text))
            // CSharpAngular.g:3880:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("on"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "on_contextual_keyword", "input.LT(1).getText().equals(\"on\")");
            }

            IDENTIFIER331=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_on_contextual_keyword28519); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3881:4: -> text(value=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IDENTIFIER331!=null?IDENTIFIER331.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "on_contextual_keyword"


    public static class equals_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "equals_contextual_keyword"
    // CSharpAngular.g:3883:1: equals_contextual_keyword :{...}? IDENTIFIER -> text(value=$IDENTIFIER.text);
    public final CSharpAngular.equals_contextual_keyword_return equals_contextual_keyword() throws RecognitionException {
        CSharpAngular.equals_contextual_keyword_return retval = new CSharpAngular.equals_contextual_keyword_return();
        retval.start = input.LT(1);


        Token IDENTIFIER332=null;

        try {
            // CSharpAngular.g:3884:3: ({...}? IDENTIFIER -> text(value=$IDENTIFIER.text))
            // CSharpAngular.g:3885:3: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("equals"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "equals_contextual_keyword", "input.LT(1).getText().equals(\"equals\")");
            }

            IDENTIFIER332=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_equals_contextual_keyword28547); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3886:4: -> text(value=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IDENTIFIER332!=null?IDENTIFIER332.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "equals_contextual_keyword"


    public static class into_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "into_contextual_keyword"
    // CSharpAngular.g:3888:1: into_contextual_keyword :{...}? IDENTIFIER -> text(value=$IDENTIFIER.text);
    public final CSharpAngular.into_contextual_keyword_return into_contextual_keyword() throws RecognitionException {
        CSharpAngular.into_contextual_keyword_return retval = new CSharpAngular.into_contextual_keyword_return();
        retval.start = input.LT(1);


        Token IDENTIFIER333=null;

        try {
            // CSharpAngular.g:3889:3: ({...}? IDENTIFIER -> text(value=$IDENTIFIER.text))
            // CSharpAngular.g:3889:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("into"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "into_contextual_keyword", "input.LT(1).getText().equals(\"into\")");
            }

            IDENTIFIER333=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_into_contextual_keyword28572); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3890:4: -> text(value=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IDENTIFIER333!=null?IDENTIFIER333.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "into_contextual_keyword"


    public static class orderby_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "orderby_contextual_keyword"
    // CSharpAngular.g:3892:1: orderby_contextual_keyword :{...}? IDENTIFIER -> text(value=$IDENTIFIER.text);
    public final CSharpAngular.orderby_contextual_keyword_return orderby_contextual_keyword() throws RecognitionException {
        CSharpAngular.orderby_contextual_keyword_return retval = new CSharpAngular.orderby_contextual_keyword_return();
        retval.start = input.LT(1);


        Token IDENTIFIER334=null;

        try {
            // CSharpAngular.g:3893:3: ({...}? IDENTIFIER -> text(value=$IDENTIFIER.text))
            // CSharpAngular.g:3893:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("orderby"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "orderby_contextual_keyword", "input.LT(1).getText().equals(\"orderby\")");
            }

            IDENTIFIER334=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_orderby_contextual_keyword28597); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3894:5: -> text(value=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IDENTIFIER334!=null?IDENTIFIER334.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orderby_contextual_keyword"


    public static class ascending_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "ascending_contextual_keyword"
    // CSharpAngular.g:3896:1: ascending_contextual_keyword :{...}? IDENTIFIER -> text(value=\"ascending \"+$IDENTIFIER.text);
    public final CSharpAngular.ascending_contextual_keyword_return ascending_contextual_keyword() throws RecognitionException {
        CSharpAngular.ascending_contextual_keyword_return retval = new CSharpAngular.ascending_contextual_keyword_return();
        retval.start = input.LT(1);


        Token IDENTIFIER335=null;

        try {
            // CSharpAngular.g:3897:3: ({...}? IDENTIFIER -> text(value=\"ascending \"+$IDENTIFIER.text))
            // CSharpAngular.g:3897:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("ascending"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ascending_contextual_keyword", "input.LT(1).getText().equals(\"ascending\")");
            }

            IDENTIFIER335=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_ascending_contextual_keyword28623); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3898:5: -> text(value=\"ascending \"+$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "ascending "+(IDENTIFIER335!=null?IDENTIFIER335.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ascending_contextual_keyword"


    public static class descending_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "descending_contextual_keyword"
    // CSharpAngular.g:3900:1: descending_contextual_keyword :{...}? IDENTIFIER -> text(value=\"descending \"+$IDENTIFIER.text);
    public final CSharpAngular.descending_contextual_keyword_return descending_contextual_keyword() throws RecognitionException {
        CSharpAngular.descending_contextual_keyword_return retval = new CSharpAngular.descending_contextual_keyword_return();
        retval.start = input.LT(1);


        Token IDENTIFIER336=null;

        try {
            // CSharpAngular.g:3901:3: ({...}? IDENTIFIER -> text(value=\"descending \"+$IDENTIFIER.text))
            // CSharpAngular.g:3901:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("descending"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "descending_contextual_keyword", "input.LT(1).getText().equals(\"descending\")");
            }

            IDENTIFIER336=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_descending_contextual_keyword28649); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3902:5: -> text(value=\"descending \"+$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "descending "+(IDENTIFIER336!=null?IDENTIFIER336.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "descending_contextual_keyword"


    public static class select_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "select_contextual_keyword"
    // CSharpAngular.g:3904:1: select_contextual_keyword :{...}? IDENTIFIER -> text(value=$IDENTIFIER.text);
    public final CSharpAngular.select_contextual_keyword_return select_contextual_keyword() throws RecognitionException {
        CSharpAngular.select_contextual_keyword_return retval = new CSharpAngular.select_contextual_keyword_return();
        retval.start = input.LT(1);


        Token IDENTIFIER337=null;

        try {
            // CSharpAngular.g:3905:3: ({...}? IDENTIFIER -> text(value=$IDENTIFIER.text))
            // CSharpAngular.g:3905:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("select"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "select_contextual_keyword", "input.LT(1).getText().equals(\"select\")");
            }

            IDENTIFIER337=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_select_contextual_keyword28675); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3906:5: -> text(value=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IDENTIFIER337!=null?IDENTIFIER337.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "select_contextual_keyword"


    public static class not_select_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "not_select_contextual_keyword"
    // CSharpAngular.g:3909:1: not_select_contextual_keyword :{...}? IDENTIFIER -> text(value=$IDENTIFIER.text);
    public final CSharpAngular.not_select_contextual_keyword_return not_select_contextual_keyword() throws RecognitionException {
        CSharpAngular.not_select_contextual_keyword_return retval = new CSharpAngular.not_select_contextual_keyword_return();
        retval.start = input.LT(1);


        Token IDENTIFIER338=null;

        try {
            // CSharpAngular.g:3910:3: ({...}? IDENTIFIER -> text(value=$IDENTIFIER.text))
            // CSharpAngular.g:3910:5: {...}? IDENTIFIER
            {
            if ( !((!input.LT(1).getText().equals("select"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "not_select_contextual_keyword", "!input.LT(1).getText().equals(\"select\")");
            }

            IDENTIFIER338=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_not_select_contextual_keyword28704); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3911:5: -> text(value=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IDENTIFIER338!=null?IDENTIFIER338.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "not_select_contextual_keyword"


    public static class group_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "group_contextual_keyword"
    // CSharpAngular.g:3913:1: group_contextual_keyword :{...}?id= IDENTIFIER -> text(value=\".collect(Collectors.groupingBy(\");
    public final CSharpAngular.group_contextual_keyword_return group_contextual_keyword() throws RecognitionException {
        CSharpAngular.group_contextual_keyword_return retval = new CSharpAngular.group_contextual_keyword_return();
        retval.start = input.LT(1);


        Token id=null;

        try {
            // CSharpAngular.g:3914:3: ({...}?id= IDENTIFIER -> text(value=\".collect(Collectors.groupingBy(\"))
            // CSharpAngular.g:3915:3: {...}?id= IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("group"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "group_contextual_keyword", "input.LT(1).getText().equals(\"group\")");
            }

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_group_contextual_keyword28735); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3916:3: -> text(value=\".collect(Collectors.groupingBy(\")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".collect(Collectors.groupingBy("));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_contextual_keyword"


    public static class by_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "by_contextual_keyword"
    // CSharpAngular.g:3918:1: by_contextual_keyword :{...}?id= IDENTIFIER -> text(value=$id.text);
    public final CSharpAngular.by_contextual_keyword_return by_contextual_keyword() throws RecognitionException {
        CSharpAngular.by_contextual_keyword_return retval = new CSharpAngular.by_contextual_keyword_return();
        retval.start = input.LT(1);


        Token id=null;

        try {
            // CSharpAngular.g:3919:3: ({...}?id= IDENTIFIER -> text(value=$id.text))
            // CSharpAngular.g:3920:3: {...}?id= IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("by"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "by_contextual_keyword", "input.LT(1).getText().equals(\"by\")");
            }

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_by_contextual_keyword28764); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3921:3: -> text(value=$id.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (id!=null?id.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "by_contextual_keyword"


    public static class partial_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "partial_contextual_keyword"
    // CSharpAngular.g:3923:1: partial_contextual_keyword :{...}?id= IDENTIFIER -> text(value=$id.text);
    public final CSharpAngular.partial_contextual_keyword_return partial_contextual_keyword() throws RecognitionException {
        CSharpAngular.partial_contextual_keyword_return retval = new CSharpAngular.partial_contextual_keyword_return();
        retval.start = input.LT(1);


        Token id=null;

        try {
            // CSharpAngular.g:3924:3: ({...}?id= IDENTIFIER -> text(value=$id.text))
            // CSharpAngular.g:3925:3: {...}?id= IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("partial"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "partial_contextual_keyword", "input.LT(1).getText().equals(\"partial\")");
            }

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_partial_contextual_keyword28793); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3926:3: -> text(value=$id.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (id!=null?id.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partial_contextual_keyword"


    public static class alias_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "alias_contextual_keyword"
    // CSharpAngular.g:3928:1: alias_contextual_keyword :{...}? IDENTIFIER -> text(value=$IDENTIFIER.text);
    public final CSharpAngular.alias_contextual_keyword_return alias_contextual_keyword() throws RecognitionException {
        CSharpAngular.alias_contextual_keyword_return retval = new CSharpAngular.alias_contextual_keyword_return();
        retval.start = input.LT(1);


        Token IDENTIFIER339=null;

        try {
            // CSharpAngular.g:3929:3: ({...}? IDENTIFIER -> text(value=$IDENTIFIER.text))
            // CSharpAngular.g:3929:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("alias"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "alias_contextual_keyword", "input.LT(1).getText().equals(\"alias\")");
            }

            IDENTIFIER339=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_alias_contextual_keyword28817); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3930:6: -> text(value=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IDENTIFIER339!=null?IDENTIFIER339.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alias_contextual_keyword"


    public static class yield_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "yield_contextual_keyword"
    // CSharpAngular.g:3932:1: yield_contextual_keyword :{...}? IDENTIFIER -> text(value=$IDENTIFIER.text);
    public final CSharpAngular.yield_contextual_keyword_return yield_contextual_keyword() throws RecognitionException {
        CSharpAngular.yield_contextual_keyword_return retval = new CSharpAngular.yield_contextual_keyword_return();
        retval.start = input.LT(1);


        Token IDENTIFIER340=null;

        try {
            // CSharpAngular.g:3933:3: ({...}? IDENTIFIER -> text(value=$IDENTIFIER.text))
            // CSharpAngular.g:3933:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("yield"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "yield_contextual_keyword", "input.LT(1).getText().equals(\"yield\")");
            }

            IDENTIFIER340=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_yield_contextual_keyword28844); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3934:6: -> text(value=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IDENTIFIER340!=null?IDENTIFIER340.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "yield_contextual_keyword"


    public static class get_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "get_contextual_keyword"
    // CSharpAngular.g:3936:1: get_contextual_keyword :{...}? IDENTIFIER -> getContextualKeyword(value=$IDENTIFIER.text);
    public final CSharpAngular.get_contextual_keyword_return get_contextual_keyword() throws RecognitionException {
        CSharpAngular.get_contextual_keyword_return retval = new CSharpAngular.get_contextual_keyword_return();
        retval.start = input.LT(1);


        Token IDENTIFIER341=null;

        try {
            // CSharpAngular.g:3937:3: ({...}? IDENTIFIER -> getContextualKeyword(value=$IDENTIFIER.text))
            // CSharpAngular.g:3938:3: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("get"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "get_contextual_keyword", "input.LT(1).getText().equals(\"get\")");
            }

            IDENTIFIER341=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_get_contextual_keyword28874); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3939:3: -> getContextualKeyword(value=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("getContextualKeyword",new STAttrMap().put("value", (IDENTIFIER341!=null?IDENTIFIER341.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "get_contextual_keyword"


    public static class set_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "set_contextual_keyword"
    // CSharpAngular.g:3941:1: set_contextual_keyword :{...}? IDENTIFIER -> setContextualKeyword(value=$IDENTIFIER.text);
    public final CSharpAngular.set_contextual_keyword_return set_contextual_keyword() throws RecognitionException {
        CSharpAngular.set_contextual_keyword_return retval = new CSharpAngular.set_contextual_keyword_return();
        retval.start = input.LT(1);


        Token IDENTIFIER342=null;

        try {
            // CSharpAngular.g:3942:3: ({...}? IDENTIFIER -> setContextualKeyword(value=$IDENTIFIER.text))
            // CSharpAngular.g:3943:3: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("set"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "set_contextual_keyword", "input.LT(1).getText().equals(\"set\")");
            }

            IDENTIFIER342=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_set_contextual_keyword28901); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3944:3: -> setContextualKeyword(value=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("setContextualKeyword",new STAttrMap().put("value", (IDENTIFIER342!=null?IDENTIFIER342.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "set_contextual_keyword"


    public static class add_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "add_contextual_keyword"
    // CSharpAngular.g:3946:1: add_contextual_keyword :{...}? IDENTIFIER -> text(value=$IDENTIFIER.text);
    public final CSharpAngular.add_contextual_keyword_return add_contextual_keyword() throws RecognitionException {
        CSharpAngular.add_contextual_keyword_return retval = new CSharpAngular.add_contextual_keyword_return();
        retval.start = input.LT(1);


        Token IDENTIFIER343=null;

        try {
            // CSharpAngular.g:3947:3: ({...}? IDENTIFIER -> text(value=$IDENTIFIER.text))
            // CSharpAngular.g:3947:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("add"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "add_contextual_keyword", "input.LT(1).getText().equals(\"add\")");
            }

            IDENTIFIER343=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_add_contextual_keyword28925); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3948:5: -> text(value=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IDENTIFIER343!=null?IDENTIFIER343.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "add_contextual_keyword"


    public static class remove_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "remove_contextual_keyword"
    // CSharpAngular.g:3950:1: remove_contextual_keyword :{...}?id= IDENTIFIER -> text(value=$id.text);
    public final CSharpAngular.remove_contextual_keyword_return remove_contextual_keyword() throws RecognitionException {
        CSharpAngular.remove_contextual_keyword_return retval = new CSharpAngular.remove_contextual_keyword_return();
        retval.start = input.LT(1);


        Token id=null;

        try {
            // CSharpAngular.g:3951:3: ({...}?id= IDENTIFIER -> text(value=$id.text))
            // CSharpAngular.g:3952:3: {...}?id= IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("remove"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "remove_contextual_keyword", "input.LT(1).getText().equals(\"remove\")");
            }

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_remove_contextual_keyword28956); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3953:3: -> text(value=$id.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (id!=null?id.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "remove_contextual_keyword"


    public static class dynamic_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "dynamic_contextual_keyword"
    // CSharpAngular.g:3955:1: dynamic_contextual_keyword :{...}?id= IDENTIFIER -> text(value=$id.text);
    public final CSharpAngular.dynamic_contextual_keyword_return dynamic_contextual_keyword() throws RecognitionException {
        CSharpAngular.dynamic_contextual_keyword_return retval = new CSharpAngular.dynamic_contextual_keyword_return();
        retval.start = input.LT(1);


        Token id=null;

        try {
            // CSharpAngular.g:3956:3: ({...}?id= IDENTIFIER -> text(value=$id.text))
            // CSharpAngular.g:3957:3: {...}?id= IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("dynamic"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dynamic_contextual_keyword", "input.LT(1).getText().equals(\"dynamic\")");
            }

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_dynamic_contextual_keyword28985); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3958:3: -> text(value=$id.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (id!=null?id.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dynamic_contextual_keyword"


    public static class arglist_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "arglist"
    // CSharpAngular.g:3960:1: arglist :{...}?id= IDENTIFIER -> text(value=\"__arglist \"+$id.text);
    public final CSharpAngular.arglist_return arglist() throws RecognitionException {
        CSharpAngular.arglist_return retval = new CSharpAngular.arglist_return();
        retval.start = input.LT(1);


        Token id=null;

        try {
            // CSharpAngular.g:3961:3: ({...}?id= IDENTIFIER -> text(value=\"__arglist \"+$id.text))
            // CSharpAngular.g:3962:3: {...}?id= IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("__arglist"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "arglist", "input.LT(1).getText().equals(\"__arglist\")");
            }

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_arglist29014); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3963:3: -> text(value=\"__arglist \"+$id.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "__arglist "+(id!=null?id.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "arglist"


    public static class right_arrow_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "right_arrow"
    // CSharpAngular.g:3965:1: right_arrow : first= ASSIGNMENT second= GT {...}?;
    public final CSharpAngular.right_arrow_return right_arrow() throws RecognitionException {
        CSharpAngular.right_arrow_return retval = new CSharpAngular.right_arrow_return();
        retval.start = input.LT(1);


        Token first=null;
        Token second=null;

        try {
            // CSharpAngular.g:3966:3: (first= ASSIGNMENT second= GT {...}?)
            // CSharpAngular.g:3966:5: first= ASSIGNMENT second= GT {...}?
            {
            first=(Token)match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_right_arrow29038); if (state.failed) return retval;

            second=(Token)match(input,GT,FOLLOW_GT_in_right_arrow29042); if (state.failed) return retval;

            if ( !(((first!=null?first.getTokenIndex():0) + 1 == (second!=null?second.getTokenIndex():0))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "right_arrow", "$first.index + 1 == $second.index");
            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "right_arrow"


    public static class right_shift_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "right_shift"
    // CSharpAngular.g:3968:1: right_shift : first= GT second= GT {...}? -> text(value=\">>\");
    public final CSharpAngular.right_shift_return right_shift() throws RecognitionException {
        CSharpAngular.right_shift_return retval = new CSharpAngular.right_shift_return();
        retval.start = input.LT(1);


        Token first=null;
        Token second=null;

        try {
            // CSharpAngular.g:3969:3: (first= GT second= GT {...}? -> text(value=\">>\"))
            // CSharpAngular.g:3970:3: first= GT second= GT {...}?
            {
            first=(Token)match(input,GT,FOLLOW_GT_in_right_shift29062); if (state.failed) return retval;

            second=(Token)match(input,GT,FOLLOW_GT_in_right_shift29066); if (state.failed) return retval;

            if ( !(((first!=null?first.getTokenIndex():0) + 1 == (second!=null?second.getTokenIndex():0))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "right_shift", "$first.index + 1 == $second.index");
            }

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3971:3: -> text(value=\">>\")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ">>"));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "right_shift"


    public static class right_shift_assignment_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "right_shift_assignment"
    // CSharpAngular.g:3973:1: right_shift_assignment : first= GT second= OP_GE {...}? -> text(value=\">>=\");
    public final CSharpAngular.right_shift_assignment_return right_shift_assignment() throws RecognitionException {
        CSharpAngular.right_shift_assignment_return retval = new CSharpAngular.right_shift_assignment_return();
        retval.start = input.LT(1);


        Token first=null;
        Token second=null;

        try {
            // CSharpAngular.g:3974:3: (first= GT second= OP_GE {...}? -> text(value=\">>=\"))
            // CSharpAngular.g:3975:3: first= GT second= OP_GE {...}?
            {
            first=(Token)match(input,GT,FOLLOW_GT_in_right_shift_assignment29096); if (state.failed) return retval;

            second=(Token)match(input,OP_GE,FOLLOW_OP_GE_in_right_shift_assignment29100); if (state.failed) return retval;

            if ( !(((first!=null?first.getTokenIndex():0) + 1 == (second!=null?second.getTokenIndex():0))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "right_shift_assignment", "$first.index + 1 == $second.index");
            }

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3976:3: -> text(value=\">>=\")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ">>="));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "right_shift_assignment"


    public static class literal_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "literal"
    // CSharpAngular.g:3978:1: literal : (bl= boolean_literal -> literal(ltrl=bl)| INTEGER_LITERAL -> literal(ltrl=$INTEGER_LITERAL.text)| REAL_LITERAL -> literal(ltrl=$REAL_LITERAL.text)| CHARACTER_LITERAL -> literal(ltrl=$CHARACTER_LITERAL.text)| STRING_LITERAL -> literal(ltrl=$STRING_LITERAL.text)| NULL -> literal(ltrl=$NULL.text));
    public final CSharpAngular.literal_return literal() throws RecognitionException {
        CSharpAngular.literal_return retval = new CSharpAngular.literal_return();
        retval.start = input.LT(1);


        Token INTEGER_LITERAL344=null;
        Token REAL_LITERAL345=null;
        Token CHARACTER_LITERAL346=null;
        Token STRING_LITERAL347=null;
        Token NULL348=null;
        CSharpAngular.boolean_literal_return bl =null;


        try {
            // CSharpAngular.g:3979:3: (bl= boolean_literal -> literal(ltrl=bl)| INTEGER_LITERAL -> literal(ltrl=$INTEGER_LITERAL.text)| REAL_LITERAL -> literal(ltrl=$REAL_LITERAL.text)| CHARACTER_LITERAL -> literal(ltrl=$CHARACTER_LITERAL.text)| STRING_LITERAL -> literal(ltrl=$STRING_LITERAL.text)| NULL -> literal(ltrl=$NULL.text))
            int alt445=6;
            switch ( input.LA(1) ) {
            case FALSE:
            case TRUE:
                {
                alt445=1;
                }
                break;
            case INTEGER_LITERAL:
                {
                alt445=2;
                }
                break;
            case REAL_LITERAL:
                {
                alt445=3;
                }
                break;
            case CHARACTER_LITERAL:
                {
                alt445=4;
                }
                break;
            case STRING_LITERAL:
                {
                alt445=5;
                }
                break;
            case NULL:
                {
                alt445=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 445, 0, input);

                throw nvae;

            }

            switch (alt445) {
                case 1 :
                    // CSharpAngular.g:3980:3: bl= boolean_literal
                    {
                    pushFollow(FOLLOW_boolean_literal_in_literal29131);
                    bl=boolean_literal();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3981:3: -> literal(ltrl=bl)
                      {
                          retval.st = templateLib.getInstanceOf("literal",new STAttrMap().put("ltrl", bl));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:3982:5: INTEGER_LITERAL
                    {
                    INTEGER_LITERAL344=(Token)match(input,INTEGER_LITERAL,FOLLOW_INTEGER_LITERAL_in_literal29147); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3983:3: -> literal(ltrl=$INTEGER_LITERAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("literal",new STAttrMap().put("ltrl", (INTEGER_LITERAL344!=null?INTEGER_LITERAL344.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:3984:5: REAL_LITERAL
                    {
                    REAL_LITERAL345=(Token)match(input,REAL_LITERAL,FOLLOW_REAL_LITERAL_in_literal29163); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3985:3: -> literal(ltrl=$REAL_LITERAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("literal",new STAttrMap().put("ltrl", (REAL_LITERAL345!=null?REAL_LITERAL345.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:3986:5: CHARACTER_LITERAL
                    {
                    CHARACTER_LITERAL346=(Token)match(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_literal29179); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3987:3: -> literal(ltrl=$CHARACTER_LITERAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("literal",new STAttrMap().put("ltrl", (CHARACTER_LITERAL346!=null?CHARACTER_LITERAL346.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:3988:5: STRING_LITERAL
                    {
                    STRING_LITERAL347=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal29195); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3989:3: -> literal(ltrl=$STRING_LITERAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("literal",new STAttrMap().put("ltrl", (STRING_LITERAL347!=null?STRING_LITERAL347.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:3990:5: NULL
                    {
                    NULL348=(Token)match(input,NULL,FOLLOW_NULL_in_literal29211); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3991:3: -> literal(ltrl=$NULL.text)
                      {
                          retval.st = templateLib.getInstanceOf("literal",new STAttrMap().put("ltrl", (NULL348!=null?NULL348.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal"


    public static class boolean_literal_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "boolean_literal"
    // CSharpAngular.g:3996:1: boolean_literal : ( TRUE -> text(value=$TRUE.text)| FALSE -> text(value=$FALSE.text));
    public final CSharpAngular.boolean_literal_return boolean_literal() throws RecognitionException {
        CSharpAngular.boolean_literal_return retval = new CSharpAngular.boolean_literal_return();
        retval.start = input.LT(1);


        Token TRUE349=null;
        Token FALSE350=null;

        try {
            // CSharpAngular.g:3997:3: ( TRUE -> text(value=$TRUE.text)| FALSE -> text(value=$FALSE.text))
            int alt446=2;
            int LA446_0 = input.LA(1);

            if ( (LA446_0==TRUE) ) {
                alt446=1;
            }
            else if ( (LA446_0==FALSE) ) {
                alt446=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 446, 0, input);

                throw nvae;

            }
            switch (alt446) {
                case 1 :
                    // CSharpAngular.g:3998:3: TRUE
                    {
                    TRUE349=(Token)match(input,TRUE,FOLLOW_TRUE_in_boolean_literal29243); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3999:3: -> text(value=$TRUE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TRUE349!=null?TRUE349.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:4000:5: FALSE
                    {
                    FALSE350=(Token)match(input,FALSE,FOLLOW_FALSE_in_boolean_literal29259); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4001:3: -> text(value=$FALSE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FALSE350!=null?FALSE350.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "boolean_literal"


    public static class keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "keyword"
    // CSharpAngular.g:4004:1: keyword : ( ABSTRACT -> text(value=$ABSTRACT.text)| AS -> text(value=$AS.text)| BASE -> text(value=$BASE.text)| BOOL -> text(value=$BOOL.text)| BREAK -> text(value=$BREAK.text)| BYTE -> text(value=$BYTE.text)| CASE -> text(value=$CASE.text)| CATCH -> text(value=$CATCH.text)| CHAR -> text(value=$CHAR.text)| CHECKED -> text(value=$CHECKED.text)| CLASS -> text(value=$CLASS.text)| CONST -> text(value=$CONST.text)| CONTINUE -> text(value=$CONTINUE.text)| DECIMAL -> text(value=$DECIMAL.text)| DEFAULT -> text(value=$DEFAULT.text)| DELEGATE -> text(value=$DELEGATE.text)| DO -> text(value=$DO.text)| DOUBLE -> text(value=$DOUBLE.text)| ELSE -> text(value=$ELSE.text)| ENUM -> text(value=$ENUM.text)| EVENT -> text(value=$EVENT.text)| EXPLICIT -> text(value=$EXPLICIT.text)| EXTERN -> text(value=$EXTERN.text)| FALSE -> text(value=$FALSE.text)| FINALLY -> text(value=$FINALLY.text)| FIXED -> text(value=$FIXED.text)| FLOAT -> text(value=$FLOAT.text)| FOR -> text(value=$FOR.text)| FOREACH -> text(value=$FOREACH.text)| GOTO -> text(value=$GOTO.text)| IF -> text(value=$IF.text)| IMPLICIT -> text(value=$IMPLICIT.text)| IN -> text(value=$IN.text)| INT -> text(value=$INT.text)| INTERFACE -> text(value=$INTERFACE.text)| INTERNAL -> text(value=$INTERNAL.text)| IS -> text(value=$IS.text)| LOCK -> text(value=$LOCK.text)| LONG -> text(value=$LONG.text)| NAMESPACE -> text(value=$NAMESPACE.text)| NEW -> text(value=$NEW.text)| NULL -> text(value=$NULL.text)| OBJECT -> text(value=\"Object\")| OPERATOR -> text(value=$OPERATOR.text)| OUT -> text(value=$OUT.text)| OVERRIDE -> text(value=$OVERRIDE.text)| PARAMS -> text(value=$PARAMS.text)| PRIVATE -> text(value=$PRIVATE.text)| PROTECTED -> text(value=$PROTECTED.text)| PUBLIC -> text(value=$PUBLIC.text)| READONLY -> text(value=$READONLY.text)| REF -> text(value=$REF.text)| RETURN -> text(value=$RETURN.text)| SBYTE -> text(value=$SBYTE.text)| SEALED -> text(value=$SEALED.text)| SHORT -> text(value=$SHORT.text)| SIZEOF -> text(value=$SIZEOF.text)| STACKALLOC -> text(value=$STACKALLOC.text)| STATIC -> text(value=$STATIC.text)| STRING -> text(value=\"String\")| STRUCT -> text(value=$STRUCT.text)| SWITCH -> text(value=$SWITCH.text)| THIS -> text(value=$THIS.text)| THROW -> text(value=$THROW.text)| TRUE -> text(value=$TRUE.text)| TRY -> text(value=$TRY.text)| TYPEOF -> text(value=$TYPEOF.text)| UINT -> text(value=$UINT.text)| ULONG -> text(value=$ULONG.text)| UNCHECKED -> text(value=$UNCHECKED.text)| UNSAFE -> text(value=$UNSAFE.text)| USHORT -> text(value=$USHORT.text)| USING -> text(value=$USING.text)| VIRTUAL -> text(value=$VIRTUAL.text)| VOID -> text(value=$VOID.text)| VOLATILE -> text(value=$VOLATILE.text)| WHILE -> text(value=$WHILE.text));
    public final CSharpAngular.keyword_return keyword() throws RecognitionException {
        CSharpAngular.keyword_return retval = new CSharpAngular.keyword_return();
        retval.start = input.LT(1);


        Token ABSTRACT351=null;
        Token AS352=null;
        Token BASE353=null;
        Token BOOL354=null;
        Token BREAK355=null;
        Token BYTE356=null;
        Token CASE357=null;
        Token CATCH358=null;
        Token CHAR359=null;
        Token CHECKED360=null;
        Token CLASS361=null;
        Token CONST362=null;
        Token CONTINUE363=null;
        Token DECIMAL364=null;
        Token DEFAULT365=null;
        Token DELEGATE366=null;
        Token DO367=null;
        Token DOUBLE368=null;
        Token ELSE369=null;
        Token ENUM370=null;
        Token EVENT371=null;
        Token EXPLICIT372=null;
        Token EXTERN373=null;
        Token FALSE374=null;
        Token FINALLY375=null;
        Token FIXED376=null;
        Token FLOAT377=null;
        Token FOR378=null;
        Token FOREACH379=null;
        Token GOTO380=null;
        Token IF381=null;
        Token IMPLICIT382=null;
        Token IN383=null;
        Token INT384=null;
        Token INTERFACE385=null;
        Token INTERNAL386=null;
        Token IS387=null;
        Token LOCK388=null;
        Token LONG389=null;
        Token NAMESPACE390=null;
        Token NEW391=null;
        Token NULL392=null;
        Token OPERATOR393=null;
        Token OUT394=null;
        Token OVERRIDE395=null;
        Token PARAMS396=null;
        Token PRIVATE397=null;
        Token PROTECTED398=null;
        Token PUBLIC399=null;
        Token READONLY400=null;
        Token REF401=null;
        Token RETURN402=null;
        Token SBYTE403=null;
        Token SEALED404=null;
        Token SHORT405=null;
        Token SIZEOF406=null;
        Token STACKALLOC407=null;
        Token STATIC408=null;
        Token STRUCT409=null;
        Token SWITCH410=null;
        Token THIS411=null;
        Token THROW412=null;
        Token TRUE413=null;
        Token TRY414=null;
        Token TYPEOF415=null;
        Token UINT416=null;
        Token ULONG417=null;
        Token UNCHECKED418=null;
        Token UNSAFE419=null;
        Token USHORT420=null;
        Token USING421=null;
        Token VIRTUAL422=null;
        Token VOID423=null;
        Token VOLATILE424=null;
        Token WHILE425=null;

        try {
            // CSharpAngular.g:4005:3: ( ABSTRACT -> text(value=$ABSTRACT.text)| AS -> text(value=$AS.text)| BASE -> text(value=$BASE.text)| BOOL -> text(value=$BOOL.text)| BREAK -> text(value=$BREAK.text)| BYTE -> text(value=$BYTE.text)| CASE -> text(value=$CASE.text)| CATCH -> text(value=$CATCH.text)| CHAR -> text(value=$CHAR.text)| CHECKED -> text(value=$CHECKED.text)| CLASS -> text(value=$CLASS.text)| CONST -> text(value=$CONST.text)| CONTINUE -> text(value=$CONTINUE.text)| DECIMAL -> text(value=$DECIMAL.text)| DEFAULT -> text(value=$DEFAULT.text)| DELEGATE -> text(value=$DELEGATE.text)| DO -> text(value=$DO.text)| DOUBLE -> text(value=$DOUBLE.text)| ELSE -> text(value=$ELSE.text)| ENUM -> text(value=$ENUM.text)| EVENT -> text(value=$EVENT.text)| EXPLICIT -> text(value=$EXPLICIT.text)| EXTERN -> text(value=$EXTERN.text)| FALSE -> text(value=$FALSE.text)| FINALLY -> text(value=$FINALLY.text)| FIXED -> text(value=$FIXED.text)| FLOAT -> text(value=$FLOAT.text)| FOR -> text(value=$FOR.text)| FOREACH -> text(value=$FOREACH.text)| GOTO -> text(value=$GOTO.text)| IF -> text(value=$IF.text)| IMPLICIT -> text(value=$IMPLICIT.text)| IN -> text(value=$IN.text)| INT -> text(value=$INT.text)| INTERFACE -> text(value=$INTERFACE.text)| INTERNAL -> text(value=$INTERNAL.text)| IS -> text(value=$IS.text)| LOCK -> text(value=$LOCK.text)| LONG -> text(value=$LONG.text)| NAMESPACE -> text(value=$NAMESPACE.text)| NEW -> text(value=$NEW.text)| NULL -> text(value=$NULL.text)| OBJECT -> text(value=\"Object\")| OPERATOR -> text(value=$OPERATOR.text)| OUT -> text(value=$OUT.text)| OVERRIDE -> text(value=$OVERRIDE.text)| PARAMS -> text(value=$PARAMS.text)| PRIVATE -> text(value=$PRIVATE.text)| PROTECTED -> text(value=$PROTECTED.text)| PUBLIC -> text(value=$PUBLIC.text)| READONLY -> text(value=$READONLY.text)| REF -> text(value=$REF.text)| RETURN -> text(value=$RETURN.text)| SBYTE -> text(value=$SBYTE.text)| SEALED -> text(value=$SEALED.text)| SHORT -> text(value=$SHORT.text)| SIZEOF -> text(value=$SIZEOF.text)| STACKALLOC -> text(value=$STACKALLOC.text)| STATIC -> text(value=$STATIC.text)| STRING -> text(value=\"String\")| STRUCT -> text(value=$STRUCT.text)| SWITCH -> text(value=$SWITCH.text)| THIS -> text(value=$THIS.text)| THROW -> text(value=$THROW.text)| TRUE -> text(value=$TRUE.text)| TRY -> text(value=$TRY.text)| TYPEOF -> text(value=$TYPEOF.text)| UINT -> text(value=$UINT.text)| ULONG -> text(value=$ULONG.text)| UNCHECKED -> text(value=$UNCHECKED.text)| UNSAFE -> text(value=$UNSAFE.text)| USHORT -> text(value=$USHORT.text)| USING -> text(value=$USING.text)| VIRTUAL -> text(value=$VIRTUAL.text)| VOID -> text(value=$VOID.text)| VOLATILE -> text(value=$VOLATILE.text)| WHILE -> text(value=$WHILE.text))
            int alt447=77;
            switch ( input.LA(1) ) {
            case ABSTRACT:
                {
                alt447=1;
                }
                break;
            case AS:
                {
                alt447=2;
                }
                break;
            case BASE:
                {
                alt447=3;
                }
                break;
            case BOOL:
                {
                alt447=4;
                }
                break;
            case BREAK:
                {
                alt447=5;
                }
                break;
            case BYTE:
                {
                alt447=6;
                }
                break;
            case CASE:
                {
                alt447=7;
                }
                break;
            case CATCH:
                {
                alt447=8;
                }
                break;
            case CHAR:
                {
                alt447=9;
                }
                break;
            case CHECKED:
                {
                alt447=10;
                }
                break;
            case CLASS:
                {
                alt447=11;
                }
                break;
            case CONST:
                {
                alt447=12;
                }
                break;
            case CONTINUE:
                {
                alt447=13;
                }
                break;
            case DECIMAL:
                {
                alt447=14;
                }
                break;
            case DEFAULT:
                {
                alt447=15;
                }
                break;
            case DELEGATE:
                {
                alt447=16;
                }
                break;
            case DO:
                {
                alt447=17;
                }
                break;
            case DOUBLE:
                {
                alt447=18;
                }
                break;
            case ELSE:
                {
                alt447=19;
                }
                break;
            case ENUM:
                {
                alt447=20;
                }
                break;
            case EVENT:
                {
                alt447=21;
                }
                break;
            case EXPLICIT:
                {
                alt447=22;
                }
                break;
            case EXTERN:
                {
                alt447=23;
                }
                break;
            case FALSE:
                {
                alt447=24;
                }
                break;
            case FINALLY:
                {
                alt447=25;
                }
                break;
            case FIXED:
                {
                alt447=26;
                }
                break;
            case FLOAT:
                {
                alt447=27;
                }
                break;
            case FOR:
                {
                alt447=28;
                }
                break;
            case FOREACH:
                {
                alt447=29;
                }
                break;
            case GOTO:
                {
                alt447=30;
                }
                break;
            case IF:
                {
                alt447=31;
                }
                break;
            case IMPLICIT:
                {
                alt447=32;
                }
                break;
            case IN:
                {
                alt447=33;
                }
                break;
            case INT:
                {
                alt447=34;
                }
                break;
            case INTERFACE:
                {
                alt447=35;
                }
                break;
            case INTERNAL:
                {
                alt447=36;
                }
                break;
            case IS:
                {
                alt447=37;
                }
                break;
            case LOCK:
                {
                alt447=38;
                }
                break;
            case LONG:
                {
                alt447=39;
                }
                break;
            case NAMESPACE:
                {
                alt447=40;
                }
                break;
            case NEW:
                {
                alt447=41;
                }
                break;
            case NULL:
                {
                alt447=42;
                }
                break;
            case OBJECT:
                {
                alt447=43;
                }
                break;
            case OPERATOR:
                {
                alt447=44;
                }
                break;
            case OUT:
                {
                alt447=45;
                }
                break;
            case OVERRIDE:
                {
                alt447=46;
                }
                break;
            case PARAMS:
                {
                alt447=47;
                }
                break;
            case PRIVATE:
                {
                alt447=48;
                }
                break;
            case PROTECTED:
                {
                alt447=49;
                }
                break;
            case PUBLIC:
                {
                alt447=50;
                }
                break;
            case READONLY:
                {
                alt447=51;
                }
                break;
            case REF:
                {
                alt447=52;
                }
                break;
            case RETURN:
                {
                alt447=53;
                }
                break;
            case SBYTE:
                {
                alt447=54;
                }
                break;
            case SEALED:
                {
                alt447=55;
                }
                break;
            case SHORT:
                {
                alt447=56;
                }
                break;
            case SIZEOF:
                {
                alt447=57;
                }
                break;
            case STACKALLOC:
                {
                alt447=58;
                }
                break;
            case STATIC:
                {
                alt447=59;
                }
                break;
            case STRING:
                {
                alt447=60;
                }
                break;
            case STRUCT:
                {
                alt447=61;
                }
                break;
            case SWITCH:
                {
                alt447=62;
                }
                break;
            case THIS:
                {
                alt447=63;
                }
                break;
            case THROW:
                {
                alt447=64;
                }
                break;
            case TRUE:
                {
                alt447=65;
                }
                break;
            case TRY:
                {
                alt447=66;
                }
                break;
            case TYPEOF:
                {
                alt447=67;
                }
                break;
            case UINT:
                {
                alt447=68;
                }
                break;
            case ULONG:
                {
                alt447=69;
                }
                break;
            case UNCHECKED:
                {
                alt447=70;
                }
                break;
            case UNSAFE:
                {
                alt447=71;
                }
                break;
            case USHORT:
                {
                alt447=72;
                }
                break;
            case USING:
                {
                alt447=73;
                }
                break;
            case VIRTUAL:
                {
                alt447=74;
                }
                break;
            case VOID:
                {
                alt447=75;
                }
                break;
            case VOLATILE:
                {
                alt447=76;
                }
                break;
            case WHILE:
                {
                alt447=77;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 447, 0, input);

                throw nvae;

            }

            switch (alt447) {
                case 1 :
                    // CSharpAngular.g:4006:3: ABSTRACT
                    {
                    ABSTRACT351=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_keyword29285); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4006:19: -> text(value=$ABSTRACT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ABSTRACT351!=null?ABSTRACT351.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:4007:6: AS
                    {
                    AS352=(Token)match(input,AS,FOLLOW_AS_in_keyword29307); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4007:19: -> text(value=$AS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (AS352!=null?AS352.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:4008:6: BASE
                    {
                    BASE353=(Token)match(input,BASE,FOLLOW_BASE_in_keyword29332); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4008:19: -> text(value=$BASE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BASE353!=null?BASE353.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:4009:6: BOOL
                    {
                    BOOL354=(Token)match(input,BOOL,FOLLOW_BOOL_in_keyword29355); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4009:19: -> text(value=$BOOL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BOOL354!=null?BOOL354.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:4010:6: BREAK
                    {
                    BREAK355=(Token)match(input,BREAK,FOLLOW_BREAK_in_keyword29378); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4010:19: -> text(value=$BREAK.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BREAK355!=null?BREAK355.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:4011:6: BYTE
                    {
                    BYTE356=(Token)match(input,BYTE,FOLLOW_BYTE_in_keyword29400); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4011:19: -> text(value=$BYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BYTE356!=null?BYTE356.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:4012:6: CASE
                    {
                    CASE357=(Token)match(input,CASE,FOLLOW_CASE_in_keyword29423); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4012:19: -> text(value=$CASE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CASE357!=null?CASE357.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:4013:6: CATCH
                    {
                    CATCH358=(Token)match(input,CATCH,FOLLOW_CATCH_in_keyword29446); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4013:19: -> text(value=$CATCH.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CATCH358!=null?CATCH358.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:4014:6: CHAR
                    {
                    CHAR359=(Token)match(input,CHAR,FOLLOW_CHAR_in_keyword29468); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4014:19: -> text(value=$CHAR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CHAR359!=null?CHAR359.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:4015:6: CHECKED
                    {
                    CHECKED360=(Token)match(input,CHECKED,FOLLOW_CHECKED_in_keyword29491); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4015:19: -> text(value=$CHECKED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CHECKED360!=null?CHECKED360.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:4016:6: CLASS
                    {
                    CLASS361=(Token)match(input,CLASS,FOLLOW_CLASS_in_keyword29511); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4016:19: -> text(value=$CLASS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CLASS361!=null?CLASS361.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharpAngular.g:4017:6: CONST
                    {
                    CONST362=(Token)match(input,CONST,FOLLOW_CONST_in_keyword29533); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4017:19: -> text(value=$CONST.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CONST362!=null?CONST362.getText():null)));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharpAngular.g:4018:6: CONTINUE
                    {
                    CONTINUE363=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_keyword29555); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4018:19: -> text(value=$CONTINUE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CONTINUE363!=null?CONTINUE363.getText():null)));
                      }


                    }

                    }
                    break;
                case 14 :
                    // CSharpAngular.g:4019:6: DECIMAL
                    {
                    DECIMAL364=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_keyword29574); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4019:19: -> text(value=$DECIMAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DECIMAL364!=null?DECIMAL364.getText():null)));
                      }


                    }

                    }
                    break;
                case 15 :
                    // CSharpAngular.g:4020:6: DEFAULT
                    {
                    DEFAULT365=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_keyword29594); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4020:19: -> text(value=$DEFAULT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DEFAULT365!=null?DEFAULT365.getText():null)));
                      }


                    }

                    }
                    break;
                case 16 :
                    // CSharpAngular.g:4021:6: DELEGATE
                    {
                    DELEGATE366=(Token)match(input,DELEGATE,FOLLOW_DELEGATE_in_keyword29614); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4021:19: -> text(value=$DELEGATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DELEGATE366!=null?DELEGATE366.getText():null)));
                      }


                    }

                    }
                    break;
                case 17 :
                    // CSharpAngular.g:4022:6: DO
                    {
                    DO367=(Token)match(input,DO,FOLLOW_DO_in_keyword29633); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4022:19: -> text(value=$DO.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DO367!=null?DO367.getText():null)));
                      }


                    }

                    }
                    break;
                case 18 :
                    // CSharpAngular.g:4023:6: DOUBLE
                    {
                    DOUBLE368=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_keyword29658); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4023:19: -> text(value=$DOUBLE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DOUBLE368!=null?DOUBLE368.getText():null)));
                      }


                    }

                    }
                    break;
                case 19 :
                    // CSharpAngular.g:4024:6: ELSE
                    {
                    ELSE369=(Token)match(input,ELSE,FOLLOW_ELSE_in_keyword29679); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4024:19: -> text(value=$ELSE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ELSE369!=null?ELSE369.getText():null)));
                      }


                    }

                    }
                    break;
                case 20 :
                    // CSharpAngular.g:4025:6: ENUM
                    {
                    ENUM370=(Token)match(input,ENUM,FOLLOW_ENUM_in_keyword29702); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4025:19: -> text(value=$ENUM.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ENUM370!=null?ENUM370.getText():null)));
                      }


                    }

                    }
                    break;
                case 21 :
                    // CSharpAngular.g:4026:6: EVENT
                    {
                    EVENT371=(Token)match(input,EVENT,FOLLOW_EVENT_in_keyword29725); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4026:19: -> text(value=$EVENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EVENT371!=null?EVENT371.getText():null)));
                      }


                    }

                    }
                    break;
                case 22 :
                    // CSharpAngular.g:4027:6: EXPLICIT
                    {
                    EXPLICIT372=(Token)match(input,EXPLICIT,FOLLOW_EXPLICIT_in_keyword29747); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4027:19: -> text(value=$EXPLICIT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXPLICIT372!=null?EXPLICIT372.getText():null)));
                      }


                    }

                    }
                    break;
                case 23 :
                    // CSharpAngular.g:4028:6: EXTERN
                    {
                    EXTERN373=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_keyword29766); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4028:19: -> text(value=$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXTERN373!=null?EXTERN373.getText():null)));
                      }


                    }

                    }
                    break;
                case 24 :
                    // CSharpAngular.g:4029:6: FALSE
                    {
                    FALSE374=(Token)match(input,FALSE,FOLLOW_FALSE_in_keyword29787); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4029:19: -> text(value=$FALSE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FALSE374!=null?FALSE374.getText():null)));
                      }


                    }

                    }
                    break;
                case 25 :
                    // CSharpAngular.g:4030:6: FINALLY
                    {
                    FINALLY375=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_keyword29809); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4030:19: -> text(value=$FINALLY.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FINALLY375!=null?FINALLY375.getText():null)));
                      }


                    }

                    }
                    break;
                case 26 :
                    // CSharpAngular.g:4031:6: FIXED
                    {
                    FIXED376=(Token)match(input,FIXED,FOLLOW_FIXED_in_keyword29829); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4031:19: -> text(value=$FIXED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FIXED376!=null?FIXED376.getText():null)));
                      }


                    }

                    }
                    break;
                case 27 :
                    // CSharpAngular.g:4032:6: FLOAT
                    {
                    FLOAT377=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_keyword29851); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4032:19: -> text(value=$FLOAT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FLOAT377!=null?FLOAT377.getText():null)));
                      }


                    }

                    }
                    break;
                case 28 :
                    // CSharpAngular.g:4033:6: FOR
                    {
                    FOR378=(Token)match(input,FOR,FOLLOW_FOR_in_keyword29873); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4033:19: -> text(value=$FOR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FOR378!=null?FOR378.getText():null)));
                      }


                    }

                    }
                    break;
                case 29 :
                    // CSharpAngular.g:4034:6: FOREACH
                    {
                    FOREACH379=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_keyword29897); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4034:19: -> text(value=$FOREACH.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FOREACH379!=null?FOREACH379.getText():null)));
                      }


                    }

                    }
                    break;
                case 30 :
                    // CSharpAngular.g:4035:6: GOTO
                    {
                    GOTO380=(Token)match(input,GOTO,FOLLOW_GOTO_in_keyword29917); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4035:19: -> text(value=$GOTO.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (GOTO380!=null?GOTO380.getText():null)));
                      }


                    }

                    }
                    break;
                case 31 :
                    // CSharpAngular.g:4036:6: IF
                    {
                    IF381=(Token)match(input,IF,FOLLOW_IF_in_keyword29940); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4036:19: -> text(value=$IF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IF381!=null?IF381.getText():null)));
                      }


                    }

                    }
                    break;
                case 32 :
                    // CSharpAngular.g:4037:6: IMPLICIT
                    {
                    IMPLICIT382=(Token)match(input,IMPLICIT,FOLLOW_IMPLICIT_in_keyword29965); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4037:19: -> text(value=$IMPLICIT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IMPLICIT382!=null?IMPLICIT382.getText():null)));
                      }


                    }

                    }
                    break;
                case 33 :
                    // CSharpAngular.g:4038:6: IN
                    {
                    IN383=(Token)match(input,IN,FOLLOW_IN_in_keyword29984); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4038:19: -> text(value=$IN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IN383!=null?IN383.getText():null)));
                      }


                    }

                    }
                    break;
                case 34 :
                    // CSharpAngular.g:4039:6: INT
                    {
                    INT384=(Token)match(input,INT,FOLLOW_INT_in_keyword30009); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4039:19: -> text(value=$INT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INT384!=null?INT384.getText():null)));
                      }


                    }

                    }
                    break;
                case 35 :
                    // CSharpAngular.g:4040:6: INTERFACE
                    {
                    INTERFACE385=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_keyword30033); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4040:19: -> text(value=$INTERFACE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERFACE385!=null?INTERFACE385.getText():null)));
                      }


                    }

                    }
                    break;
                case 36 :
                    // CSharpAngular.g:4041:6: INTERNAL
                    {
                    INTERNAL386=(Token)match(input,INTERNAL,FOLLOW_INTERNAL_in_keyword30051); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4041:19: -> text(value=$INTERNAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERNAL386!=null?INTERNAL386.getText():null)));
                      }


                    }

                    }
                    break;
                case 37 :
                    // CSharpAngular.g:4042:6: IS
                    {
                    IS387=(Token)match(input,IS,FOLLOW_IS_in_keyword30070); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4042:19: -> text(value=$IS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IS387!=null?IS387.getText():null)));
                      }


                    }

                    }
                    break;
                case 38 :
                    // CSharpAngular.g:4043:6: LOCK
                    {
                    LOCK388=(Token)match(input,LOCK,FOLLOW_LOCK_in_keyword30095); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4043:19: -> text(value=$LOCK.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (LOCK388!=null?LOCK388.getText():null)));
                      }


                    }

                    }
                    break;
                case 39 :
                    // CSharpAngular.g:4044:6: LONG
                    {
                    LONG389=(Token)match(input,LONG,FOLLOW_LONG_in_keyword30118); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4044:19: -> text(value=$LONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (LONG389!=null?LONG389.getText():null)));
                      }


                    }

                    }
                    break;
                case 40 :
                    // CSharpAngular.g:4045:6: NAMESPACE
                    {
                    NAMESPACE390=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_keyword30141); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4045:19: -> text(value=$NAMESPACE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NAMESPACE390!=null?NAMESPACE390.getText():null)));
                      }


                    }

                    }
                    break;
                case 41 :
                    // CSharpAngular.g:4046:6: NEW
                    {
                    NEW391=(Token)match(input,NEW,FOLLOW_NEW_in_keyword30159); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4046:19: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW391!=null?NEW391.getText():null)));
                      }


                    }

                    }
                    break;
                case 42 :
                    // CSharpAngular.g:4047:6: NULL
                    {
                    NULL392=(Token)match(input,NULL,FOLLOW_NULL_in_keyword30183); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4047:19: -> text(value=$NULL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NULL392!=null?NULL392.getText():null)));
                      }


                    }

                    }
                    break;
                case 43 :
                    // CSharpAngular.g:4048:6: OBJECT
                    {
                    match(input,OBJECT,FOLLOW_OBJECT_in_keyword30206); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4048:19: -> text(value=\"Object\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "Object"));
                      }


                    }

                    }
                    break;
                case 44 :
                    // CSharpAngular.g:4049:6: OPERATOR
                    {
                    OPERATOR393=(Token)match(input,OPERATOR,FOLLOW_OPERATOR_in_keyword30227); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4049:19: -> text(value=$OPERATOR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OPERATOR393!=null?OPERATOR393.getText():null)));
                      }


                    }

                    }
                    break;
                case 45 :
                    // CSharpAngular.g:4050:6: OUT
                    {
                    OUT394=(Token)match(input,OUT,FOLLOW_OUT_in_keyword30246); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4050:19: -> text(value=$OUT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OUT394!=null?OUT394.getText():null)));
                      }


                    }

                    }
                    break;
                case 46 :
                    // CSharpAngular.g:4051:6: OVERRIDE
                    {
                    OVERRIDE395=(Token)match(input,OVERRIDE,FOLLOW_OVERRIDE_in_keyword30270); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4051:19: -> text(value=$OVERRIDE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OVERRIDE395!=null?OVERRIDE395.getText():null)));
                      }


                    }

                    }
                    break;
                case 47 :
                    // CSharpAngular.g:4052:6: PARAMS
                    {
                    PARAMS396=(Token)match(input,PARAMS,FOLLOW_PARAMS_in_keyword30289); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4052:19: -> text(value=$PARAMS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PARAMS396!=null?PARAMS396.getText():null)));
                      }


                    }

                    }
                    break;
                case 48 :
                    // CSharpAngular.g:4053:6: PRIVATE
                    {
                    PRIVATE397=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_keyword30310); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4053:19: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE397!=null?PRIVATE397.getText():null)));
                      }


                    }

                    }
                    break;
                case 49 :
                    // CSharpAngular.g:4054:6: PROTECTED
                    {
                    PROTECTED398=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_keyword30330); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4054:19: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED398!=null?PROTECTED398.getText():null)));
                      }


                    }

                    }
                    break;
                case 50 :
                    // CSharpAngular.g:4055:6: PUBLIC
                    {
                    PUBLIC399=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_keyword30348); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4055:19: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC399!=null?PUBLIC399.getText():null)));
                      }


                    }

                    }
                    break;
                case 51 :
                    // CSharpAngular.g:4056:6: READONLY
                    {
                    READONLY400=(Token)match(input,READONLY,FOLLOW_READONLY_in_keyword30369); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4056:19: -> text(value=$READONLY.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (READONLY400!=null?READONLY400.getText():null)));
                      }


                    }

                    }
                    break;
                case 52 :
                    // CSharpAngular.g:4057:6: REF
                    {
                    REF401=(Token)match(input,REF,FOLLOW_REF_in_keyword30388); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4057:19: -> text(value=$REF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (REF401!=null?REF401.getText():null)));
                      }


                    }

                    }
                    break;
                case 53 :
                    // CSharpAngular.g:4058:6: RETURN
                    {
                    RETURN402=(Token)match(input,RETURN,FOLLOW_RETURN_in_keyword30412); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4058:19: -> text(value=$RETURN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (RETURN402!=null?RETURN402.getText():null)));
                      }


                    }

                    }
                    break;
                case 54 :
                    // CSharpAngular.g:4059:6: SBYTE
                    {
                    SBYTE403=(Token)match(input,SBYTE,FOLLOW_SBYTE_in_keyword30433); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4059:19: -> text(value=$SBYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SBYTE403!=null?SBYTE403.getText():null)));
                      }


                    }

                    }
                    break;
                case 55 :
                    // CSharpAngular.g:4060:6: SEALED
                    {
                    SEALED404=(Token)match(input,SEALED,FOLLOW_SEALED_in_keyword30455); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4060:19: -> text(value=$SEALED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEALED404!=null?SEALED404.getText():null)));
                      }


                    }

                    }
                    break;
                case 56 :
                    // CSharpAngular.g:4061:6: SHORT
                    {
                    SHORT405=(Token)match(input,SHORT,FOLLOW_SHORT_in_keyword30476); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4061:19: -> text(value=$SHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SHORT405!=null?SHORT405.getText():null)));
                      }


                    }

                    }
                    break;
                case 57 :
                    // CSharpAngular.g:4062:6: SIZEOF
                    {
                    SIZEOF406=(Token)match(input,SIZEOF,FOLLOW_SIZEOF_in_keyword30498); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4062:19: -> text(value=$SIZEOF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SIZEOF406!=null?SIZEOF406.getText():null)));
                      }


                    }

                    }
                    break;
                case 58 :
                    // CSharpAngular.g:4063:6: STACKALLOC
                    {
                    STACKALLOC407=(Token)match(input,STACKALLOC,FOLLOW_STACKALLOC_in_keyword30519); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4063:19: -> text(value=$STACKALLOC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STACKALLOC407!=null?STACKALLOC407.getText():null)));
                      }


                    }

                    }
                    break;
                case 59 :
                    // CSharpAngular.g:4064:6: STATIC
                    {
                    STATIC408=(Token)match(input,STATIC,FOLLOW_STATIC_in_keyword30536); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4064:19: -> text(value=$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STATIC408!=null?STATIC408.getText():null)));
                      }


                    }

                    }
                    break;
                case 60 :
                    // CSharpAngular.g:4065:6: STRING
                    {
                    match(input,STRING,FOLLOW_STRING_in_keyword30557); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4065:19: -> text(value=\"String\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "String"));
                      }


                    }

                    }
                    break;
                case 61 :
                    // CSharpAngular.g:4066:6: STRUCT
                    {
                    STRUCT409=(Token)match(input,STRUCT,FOLLOW_STRUCT_in_keyword30578); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4066:19: -> text(value=$STRUCT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STRUCT409!=null?STRUCT409.getText():null)));
                      }


                    }

                    }
                    break;
                case 62 :
                    // CSharpAngular.g:4067:6: SWITCH
                    {
                    SWITCH410=(Token)match(input,SWITCH,FOLLOW_SWITCH_in_keyword30599); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4067:19: -> text(value=$SWITCH.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SWITCH410!=null?SWITCH410.getText():null)));
                      }


                    }

                    }
                    break;
                case 63 :
                    // CSharpAngular.g:4068:6: THIS
                    {
                    THIS411=(Token)match(input,THIS,FOLLOW_THIS_in_keyword30620); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4068:19: -> text(value=$THIS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (THIS411!=null?THIS411.getText():null)));
                      }


                    }

                    }
                    break;
                case 64 :
                    // CSharpAngular.g:4069:6: THROW
                    {
                    THROW412=(Token)match(input,THROW,FOLLOW_THROW_in_keyword30643); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4069:19: -> text(value=$THROW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (THROW412!=null?THROW412.getText():null)));
                      }


                    }

                    }
                    break;
                case 65 :
                    // CSharpAngular.g:4070:6: TRUE
                    {
                    TRUE413=(Token)match(input,TRUE,FOLLOW_TRUE_in_keyword30665); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4070:19: -> text(value=$TRUE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TRUE413!=null?TRUE413.getText():null)));
                      }


                    }

                    }
                    break;
                case 66 :
                    // CSharpAngular.g:4071:6: TRY
                    {
                    TRY414=(Token)match(input,TRY,FOLLOW_TRY_in_keyword30688); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4071:19: -> text(value=$TRY.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TRY414!=null?TRY414.getText():null)));
                      }


                    }

                    }
                    break;
                case 67 :
                    // CSharpAngular.g:4072:6: TYPEOF
                    {
                    TYPEOF415=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_keyword30712); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4072:19: -> text(value=$TYPEOF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TYPEOF415!=null?TYPEOF415.getText():null)));
                      }


                    }

                    }
                    break;
                case 68 :
                    // CSharpAngular.g:4073:6: UINT
                    {
                    UINT416=(Token)match(input,UINT,FOLLOW_UINT_in_keyword30733); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4073:19: -> text(value=$UINT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UINT416!=null?UINT416.getText():null)));
                      }


                    }

                    }
                    break;
                case 69 :
                    // CSharpAngular.g:4074:6: ULONG
                    {
                    ULONG417=(Token)match(input,ULONG,FOLLOW_ULONG_in_keyword30756); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4074:19: -> text(value=$ULONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ULONG417!=null?ULONG417.getText():null)));
                      }


                    }

                    }
                    break;
                case 70 :
                    // CSharpAngular.g:4075:6: UNCHECKED
                    {
                    UNCHECKED418=(Token)match(input,UNCHECKED,FOLLOW_UNCHECKED_in_keyword30778); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4075:19: -> text(value=$UNCHECKED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNCHECKED418!=null?UNCHECKED418.getText():null)));
                      }


                    }

                    }
                    break;
                case 71 :
                    // CSharpAngular.g:4076:6: UNSAFE
                    {
                    UNSAFE419=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_keyword30796); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4076:19: -> text(value=$UNSAFE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE419!=null?UNSAFE419.getText():null)));
                      }


                    }

                    }
                    break;
                case 72 :
                    // CSharpAngular.g:4077:6: USHORT
                    {
                    USHORT420=(Token)match(input,USHORT,FOLLOW_USHORT_in_keyword30817); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4077:19: -> text(value=$USHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (USHORT420!=null?USHORT420.getText():null)));
                      }


                    }

                    }
                    break;
                case 73 :
                    // CSharpAngular.g:4078:6: USING
                    {
                    USING421=(Token)match(input,USING,FOLLOW_USING_in_keyword30838); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4078:19: -> text(value=$USING.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (USING421!=null?USING421.getText():null)));
                      }


                    }

                    }
                    break;
                case 74 :
                    // CSharpAngular.g:4079:6: VIRTUAL
                    {
                    VIRTUAL422=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_keyword30860); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4079:19: -> text(value=$VIRTUAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VIRTUAL422!=null?VIRTUAL422.getText():null)));
                      }


                    }

                    }
                    break;
                case 75 :
                    // CSharpAngular.g:4080:6: VOID
                    {
                    VOID423=(Token)match(input,VOID,FOLLOW_VOID_in_keyword30880); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4080:19: -> text(value=$VOID.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VOID423!=null?VOID423.getText():null)));
                      }


                    }

                    }
                    break;
                case 76 :
                    // CSharpAngular.g:4081:6: VOLATILE
                    {
                    VOLATILE424=(Token)match(input,VOLATILE,FOLLOW_VOLATILE_in_keyword30903); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4081:19: -> text(value=$VOLATILE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VOLATILE424!=null?VOLATILE424.getText():null)));
                      }


                    }

                    }
                    break;
                case 77 :
                    // CSharpAngular.g:4082:6: WHILE
                    {
                    WHILE425=(Token)match(input,WHILE,FOLLOW_WHILE_in_keyword30922); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4082:19: -> text(value=$WHILE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (WHILE425!=null?WHILE425.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keyword"


    public static class class_name_definition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_name_definition"
    // CSharpAngular.g:4087:1: class_name_definition : CLASS clsNam= IDENTIFIER -> text(value=$clsNam.text+updateClassName(NamingUtil.getControllerName($clsNam.text)));
    public final CSharpAngular.class_name_definition_return class_name_definition() throws RecognitionException {
        CSharpAngular.class_name_definition_return retval = new CSharpAngular.class_name_definition_return();
        retval.start = input.LT(1);


        Token clsNam=null;

        try {
            // CSharpAngular.g:4088:3: ( CLASS clsNam= IDENTIFIER -> text(value=$clsNam.text+updateClassName(NamingUtil.getControllerName($clsNam.text))))
            // CSharpAngular.g:4089:3: CLASS clsNam= IDENTIFIER
            {
            match(input,CLASS,FOLLOW_CLASS_in_class_name_definition30954); if (state.failed) return retval;

            clsNam=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_class_name_definition30958); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 4090:3: -> text(value=$clsNam.text+updateClassName(NamingUtil.getControllerName($clsNam.text)))
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (clsNam!=null?clsNam.getText():null)+updateClassName(NamingUtil.getControllerName((clsNam!=null?clsNam.getText():null)))));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_name_definition"


    public static class class_definition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_definition"
    // CSharpAngular.g:4093:1: class_definition : clsNam= class_name_definition ( type_parameter_list )? (basCls= class_base )? ( type_parameter_constraints_clauses )? clsBdy= class_body (dl= SEMICOLON )? (comts= comments )? -> classDefinition(className=CSharpAngularHelper.modelHelperToController(clsNam.st.toString())baseClass=basClsclassBody=clsBdydelimiter=$dl.textcomments=comts);
    public final CSharpAngular.class_definition_return class_definition() throws RecognitionException {
        CSharpAngular.class_definition_return retval = new CSharpAngular.class_definition_return();
        retval.start = input.LT(1);


        Token dl=null;
        CSharpAngular.class_name_definition_return clsNam =null;

        CSharpAngular.class_base_return basCls =null;

        CSharpAngular.class_body_return clsBdy =null;

        CSharpAngular.comments_return comts =null;


        try {
            // CSharpAngular.g:4094:3: (clsNam= class_name_definition ( type_parameter_list )? (basCls= class_base )? ( type_parameter_constraints_clauses )? clsBdy= class_body (dl= SEMICOLON )? (comts= comments )? -> classDefinition(className=CSharpAngularHelper.modelHelperToController(clsNam.st.toString())baseClass=basClsclassBody=clsBdydelimiter=$dl.textcomments=comts))
            // CSharpAngular.g:4095:3: clsNam= class_name_definition ( type_parameter_list )? (basCls= class_base )? ( type_parameter_constraints_clauses )? clsBdy= class_body (dl= SEMICOLON )? (comts= comments )?
            {
            pushFollow(FOLLOW_class_name_definition_in_class_definition30986);
            clsNam=class_name_definition();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:4095:32: ( type_parameter_list )?
            int alt448=2;
            int LA448_0 = input.LA(1);

            if ( (LA448_0==LT) ) {
                alt448=1;
            }
            switch (alt448) {
                case 1 :
                    // CSharpAngular.g:4095:32: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_class_definition30988);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:4095:53: (basCls= class_base )?
            int alt449=2;
            int LA449_0 = input.LA(1);

            if ( (LA449_0==COLON) ) {
                alt449=1;
            }
            switch (alt449) {
                case 1 :
                    // CSharpAngular.g:4095:54: basCls= class_base
                    {
                    pushFollow(FOLLOW_class_base_in_class_definition30994);
                    basCls=class_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:4095:74: ( type_parameter_constraints_clauses )?
            int alt450=2;
            int LA450_0 = input.LA(1);

            if ( (LA450_0==IDENTIFIER) ) {
                alt450=1;
            }
            switch (alt450) {
                case 1 :
                    // CSharpAngular.g:4095:74: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_class_definition30998);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_class_body_in_class_definition31009);
            clsBdy=class_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:4096:25: (dl= SEMICOLON )?
            int alt451=2;
            int LA451_0 = input.LA(1);

            if ( (LA451_0==SEMICOLON) ) {
                alt451=1;
            }
            switch (alt451) {
                case 1 :
                    // CSharpAngular.g:4096:26: dl= SEMICOLON
                    {
                    dl=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_class_definition31014); if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:4096:41: (comts= comments )?
            int alt452=2;
            int LA452_0 = input.LA(1);

            if ( (LA452_0==SINGLE_LINE_COMMENT) ) {
                alt452=1;
            }
            else if ( (LA452_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt452=1;
            }
            switch (alt452) {
                case 1 :
                    // CSharpAngular.g:4096:42: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_class_definition31021);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 4097:3: -> classDefinition(className=CSharpAngularHelper.modelHelperToController(clsNam.st.toString())baseClass=basClsclassBody=clsBdydelimiter=$dl.textcomments=comts)
              {
                  retval.st = templateLib.getInstanceOf("classDefinition",new STAttrMap().put("className", CSharpAngularHelper.modelHelperToController(clsNam.st.toString())).put("baseClass", basCls).put("classBody", clsBdy).put("delimiter", (dl!=null?dl.getText():null)).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_definition"


    public static class struct_definition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_definition"
    // CSharpAngular.g:4099:1: struct_definition : STRUCT IDENTIFIER ( type_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( SEMICOLON )? ;
    public final CSharpAngular.struct_definition_return struct_definition() throws RecognitionException {
        CSharpAngular.struct_definition_return retval = new CSharpAngular.struct_definition_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:4100:3: ( STRUCT IDENTIFIER ( type_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( SEMICOLON )? )
            // CSharpAngular.g:4100:5: STRUCT IDENTIFIER ( type_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( SEMICOLON )?
            {
            match(input,STRUCT,FOLLOW_STRUCT_in_struct_definition31061); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_struct_definition31063); if (state.failed) return retval;

            // CSharpAngular.g:4100:23: ( type_parameter_list )?
            int alt453=2;
            int LA453_0 = input.LA(1);

            if ( (LA453_0==LT) ) {
                alt453=1;
            }
            switch (alt453) {
                case 1 :
                    // CSharpAngular.g:4100:23: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_struct_definition31065);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:4100:44: ( struct_interfaces )?
            int alt454=2;
            int LA454_0 = input.LA(1);

            if ( (LA454_0==COLON) ) {
                alt454=1;
            }
            switch (alt454) {
                case 1 :
                    // CSharpAngular.g:4100:44: struct_interfaces
                    {
                    pushFollow(FOLLOW_struct_interfaces_in_struct_definition31068);
                    struct_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:4100:63: ( type_parameter_constraints_clauses )?
            int alt455=2;
            int LA455_0 = input.LA(1);

            if ( (LA455_0==IDENTIFIER) ) {
                alt455=1;
            }
            switch (alt455) {
                case 1 :
                    // CSharpAngular.g:4100:63: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_struct_definition31071);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_struct_body_in_struct_definition31080);
            struct_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:4101:19: ( SEMICOLON )?
            int alt456=2;
            int LA456_0 = input.LA(1);

            if ( (LA456_0==SEMICOLON) ) {
                alt456=1;
            }
            switch (alt456) {
                case 1 :
                    // CSharpAngular.g:4101:19: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_struct_definition31082); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_definition"


    public static class interface_definition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_definition"
    // CSharpAngular.g:4104:1: interface_definition : INTERFACE nam= IDENTIFIER (vtpl= variant_type_parameter_list )? (ib= interface_base )? (tpcc= type_parameter_constraints_clauses )? bdy= interface_body (dlMtr= SEMICOLON )? -> interfaceDefinition(kwd=$INTERFACE.text+\" \"interfaceName=CSharpAngularHelper.modelHelperToController($nam.text)varTypLst=vtplintfcBdy=ibconstrntCls=tpccbody=bdydelimiter=$dlMtr.text);
    public final CSharpAngular.interface_definition_return interface_definition() throws RecognitionException {
        CSharpAngular.interface_definition_return retval = new CSharpAngular.interface_definition_return();
        retval.start = input.LT(1);


        Token nam=null;
        Token dlMtr=null;
        Token INTERFACE426=null;
        CSharpAngular.variant_type_parameter_list_return vtpl =null;

        CSharpAngular.interface_base_return ib =null;

        CSharpAngular.type_parameter_constraints_clauses_return tpcc =null;

        CSharpAngular.interface_body_return bdy =null;


        try {
            // CSharpAngular.g:4105:3: ( INTERFACE nam= IDENTIFIER (vtpl= variant_type_parameter_list )? (ib= interface_base )? (tpcc= type_parameter_constraints_clauses )? bdy= interface_body (dlMtr= SEMICOLON )? -> interfaceDefinition(kwd=$INTERFACE.text+\" \"interfaceName=CSharpAngularHelper.modelHelperToController($nam.text)varTypLst=vtplintfcBdy=ibconstrntCls=tpccbody=bdydelimiter=$dlMtr.text))
            // CSharpAngular.g:4106:3: INTERFACE nam= IDENTIFIER (vtpl= variant_type_parameter_list )? (ib= interface_base )? (tpcc= type_parameter_constraints_clauses )? bdy= interface_body (dlMtr= SEMICOLON )?
            {
            INTERFACE426=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_interface_definition31099); if (state.failed) return retval;

            nam=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_definition31103); if (state.failed) return retval;

            // CSharpAngular.g:4106:28: (vtpl= variant_type_parameter_list )?
            int alt457=2;
            int LA457_0 = input.LA(1);

            if ( (LA457_0==LT) ) {
                alt457=1;
            }
            switch (alt457) {
                case 1 :
                    // CSharpAngular.g:4106:29: vtpl= variant_type_parameter_list
                    {
                    pushFollow(FOLLOW_variant_type_parameter_list_in_interface_definition31108);
                    vtpl=variant_type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:4106:64: (ib= interface_base )?
            int alt458=2;
            int LA458_0 = input.LA(1);

            if ( (LA458_0==COLON) ) {
                alt458=1;
            }
            switch (alt458) {
                case 1 :
                    // CSharpAngular.g:4106:65: ib= interface_base
                    {
                    pushFollow(FOLLOW_interface_base_in_interface_definition31115);
                    ib=interface_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:4106:85: (tpcc= type_parameter_constraints_clauses )?
            int alt459=2;
            int LA459_0 = input.LA(1);

            if ( (LA459_0==IDENTIFIER) ) {
                alt459=1;
            }
            switch (alt459) {
                case 1 :
                    // CSharpAngular.g:4106:86: tpcc= type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_definition31122);
                    tpcc=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_interface_body_in_interface_definition31128);
            bdy=interface_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:4106:147: (dlMtr= SEMICOLON )?
            int alt460=2;
            int LA460_0 = input.LA(1);

            if ( (LA460_0==SEMICOLON) ) {
                alt460=1;
            }
            switch (alt460) {
                case 1 :
                    // CSharpAngular.g:4106:148: dlMtr= SEMICOLON
                    {
                    dlMtr=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_definition31133); if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 4107:3: -> interfaceDefinition(kwd=$INTERFACE.text+\" \"interfaceName=CSharpAngularHelper.modelHelperToController($nam.text)varTypLst=vtplintfcBdy=ibconstrntCls=tpccbody=bdydelimiter=$dlMtr.text)
              {
                  retval.st = templateLib.getInstanceOf("interfaceDefinition",new STAttrMap().put("kwd", (INTERFACE426!=null?INTERFACE426.getText():null)+" ").put("interfaceName", CSharpAngularHelper.modelHelperToController((nam!=null?nam.getText():null))).put("varTypLst", vtpl).put("intfcBdy", ib).put("constrntCls", tpcc).put("body", bdy).put("delimiter", (dlMtr!=null?dlMtr.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_definition"


    public static class enum_definition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_definition"
    // CSharpAngular.g:4109:1: enum_definition : ENUM IDENTIFIER (eb= enum_base )? bdy= enum_body (dlMtr= SEMICOLON )? -> enumDefinition(name=$IDENTIFIER.textbase=ebbody=bdydelimiter=$dlMtr.text);
    public final CSharpAngular.enum_definition_return enum_definition() throws RecognitionException {
        CSharpAngular.enum_definition_return retval = new CSharpAngular.enum_definition_return();
        retval.start = input.LT(1);


        Token dlMtr=null;
        Token IDENTIFIER427=null;
        CSharpAngular.enum_base_return eb =null;

        CSharpAngular.enum_body_return bdy =null;


        try {
            // CSharpAngular.g:4110:3: ( ENUM IDENTIFIER (eb= enum_base )? bdy= enum_body (dlMtr= SEMICOLON )? -> enumDefinition(name=$IDENTIFIER.textbase=ebbody=bdydelimiter=$dlMtr.text))
            // CSharpAngular.g:4111:3: ENUM IDENTIFIER (eb= enum_base )? bdy= enum_body (dlMtr= SEMICOLON )?
            {
            match(input,ENUM,FOLLOW_ENUM_in_enum_definition31184); if (state.failed) return retval;

            IDENTIFIER427=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enum_definition31186); if (state.failed) return retval;

            // CSharpAngular.g:4111:19: (eb= enum_base )?
            int alt461=2;
            int LA461_0 = input.LA(1);

            if ( (LA461_0==COLON) ) {
                alt461=1;
            }
            switch (alt461) {
                case 1 :
                    // CSharpAngular.g:4111:20: eb= enum_base
                    {
                    pushFollow(FOLLOW_enum_base_in_enum_definition31191);
                    eb=enum_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_enum_body_in_enum_definition31197);
            bdy=enum_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:4111:54: (dlMtr= SEMICOLON )?
            int alt462=2;
            int LA462_0 = input.LA(1);

            if ( (LA462_0==SEMICOLON) ) {
                alt462=1;
            }
            switch (alt462) {
                case 1 :
                    // CSharpAngular.g:4111:54: dlMtr= SEMICOLON
                    {
                    dlMtr=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_enum_definition31201); if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 4112:3: -> enumDefinition(name=$IDENTIFIER.textbase=ebbody=bdydelimiter=$dlMtr.text)
              {
                  retval.st = templateLib.getInstanceOf("enumDefinition",new STAttrMap().put("name", (IDENTIFIER427!=null?IDENTIFIER427.getText():null)).put("base", eb).put("body", bdy).put("delimiter", (dlMtr!=null?dlMtr.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_definition"


    public static class delegate_definition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_definition"
    // CSharpAngular.g:4114:1: delegate_definition : DELEGATE return_type IDENTIFIER ( variant_type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON ;
    public final CSharpAngular.delegate_definition_return delegate_definition() throws RecognitionException {
        CSharpAngular.delegate_definition_return retval = new CSharpAngular.delegate_definition_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:4115:3: ( DELEGATE return_type IDENTIFIER ( variant_type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON )
            // CSharpAngular.g:4115:5: DELEGATE return_type IDENTIFIER ( variant_type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON
            {
            match(input,DELEGATE,FOLLOW_DELEGATE_in_delegate_definition31236); if (state.failed) return retval;

            pushFollow(FOLLOW_return_type_in_delegate_definition31238);
            return_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_delegate_definition31240); if (state.failed) return retval;

            // CSharpAngular.g:4115:37: ( variant_type_parameter_list )?
            int alt463=2;
            int LA463_0 = input.LA(1);

            if ( (LA463_0==LT) ) {
                alt463=1;
            }
            switch (alt463) {
                case 1 :
                    // CSharpAngular.g:4115:37: variant_type_parameter_list
                    {
                    pushFollow(FOLLOW_variant_type_parameter_list_in_delegate_definition31242);
                    variant_type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_delegate_definition31245); if (state.failed) return retval;

            // CSharpAngular.g:4116:7: ( formal_parameter_list )?
            int alt464=2;
            int LA464_0 = input.LA(1);

            if ( (LA464_0==BOOL||LA464_0==BYTE||LA464_0==CHAR||LA464_0==DECIMAL||LA464_0==DOUBLE||LA464_0==FLOAT||LA464_0==IDENTIFIER||LA464_0==INT||LA464_0==LONG||LA464_0==OBJECT||LA464_0==OPEN_BRACKET||LA464_0==OUT||LA464_0==PARAMS||LA464_0==REF||LA464_0==SBYTE||LA464_0==SHORT||LA464_0==STRING||LA464_0==THIS||(LA464_0 >= UINT && LA464_0 <= ULONG)||LA464_0==USHORT||LA464_0==VOID) ) {
                alt464=1;
            }
            switch (alt464) {
                case 1 :
                    // CSharpAngular.g:4116:7: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_delegate_definition31253);
                    formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_delegate_definition31256); if (state.failed) return retval;

            // CSharpAngular.g:4116:43: ( type_parameter_constraints_clauses )?
            int alt465=2;
            int LA465_0 = input.LA(1);

            if ( (LA465_0==IDENTIFIER) ) {
                alt465=1;
            }
            switch (alt465) {
                case 1 :
                    // CSharpAngular.g:4116:43: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_delegate_definition31258);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_delegate_definition31261); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delegate_definition"


    public static class event_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "event_declaration2"
    // CSharpAngular.g:4118:1: event_declaration2 : EVENT type ( variable_declarators SEMICOLON | member_name OPEN_BRACE event_accessor_declarations CLOSE_BRACE ) ;
    public final CSharpAngular.event_declaration2_return event_declaration2() throws RecognitionException {
        CSharpAngular.event_declaration2_return retval = new CSharpAngular.event_declaration2_return();
        retval.start = input.LT(1);


        CSharpAngular.type_return type428 =null;


        try {
            // CSharpAngular.g:4119:3: ( EVENT type ( variable_declarators SEMICOLON | member_name OPEN_BRACE event_accessor_declarations CLOSE_BRACE ) )
            // CSharpAngular.g:4119:5: EVENT type ( variable_declarators SEMICOLON | member_name OPEN_BRACE event_accessor_declarations CLOSE_BRACE )
            {
            match(input,EVENT,FOLLOW_EVENT_in_event_declaration231273); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_event_declaration231275);
            type428=type();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) {((common_member_declaration_scope)common_member_declaration_stack.peek()).type = (type428!=null?((Object)type428.tree):null);}

            // CSharpAngular.g:4120:7: ( variable_declarators SEMICOLON | member_name OPEN_BRACE event_accessor_declarations CLOSE_BRACE )
            int alt466=2;
            int LA466_0 = input.LA(1);

            if ( (LA466_0==IDENTIFIER) ) {
                int LA466_1 = input.LA(2);

                if ( (LA466_1==ASSIGNMENT||LA466_1==COMMA||LA466_1==SEMICOLON) ) {
                    alt466=1;
                }
                else if ( (LA466_1==DOT||LA466_1==DOUBLE_COLON||LA466_1==LT||LA466_1==OPEN_BRACE) ) {
                    alt466=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 466, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 466, 0, input);

                throw nvae;

            }
            switch (alt466) {
                case 1 :
                    // CSharpAngular.g:4120:9: variable_declarators SEMICOLON
                    {
                    pushFollow(FOLLOW_variable_declarators_in_event_declaration231287);
                    variable_declarators();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_event_declaration231289); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:4121:9: member_name OPEN_BRACE event_accessor_declarations CLOSE_BRACE
                    {
                    pushFollow(FOLLOW_member_name_in_event_declaration231299);
                    member_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_event_declaration231301); if (state.failed) return retval;

                    pushFollow(FOLLOW_event_accessor_declarations_in_event_declaration231303);
                    event_accessor_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_event_declaration231305); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "event_declaration2"


    public static class field_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "field_declaration2"
    // CSharpAngular.g:4124:1: field_declaration2 : varDec= variable_declarators SEMICOLON (comts= comments )? -> fieldDeclaration2(declaration=$varDec.st.toString().trim()comments=comts);
    public final CSharpAngular.field_declaration2_return field_declaration2() throws RecognitionException {
        CSharpAngular.field_declaration2_return retval = new CSharpAngular.field_declaration2_return();
        retval.start = input.LT(1);


        CSharpAngular.variable_declarators_return varDec =null;

        CSharpAngular.comments_return comts =null;


        try {
            // CSharpAngular.g:4125:3: (varDec= variable_declarators SEMICOLON (comts= comments )? -> fieldDeclaration2(declaration=$varDec.st.toString().trim()comments=comts))
            // CSharpAngular.g:4126:3: varDec= variable_declarators SEMICOLON (comts= comments )?
            {
            pushFollow(FOLLOW_variable_declarators_in_field_declaration231330);
            varDec=variable_declarators();

            state._fsp--;
            if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration231332); if (state.failed) return retval;

            // CSharpAngular.g:4126:41: (comts= comments )?
            int alt467=2;
            int LA467_0 = input.LA(1);

            if ( (LA467_0==SINGLE_LINE_COMMENT) ) {
                alt467=1;
            }
            else if ( (LA467_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt467=1;
            }
            switch (alt467) {
                case 1 :
                    // CSharpAngular.g:4126:42: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_field_declaration231337);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 4127:3: -> fieldDeclaration2(declaration=$varDec.st.toString().trim()comments=comts)
              {
                  retval.st = templateLib.getInstanceOf("fieldDeclaration2",new STAttrMap().put("declaration", (varDec!=null?varDec.st:null).toString().trim()).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration2"


    public static class property_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "property_declaration2"
    // CSharpAngular.g:4129:1: property_declaration2 : mNam= member_name OPEN_BRACE (cmnt= comments )? ad= accessor_declarations CLOSE_BRACE -> propertyDeclaration2(memNameforDecl=NamingUtil.toCamelCase($mNam.text).trim()cmnts=cmnt);
    public final CSharpAngular.property_declaration2_return property_declaration2() throws RecognitionException {
        CSharpAngular.property_declaration2_return retval = new CSharpAngular.property_declaration2_return();
        retval.start = input.LT(1);


        CSharpAngular.member_name_return mNam =null;

        CSharpAngular.comments_return cmnt =null;

        CSharpAngular.accessor_declarations_return ad =null;


        try {
            // CSharpAngular.g:4130:3: (mNam= member_name OPEN_BRACE (cmnt= comments )? ad= accessor_declarations CLOSE_BRACE -> propertyDeclaration2(memNameforDecl=NamingUtil.toCamelCase($mNam.text).trim()cmnts=cmnt))
            // CSharpAngular.g:4131:3: mNam= member_name OPEN_BRACE (cmnt= comments )? ad= accessor_declarations CLOSE_BRACE
            {
            pushFollow(FOLLOW_member_name_in_property_declaration231370);
            mNam=member_name();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_property_declaration231372); if (state.failed) return retval;

            // CSharpAngular.g:4131:31: (cmnt= comments )?
            int alt468=2;
            int LA468_0 = input.LA(1);

            if ( ((LA468_0 >= SINGLE_LINE_COMMENT && LA468_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt468=1;
            }
            switch (alt468) {
                case 1 :
                    // CSharpAngular.g:4131:32: cmnt= comments
                    {
                    pushFollow(FOLLOW_comments_in_property_declaration231377);
                    cmnt=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_accessor_declarations_in_property_declaration231383);
            ad=accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_property_declaration231385); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 4132:3: -> propertyDeclaration2(memNameforDecl=NamingUtil.toCamelCase($mNam.text).trim()cmnts=cmnt)
              {
                  retval.st = templateLib.getInstanceOf("propertyDeclaration2",new STAttrMap().put("memNameforDecl", NamingUtil.toCamelCase((mNam!=null?input.toString(mNam.start,mNam.stop):null)).trim()).put("cmnts", cmnt));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_declaration2"


    public static class constant_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constant_declaration2"
    // CSharpAngular.g:4134:1: constant_declaration2 : CONST t= type decl= constant_declarators SEMICOLON (comts= comments )? -> constantDeclaration2(type=tdeclarators=declcomments=comts);
    public final CSharpAngular.constant_declaration2_return constant_declaration2() throws RecognitionException {
        CSharpAngular.constant_declaration2_return retval = new CSharpAngular.constant_declaration2_return();
        retval.start = input.LT(1);


        CSharpAngular.type_return t =null;

        CSharpAngular.constant_declarators_return decl =null;

        CSharpAngular.comments_return comts =null;


        try {
            // CSharpAngular.g:4135:3: ( CONST t= type decl= constant_declarators SEMICOLON (comts= comments )? -> constantDeclaration2(type=tdeclarators=declcomments=comts))
            // CSharpAngular.g:4136:3: CONST t= type decl= constant_declarators SEMICOLON (comts= comments )?
            {
            match(input,CONST,FOLLOW_CONST_in_constant_declaration231414); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_constant_declaration231418);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_constant_declarators_in_constant_declaration231422);
            decl=constant_declarators();

            state._fsp--;
            if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_constant_declaration231424); if (state.failed) return retval;

            // CSharpAngular.g:4136:52: (comts= comments )?
            int alt469=2;
            int LA469_0 = input.LA(1);

            if ( (LA469_0==SINGLE_LINE_COMMENT) ) {
                alt469=1;
            }
            else if ( (LA469_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt469=1;
            }
            switch (alt469) {
                case 1 :
                    // CSharpAngular.g:4136:53: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_constant_declaration231429);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 4137:3: -> constantDeclaration2(type=tdeclarators=declcomments=comts)
              {
                  retval.st = templateLib.getInstanceOf("constantDeclaration2",new STAttrMap().put("type", t).put("declarators", decl).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constant_declaration2"


    public static class indexer_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "indexer_declaration2"
    // CSharpAngular.g:4139:1: indexer_declaration2 : THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE ad= accessor_declarations CLOSE_BRACE -> indexerDeclaration2(formlParLst=fplaccsDecls=ad);
    public final CSharpAngular.indexer_declaration2_return indexer_declaration2() throws RecognitionException {
        CSharpAngular.indexer_declaration2_return retval = new CSharpAngular.indexer_declaration2_return();
        retval.start = input.LT(1);


        CSharpAngular.formal_parameter_list_return fpl =null;

        CSharpAngular.accessor_declarations_return ad =null;


        try {
            // CSharpAngular.g:4140:3: ( THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE ad= accessor_declarations CLOSE_BRACE -> indexerDeclaration2(formlParLst=fplaccsDecls=ad))
            // CSharpAngular.g:4141:3: THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE ad= accessor_declarations CLOSE_BRACE
            {
            match(input,THIS,FOLLOW_THIS_in_indexer_declaration231464); if (state.failed) return retval;

            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_indexer_declaration231466); if (state.failed) return retval;

            pushFollow(FOLLOW_formal_parameter_list_in_indexer_declaration231470);
            fpl=formal_parameter_list();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_indexer_declaration231472); if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_indexer_declaration231474); if (state.failed) return retval;

            pushFollow(FOLLOW_accessor_declarations_in_indexer_declaration231478);
            ad=accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_indexer_declaration231480); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 4142:3: -> indexerDeclaration2(formlParLst=fplaccsDecls=ad)
              {
                  retval.st = templateLib.getInstanceOf("indexerDeclaration2",new STAttrMap().put("formlParLst", fpl).put("accsDecls", ad));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexer_declaration2"


    public static class destructor_definition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "destructor_definition"
    // CSharpAngular.g:4144:1: destructor_definition : TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body ;
    public final CSharpAngular.destructor_definition_return destructor_definition() throws RecognitionException {
        CSharpAngular.destructor_definition_return retval = new CSharpAngular.destructor_definition_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:4145:3: ( TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body )
            // CSharpAngular.g:4145:5: TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body
            {
            match(input,TILDE,FOLLOW_TILDE_in_destructor_definition31506); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_destructor_definition31508); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_destructor_definition31510); if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_destructor_definition31512); if (state.failed) return retval;

            pushFollow(FOLLOW_destructor_body_in_destructor_definition31514);
            destructor_body();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "destructor_definition"


    public static class constructor_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_declaration2"
    // CSharpAngular.g:4147:1: constructor_declaration2 : id= IDENTIFIER OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (cotrInit= constructor_initializer )? (cmnt= comments )? bdy= body -> constructorDeclaration2(constrName=$id.textformalParamLst=fplconstrInit=cotrInitcmnts=cmntconstrBdy=bdy);
    public final CSharpAngular.constructor_declaration2_return constructor_declaration2() throws RecognitionException {
        CSharpAngular.constructor_declaration2_return retval = new CSharpAngular.constructor_declaration2_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharpAngular.formal_parameter_list_return fpl =null;

        CSharpAngular.constructor_initializer_return cotrInit =null;

        CSharpAngular.comments_return cmnt =null;

        CSharpAngular.body_return bdy =null;


        try {
            // CSharpAngular.g:4148:3: (id= IDENTIFIER OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (cotrInit= constructor_initializer )? (cmnt= comments )? bdy= body -> constructorDeclaration2(constrName=$id.textformalParamLst=fplconstrInit=cotrInitcmnts=cmntconstrBdy=bdy))
            // CSharpAngular.g:4149:3: id= IDENTIFIER OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (cotrInit= constructor_initializer )? (cmnt= comments )? bdy= body
            {
            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_constructor_declaration231531); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_constructor_declaration231533); if (state.failed) return retval;

            // CSharpAngular.g:4149:29: (fpl= formal_parameter_list )?
            int alt470=2;
            int LA470_0 = input.LA(1);

            if ( (LA470_0==BOOL||LA470_0==BYTE||LA470_0==CHAR||LA470_0==DECIMAL||LA470_0==DOUBLE||LA470_0==FLOAT||LA470_0==IDENTIFIER||LA470_0==INT||LA470_0==LONG||LA470_0==OBJECT||LA470_0==OPEN_BRACKET||LA470_0==OUT||LA470_0==PARAMS||LA470_0==REF||LA470_0==SBYTE||LA470_0==SHORT||LA470_0==STRING||LA470_0==THIS||(LA470_0 >= UINT && LA470_0 <= ULONG)||LA470_0==USHORT||LA470_0==VOID) ) {
                alt470=1;
            }
            switch (alt470) {
                case 1 :
                    // CSharpAngular.g:4149:30: fpl= formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_constructor_declaration231538);
                    fpl=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_constructor_declaration231542); if (state.failed) return retval;

            // CSharpAngular.g:4149:71: (cotrInit= constructor_initializer )?
            int alt471=2;
            int LA471_0 = input.LA(1);

            if ( (LA471_0==COLON) ) {
                alt471=1;
            }
            switch (alt471) {
                case 1 :
                    // CSharpAngular.g:4149:72: cotrInit= constructor_initializer
                    {
                    pushFollow(FOLLOW_constructor_initializer_in_constructor_declaration231547);
                    cotrInit=constructor_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:4149:107: (cmnt= comments )?
            int alt472=2;
            int LA472_0 = input.LA(1);

            if ( ((LA472_0 >= SINGLE_LINE_COMMENT && LA472_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt472=1;
            }
            switch (alt472) {
                case 1 :
                    // CSharpAngular.g:4149:108: cmnt= comments
                    {
                    pushFollow(FOLLOW_comments_in_constructor_declaration231554);
                    cmnt=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_body_in_constructor_declaration231560);
            bdy=body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 4150:3: -> constructorDeclaration2(constrName=$id.textformalParamLst=fplconstrInit=cotrInitcmnts=cmntconstrBdy=bdy)
              {
                  retval.st = templateLib.getInstanceOf("constructorDeclaration2",new STAttrMap().put("constrName", (id!=null?id.getText():null)).put("formalParamLst", fpl).put("constrInit", cotrInit).put("cmnts", cmnt).put("constrBdy", bdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_declaration2"


    public static class comments_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "comments"
    // CSharpAngular.g:4153:1: comments : (comLst+= comment )+ -> comments(list=$comLst);
    public final CSharpAngular.comments_return comments() throws RecognitionException {
        CSharpAngular.comments_return retval = new CSharpAngular.comments_return();
        retval.start = input.LT(1);


        List list_comLst=null;
        RuleReturnScope comLst = null;
        try {
            // CSharpAngular.g:4154:3: ( (comLst+= comment )+ -> comments(list=$comLst))
            // CSharpAngular.g:4155:3: (comLst+= comment )+
            {
            // CSharpAngular.g:4155:3: (comLst+= comment )+
            int cnt473=0;
            loop473:
            do {
                int alt473=2;
                int LA473_0 = input.LA(1);

                if ( (LA473_0==SINGLE_LINE_COMMENT) ) {
                    alt473=1;
                }
                else if ( (LA473_0==SINGLE_LINE_DOC_COMMENT) ) {
                    alt473=1;
                }


                switch (alt473) {
            	case 1 :
            	    // CSharpAngular.g:4155:4: comLst+= comment
            	    {
            	    pushFollow(FOLLOW_comment_in_comments31606);
            	    comLst=comment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_comLst==null) list_comLst=new ArrayList();
            	    list_comLst.add(comLst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt473 >= 1 ) break loop473;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(473, input);
                        throw eee;
                }
                cnt473++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 4156:3: -> comments(list=$comLst)
              {
                  retval.st = templateLib.getInstanceOf("comments",new STAttrMap().put("list", list_comLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "comments"


    public static class comment_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "comment"
    // CSharpAngular.g:4159:1: comment : ( SINGLE_LINE_COMMENT -> comment(content=$SINGLE_LINE_COMMENT.text)| SINGLE_LINE_DOC_COMMENT -> comment(content=CSharpAngularHelper.docCommentHandler($SINGLE_LINE_DOC_COMMENT.text)));
    public final CSharpAngular.comment_return comment() throws RecognitionException {
        CSharpAngular.comment_return retval = new CSharpAngular.comment_return();
        retval.start = input.LT(1);


        Token SINGLE_LINE_COMMENT429=null;
        Token SINGLE_LINE_DOC_COMMENT430=null;

        try {
            // CSharpAngular.g:4160:3: ( SINGLE_LINE_COMMENT -> comment(content=$SINGLE_LINE_COMMENT.text)| SINGLE_LINE_DOC_COMMENT -> comment(content=CSharpAngularHelper.docCommentHandler($SINGLE_LINE_DOC_COMMENT.text)))
            int alt474=2;
            int LA474_0 = input.LA(1);

            if ( (LA474_0==SINGLE_LINE_COMMENT) ) {
                alt474=1;
            }
            else if ( (LA474_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt474=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 474, 0, input);

                throw nvae;

            }
            switch (alt474) {
                case 1 :
                    // CSharpAngular.g:4161:3: SINGLE_LINE_COMMENT
                    {
                    SINGLE_LINE_COMMENT429=(Token)match(input,SINGLE_LINE_COMMENT,FOLLOW_SINGLE_LINE_COMMENT_in_comment31633); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4162:3: -> comment(content=$SINGLE_LINE_COMMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("comment",new STAttrMap().put("content", (SINGLE_LINE_COMMENT429!=null?SINGLE_LINE_COMMENT429.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:4163:4: SINGLE_LINE_DOC_COMMENT
                    {
                    SINGLE_LINE_DOC_COMMENT430=(Token)match(input,SINGLE_LINE_DOC_COMMENT,FOLLOW_SINGLE_LINE_DOC_COMMENT_in_comment31650); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4164:3: -> comment(content=CSharpAngularHelper.docCommentHandler($SINGLE_LINE_DOC_COMMENT.text))
                      {
                          retval.st = templateLib.getInstanceOf("comment",new STAttrMap().put("content", CSharpAngularHelper.docCommentHandler((SINGLE_LINE_DOC_COMMENT430!=null?SINGLE_LINE_DOC_COMMENT430.getText():null))));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "comment"


    public static class method_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_declaration2"
    // CSharpAngular.g:4167:1: method_declaration2 : mthdNam= method_member_name (parLst= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (cmts= comments )? (cluses= type_parameter_constraints_clauses )? mBdy= method_body -> methodDeclaration2(methodName=mthdNamtypeParamLst=parLstformalParamLst=fplcmnts=cmtsparamClauses=clusesmethodBody=mBdy);
    public final CSharpAngular.method_declaration2_return method_declaration2() throws RecognitionException {
        CSharpAngular.method_declaration2_return retval = new CSharpAngular.method_declaration2_return();
        retval.start = input.LT(1);


        CSharpAngular.method_member_name_return mthdNam =null;

        CSharpAngular.type_parameter_list_return parLst =null;

        CSharpAngular.formal_parameter_list_return fpl =null;

        CSharpAngular.comments_return cmts =null;

        CSharpAngular.type_parameter_constraints_clauses_return cluses =null;

        CSharpAngular.method_body_return mBdy =null;


        try {
            // CSharpAngular.g:4168:3: (mthdNam= method_member_name (parLst= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (cmts= comments )? (cluses= type_parameter_constraints_clauses )? mBdy= method_body -> methodDeclaration2(methodName=mthdNamtypeParamLst=parLstformalParamLst=fplcmnts=cmtsparamClauses=clusesmethodBody=mBdy))
            // CSharpAngular.g:4169:3: mthdNam= method_member_name (parLst= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (cmts= comments )? (cluses= type_parameter_constraints_clauses )? mBdy= method_body
            {
            pushFollow(FOLLOW_method_member_name_in_method_declaration231680);
            mthdNam=method_member_name();

            state._fsp--;
            if (state.failed) return retval;

            // CSharpAngular.g:4169:30: (parLst= type_parameter_list )?
            int alt475=2;
            int LA475_0 = input.LA(1);

            if ( (LA475_0==LT) ) {
                alt475=1;
            }
            switch (alt475) {
                case 1 :
                    // CSharpAngular.g:4169:31: parLst= type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_method_declaration231685);
                    parLst=type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_method_declaration231689); if (state.failed) return retval;

            // CSharpAngular.g:4169:72: (fpl= formal_parameter_list )?
            int alt476=2;
            int LA476_0 = input.LA(1);

            if ( (LA476_0==BOOL||LA476_0==BYTE||LA476_0==CHAR||LA476_0==DECIMAL||LA476_0==DOUBLE||LA476_0==FLOAT||LA476_0==IDENTIFIER||LA476_0==INT||LA476_0==LONG||LA476_0==OBJECT||LA476_0==OPEN_BRACKET||LA476_0==OUT||LA476_0==PARAMS||LA476_0==REF||LA476_0==SBYTE||LA476_0==SHORT||LA476_0==STRING||LA476_0==THIS||(LA476_0 >= UINT && LA476_0 <= ULONG)||LA476_0==USHORT||LA476_0==VOID) ) {
                alt476=1;
            }
            switch (alt476) {
                case 1 :
                    // CSharpAngular.g:4169:73: fpl= formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_method_declaration231694);
                    fpl=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_method_declaration231698); if (state.failed) return retval;

            // CSharpAngular.g:4169:114: (cmts= comments )?
            int alt477=2;
            int LA477_0 = input.LA(1);

            if ( ((LA477_0 >= SINGLE_LINE_COMMENT && LA477_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt477=1;
            }
            switch (alt477) {
                case 1 :
                    // CSharpAngular.g:4169:115: cmts= comments
                    {
                    pushFollow(FOLLOW_comments_in_method_declaration231703);
                    cmts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharpAngular.g:4170:7: (cluses= type_parameter_constraints_clauses )?
            int alt478=2;
            int LA478_0 = input.LA(1);

            if ( (LA478_0==IDENTIFIER) ) {
                alt478=1;
            }
            switch (alt478) {
                case 1 :
                    // CSharpAngular.g:4170:8: cluses= type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_method_declaration231716);
                    cluses=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_method_body_in_method_declaration231722);
            mBdy=method_body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 4171:3: -> methodDeclaration2(methodName=mthdNamtypeParamLst=parLstformalParamLst=fplcmnts=cmtsparamClauses=clusesmethodBody=mBdy)
              {
                  retval.st = templateLib.getInstanceOf("methodDeclaration2",new STAttrMap().put("methodName", mthdNam).put("typeParamLst", parLst).put("formalParamLst", fpl).put("cmnts", cmts).put("paramClauses", cluses).put("methodBody", mBdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration2"


    public static class method_member_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_member_name"
    // CSharpAngular.g:4174:1: method_member_name : mName= method_member_name2 -> methodMemberName(methodName=$mName.st.toString().trim());
    public final CSharpAngular.method_member_name_return method_member_name() throws RecognitionException {
        CSharpAngular.method_member_name_return retval = new CSharpAngular.method_member_name_return();
        retval.start = input.LT(1);


        CSharpAngular.method_member_name2_return mName =null;


        try {
            // CSharpAngular.g:4175:3: (mName= method_member_name2 -> methodMemberName(methodName=$mName.st.toString().trim()))
            // CSharpAngular.g:4176:3: mName= method_member_name2
            {
            pushFollow(FOLLOW_method_member_name2_in_method_member_name31770);
            mName=method_member_name2();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 4177:3: -> methodMemberName(methodName=$mName.st.toString().trim())
              {
                  retval.st = templateLib.getInstanceOf("methodMemberName",new STAttrMap().put("methodName", (mName!=null?mName.st:null).toString().trim()));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_member_name"


    public static class method_member_name2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_member_name2"
    // CSharpAngular.g:4179:1: method_member_name2 : (strtId= IDENTIFIER (lst+= method_member_name2_chld )* -> methodMemberName2(startId=NamingUtil.toCamelCase($strtId.text)list=$lst)|id1= IDENTIFIER DOUBLE_COLON id2= IDENTIFIER (lst+= method_member_name2_chld )* -> methodMemberName2(startId=$id1.text+\" \"+$id2.textlist=$lst));
    public final CSharpAngular.method_member_name2_return method_member_name2() throws RecognitionException {
        CSharpAngular.method_member_name2_return retval = new CSharpAngular.method_member_name2_return();
        retval.start = input.LT(1);


        Token strtId=null;
        Token id1=null;
        Token id2=null;
        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharpAngular.g:4180:3: (strtId= IDENTIFIER (lst+= method_member_name2_chld )* -> methodMemberName2(startId=NamingUtil.toCamelCase($strtId.text)list=$lst)|id1= IDENTIFIER DOUBLE_COLON id2= IDENTIFIER (lst+= method_member_name2_chld )* -> methodMemberName2(startId=$id1.text+\" \"+$id2.textlist=$lst))
            int alt481=2;
            int LA481_0 = input.LA(1);

            if ( (LA481_0==IDENTIFIER) ) {
                int LA481_1 = input.LA(2);

                if ( (LA481_1==DOUBLE_COLON) ) {
                    alt481=2;
                }
                else if ( (LA481_1==DOT||LA481_1==LT||LA481_1==OPEN_PARENS) ) {
                    alt481=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 481, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 481, 0, input);

                throw nvae;

            }
            switch (alt481) {
                case 1 :
                    // CSharpAngular.g:4181:3: strtId= IDENTIFIER (lst+= method_member_name2_chld )*
                    {
                    strtId=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_method_member_name231797); if (state.failed) return retval;

                    // CSharpAngular.g:4181:21: (lst+= method_member_name2_chld )*
                    loop479:
                    do {
                        int alt479=2;
                        alt479 = dfa479.predict(input);
                        switch (alt479) {
                    	case 1 :
                    	    // CSharpAngular.g:4181:22: lst+= method_member_name2_chld
                    	    {
                    	    pushFollow(FOLLOW_method_member_name2_chld_in_method_member_name231802);
                    	    lst=method_member_name2_chld();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_lst==null) list_lst=new ArrayList();
                    	    list_lst.add(lst.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    break loop479;
                        }
                    } while (true);


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4182:3: -> methodMemberName2(startId=NamingUtil.toCamelCase($strtId.text)list=$lst)
                      {
                          retval.st = templateLib.getInstanceOf("methodMemberName2",new STAttrMap().put("startId", NamingUtil.toCamelCase((strtId!=null?strtId.getText():null))).put("list", list_lst));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:4183:5: id1= IDENTIFIER DOUBLE_COLON id2= IDENTIFIER (lst+= method_member_name2_chld )*
                    {
                    id1=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_method_member_name231826); if (state.failed) return retval;

                    match(input,DOUBLE_COLON,FOLLOW_DOUBLE_COLON_in_method_member_name231828); if (state.failed) return retval;

                    id2=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_method_member_name231832); if (state.failed) return retval;

                    // CSharpAngular.g:4183:48: (lst+= method_member_name2_chld )*
                    loop480:
                    do {
                        int alt480=2;
                        alt480 = dfa480.predict(input);
                        switch (alt480) {
                    	case 1 :
                    	    // CSharpAngular.g:4183:49: lst+= method_member_name2_chld
                    	    {
                    	    pushFollow(FOLLOW_method_member_name2_chld_in_method_member_name231837);
                    	    lst=method_member_name2_chld();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_lst==null) list_lst=new ArrayList();
                    	    list_lst.add(lst.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    break loop480;
                        }
                    } while (true);


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4184:3: -> methodMemberName2(startId=$id1.text+\" \"+$id2.textlist=$lst)
                      {
                          retval.st = templateLib.getInstanceOf("methodMemberName2",new STAttrMap().put("startId", (id1!=null?id1.getText():null)+" "+(id2!=null?id2.getText():null)).put("list", list_lst));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_member_name2"


    public static class method_member_name2_chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_member_name2_chld"
    // CSharpAngular.g:4187:1: method_member_name2_chld : tal= type_argument_list_opt DOT eId= IDENTIFIER -> methodMemberName2Chld(typArglst=talendId=NamingUtil.toCamelCase($eId.text));
    public final CSharpAngular.method_member_name2_chld_return method_member_name2_chld() throws RecognitionException {
        CSharpAngular.method_member_name2_chld_return retval = new CSharpAngular.method_member_name2_chld_return();
        retval.start = input.LT(1);


        Token eId=null;
        CSharpAngular.type_argument_list_opt_return tal =null;


        try {
            // CSharpAngular.g:4188:3: (tal= type_argument_list_opt DOT eId= IDENTIFIER -> methodMemberName2Chld(typArglst=talendId=NamingUtil.toCamelCase($eId.text)))
            // CSharpAngular.g:4189:3: tal= type_argument_list_opt DOT eId= IDENTIFIER
            {
            pushFollow(FOLLOW_type_argument_list_opt_in_method_member_name2_chld31872);
            tal=type_argument_list_opt();

            state._fsp--;
            if (state.failed) return retval;

            match(input,DOT,FOLLOW_DOT_in_method_member_name2_chld31874); if (state.failed) return retval;

            eId=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_method_member_name2_chld31878); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 4190:3: -> methodMemberName2Chld(typArglst=talendId=NamingUtil.toCamelCase($eId.text))
              {
                  retval.st = templateLib.getInstanceOf("methodMemberName2Chld",new STAttrMap().put("typArglst", tal).put("endId", NamingUtil.toCamelCase((eId!=null?eId.getText():null))));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_member_name2_chld"


    public static class operator_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_declaration2"
    // CSharpAngular.g:4192:1: operator_declaration2 : OPERATOR overloadable_operator OPEN_PARENS type IDENTIFIER ( COMMA type IDENTIFIER )? CLOSE_PARENS operator_body ;
    public final CSharpAngular.operator_declaration2_return operator_declaration2() throws RecognitionException {
        CSharpAngular.operator_declaration2_return retval = new CSharpAngular.operator_declaration2_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:4193:3: ( OPERATOR overloadable_operator OPEN_PARENS type IDENTIFIER ( COMMA type IDENTIFIER )? CLOSE_PARENS operator_body )
            // CSharpAngular.g:4193:5: OPERATOR overloadable_operator OPEN_PARENS type IDENTIFIER ( COMMA type IDENTIFIER )? CLOSE_PARENS operator_body
            {
            match(input,OPERATOR,FOLLOW_OPERATOR_in_operator_declaration231904); if (state.failed) return retval;

            pushFollow(FOLLOW_overloadable_operator_in_operator_declaration231906);
            overloadable_operator();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_operator_declaration231908); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_operator_declaration231910);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_operator_declaration231912); if (state.failed) return retval;

            // CSharpAngular.g:4194:10: ( COMMA type IDENTIFIER )?
            int alt482=2;
            int LA482_0 = input.LA(1);

            if ( (LA482_0==COMMA) ) {
                alt482=1;
            }
            switch (alt482) {
                case 1 :
                    // CSharpAngular.g:4194:11: COMMA type IDENTIFIER
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_operator_declaration231924); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_operator_declaration231926);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_operator_declaration231928); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_operator_declaration231932); if (state.failed) return retval;

            pushFollow(FOLLOW_operator_body_in_operator_declaration231934);
            operator_body();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_declaration2"


    public static class interface_method_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_method_declaration2"
    // CSharpAngular.g:4196:1: interface_method_declaration2 : IDENTIFIER ( type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON ;
    public final CSharpAngular.interface_method_declaration2_return interface_method_declaration2() throws RecognitionException {
        CSharpAngular.interface_method_declaration2_return retval = new CSharpAngular.interface_method_declaration2_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:4197:3: ( IDENTIFIER ( type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON )
            // CSharpAngular.g:4197:5: IDENTIFIER ( type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_method_declaration231946); if (state.failed) return retval;

            // CSharpAngular.g:4197:16: ( type_parameter_list )?
            int alt483=2;
            int LA483_0 = input.LA(1);

            if ( (LA483_0==LT) ) {
                alt483=1;
            }
            switch (alt483) {
                case 1 :
                    // CSharpAngular.g:4197:16: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_interface_method_declaration231948);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_interface_method_declaration231951); if (state.failed) return retval;

            // CSharpAngular.g:4197:49: ( formal_parameter_list )?
            int alt484=2;
            int LA484_0 = input.LA(1);

            if ( (LA484_0==BOOL||LA484_0==BYTE||LA484_0==CHAR||LA484_0==DECIMAL||LA484_0==DOUBLE||LA484_0==FLOAT||LA484_0==IDENTIFIER||LA484_0==INT||LA484_0==LONG||LA484_0==OBJECT||LA484_0==OPEN_BRACKET||LA484_0==OUT||LA484_0==PARAMS||LA484_0==REF||LA484_0==SBYTE||LA484_0==SHORT||LA484_0==STRING||LA484_0==THIS||(LA484_0 >= UINT && LA484_0 <= ULONG)||LA484_0==USHORT||LA484_0==VOID) ) {
                alt484=1;
            }
            switch (alt484) {
                case 1 :
                    // CSharpAngular.g:4197:49: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_interface_method_declaration231953);
                    formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_interface_method_declaration231956); if (state.failed) return retval;

            // CSharpAngular.g:4197:85: ( type_parameter_constraints_clauses )?
            int alt485=2;
            int LA485_0 = input.LA(1);

            if ( (LA485_0==IDENTIFIER) ) {
                alt485=1;
            }
            switch (alt485) {
                case 1 :
                    // CSharpAngular.g:4197:85: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration231958);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_method_declaration231961); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_method_declaration2"


    public static class interface_property_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_property_declaration2"
    // CSharpAngular.g:4199:1: interface_property_declaration2 : IDENTIFIER OPEN_BRACE interface_accessors CLOSE_BRACE ;
    public final CSharpAngular.interface_property_declaration2_return interface_property_declaration2() throws RecognitionException {
        CSharpAngular.interface_property_declaration2_return retval = new CSharpAngular.interface_property_declaration2_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:4200:3: ( IDENTIFIER OPEN_BRACE interface_accessors CLOSE_BRACE )
            // CSharpAngular.g:4200:5: IDENTIFIER OPEN_BRACE interface_accessors CLOSE_BRACE
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_property_declaration231973); if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_property_declaration231975); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_accessors_in_interface_property_declaration231977);
            interface_accessors();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_property_declaration231979); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_property_declaration2"


    public static class interface_event_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_event_declaration2"
    // CSharpAngular.g:4202:1: interface_event_declaration2 : EVENT type IDENTIFIER SEMICOLON ;
    public final CSharpAngular.interface_event_declaration2_return interface_event_declaration2() throws RecognitionException {
        CSharpAngular.interface_event_declaration2_return retval = new CSharpAngular.interface_event_declaration2_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:4203:3: ( EVENT type IDENTIFIER SEMICOLON )
            // CSharpAngular.g:4203:5: EVENT type IDENTIFIER SEMICOLON
            {
            match(input,EVENT,FOLLOW_EVENT_in_interface_event_declaration231991); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_interface_event_declaration231993);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_event_declaration231995); if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_event_declaration231997); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_event_declaration2"


    public static class interface_indexer_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_indexer_declaration2"
    // CSharpAngular.g:4205:1: interface_indexer_declaration2 : THIS OPEN_BRACKET formal_parameter_list CLOSE_BRACKET OPEN_BRACE interface_accessors CLOSE_BRACE ;
    public final CSharpAngular.interface_indexer_declaration2_return interface_indexer_declaration2() throws RecognitionException {
        CSharpAngular.interface_indexer_declaration2_return retval = new CSharpAngular.interface_indexer_declaration2_return();
        retval.start = input.LT(1);


        try {
            // CSharpAngular.g:4206:3: ( THIS OPEN_BRACKET formal_parameter_list CLOSE_BRACKET OPEN_BRACE interface_accessors CLOSE_BRACE )
            // CSharpAngular.g:4207:3: THIS OPEN_BRACKET formal_parameter_list CLOSE_BRACKET OPEN_BRACE interface_accessors CLOSE_BRACE
            {
            match(input,THIS,FOLLOW_THIS_in_interface_indexer_declaration232012); if (state.failed) return retval;

            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_interface_indexer_declaration232014); if (state.failed) return retval;

            pushFollow(FOLLOW_formal_parameter_list_in_interface_indexer_declaration232016);
            formal_parameter_list();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_interface_indexer_declaration232018); if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_indexer_declaration232020); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_accessors_in_interface_indexer_declaration232022);
            interface_accessors();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_indexer_declaration232024); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_indexer_declaration2"


    public static class member_access2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_access2"
    // CSharpAngular.g:4210:1: member_access2 : ( ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\"/1000 \")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\"/60000 \")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".getMilliseconds()\")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".getSeconds()\")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".getMinutes()\")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".getHours()\")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".getDate()\")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".toLocaleDateString()\")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".getDay()\")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".getFullYear()\")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".length\")| DOT id= IDENTIFIER tal= type_argument_list_opt -> memberAccess2(memName=NamingUtil.toCamelCase($id.text)argLst=tal));
    public final CSharpAngular.member_access2_return member_access2() throws RecognitionException {
        CSharpAngular.member_access2_return retval = new CSharpAngular.member_access2_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharpAngular.type_argument_list_opt_return tal =null;


        try {
            // CSharpAngular.g:4211:3: ( ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\"/1000 \")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\"/60000 \")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".getMilliseconds()\")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".getSeconds()\")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".getMinutes()\")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".getHours()\")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".getDate()\")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".toLocaleDateString()\")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".getDay()\")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".getFullYear()\")| ( ({...}?)=> DOT IDENTIFIER ) -> text(value=\".length\")| DOT id= IDENTIFIER tal= type_argument_list_opt -> memberAccess2(memName=NamingUtil.toCamelCase($id.text)argLst=tal))
            int alt486=12;
            int LA486_0 = input.LA(1);

            if ( (LA486_0==DOT) ) {
                int LA486_1 = input.LA(2);

                if ( (LA486_1==IDENTIFIER) ) {
                    int LA486_2 = input.LA(3);

                    if ( (synpred89_CSharpAngular()) ) {
                        alt486=1;
                    }
                    else if ( (synpred90_CSharpAngular()) ) {
                        alt486=2;
                    }
                    else if ( (synpred91_CSharpAngular()) ) {
                        alt486=3;
                    }
                    else if ( (synpred92_CSharpAngular()) ) {
                        alt486=4;
                    }
                    else if ( (synpred93_CSharpAngular()) ) {
                        alt486=5;
                    }
                    else if ( (synpred94_CSharpAngular()) ) {
                        alt486=6;
                    }
                    else if ( (synpred95_CSharpAngular()) ) {
                        alt486=7;
                    }
                    else if ( (synpred96_CSharpAngular()) ) {
                        alt486=8;
                    }
                    else if ( (synpred97_CSharpAngular()) ) {
                        alt486=9;
                    }
                    else if ( (synpred98_CSharpAngular()) ) {
                        alt486=10;
                    }
                    else if ( (synpred99_CSharpAngular()) ) {
                        alt486=11;
                    }
                    else if ( (true) ) {
                        alt486=12;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 486, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 486, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 486, 0, input);

                throw nvae;

            }
            switch (alt486) {
                case 1 :
                    // CSharpAngular.g:4212:3: ( ({...}?)=> DOT IDENTIFIER )
                    {
                    // CSharpAngular.g:4212:3: ( ({...}?)=> DOT IDENTIFIER )
                    // CSharpAngular.g:4212:4: ({...}?)=> DOT IDENTIFIER
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access232047); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access232049); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4213:3: -> text(value=\"/1000 \")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "/1000 "));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharpAngular.g:4215:3: ( ({...}?)=> DOT IDENTIFIER )
                    {
                    // CSharpAngular.g:4215:3: ( ({...}?)=> DOT IDENTIFIER )
                    // CSharpAngular.g:4215:4: ({...}?)=> DOT IDENTIFIER
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access232077); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access232079); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4216:3: -> text(value=\"/60000 \")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "/60000 "));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharpAngular.g:4218:3: ( ({...}?)=> DOT IDENTIFIER )
                    {
                    // CSharpAngular.g:4218:3: ( ({...}?)=> DOT IDENTIFIER )
                    // CSharpAngular.g:4218:4: ({...}?)=> DOT IDENTIFIER
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access232107); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access232109); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4219:3: -> text(value=\".getMilliseconds()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".getMilliseconds()"));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharpAngular.g:4221:3: ( ({...}?)=> DOT IDENTIFIER )
                    {
                    // CSharpAngular.g:4221:3: ( ({...}?)=> DOT IDENTIFIER )
                    // CSharpAngular.g:4221:4: ({...}?)=> DOT IDENTIFIER
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access232136); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access232138); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4222:3: -> text(value=\".getSeconds()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".getSeconds()"));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharpAngular.g:4224:3: ( ({...}?)=> DOT IDENTIFIER )
                    {
                    // CSharpAngular.g:4224:3: ( ({...}?)=> DOT IDENTIFIER )
                    // CSharpAngular.g:4224:4: ({...}?)=> DOT IDENTIFIER
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access232165); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access232167); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4225:3: -> text(value=\".getMinutes()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".getMinutes()"));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharpAngular.g:4227:3: ( ({...}?)=> DOT IDENTIFIER )
                    {
                    // CSharpAngular.g:4227:3: ( ({...}?)=> DOT IDENTIFIER )
                    // CSharpAngular.g:4227:4: ({...}?)=> DOT IDENTIFIER
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access232194); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access232196); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4228:3: -> text(value=\".getHours()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".getHours()"));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharpAngular.g:4230:3: ( ({...}?)=> DOT IDENTIFIER )
                    {
                    // CSharpAngular.g:4230:3: ( ({...}?)=> DOT IDENTIFIER )
                    // CSharpAngular.g:4230:4: ({...}?)=> DOT IDENTIFIER
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access232223); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access232225); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4231:3: -> text(value=\".getDate()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".getDate()"));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharpAngular.g:4233:3: ( ({...}?)=> DOT IDENTIFIER )
                    {
                    // CSharpAngular.g:4233:3: ( ({...}?)=> DOT IDENTIFIER )
                    // CSharpAngular.g:4233:4: ({...}?)=> DOT IDENTIFIER
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access232252); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access232254); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4234:3: -> text(value=\".toLocaleDateString()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".toLocaleDateString()"));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharpAngular.g:4236:3: ( ({...}?)=> DOT IDENTIFIER )
                    {
                    // CSharpAngular.g:4236:3: ( ({...}?)=> DOT IDENTIFIER )
                    // CSharpAngular.g:4236:4: ({...}?)=> DOT IDENTIFIER
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access232281); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access232283); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4237:3: -> text(value=\".getDay()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".getDay()"));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharpAngular.g:4239:3: ( ({...}?)=> DOT IDENTIFIER )
                    {
                    // CSharpAngular.g:4239:3: ( ({...}?)=> DOT IDENTIFIER )
                    // CSharpAngular.g:4239:4: ({...}?)=> DOT IDENTIFIER
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access232310); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access232312); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4240:3: -> text(value=\".getFullYear()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".getFullYear()"));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharpAngular.g:4242:3: ( ({...}?)=> DOT IDENTIFIER )
                    {
                    // CSharpAngular.g:4242:3: ( ({...}?)=> DOT IDENTIFIER )
                    // CSharpAngular.g:4242:4: ({...}?)=> DOT IDENTIFIER
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access232339); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access232341); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4243:3: -> text(value=\".length\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ".length"));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharpAngular.g:4245:3: DOT id= IDENTIFIER tal= type_argument_list_opt
                    {
                    match(input,DOT,FOLLOW_DOT_in_member_access232361); if (state.failed) return retval;

                    id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access232365); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_argument_list_opt_in_member_access232369);
                    tal=type_argument_list_opt();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 4246:3: -> memberAccess2(memName=NamingUtil.toCamelCase($id.text)argLst=tal)
                      {
                          retval.st = templateLib.getInstanceOf("memberAccess2",new STAttrMap().put("memName", NamingUtil.toCamelCase((id!=null?id.getText():null))).put("argLst", tal));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_access2"


    public static class method_invocation2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_invocation2"
    // CSharpAngular.g:4249:1: method_invocation2 : OPEN_PARENS (al= argument_list )? CLOSE_PARENS -> methodInvocation2(argLst=al);
    public final CSharpAngular.method_invocation2_return method_invocation2() throws RecognitionException {
        CSharpAngular.method_invocation2_return retval = new CSharpAngular.method_invocation2_return();
        retval.start = input.LT(1);


        CSharpAngular.argument_list_return al =null;


        try {
            // CSharpAngular.g:4250:3: ( OPEN_PARENS (al= argument_list )? CLOSE_PARENS -> methodInvocation2(argLst=al))
            // CSharpAngular.g:4251:3: OPEN_PARENS (al= argument_list )? CLOSE_PARENS
            {
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_method_invocation232401); if (state.failed) return retval;

            // CSharpAngular.g:4251:15: (al= argument_list )?
            int alt487=2;
            int LA487_0 = input.LA(1);

            if ( (LA487_0==AMP||(LA487_0 >= BANG && LA487_0 <= BASE)||LA487_0==BOOL||LA487_0==BYTE||(LA487_0 >= CHAR && LA487_0 <= CHECKED)||LA487_0==DECIMAL||(LA487_0 >= DEFAULT && LA487_0 <= DELEGATE)||LA487_0==DOUBLE||LA487_0==FALSE||LA487_0==FLOAT||LA487_0==IDENTIFIER||(LA487_0 >= INT && LA487_0 <= INTEGER_LITERAL)||LA487_0==LONG||LA487_0==MINUS||LA487_0==NEW||LA487_0==NULL||LA487_0==OBJECT||LA487_0==OPEN_PARENS||LA487_0==OP_DEC||LA487_0==OP_INC||LA487_0==OUT||LA487_0==PLUS||(LA487_0 >= REAL_LITERAL && LA487_0 <= REF)||LA487_0==SBYTE||LA487_0==SHORT||LA487_0==SIZEOF||LA487_0==STAR||(LA487_0 >= STRING && LA487_0 <= STRING_LITERAL)||LA487_0==THIS||(LA487_0 >= TILDE && LA487_0 <= TRUE)||LA487_0==TYPEOF||(LA487_0 >= UINT && LA487_0 <= UNCHECKED)||LA487_0==USHORT) ) {
                alt487=1;
            }
            switch (alt487) {
                case 1 :
                    // CSharpAngular.g:4251:16: al= argument_list
                    {
                    pushFollow(FOLLOW_argument_list_in_method_invocation232406);
                    al=argument_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_method_invocation232410); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 4252:3: -> methodInvocation2(argLst=al)
              {
                  retval.st = templateLib.getInstanceOf("methodInvocation2",new STAttrMap().put("argLst", al));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_invocation2"


    public static class object_creation_expression2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "object_creation_expression2"
    // CSharpAngular.g:4254:1: object_creation_expression2 : OPEN_PARENS (argLst= argument_list )? CLOSE_PARENS (ObjColcInit= object_or_collection_initializer )? -> objectCreationExpression2(argumentList=argLstinit=ObjColcInit);
    public final CSharpAngular.object_creation_expression2_return object_creation_expression2() throws RecognitionException {
        CSharpAngular.object_creation_expression2_return retval = new CSharpAngular.object_creation_expression2_return();
        retval.start = input.LT(1);


        CSharpAngular.argument_list_return argLst =null;

        CSharpAngular.object_or_collection_initializer_return ObjColcInit =null;


        try {
            // CSharpAngular.g:4255:3: ( OPEN_PARENS (argLst= argument_list )? CLOSE_PARENS (ObjColcInit= object_or_collection_initializer )? -> objectCreationExpression2(argumentList=argLstinit=ObjColcInit))
            // CSharpAngular.g:4256:3: OPEN_PARENS (argLst= argument_list )? CLOSE_PARENS (ObjColcInit= object_or_collection_initializer )?
            {
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_object_creation_expression232435); if (state.failed) return retval;

            // CSharpAngular.g:4256:15: (argLst= argument_list )?
            int alt488=2;
            int LA488_0 = input.LA(1);

            if ( (LA488_0==AMP||(LA488_0 >= BANG && LA488_0 <= BASE)||LA488_0==BOOL||LA488_0==BYTE||(LA488_0 >= CHAR && LA488_0 <= CHECKED)||LA488_0==DECIMAL||(LA488_0 >= DEFAULT && LA488_0 <= DELEGATE)||LA488_0==DOUBLE||LA488_0==FALSE||LA488_0==FLOAT||LA488_0==IDENTIFIER||(LA488_0 >= INT && LA488_0 <= INTEGER_LITERAL)||LA488_0==LONG||LA488_0==MINUS||LA488_0==NEW||LA488_0==NULL||LA488_0==OBJECT||LA488_0==OPEN_PARENS||LA488_0==OP_DEC||LA488_0==OP_INC||LA488_0==OUT||LA488_0==PLUS||(LA488_0 >= REAL_LITERAL && LA488_0 <= REF)||LA488_0==SBYTE||LA488_0==SHORT||LA488_0==SIZEOF||LA488_0==STAR||(LA488_0 >= STRING && LA488_0 <= STRING_LITERAL)||LA488_0==THIS||(LA488_0 >= TILDE && LA488_0 <= TRUE)||LA488_0==TYPEOF||(LA488_0 >= UINT && LA488_0 <= UNCHECKED)||LA488_0==USHORT) ) {
                alt488=1;
            }
            switch (alt488) {
                case 1 :
                    // CSharpAngular.g:4256:16: argLst= argument_list
                    {
                    pushFollow(FOLLOW_argument_list_in_object_creation_expression232440);
                    argLst=argument_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_object_creation_expression232444); if (state.failed) return retval;

            // CSharpAngular.g:4256:52: (ObjColcInit= object_or_collection_initializer )?
            int alt489=2;
            int LA489_0 = input.LA(1);

            if ( (LA489_0==OPEN_BRACE) ) {
                alt489=1;
            }
            switch (alt489) {
                case 1 :
                    // CSharpAngular.g:4256:53: ObjColcInit= object_or_collection_initializer
                    {
                    pushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression232449);
                    ObjColcInit=object_or_collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 4257:3: -> objectCreationExpression2(argumentList=argLstinit=ObjColcInit)
              {
                  retval.st = templateLib.getInstanceOf("objectCreationExpression2",new STAttrMap().put("argumentList", argLst).put("init", ObjColcInit));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_creation_expression2"

    // $ANTLR start synpred1_CSharpAngular
    public final void synpred1_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:175:4: ( DOT IDENTIFIER OPEN_PARENS )
        // CSharpAngular.g:175:6: DOT IDENTIFIER OPEN_PARENS
        {
        match(input,DOT,FOLLOW_DOT_in_synpred1_CSharpAngular342); if (state.failed) return ;

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred1_CSharpAngular344); if (state.failed) return ;

        match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_synpred1_CSharpAngular346); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_CSharpAngular

    // $ANTLR start synpred2_CSharpAngular
    public final void synpred2_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:178:4: ( DOT IDENTIFIER LT )
        // CSharpAngular.g:178:6: DOT IDENTIFIER LT
        {
        match(input,DOT,FOLLOW_DOT_in_synpred2_CSharpAngular386); if (state.failed) return ;

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred2_CSharpAngular388); if (state.failed) return ;

        match(input,LT,FOLLOW_LT_in_synpred2_CSharpAngular390); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_CSharpAngular

    // $ANTLR start synpred3_CSharpAngular
    public final void synpred3_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:189:4: ( type_argument_list )
        // CSharpAngular.g:189:5: type_argument_list
        {
        pushFollow(FOLLOW_type_argument_list_in_synpred3_CSharpAngular472);
        type_argument_list();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_CSharpAngular

    // $ANTLR start synpred4_CSharpAngular
    public final void synpred4_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:205:19: ( typeChld )
        // CSharpAngular.g:205:20: typeChld
        {
        pushFollow(FOLLOW_typeChld_in_synpred4_CSharpAngular531);
        typeChld();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_CSharpAngular

    // $ANTLR start synpred5_CSharpAngular
    public final void synpred5_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:293:7: ( rank_specifier )
        // CSharpAngular.g:293:8: rank_specifier
        {
        pushFollow(FOLLOW_rank_specifier_in_synpred5_CSharpAngular1130);
        rank_specifier();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_CSharpAngular

    // $ANTLR start synpred6_CSharpAngular
    public final void synpred6_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:423:3: ({...}?)
        // CSharpAngular.g:423:4: {...}?
        {
        if ( !((input.LT(3).getText().equals("Sunday"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred6_CSharpAngular", "input.LT(3).getText().equals(\"Sunday\")");
        }

        }

    }
    // $ANTLR end synpred6_CSharpAngular

    // $ANTLR start synpred7_CSharpAngular
    public final void synpred7_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:426:3: ({...}?)
        // CSharpAngular.g:426:4: {...}?
        {
        if ( !((input.LT(3).getText().equals("Monday"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred7_CSharpAngular", "input.LT(3).getText().equals(\"Monday\")");
        }

        }

    }
    // $ANTLR end synpred7_CSharpAngular

    // $ANTLR start synpred8_CSharpAngular
    public final void synpred8_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:429:3: ({...}?)
        // CSharpAngular.g:429:4: {...}?
        {
        if ( !((input.LT(3).getText().equals("Tuesday"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred8_CSharpAngular", "input.LT(3).getText().equals(\"Tuesday\")");
        }

        }

    }
    // $ANTLR end synpred8_CSharpAngular

    // $ANTLR start synpred9_CSharpAngular
    public final void synpred9_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:432:3: ({...}?)
        // CSharpAngular.g:432:4: {...}?
        {
        if ( !((input.LT(3).getText().equals("Wednesday"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred9_CSharpAngular", "input.LT(3).getText().equals(\"Wednesday\")");
        }

        }

    }
    // $ANTLR end synpred9_CSharpAngular

    // $ANTLR start synpred10_CSharpAngular
    public final void synpred10_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:435:3: ({...}?)
        // CSharpAngular.g:435:4: {...}?
        {
        if ( !((input.LT(3).getText().equals("Thursday"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred10_CSharpAngular", "input.LT(3).getText().equals(\"Thursday\")");
        }

        }

    }
    // $ANTLR end synpred10_CSharpAngular

    // $ANTLR start synpred11_CSharpAngular
    public final void synpred11_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:438:3: ({...}?)
        // CSharpAngular.g:438:4: {...}?
        {
        if ( !((input.LT(3).getText().equals("Friday"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred11_CSharpAngular", "input.LT(3).getText().equals(\"Friday\")");
        }

        }

    }
    // $ANTLR end synpred11_CSharpAngular

    // $ANTLR start synpred12_CSharpAngular
    public final void synpred12_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:441:3: ({...}?)
        // CSharpAngular.g:441:4: {...}?
        {
        if ( !((input.LT(3).getText().equals("Saturday"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred12_CSharpAngular", "input.LT(3).getText().equals(\"Saturday\")");
        }

        }

    }
    // $ANTLR end synpred12_CSharpAngular

    // $ANTLR start synpred13_CSharpAngular
    public final void synpred13_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:452:3: ({...}?)
        // CSharpAngular.g:452:4: {...}?
        {
        if ( !((input.LT(5).getText().equals("AddSeconds"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred13_CSharpAngular", "input.LT(5).getText().equals(\"AddSeconds\")");
        }

        }

    }
    // $ANTLR end synpred13_CSharpAngular

    // $ANTLR start synpred14_CSharpAngular
    public final void synpred14_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:456:3: ({...}?)
        // CSharpAngular.g:456:4: {...}?
        {
        if ( !((input.LT(5).getText().equals("AddDays"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred14_CSharpAngular", "input.LT(5).getText().equals(\"AddDays\")");
        }

        }

    }
    // $ANTLR end synpred14_CSharpAngular

    // $ANTLR start synpred15_CSharpAngular
    public final void synpred15_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:460:3: ({...}?)
        // CSharpAngular.g:460:4: {...}?
        {
        if ( !((input.LT(5).getText().equals("AddHours"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred15_CSharpAngular", "input.LT(5).getText().equals(\"AddHours\")");
        }

        }

    }
    // $ANTLR end synpred15_CSharpAngular

    // $ANTLR start synpred16_CSharpAngular
    public final void synpred16_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:464:3: ({...}?)
        // CSharpAngular.g:464:4: {...}?
        {
        if ( !((input.LT(5).getText().equals("AddMilliseconds"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred16_CSharpAngular", "input.LT(5).getText().equals(\"AddMilliseconds\")");
        }

        }

    }
    // $ANTLR end synpred16_CSharpAngular

    // $ANTLR start synpred17_CSharpAngular
    public final void synpred17_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:468:3: ({...}?)
        // CSharpAngular.g:468:4: {...}?
        {
        if ( !((input.LT(5).getText().equals("AddMinutes"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred17_CSharpAngular", "input.LT(5).getText().equals(\"AddMinutes\")");
        }

        }

    }
    // $ANTLR end synpred17_CSharpAngular

    // $ANTLR start synpred18_CSharpAngular
    public final void synpred18_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:472:3: ({...}?)
        // CSharpAngular.g:472:4: {...}?
        {
        if ( !((input.LT(5).getText().equals("AddMonths"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred18_CSharpAngular", "input.LT(5).getText().equals(\"AddMonths\")");
        }

        }

    }
    // $ANTLR end synpred18_CSharpAngular

    // $ANTLR start synpred19_CSharpAngular
    public final void synpred19_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:476:4: ({...}?)
        // CSharpAngular.g:476:5: {...}?
        {
        if ( !((input.LT(5).getText().equals("AddYears"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred19_CSharpAngular", "input.LT(5).getText().equals(\"AddYears\")");
        }

        }

    }
    // $ANTLR end synpred19_CSharpAngular

    // $ANTLR start synpred20_CSharpAngular
    public final void synpred20_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:480:3: ({...}?)
        // CSharpAngular.g:480:4: {...}?
        {
        if ( !((input.LT(5).getText().equals("Subtract"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred20_CSharpAngular", "input.LT(5).getText().equals(\"Subtract\")");
        }

        }

    }
    // $ANTLR end synpred20_CSharpAngular

    // $ANTLR start synpred21_CSharpAngular
    public final void synpred21_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:483:4: ({...}?)
        // CSharpAngular.g:483:5: {...}?
        {
        if ( !((input.LT(4).getText().equals(".") && input.LT(5).getText().equals("Month"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred21_CSharpAngular", "input.LT(4).getText().equals(\".\") && input.LT(5).getText().equals(\"Month\")");
        }

        }

    }
    // $ANTLR end synpred21_CSharpAngular

    // $ANTLR start synpred22_CSharpAngular
    public final void synpred22_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:500:4: ({...}? STRING DOT IDENTIFIER LT type GT )
        // CSharpAngular.g:500:5: {...}? STRING DOT IDENTIFIER LT type GT
        {
        if ( !((input.LT(3).getText().equals("Join"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred22_CSharpAngular", "input.LT(3).getText().equals(\"Join\")");
        }

        match(input,STRING,FOLLOW_STRING_in_synpred22_CSharpAngular2605); if (state.failed) return ;

        match(input,DOT,FOLLOW_DOT_in_synpred22_CSharpAngular2607); if (state.failed) return ;

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred22_CSharpAngular2609); if (state.failed) return ;

        match(input,LT,FOLLOW_LT_in_synpred22_CSharpAngular2611); if (state.failed) return ;

        pushFollow(FOLLOW_type_in_synpred22_CSharpAngular2613);
        type();

        state._fsp--;
        if (state.failed) return ;

        match(input,GT,FOLLOW_GT_in_synpred22_CSharpAngular2615); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_CSharpAngular

    // $ANTLR start synpred23_CSharpAngular
    public final void synpred23_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:503:4: ({...}?)
        // CSharpAngular.g:503:5: {...}?
        {
        if ( !((input.LT(3).getText().equals("Join"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred23_CSharpAngular", "input.LT(3).getText().equals(\"Join\")");
        }

        }

    }
    // $ANTLR end synpred23_CSharpAngular

    // $ANTLR start synpred24_CSharpAngular
    public final void synpred24_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:506:3: ({...}? STRING DOT IDENTIFIER method_invocation2 )
        // CSharpAngular.g:506:4: {...}? STRING DOT IDENTIFIER method_invocation2
        {
        if ( !((input.LT(3).getText().equals("Format"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred24_CSharpAngular", "input.LT(3).getText().equals(\"Format\")");
        }

        match(input,STRING,FOLLOW_STRING_in_synpred24_CSharpAngular2719); if (state.failed) return ;

        match(input,DOT,FOLLOW_DOT_in_synpred24_CSharpAngular2721); if (state.failed) return ;

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred24_CSharpAngular2723); if (state.failed) return ;

        pushFollow(FOLLOW_method_invocation2_in_synpred24_CSharpAngular2725);
        method_invocation2();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred24_CSharpAngular

    // $ANTLR start synpred25_CSharpAngular
    public final void synpred25_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:512:3: ({...}? STRING DOT IDENTIFIER OPEN_PARENS argument COMMA argument COMMA argument COMMA argument CLOSE_PARENS )
        // CSharpAngular.g:512:4: {...}? STRING DOT IDENTIFIER OPEN_PARENS argument COMMA argument COMMA argument COMMA argument CLOSE_PARENS
        {
        if ( !((input.LT(3).getText().equals("Concat"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred25_CSharpAngular", "input.LT(3).getText().equals(\"Concat\")");
        }

        match(input,STRING,FOLLOW_STRING_in_synpred25_CSharpAngular2790); if (state.failed) return ;

        match(input,DOT,FOLLOW_DOT_in_synpred25_CSharpAngular2792); if (state.failed) return ;

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred25_CSharpAngular2794); if (state.failed) return ;

        match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_synpred25_CSharpAngular2796); if (state.failed) return ;

        pushFollow(FOLLOW_argument_in_synpred25_CSharpAngular2798);
        argument();

        state._fsp--;
        if (state.failed) return ;

        match(input,COMMA,FOLLOW_COMMA_in_synpred25_CSharpAngular2800); if (state.failed) return ;

        pushFollow(FOLLOW_argument_in_synpred25_CSharpAngular2802);
        argument();

        state._fsp--;
        if (state.failed) return ;

        match(input,COMMA,FOLLOW_COMMA_in_synpred25_CSharpAngular2804); if (state.failed) return ;

        pushFollow(FOLLOW_argument_in_synpred25_CSharpAngular2806);
        argument();

        state._fsp--;
        if (state.failed) return ;

        match(input,COMMA,FOLLOW_COMMA_in_synpred25_CSharpAngular2808); if (state.failed) return ;

        pushFollow(FOLLOW_argument_in_synpred25_CSharpAngular2810);
        argument();

        state._fsp--;
        if (state.failed) return ;

        match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_synpred25_CSharpAngular2812); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred25_CSharpAngular

    // $ANTLR start synpred26_CSharpAngular
    public final void synpred26_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:515:3: ({...}? STRING DOT IDENTIFIER OPEN_PARENS argument COMMA argument CLOSE_PARENS )
        // CSharpAngular.g:515:4: {...}? STRING DOT IDENTIFIER OPEN_PARENS argument COMMA argument CLOSE_PARENS
        {
        if ( !((input.LT(3).getText().equals("Concat"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred26_CSharpAngular", "input.LT(3).getText().equals(\"Concat\")");
        }

        match(input,STRING,FOLLOW_STRING_in_synpred26_CSharpAngular2868); if (state.failed) return ;

        match(input,DOT,FOLLOW_DOT_in_synpred26_CSharpAngular2870); if (state.failed) return ;

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred26_CSharpAngular2872); if (state.failed) return ;

        match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_synpred26_CSharpAngular2874); if (state.failed) return ;

        pushFollow(FOLLOW_argument_in_synpred26_CSharpAngular2876);
        argument();

        state._fsp--;
        if (state.failed) return ;

        match(input,COMMA,FOLLOW_COMMA_in_synpred26_CSharpAngular2878); if (state.failed) return ;

        pushFollow(FOLLOW_argument_in_synpred26_CSharpAngular2880);
        argument();

        state._fsp--;
        if (state.failed) return ;

        match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_synpred26_CSharpAngular2882); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred26_CSharpAngular

    // $ANTLR start synpred27_CSharpAngular
    public final void synpred27_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:536:4: ( DOT IDENTIFIER OPEN_PARENS )
        // CSharpAngular.g:536:6: DOT IDENTIFIER OPEN_PARENS
        {
        match(input,DOT,FOLLOW_DOT_in_synpred27_CSharpAngular3076); if (state.failed) return ;

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred27_CSharpAngular3078); if (state.failed) return ;

        match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_synpred27_CSharpAngular3080); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_CSharpAngular

    // $ANTLR start synpred28_CSharpAngular
    public final void synpred28_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:539:4: ( DOT IDENTIFIER LT )
        // CSharpAngular.g:539:6: DOT IDENTIFIER LT
        {
        match(input,DOT,FOLLOW_DOT_in_synpred28_CSharpAngular3109); if (state.failed) return ;

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred28_CSharpAngular3111); if (state.failed) return ;

        match(input,LT,FOLLOW_LT_in_synpred28_CSharpAngular3113); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred28_CSharpAngular

    // $ANTLR start synpred29_CSharpAngular
    public final void synpred29_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:555:4: ({...}? DOT IDENTIFIER method_invocation2 )
        // CSharpAngular.g:555:5: {...}? DOT IDENTIFIER method_invocation2
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("ToString") && input.LT(3).getText().equals("(") && !input.LT(4).getText().equals(")") )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred29_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"ToString\") && input.LT(3).getText().equals(\"(\") && !input.LT(4).getText().equals(\")\") ");
        }

        match(input,DOT,FOLLOW_DOT_in_synpred29_CSharpAngular3264); if (state.failed) return ;

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred29_CSharpAngular3266); if (state.failed) return ;

        pushFollow(FOLLOW_method_invocation2_in_synpred29_CSharpAngular3268);
        method_invocation2();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_CSharpAngular

    // $ANTLR start synpred30_CSharpAngular
    public final void synpred30_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:558:4: ({...}?)
        // CSharpAngular.g:558:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("ToString"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred30_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"ToString\")");
        }

        }

    }
    // $ANTLR end synpred30_CSharpAngular

    // $ANTLR start synpred31_CSharpAngular
    public final void synpred31_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:561:4: ({...}?)
        // CSharpAngular.g:561:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("ToShortDateString"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred31_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"ToShortDateString\")");
        }

        }

    }
    // $ANTLR end synpred31_CSharpAngular

    // $ANTLR start synpred32_CSharpAngular
    public final void synpred32_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:564:4: ({...}? DOT IDENTIFIER method_invocation2 )
        // CSharpAngular.g:564:5: {...}? DOT IDENTIFIER method_invocation2
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("Split"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred32_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"Split\")");
        }

        match(input,DOT,FOLLOW_DOT_in_synpred32_CSharpAngular3366); if (state.failed) return ;

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred32_CSharpAngular3368); if (state.failed) return ;

        pushFollow(FOLLOW_method_invocation2_in_synpred32_CSharpAngular3370);
        method_invocation2();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred32_CSharpAngular

    // $ANTLR start synpred33_CSharpAngular
    public final void synpred33_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:567:4: ({...}?)
        // CSharpAngular.g:567:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("Split"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred33_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"Split\")");
        }

        }

    }
    // $ANTLR end synpred33_CSharpAngular

    // $ANTLR start synpred34_CSharpAngular
    public final void synpred34_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:570:4: ({...}? DOT IDENTIFIER LT type GT )
        // CSharpAngular.g:570:5: {...}? DOT IDENTIFIER LT type GT
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("ToList"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred34_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"ToList\")");
        }

        match(input,DOT,FOLLOW_DOT_in_synpred34_CSharpAngular3442); if (state.failed) return ;

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred34_CSharpAngular3444); if (state.failed) return ;

        match(input,LT,FOLLOW_LT_in_synpred34_CSharpAngular3446); if (state.failed) return ;

        pushFollow(FOLLOW_type_in_synpred34_CSharpAngular3448);
        type();

        state._fsp--;
        if (state.failed) return ;

        match(input,GT,FOLLOW_GT_in_synpred34_CSharpAngular3450); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred34_CSharpAngular

    // $ANTLR start synpred35_CSharpAngular
    public final void synpred35_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:573:4: ({...}?)
        // CSharpAngular.g:573:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("ToList"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred35_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"ToList\")");
        }

        }

    }
    // $ANTLR end synpred35_CSharpAngular

    // $ANTLR start synpred36_CSharpAngular
    public final void synpred36_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:576:4: ({...}?)
        // CSharpAngular.g:576:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("Insert"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred36_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"Insert\")");
        }

        }

    }
    // $ANTLR end synpred36_CSharpAngular

    // $ANTLR start synpred37_CSharpAngular
    public final void synpred37_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:579:4: ({...}?)
        // CSharpAngular.g:579:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("Clear"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred37_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"Clear\")");
        }

        }

    }
    // $ANTLR end synpred37_CSharpAngular

    // $ANTLR start synpred38_CSharpAngular
    public final void synpred38_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:582:4: ({...}?)
        // CSharpAngular.g:582:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("RemoveAt"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred38_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"RemoveAt\")");
        }

        }

    }
    // $ANTLR end synpred38_CSharpAngular

    // $ANTLR start synpred39_CSharpAngular
    public final void synpred39_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:585:4: ({...}?)
        // CSharpAngular.g:585:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("Add") )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred39_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"Add\") ");
        }

        }

    }
    // $ANTLR end synpred39_CSharpAngular

    // $ANTLR start synpred40_CSharpAngular
    public final void synpred40_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:588:4: ({...}?)
        // CSharpAngular.g:588:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("Add") )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred40_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"Add\") ");
        }

        }

    }
    // $ANTLR end synpred40_CSharpAngular

    // $ANTLR start synpred41_CSharpAngular
    public final void synpred41_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:591:4: ({...}?)
        // CSharpAngular.g:591:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("Trim"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred41_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"Trim\")");
        }

        }

    }
    // $ANTLR end synpred41_CSharpAngular

    // $ANTLR start synpred42_CSharpAngular
    public final void synpred42_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:594:4: ({...}?)
        // CSharpAngular.g:594:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("IndexOf"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred42_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"IndexOf\")");
        }

        }

    }
    // $ANTLR end synpred42_CSharpAngular

    // $ANTLR start synpred43_CSharpAngular
    public final void synpred43_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:597:4: ({...}?)
        // CSharpAngular.g:597:5: {...}?
        {
        if ( !((isLinq() && input.LT(1).getText().equals(".") && input.LT(2).getText().equals("FirstOrDefault"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred43_CSharpAngular", "isLinq() && input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"FirstOrDefault\")");
        }

        }

    }
    // $ANTLR end synpred43_CSharpAngular

    // $ANTLR start synpred44_CSharpAngular
    public final void synpred44_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:743:4: ({...}?)
        // CSharpAngular.g:743:5: {...}?
        {
        if ( !((input.LT(1).getText().equals("DateTime") && input.LT(3).getText().equals("Now"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred44_CSharpAngular", "input.LT(1).getText().equals(\"DateTime\") && input.LT(3).getText().equals(\"Now\")");
        }

        }

    }
    // $ANTLR end synpred44_CSharpAngular

    // $ANTLR start synpred45_CSharpAngular
    public final void synpred45_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:746:4: ({...}?)
        // CSharpAngular.g:746:5: {...}?
        {
        if ( !((input.LT(1).getText().equals("DayOfWeek"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred45_CSharpAngular", "input.LT(1).getText().equals(\"DayOfWeek\")");
        }

        }

    }
    // $ANTLR end synpred45_CSharpAngular

    // $ANTLR start synpred46_CSharpAngular
    public final void synpred46_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:749:4: ({...}?)
        // CSharpAngular.g:749:5: {...}?
        {
        if ( !((input.LT(1).getText().equals("DateTime") && input.LT(3).getText().equals("MinValue"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred46_CSharpAngular", "input.LT(1).getText().equals(\"DateTime\") && input.LT(3).getText().equals(\"MinValue\")");
        }

        }

    }
    // $ANTLR end synpred46_CSharpAngular

    // $ANTLR start synpred47_CSharpAngular
    public final void synpred47_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:752:4: ({...}?)
        // CSharpAngular.g:752:5: {...}?
        {
        if ( !((input.LT(1).getText().equals("DateTime") && input.LT(3).getText().equals("MaxValue"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred47_CSharpAngular", "input.LT(1).getText().equals(\"DateTime\") && input.LT(3).getText().equals(\"MaxValue\")");
        }

        }

    }
    // $ANTLR end synpred47_CSharpAngular

    // $ANTLR start synpred48_CSharpAngular
    public final void synpred48_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:767:4: ({...}?)
        // CSharpAngular.g:767:5: {...}?
        {
        if ( !((input.LT(1).getText().equals("Services") && input.LT(2).getText().equals("."))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred48_CSharpAngular", "input.LT(1).getText().equals(\"Services\") && input.LT(2).getText().equals(\".\")");
        }

        }

    }
    // $ANTLR end synpred48_CSharpAngular

    // $ANTLR start synpred49_CSharpAngular
    public final void synpred49_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:770:3: ( ( simple_name1 )+ )
        // CSharpAngular.g:770:4: ( simple_name1 )+
        {
        // CSharpAngular.g:770:4: ( simple_name1 )+
        int cnt490=0;
        loop490:
        do {
            int alt490=2;
            int LA490_0 = input.LA(1);

            if ( (LA490_0==IDENTIFIER) ) {
                alt490=1;
            }


            switch (alt490) {
        	case 1 :
        	    // CSharpAngular.g:770:5: simple_name1
        	    {
        	    pushFollow(FOLLOW_simple_name1_in_synpred49_CSharpAngular4639);
        	    simple_name1();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt490 >= 1 ) break loop490;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(490, input);
                    throw eee;
            }
            cnt490++;
        } while (true);


        }

    }
    // $ANTLR end synpred49_CSharpAngular

    // $ANTLR start synpred50_CSharpAngular
    public final void synpred50_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:773:3: ( ( simple_remove_name )+ )
        // CSharpAngular.g:773:4: ( simple_remove_name )+
        {
        // CSharpAngular.g:773:4: ( simple_remove_name )+
        int cnt491=0;
        loop491:
        do {
            int alt491=2;
            int LA491_0 = input.LA(1);

            if ( (LA491_0==IDENTIFIER) ) {
                alt491=1;
            }


            switch (alt491) {
        	case 1 :
        	    // CSharpAngular.g:773:5: simple_remove_name
        	    {
        	    pushFollow(FOLLOW_simple_remove_name_in_synpred50_CSharpAngular4682);
        	    simple_remove_name();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt491 >= 1 ) break loop491;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(491, input);
                    throw eee;
            }
            cnt491++;
        } while (true);


        }

    }
    // $ANTLR end synpred50_CSharpAngular

    // $ANTLR start synpred51_CSharpAngular
    public final void synpred51_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:879:5: ({...}?)
        // CSharpAngular.g:879:6: {...}?
        {
        if ( !((input.LT(1).getText().equals("string") && input.LT(2).getText().equals("."))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred51_CSharpAngular", "input.LT(1).getText().equals(\"string\") && input.LT(2).getText().equals(\".\")");
        }

        }

    }
    // $ANTLR end synpred51_CSharpAngular

    // $ANTLR start synpred52_CSharpAngular
    public final void synpred52_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1049:4: ( array_type OPEN_BRACKET )
        // CSharpAngular.g:1049:5: array_type OPEN_BRACKET
        {
        pushFollow(FOLLOW_array_type_in_synpred52_CSharpAngular6186);
        array_type();

        state._fsp--;
        if (state.failed) return ;

        match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_synpred52_CSharpAngular6188); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred52_CSharpAngular

    // $ANTLR start synpred53_CSharpAngular
    public final void synpred53_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1120:6: ( unbound_type_name )
        // CSharpAngular.g:1120:7: unbound_type_name
        {
        pushFollow(FOLLOW_unbound_type_name_in_synpred53_CSharpAngular6568);
        unbound_type_name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred53_CSharpAngular

    // $ANTLR start synpred54_CSharpAngular
    public final void synpred54_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1181:3: ( scan_for_cast_generic_precedence | OPEN_PARENS predefined_cast_type )
        int alt492=2;
        int LA492_0 = input.LA(1);

        if ( (LA492_0==OPEN_PARENS) ) {
            switch ( input.LA(2) ) {
            case SBYTE:
                {
                int LA492_2 = input.LA(3);

                if ( (LA492_2==CLOSE_PARENS||LA492_2==INTERR||LA492_2==OPEN_BRACKET||LA492_2==STAR) ) {
                    alt492=1;
                }
                else if ( (LA492_2==EOF) ) {
                    alt492=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 492, 2, input);

                    throw nvae;

                }
                }
                break;
            case BYTE:
                {
                int LA492_3 = input.LA(3);

                if ( (LA492_3==CLOSE_PARENS||LA492_3==INTERR||LA492_3==OPEN_BRACKET||LA492_3==STAR) ) {
                    alt492=1;
                }
                else if ( (LA492_3==EOF) ) {
                    alt492=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 492, 3, input);

                    throw nvae;

                }
                }
                break;
            case SHORT:
                {
                int LA492_4 = input.LA(3);

                if ( (LA492_4==CLOSE_PARENS||LA492_4==INTERR||LA492_4==OPEN_BRACKET||LA492_4==STAR) ) {
                    alt492=1;
                }
                else if ( (LA492_4==EOF) ) {
                    alt492=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 492, 4, input);

                    throw nvae;

                }
                }
                break;
            case USHORT:
                {
                int LA492_5 = input.LA(3);

                if ( (LA492_5==CLOSE_PARENS||LA492_5==INTERR||LA492_5==OPEN_BRACKET||LA492_5==STAR) ) {
                    alt492=1;
                }
                else if ( (LA492_5==EOF) ) {
                    alt492=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 492, 5, input);

                    throw nvae;

                }
                }
                break;
            case INT:
                {
                int LA492_6 = input.LA(3);

                if ( (LA492_6==CLOSE_PARENS||LA492_6==INTERR||LA492_6==OPEN_BRACKET||LA492_6==STAR) ) {
                    alt492=1;
                }
                else if ( (LA492_6==EOF) ) {
                    alt492=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 492, 6, input);

                    throw nvae;

                }
                }
                break;
            case UINT:
                {
                int LA492_7 = input.LA(3);

                if ( (LA492_7==CLOSE_PARENS||LA492_7==INTERR||LA492_7==OPEN_BRACKET||LA492_7==STAR) ) {
                    alt492=1;
                }
                else if ( (LA492_7==EOF) ) {
                    alt492=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 492, 7, input);

                    throw nvae;

                }
                }
                break;
            case LONG:
                {
                int LA492_8 = input.LA(3);

                if ( (LA492_8==CLOSE_PARENS||LA492_8==INTERR||LA492_8==OPEN_BRACKET||LA492_8==STAR) ) {
                    alt492=1;
                }
                else if ( (LA492_8==EOF) ) {
                    alt492=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 492, 8, input);

                    throw nvae;

                }
                }
                break;
            case ULONG:
                {
                int LA492_9 = input.LA(3);

                if ( (LA492_9==CLOSE_PARENS||LA492_9==INTERR||LA492_9==OPEN_BRACKET||LA492_9==STAR) ) {
                    alt492=1;
                }
                else if ( (LA492_9==EOF) ) {
                    alt492=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 492, 9, input);

                    throw nvae;

                }
                }
                break;
            case CHAR:
                {
                int LA492_10 = input.LA(3);

                if ( (LA492_10==CLOSE_PARENS||LA492_10==INTERR||LA492_10==OPEN_BRACKET||LA492_10==STAR) ) {
                    alt492=1;
                }
                else if ( (LA492_10==EOF) ) {
                    alt492=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 492, 10, input);

                    throw nvae;

                }
                }
                break;
            case FLOAT:
                {
                int LA492_11 = input.LA(3);

                if ( (LA492_11==CLOSE_PARENS||LA492_11==INTERR||LA492_11==OPEN_BRACKET||LA492_11==STAR) ) {
                    alt492=1;
                }
                else if ( (LA492_11==EOF) ) {
                    alt492=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 492, 11, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE:
                {
                int LA492_12 = input.LA(3);

                if ( (LA492_12==CLOSE_PARENS||LA492_12==INTERR||LA492_12==OPEN_BRACKET||LA492_12==STAR) ) {
                    alt492=1;
                }
                else if ( (LA492_12==EOF) ) {
                    alt492=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 492, 12, input);

                    throw nvae;

                }
                }
                break;
            case DECIMAL:
                {
                int LA492_13 = input.LA(3);

                if ( (LA492_13==CLOSE_PARENS||LA492_13==INTERR||LA492_13==OPEN_BRACKET||LA492_13==STAR) ) {
                    alt492=1;
                }
                else if ( (LA492_13==EOF) ) {
                    alt492=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 492, 13, input);

                    throw nvae;

                }
                }
                break;
            case BOOL:
                {
                int LA492_14 = input.LA(3);

                if ( (LA492_14==CLOSE_PARENS||LA492_14==INTERR||LA492_14==OPEN_BRACKET||LA492_14==STAR) ) {
                    alt492=1;
                }
                else if ( (LA492_14==EOF) ) {
                    alt492=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 492, 14, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
            case VOID:
                {
                alt492=1;
                }
                break;
            case OBJECT:
                {
                int LA492_16 = input.LA(3);

                if ( (LA492_16==CLOSE_PARENS||LA492_16==INTERR||LA492_16==OPEN_BRACKET||LA492_16==STAR) ) {
                    alt492=1;
                }
                else if ( (LA492_16==EOF) ) {
                    alt492=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 492, 16, input);

                    throw nvae;

                }
                }
                break;
            case STRING:
                {
                int LA492_17 = input.LA(3);

                if ( (LA492_17==CLOSE_PARENS||LA492_17==INTERR||LA492_17==OPEN_BRACKET||LA492_17==STAR) ) {
                    alt492=1;
                }
                else if ( (LA492_17==EOF) ) {
                    alt492=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 492, 17, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 492, 1, input);

                throw nvae;

            }

        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 492, 0, input);

            throw nvae;

        }
        switch (alt492) {
            case 1 :
                // CSharpAngular.g:1181:4: scan_for_cast_generic_precedence
                {
                pushFollow(FOLLOW_scan_for_cast_generic_precedence_in_synpred54_CSharpAngular6862);
                scan_for_cast_generic_precedence();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // CSharpAngular.g:1181:39: OPEN_PARENS predefined_cast_type
                {
                match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_synpred54_CSharpAngular6866); if (state.failed) return ;

                pushFollow(FOLLOW_predefined_cast_type_in_synpred54_CSharpAngular6868);
                predefined_cast_type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
    }
    // $ANTLR end synpred54_CSharpAngular

    // $ANTLR start synpred55_CSharpAngular
    public final void synpred55_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1353:3: ( shift_expression ({...}?) )
        // CSharpAngular.g:1353:4: shift_expression ({...}?)
        {
        pushFollow(FOLLOW_shift_expression_in_synpred55_CSharpAngular9594);
        shift_expression();

        state._fsp--;
        if (state.failed) return ;

        // CSharpAngular.g:1353:21: ({...}?)
        // CSharpAngular.g:1353:22: {...}?
        {
        if ( !((input.LT(1).getText().equals("as"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred55_CSharpAngular", "input.LT(1).getText().equals(\"as\")");
        }

        }


        }

    }
    // $ANTLR end synpred55_CSharpAngular

    // $ANTLR start synpred56_CSharpAngular
    public final void synpred56_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1401:33: ( INTERR is_disambiguation_token )
        // CSharpAngular.g:1401:34: INTERR is_disambiguation_token
        {
        match(input,INTERR,FOLLOW_INTERR_in_synpred56_CSharpAngular10186); if (state.failed) return ;

        pushFollow(FOLLOW_is_disambiguation_token_in_synpred56_CSharpAngular10188);
        is_disambiguation_token();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred56_CSharpAngular

    // $ANTLR start synpred57_CSharpAngular
    public final void synpred57_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1608:35: ( type IDENTIFIER IN )
        // CSharpAngular.g:1608:36: type IDENTIFIER IN
        {
        pushFollow(FOLLOW_type_in_synpred57_CSharpAngular11508);
        type();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred57_CSharpAngular11510); if (state.failed) return ;

        match(input,IN,FOLLOW_IN_in_synpred57_CSharpAngular11512); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred57_CSharpAngular

    // $ANTLR start synpred58_CSharpAngular
    public final void synpred58_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1613:4: ( expression {...}?)
        // CSharpAngular.g:1613:5: expression {...}?
        {
        pushFollow(FOLLOW_expression_in_synpred58_CSharpAngular11568);
        expression();

        state._fsp--;
        if (state.failed) return ;

        if ( !((input.LT(1).getText().equals("where"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred58_CSharpAngular", "input.LT(1).getText().equals(\"where\")");
        }

        }

    }
    // $ANTLR end synpred58_CSharpAngular

    // $ANTLR start synpred59_CSharpAngular
    public final void synpred59_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1616:3: ( expression {...}?)
        // CSharpAngular.g:1616:4: expression {...}?
        {
        pushFollow(FOLLOW_expression_in_synpred59_CSharpAngular11596);
        expression();

        state._fsp--;
        if (state.failed) return ;

        if ( !((input.LT(1).getText().equals("from"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred59_CSharpAngular", "input.LT(1).getText().equals(\"from\")");
        }

        }

    }
    // $ANTLR end synpred59_CSharpAngular

    // $ANTLR start synpred60_CSharpAngular
    public final void synpred60_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1619:3: ( expression {...}?)
        // CSharpAngular.g:1619:4: expression {...}?
        {
        pushFollow(FOLLOW_expression_in_synpred60_CSharpAngular11624);
        expression();

        state._fsp--;
        if (state.failed) return ;

        if ( !((input.LT(1).getText().equals("group"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred60_CSharpAngular", "input.LT(1).getText().equals(\"group\")");
        }

        }

    }
    // $ANTLR end synpred60_CSharpAngular

    // $ANTLR start synpred61_CSharpAngular
    public final void synpred61_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1622:3: ( expression {...}?)
        // CSharpAngular.g:1622:4: expression {...}?
        {
        pushFollow(FOLLOW_expression_in_synpred61_CSharpAngular11652);
        expression();

        state._fsp--;
        if (state.failed) return ;

        if ( !((input.LT(1).getText().equals("select"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred61_CSharpAngular", "input.LT(1).getText().equals(\"select\")");
        }

        }

    }
    // $ANTLR end synpred61_CSharpAngular

    // $ANTLR start synpred62_CSharpAngular
    public final void synpred62_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1635:72: ( into_contextual_keyword )
        // CSharpAngular.g:1635:73: into_contextual_keyword
        {
        pushFollow(FOLLOW_into_contextual_keyword_in_synpred62_CSharpAngular11722);
        into_contextual_keyword();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred62_CSharpAngular

    // $ANTLR start synpred63_CSharpAngular
    public final void synpred63_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1693:4: ( where_clause1 orderby_clause )
        // CSharpAngular.g:1693:5: where_clause1 orderby_clause
        {
        pushFollow(FOLLOW_where_clause1_in_synpred63_CSharpAngular12011);
        where_clause1();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_orderby_clause_in_synpred63_CSharpAngular12013);
        orderby_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred63_CSharpAngular

    // $ANTLR start synpred64_CSharpAngular
    public final void synpred64_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1730:5: ( into_contextual_keyword IDENTIFIER from_contextual_keyword IDENTIFIER IN expression where_clause )
        // CSharpAngular.g:1730:6: into_contextual_keyword IDENTIFIER from_contextual_keyword IDENTIFIER IN expression where_clause
        {
        pushFollow(FOLLOW_into_contextual_keyword_in_synpred64_CSharpAngular12331);
        into_contextual_keyword();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred64_CSharpAngular12333); if (state.failed) return ;

        pushFollow(FOLLOW_from_contextual_keyword_in_synpred64_CSharpAngular12335);
        from_contextual_keyword();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred64_CSharpAngular12337); if (state.failed) return ;

        match(input,IN,FOLLOW_IN_in_synpred64_CSharpAngular12339); if (state.failed) return ;

        pushFollow(FOLLOW_expression_in_synpred64_CSharpAngular12341);
        expression();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_where_clause_in_synpred64_CSharpAngular12343);
        where_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred64_CSharpAngular

    // $ANTLR start synpred65_CSharpAngular
    public final void synpred65_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1851:2: ( assignment )
        // CSharpAngular.g:1851:3: assignment
        {
        pushFollow(FOLLOW_assignment_in_synpred65_CSharpAngular13013);
        assignment();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred65_CSharpAngular

    // $ANTLR start synpred66_CSharpAngular
    public final void synpred66_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1859:3: ( lambda_expression )
        // CSharpAngular.g:1859:4: lambda_expression
        {
        pushFollow(FOLLOW_lambda_expression_in_synpred66_CSharpAngular13060);
        lambda_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred66_CSharpAngular

    // $ANTLR start synpred67_CSharpAngular
    public final void synpred67_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1861:5: ( query_expression )
        // CSharpAngular.g:1861:6: query_expression
        {
        pushFollow(FOLLOW_query_expression_in_synpred67_CSharpAngular13084);
        query_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred67_CSharpAngular

    // $ANTLR start synpred68_CSharpAngular
    public final void synpred68_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1881:3: ( labeled_statement )
        // CSharpAngular.g:1881:4: labeled_statement
        {
        pushFollow(FOLLOW_labeled_statement_in_synpred68_CSharpAngular13184);
        labeled_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred68_CSharpAngular

    // $ANTLR start synpred69_CSharpAngular
    public final void synpred69_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:1883:5: ( declaration_statement )
        // CSharpAngular.g:1883:6: declaration_statement
        {
        pushFollow(FOLLOW_declaration_statement_in_synpred69_CSharpAngular13208);
        declaration_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred69_CSharpAngular

    // $ANTLR start synpred70_CSharpAngular
    public final void synpred70_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:2049:143: ( ELSE )
        // CSharpAngular.g:2049:144: ELSE
        {
        match(input,ELSE,FOLLOW_ELSE_in_synpred70_CSharpAngular14152); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred70_CSharpAngular

    // $ANTLR start synpred71_CSharpAngular
    public final void synpred71_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:2105:4: ( local_variable_declaration )
        // CSharpAngular.g:2105:5: local_variable_declaration
        {
        pushFollow(FOLLOW_local_variable_declaration_in_synpred71_CSharpAngular14640);
        local_variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred71_CSharpAngular

    // $ANTLR start synpred72_CSharpAngular
    public final void synpred72_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:2247:2: ( local_variable_declaration )
        // CSharpAngular.g:2247:3: local_variable_declaration
        {
        pushFollow(FOLLOW_local_variable_declaration_in_synpred72_CSharpAngular15557);
        local_variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred72_CSharpAngular

    // $ANTLR start synpred73_CSharpAngular
    public final void synpred73_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:2271:8: ( global_attribute_section )
        // CSharpAngular.g:2271:9: global_attribute_section
        {
        pushFollow(FOLLOW_global_attribute_section_in_synpred73_CSharpAngular15687);
        global_attribute_section();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred73_CSharpAngular

    // $ANTLR start synpred74_CSharpAngular
    public final void synpred74_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:2624:5: ( interface_type DOT THIS )
        // CSharpAngular.g:2624:6: interface_type DOT THIS
        {
        pushFollow(FOLLOW_interface_type_in_synpred74_CSharpAngular18184);
        interface_type();

        state._fsp--;
        if (state.failed) return ;

        match(input,DOT,FOLLOW_DOT_in_synpred74_CSharpAngular18186); if (state.failed) return ;

        match(input,THIS,FOLLOW_THIS_in_synpred74_CSharpAngular18188); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred74_CSharpAngular

    // $ANTLR start synpred75_CSharpAngular
    public final void synpred75_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:2626:7: ( member_name ( type_parameter_list )? OPEN_PARENS )
        // CSharpAngular.g:2626:8: member_name ( type_parameter_list )? OPEN_PARENS
        {
        pushFollow(FOLLOW_member_name_in_synpred75_CSharpAngular18220);
        member_name();

        state._fsp--;
        if (state.failed) return ;

        // CSharpAngular.g:2626:20: ( type_parameter_list )?
        int alt493=2;
        int LA493_0 = input.LA(1);

        if ( (LA493_0==LT) ) {
            alt493=1;
        }
        switch (alt493) {
            case 1 :
                // CSharpAngular.g:2626:20: type_parameter_list
                {
                pushFollow(FOLLOW_type_parameter_list_in_synpred75_CSharpAngular18222);
                type_parameter_list();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_synpred75_CSharpAngular18225); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred75_CSharpAngular

    // $ANTLR start synpred76_CSharpAngular
    public final void synpred76_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:2628:7: ( member_name OPEN_BRACE )
        // CSharpAngular.g:2628:8: member_name OPEN_BRACE
        {
        pushFollow(FOLLOW_member_name_in_synpred76_CSharpAngular18253);
        member_name();

        state._fsp--;
        if (state.failed) return ;

        match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_synpred76_CSharpAngular18255); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred76_CSharpAngular

    // $ANTLR start synpred77_CSharpAngular
    public final void synpred77_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:2781:3: ( ( attributes )? PARAMS )
        // CSharpAngular.g:2781:4: ( attributes )? PARAMS
        {
        // CSharpAngular.g:2781:4: ( attributes )?
        int alt494=2;
        int LA494_0 = input.LA(1);

        if ( (LA494_0==OPEN_BRACKET) ) {
            alt494=1;
        }
        switch (alt494) {
            case 1 :
                // CSharpAngular.g:2781:4: attributes
                {
                pushFollow(FOLLOW_attributes_in_synpred77_CSharpAngular18855);
                attributes();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,PARAMS,FOLLOW_PARAMS_in_synpred77_CSharpAngular18858); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred77_CSharpAngular

    // $ANTLR start synpred80_CSharpAngular
    public final void synpred80_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:2997:5: ( unary_operator_declarator )
        // CSharpAngular.g:2997:6: unary_operator_declarator
        {
        pushFollow(FOLLOW_unary_operator_declarator_in_synpred80_CSharpAngular21661);
        unary_operator_declarator();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred80_CSharpAngular

    // $ANTLR start synpred81_CSharpAngular
    public final void synpred81_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:3782:5: ( AMP )
        // CSharpAngular.g:3782:6: AMP
        {
        match(input,AMP,FOLLOW_AMP_in_synpred81_CSharpAngular27822); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred81_CSharpAngular

    // $ANTLR start synpred82_CSharpAngular
    public final void synpred82_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:3837:3: ({...}? ( type )? IDENTIFIER IN expression join_contextual_keyword )
        // CSharpAngular.g:3837:4: {...}? ( type )? IDENTIFIER IN expression join_contextual_keyword
        {
        if ( !((input.LT(1).getText().equals("from"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred82_CSharpAngular", "input.LT(1).getText().equals(\"from\")");
        }

        // CSharpAngular.g:3837:44: ( type )?
        int alt495=2;
        int LA495_0 = input.LA(1);

        if ( (LA495_0==BOOL||LA495_0==BYTE||LA495_0==CHAR||LA495_0==DECIMAL||LA495_0==DOUBLE||LA495_0==FLOAT||LA495_0==INT||LA495_0==LONG||LA495_0==OBJECT||LA495_0==SBYTE||LA495_0==SHORT||LA495_0==STRING||(LA495_0 >= UINT && LA495_0 <= ULONG)||LA495_0==USHORT||LA495_0==VOID) ) {
            alt495=1;
        }
        else if ( (LA495_0==IDENTIFIER) ) {
            int LA495_2 = input.LA(2);

            if ( (LA495_2==DOT||LA495_2==DOUBLE_COLON||LA495_2==IDENTIFIER||LA495_2==INTERR||LA495_2==LT||LA495_2==OPEN_BRACKET||LA495_2==STAR) ) {
                alt495=1;
            }
        }
        switch (alt495) {
            case 1 :
                // CSharpAngular.g:3837:45: type
                {
                pushFollow(FOLLOW_type_in_synpred82_CSharpAngular28161);
                type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred82_CSharpAngular28165); if (state.failed) return ;

        match(input,IN,FOLLOW_IN_in_synpred82_CSharpAngular28167); if (state.failed) return ;

        pushFollow(FOLLOW_expression_in_synpred82_CSharpAngular28169);
        expression();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_join_contextual_keyword_in_synpred82_CSharpAngular28171);
        join_contextual_keyword();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred82_CSharpAngular

    // $ANTLR start synpred83_CSharpAngular
    public final void synpred83_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:3840:3: ({...}? ( type )? IDENTIFIER IN expression where_contextual_keyword )
        // CSharpAngular.g:3840:4: {...}? ( type )? IDENTIFIER IN expression where_contextual_keyword
        {
        if ( !((input.LT(1).getText().equals("from"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred83_CSharpAngular", "input.LT(1).getText().equals(\"from\")");
        }

        // CSharpAngular.g:3840:44: ( type )?
        int alt496=2;
        int LA496_0 = input.LA(1);

        if ( (LA496_0==BOOL||LA496_0==BYTE||LA496_0==CHAR||LA496_0==DECIMAL||LA496_0==DOUBLE||LA496_0==FLOAT||LA496_0==INT||LA496_0==LONG||LA496_0==OBJECT||LA496_0==SBYTE||LA496_0==SHORT||LA496_0==STRING||(LA496_0 >= UINT && LA496_0 <= ULONG)||LA496_0==USHORT||LA496_0==VOID) ) {
            alt496=1;
        }
        else if ( (LA496_0==IDENTIFIER) ) {
            int LA496_2 = input.LA(2);

            if ( (LA496_2==DOT||LA496_2==DOUBLE_COLON||LA496_2==IDENTIFIER||LA496_2==INTERR||LA496_2==LT||LA496_2==OPEN_BRACKET||LA496_2==STAR) ) {
                alt496=1;
            }
        }
        switch (alt496) {
            case 1 :
                // CSharpAngular.g:3840:45: type
                {
                pushFollow(FOLLOW_type_in_synpred83_CSharpAngular28198);
                type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred83_CSharpAngular28202); if (state.failed) return ;

        match(input,IN,FOLLOW_IN_in_synpred83_CSharpAngular28204); if (state.failed) return ;

        pushFollow(FOLLOW_expression_in_synpred83_CSharpAngular28206);
        expression();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_where_contextual_keyword_in_synpred83_CSharpAngular28208);
        where_contextual_keyword();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred83_CSharpAngular

    // $ANTLR start synpred84_CSharpAngular
    public final void synpred84_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:3843:3: ({...}? ( type )? IDENTIFIER IN expression {...}?)
        // CSharpAngular.g:3843:4: {...}? ( type )? IDENTIFIER IN expression {...}?
        {
        if ( !((input.LT(1).getText().equals("from"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred84_CSharpAngular", "input.LT(1).getText().equals(\"from\")");
        }

        // CSharpAngular.g:3843:44: ( type )?
        int alt497=2;
        int LA497_0 = input.LA(1);

        if ( (LA497_0==BOOL||LA497_0==BYTE||LA497_0==CHAR||LA497_0==DECIMAL||LA497_0==DOUBLE||LA497_0==FLOAT||LA497_0==INT||LA497_0==LONG||LA497_0==OBJECT||LA497_0==SBYTE||LA497_0==SHORT||LA497_0==STRING||(LA497_0 >= UINT && LA497_0 <= ULONG)||LA497_0==USHORT||LA497_0==VOID) ) {
            alt497=1;
        }
        else if ( (LA497_0==IDENTIFIER) ) {
            int LA497_2 = input.LA(2);

            if ( (LA497_2==DOT||LA497_2==DOUBLE_COLON||LA497_2==IDENTIFIER||LA497_2==INTERR||LA497_2==LT||LA497_2==OPEN_BRACKET||LA497_2==STAR) ) {
                alt497=1;
            }
        }
        switch (alt497) {
            case 1 :
                // CSharpAngular.g:3843:45: type
                {
                pushFollow(FOLLOW_type_in_synpred84_CSharpAngular28234);
                type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred84_CSharpAngular28238); if (state.failed) return ;

        match(input,IN,FOLLOW_IN_in_synpred84_CSharpAngular28240); if (state.failed) return ;

        pushFollow(FOLLOW_expression_in_synpred84_CSharpAngular28242);
        expression();

        state._fsp--;
        if (state.failed) return ;

        if ( !((input.LT(1).getText().equals("from"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred84_CSharpAngular", "input.LT(1).getText().equals(\"from\")");
        }

        }

    }
    // $ANTLR end synpred84_CSharpAngular

    // $ANTLR start synpred85_CSharpAngular
    public final void synpred85_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:3846:3: ({...}? ( type )? IDENTIFIER IN expression {...}?)
        // CSharpAngular.g:3846:4: {...}? ( type )? IDENTIFIER IN expression {...}?
        {
        if ( !((input.LT(1).getText().equals("from"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred85_CSharpAngular", "input.LT(1).getText().equals(\"from\")");
        }

        // CSharpAngular.g:3846:44: ( type )?
        int alt498=2;
        int LA498_0 = input.LA(1);

        if ( (LA498_0==BOOL||LA498_0==BYTE||LA498_0==CHAR||LA498_0==DECIMAL||LA498_0==DOUBLE||LA498_0==FLOAT||LA498_0==INT||LA498_0==LONG||LA498_0==OBJECT||LA498_0==SBYTE||LA498_0==SHORT||LA498_0==STRING||(LA498_0 >= UINT && LA498_0 <= ULONG)||LA498_0==USHORT||LA498_0==VOID) ) {
            alt498=1;
        }
        else if ( (LA498_0==IDENTIFIER) ) {
            int LA498_2 = input.LA(2);

            if ( (LA498_2==DOT||LA498_2==DOUBLE_COLON||LA498_2==IDENTIFIER||LA498_2==INTERR||LA498_2==LT||LA498_2==OPEN_BRACKET||LA498_2==STAR) ) {
                alt498=1;
            }
        }
        switch (alt498) {
            case 1 :
                // CSharpAngular.g:3846:45: type
                {
                pushFollow(FOLLOW_type_in_synpred85_CSharpAngular28270);
                type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred85_CSharpAngular28274); if (state.failed) return ;

        match(input,IN,FOLLOW_IN_in_synpred85_CSharpAngular28276); if (state.failed) return ;

        pushFollow(FOLLOW_expression_in_synpred85_CSharpAngular28278);
        expression();

        state._fsp--;
        if (state.failed) return ;

        if ( !((input.LT(1).getText().equals("group"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred85_CSharpAngular", "input.LT(1).getText().equals(\"group\")");
        }

        }

    }
    // $ANTLR end synpred85_CSharpAngular

    // $ANTLR start synpred86_CSharpAngular
    public final void synpred86_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:3849:3: ({...}? ( type )? IDENTIFIER IN expression {...}?)
        // CSharpAngular.g:3849:4: {...}? ( type )? IDENTIFIER IN expression {...}?
        {
        if ( !((input.LT(1).getText().equals("from"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred86_CSharpAngular", "input.LT(1).getText().equals(\"from\")");
        }

        // CSharpAngular.g:3849:44: ( type )?
        int alt499=2;
        int LA499_0 = input.LA(1);

        if ( (LA499_0==BOOL||LA499_0==BYTE||LA499_0==CHAR||LA499_0==DECIMAL||LA499_0==DOUBLE||LA499_0==FLOAT||LA499_0==INT||LA499_0==LONG||LA499_0==OBJECT||LA499_0==SBYTE||LA499_0==SHORT||LA499_0==STRING||(LA499_0 >= UINT && LA499_0 <= ULONG)||LA499_0==USHORT||LA499_0==VOID) ) {
            alt499=1;
        }
        else if ( (LA499_0==IDENTIFIER) ) {
            int LA499_2 = input.LA(2);

            if ( (LA499_2==DOT||LA499_2==DOUBLE_COLON||LA499_2==IDENTIFIER||LA499_2==INTERR||LA499_2==LT||LA499_2==OPEN_BRACKET||LA499_2==STAR) ) {
                alt499=1;
            }
        }
        switch (alt499) {
            case 1 :
                // CSharpAngular.g:3849:45: type
                {
                pushFollow(FOLLOW_type_in_synpred86_CSharpAngular28306);
                type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred86_CSharpAngular28310); if (state.failed) return ;

        match(input,IN,FOLLOW_IN_in_synpred86_CSharpAngular28312); if (state.failed) return ;

        pushFollow(FOLLOW_expression_in_synpred86_CSharpAngular28314);
        expression();

        state._fsp--;
        if (state.failed) return ;

        if ( !((input.LT(1).getText().equals("orderby"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred86_CSharpAngular", "input.LT(1).getText().equals(\"orderby\")");
        }

        }

    }
    // $ANTLR end synpred86_CSharpAngular

    // $ANTLR start synpred87_CSharpAngular
    public final void synpred87_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:3852:3: ({...}? ( type )? IDENTIFIER IN expression {...}?)
        // CSharpAngular.g:3852:4: {...}? ( type )? IDENTIFIER IN expression {...}?
        {
        if ( !((input.LT(1).getText().equals("from"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred87_CSharpAngular", "input.LT(1).getText().equals(\"from\")");
        }

        // CSharpAngular.g:3852:44: ( type )?
        int alt500=2;
        int LA500_0 = input.LA(1);

        if ( (LA500_0==BOOL||LA500_0==BYTE||LA500_0==CHAR||LA500_0==DECIMAL||LA500_0==DOUBLE||LA500_0==FLOAT||LA500_0==INT||LA500_0==LONG||LA500_0==OBJECT||LA500_0==SBYTE||LA500_0==SHORT||LA500_0==STRING||(LA500_0 >= UINT && LA500_0 <= ULONG)||LA500_0==USHORT||LA500_0==VOID) ) {
            alt500=1;
        }
        else if ( (LA500_0==IDENTIFIER) ) {
            int LA500_2 = input.LA(2);

            if ( (LA500_2==DOT||LA500_2==DOUBLE_COLON||LA500_2==IDENTIFIER||LA500_2==INTERR||LA500_2==LT||LA500_2==OPEN_BRACKET||LA500_2==STAR) ) {
                alt500=1;
            }
        }
        switch (alt500) {
            case 1 :
                // CSharpAngular.g:3852:45: type
                {
                pushFollow(FOLLOW_type_in_synpred87_CSharpAngular28342);
                type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred87_CSharpAngular28346); if (state.failed) return ;

        match(input,IN,FOLLOW_IN_in_synpred87_CSharpAngular28348); if (state.failed) return ;

        pushFollow(FOLLOW_expression_in_synpred87_CSharpAngular28350);
        expression();

        state._fsp--;
        if (state.failed) return ;

        if ( !((input.LT(1).getText().equals("select"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred87_CSharpAngular", "input.LT(1).getText().equals(\"select\")");
        }

        }

    }
    // $ANTLR end synpred87_CSharpAngular

    // $ANTLR start synpred88_CSharpAngular
    public final void synpred88_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:3855:3: ({...}? ( type )? IDENTIFIER IN expression {...}?)
        // CSharpAngular.g:3855:4: {...}? ( type )? IDENTIFIER IN expression {...}?
        {
        if ( !((input.LT(1).getText().equals("from"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred88_CSharpAngular", "input.LT(1).getText().equals(\"from\")");
        }

        // CSharpAngular.g:3855:44: ( type )?
        int alt501=2;
        int LA501_0 = input.LA(1);

        if ( (LA501_0==BOOL||LA501_0==BYTE||LA501_0==CHAR||LA501_0==DECIMAL||LA501_0==DOUBLE||LA501_0==FLOAT||LA501_0==INT||LA501_0==LONG||LA501_0==OBJECT||LA501_0==SBYTE||LA501_0==SHORT||LA501_0==STRING||(LA501_0 >= UINT && LA501_0 <= ULONG)||LA501_0==USHORT||LA501_0==VOID) ) {
            alt501=1;
        }
        else if ( (LA501_0==IDENTIFIER) ) {
            int LA501_2 = input.LA(2);

            if ( (LA501_2==DOT||LA501_2==DOUBLE_COLON||LA501_2==IDENTIFIER||LA501_2==INTERR||LA501_2==LT||LA501_2==OPEN_BRACKET||LA501_2==STAR) ) {
                alt501=1;
            }
        }
        switch (alt501) {
            case 1 :
                // CSharpAngular.g:3855:45: type
                {
                pushFollow(FOLLOW_type_in_synpred88_CSharpAngular28378);
                type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred88_CSharpAngular28382); if (state.failed) return ;

        match(input,IN,FOLLOW_IN_in_synpred88_CSharpAngular28384); if (state.failed) return ;

        pushFollow(FOLLOW_expression_in_synpred88_CSharpAngular28386);
        expression();

        state._fsp--;
        if (state.failed) return ;

        if ( !((input.LT(1).getText().equals("let"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred88_CSharpAngular", "input.LT(1).getText().equals(\"let\")");
        }

        }

    }
    // $ANTLR end synpred88_CSharpAngular

    // $ANTLR start synpred89_CSharpAngular
    public final void synpred89_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:4212:4: ({...}?)
        // CSharpAngular.g:4212:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("TotalSeconds"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred89_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"TotalSeconds\")");
        }

        }

    }
    // $ANTLR end synpred89_CSharpAngular

    // $ANTLR start synpred90_CSharpAngular
    public final void synpred90_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:4215:4: ({...}?)
        // CSharpAngular.g:4215:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("TotalMinutes"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred90_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"TotalMinutes\")");
        }

        }

    }
    // $ANTLR end synpred90_CSharpAngular

    // $ANTLR start synpred91_CSharpAngular
    public final void synpred91_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:4218:4: ({...}?)
        // CSharpAngular.g:4218:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("Millisecond"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred91_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"Millisecond\")");
        }

        }

    }
    // $ANTLR end synpred91_CSharpAngular

    // $ANTLR start synpred92_CSharpAngular
    public final void synpred92_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:4221:4: ({...}?)
        // CSharpAngular.g:4221:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("Second"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred92_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"Second\")");
        }

        }

    }
    // $ANTLR end synpred92_CSharpAngular

    // $ANTLR start synpred93_CSharpAngular
    public final void synpred93_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:4224:4: ({...}?)
        // CSharpAngular.g:4224:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("Minute"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred93_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"Minute\")");
        }

        }

    }
    // $ANTLR end synpred93_CSharpAngular

    // $ANTLR start synpred94_CSharpAngular
    public final void synpred94_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:4227:4: ({...}?)
        // CSharpAngular.g:4227:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("Hour"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred94_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"Hour\")");
        }

        }

    }
    // $ANTLR end synpred94_CSharpAngular

    // $ANTLR start synpred95_CSharpAngular
    public final void synpred95_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:4230:4: ({...}?)
        // CSharpAngular.g:4230:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("Day"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred95_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"Day\")");
        }

        }

    }
    // $ANTLR end synpred95_CSharpAngular

    // $ANTLR start synpred96_CSharpAngular
    public final void synpred96_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:4233:4: ({...}?)
        // CSharpAngular.g:4233:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("Date"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred96_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"Date\")");
        }

        }

    }
    // $ANTLR end synpred96_CSharpAngular

    // $ANTLR start synpred97_CSharpAngular
    public final void synpred97_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:4236:4: ({...}?)
        // CSharpAngular.g:4236:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("DayOfWeek"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred97_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"DayOfWeek\")");
        }

        }

    }
    // $ANTLR end synpred97_CSharpAngular

    // $ANTLR start synpred98_CSharpAngular
    public final void synpred98_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:4239:4: ({...}?)
        // CSharpAngular.g:4239:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && input.LT(2).getText().equals("Year"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred98_CSharpAngular", "input.LT(1).getText().equals(\".\") && input.LT(2).getText().equals(\"Year\")");
        }

        }

    }
    // $ANTLR end synpred98_CSharpAngular

    // $ANTLR start synpred99_CSharpAngular
    public final void synpred99_CSharpAngular_fragment() throws RecognitionException {
        // CSharpAngular.g:4242:4: ({...}?)
        // CSharpAngular.g:4242:5: {...}?
        {
        if ( !((input.LT(1).getText().equals(".") && (input.LT(2).getText().equals("Count") || input.LT(2).getText().equals("Length")))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred99_CSharpAngular", "input.LT(1).getText().equals(\".\") && (input.LT(2).getText().equals(\"Count\") || input.LT(2).getText().equals(\"Length\"))");
        }

        }

    }
    // $ANTLR end synpred99_CSharpAngular

    // Delegated rules

    public final boolean synpred19_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_CSharpAngular() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_CSharpAngular_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA6 dfa6 = new DFA6(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA341 dfa341 = new DFA341(this);
    protected DFA479 dfa479 = new DFA479(this);
    protected DFA480 dfa480 = new DFA480(this);
    static final String DFA6_eotS =
        "\104\uffff";
    static final String DFA6_eofS =
        "\1\2\103\uffff";
    static final String DFA6_minS =
        "\1\5\1\0\102\uffff";
    static final String DFA6_maxS =
        "\1\u00db\1\0\102\uffff";
    static final String DFA6_acceptS =
        "\2\uffff\1\2\100\uffff\1\1";
    static final String DFA6_specialS =
        "\1\uffff\1\0\102\uffff}>";
    static final String[] DFA6_transitionS = {
            "\3\2\5\uffff\2\2\1\uffff\2\2\2\uffff\1\2\3\uffff\5\2\6\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\2\2\22\uffff\1\2\7\uffff\1\2\4\uffff"+
            "\1\2\3\uffff\1\2\3\uffff\2\2\7\uffff\1\2\1\1\3\uffff\1\2\7\uffff"+
            "\31\2\3\uffff\2\2\42\uffff\1\2\1\uffff\1\2\1\uffff\3\2\2\uffff"+
            "\1\2\1\uffff\1\2\12\uffff\1\2\6\uffff\2\2\16\uffff\1\2\3\uffff"+
            "\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "187:1: type_argument_list_opt : ( ( ( type_argument_list )=>tal= type_argument_list ) -> typeArgumentListOpt(argList=tal)| -> typeArgumentListOpt(argList=null));";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA6_1 = input.LA(1);

                         
                        int index6_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CSharpAngular()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index6_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA17_eotS =
        "\10\uffff";
    static final String DFA17_eofS =
        "\4\uffff\1\6\3\uffff";
    static final String DFA17_minS =
        "\2\124\2\31\1\124\1\31\2\uffff";
    static final String DFA17_maxS =
        "\2\u00b3\2\34\1\u00b3\1\34\2\uffff";
    static final String DFA17_acceptS =
        "\6\uffff\1\2\1\1";
    static final String DFA17_specialS =
        "\10\uffff}>";
    static final String[] DFA17_transitionS = {
            "\1\1\27\uffff\1\2\106\uffff\1\1",
            "\1\1\27\uffff\1\2\106\uffff\1\1",
            "\1\4\2\uffff\1\3",
            "\1\4\2\uffff\1\5",
            "\1\7\27\uffff\1\7\106\uffff\1\7",
            "\1\4\2\uffff\1\5",
            "",
            ""
    };

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "()* loopback of 316:5: ( ( STAR | INTERR )* rank_specifier )*";
        }
    }
    static final String DFA26_eotS =
        "\5\uffff";
    static final String DFA26_eofS =
        "\3\3\2\uffff";
    static final String DFA26_minS =
        "\3\5\2\uffff";
    static final String DFA26_maxS =
        "\3\u00b3\2\uffff";
    static final String DFA26_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA26_specialS =
        "\5\uffff}>";
    static final String[] DFA26_transitionS = {
            "\3\3\5\uffff\1\3\3\uffff\1\3\6\uffff\5\3\14\uffff\1\3\1\uffff"+
            "\1\4\33\uffff\1\3\4\uffff\1\3\7\uffff\2\3\10\uffff\1\3\3\uffff"+
            "\1\3\12\uffff\1\4\1\uffff\4\3\1\4\3\3\1\4\10\3\1\4\2\3\3\uffff"+
            "\2\3\44\uffff\1\3\2\uffff\1\1\1\2\2\uffff\1\3",
            "\3\3\5\uffff\1\3\3\uffff\1\3\6\uffff\5\3\14\uffff\1\3\1\uffff"+
            "\1\4\33\uffff\1\3\4\uffff\1\3\7\uffff\2\3\10\uffff\1\3\3\uffff"+
            "\1\3\12\uffff\1\4\1\uffff\4\3\1\4\3\3\1\4\10\3\1\4\2\3\3\uffff"+
            "\2\3\44\uffff\1\3\2\uffff\1\1\1\2\2\uffff\1\3",
            "\3\3\5\uffff\1\3\3\uffff\1\3\6\uffff\5\3\14\uffff\1\3\1\uffff"+
            "\1\4\33\uffff\1\3\4\uffff\1\3\7\uffff\2\3\10\uffff\1\3\3\uffff"+
            "\1\3\12\uffff\1\4\1\uffff\4\3\1\4\3\3\1\4\10\3\1\4\2\3\3\uffff"+
            "\2\3\44\uffff\1\3\2\uffff\1\1\1\2\2\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "()* loopback of 417:59: (pcl+= primary_expression_Chld )*";
        }
    }
    static final String DFA52_eotS =
        "\10\uffff";
    static final String DFA52_eofS =
        "\10\uffff";
    static final String DFA52_minS =
        "\1\153\1\5\1\uffff\3\5\1\uffff\1\5";
    static final String DFA52_maxS =
        "\1\153\1\u00d7\1\uffff\2\u00d7\1\u00db\1\uffff\1\u00d7";
    static final String DFA52_acceptS =
        "\2\uffff\1\1\3\uffff\1\2\1\uffff";
    static final String DFA52_specialS =
        "\10\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\1",
            "\1\6\5\uffff\2\6\1\uffff\1\6\1\uffff\1\6\3\uffff\3\6\1\uffff"+
            "\1\2\12\uffff\1\6\1\uffff\2\6\5\uffff\1\6\17\uffff\1\6\2\uffff"+
            "\1\6\14\uffff\1\5\3\uffff\2\6\13\uffff\1\6\4\uffff\1\6\1\uffff"+
            "\1\6\2\uffff\1\6\2\uffff\2\6\1\uffff\1\6\5\uffff\1\6\3\uffff"+
            "\1\6\17\uffff\1\6\34\uffff\1\6\5\uffff\1\6\3\uffff\1\6\1\3\1"+
            "\4\1\6\1\uffff\1\6\1\uffff\2\6\11\uffff\1\6\1\uffff\2\6\1\uffff"+
            "\1\6\1\uffff\3\6\15\uffff\1\6",
            "",
            "\1\6\5\uffff\2\6\1\uffff\1\6\1\uffff\1\6\3\uffff\3\6\1\uffff"+
            "\1\2\3\uffff\1\2\6\uffff\1\6\1\uffff\2\6\5\uffff\1\6\17\uffff"+
            "\1\6\2\uffff\1\6\14\uffff\1\5\3\uffff\2\6\13\uffff\1\6\4\uffff"+
            "\1\6\1\uffff\1\6\2\uffff\1\6\2\uffff\2\6\1\uffff\1\6\5\uffff"+
            "\1\6\3\uffff\1\6\17\uffff\1\6\34\uffff\1\6\5\uffff\1\6\3\uffff"+
            "\1\6\1\3\1\4\1\6\1\uffff\1\6\1\uffff\2\6\11\uffff\1\6\1\uffff"+
            "\2\6\1\uffff\1\6\1\uffff\3\6\15\uffff\1\6",
            "\1\6\5\uffff\2\6\1\uffff\1\6\1\uffff\1\6\3\uffff\3\6\1\uffff"+
            "\1\2\3\uffff\1\2\6\uffff\1\6\1\uffff\2\6\5\uffff\1\6\17\uffff"+
            "\1\6\2\uffff\1\6\14\uffff\1\5\3\uffff\2\6\13\uffff\1\6\4\uffff"+
            "\1\6\1\uffff\1\6\2\uffff\1\6\2\uffff\2\6\1\uffff\1\6\5\uffff"+
            "\1\6\3\uffff\1\6\17\uffff\1\6\34\uffff\1\6\5\uffff\1\6\3\uffff"+
            "\1\6\1\3\1\4\1\6\1\uffff\1\6\1\uffff\2\6\11\uffff\1\6\1\uffff"+
            "\2\6\1\uffff\1\6\1\uffff\3\6\15\uffff\1\6",
            "\2\6\1\7\5\uffff\2\6\1\uffff\2\6\2\uffff\1\6\3\uffff\1\6\3"+
            "\uffff\1\6\6\uffff\1\6\5\uffff\1\6\1\uffff\2\6\2\uffff\1\6\17"+
            "\uffff\1\6\7\uffff\1\6\4\uffff\1\6\3\uffff\1\6\3\uffff\2\6\7"+
            "\uffff\2\6\3\uffff\1\6\7\uffff\1\6\1\uffff\2\6\2\uffff\1\6\1"+
            "\uffff\2\6\1\uffff\5\6\3\uffff\2\6\1\uffff\1\6\5\uffff\2\6\42"+
            "\uffff\1\6\3\uffff\3\6\2\uffff\1\6\1\uffff\1\6\21\uffff\2\6"+
            "\16\uffff\1\6\3\uffff\1\6",
            "",
            "\1\2\5\uffff\2\2\1\uffff\1\2\1\uffff\1\2\3\uffff\3\2\14\uffff"+
            "\1\2\1\uffff\2\2\5\uffff\1\2\17\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\6\4\uffff\1\2\3\uffff\2\2\13\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\1\2\5\uffff\1\2\3\uffff"+
            "\1\2\17\uffff\1\2\34\uffff\1\2\5\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\1\uffff\1\2\1\uffff\2\2\11\uffff\1\2\1\uffff\2\2\1\uffff"+
            "\1\2\1\uffff\3\2\15\uffff\1\2"
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "953:1: object_or_collection_initializer : (objInit= object_initializer -> objectOrCollectionInitializer(init=objInit)|colInit= collection_initializer -> objectOrCollectionInitializer(init=colInit));";
        }
    }
    static final String DFA57_eotS =
        "\5\uffff";
    static final String DFA57_eofS =
        "\5\uffff";
    static final String DFA57_minS =
        "\1\114\2\30\2\uffff";
    static final String DFA57_maxS =
        "\3\u00b0\2\uffff";
    static final String DFA57_acceptS =
        "\3\uffff\1\1\1\2";
    static final String DFA57_specialS =
        "\5\uffff}>";
    static final String[] DFA57_transitionS = {
            "\1\3\142\uffff\1\1\1\2",
            "\1\4\3\uffff\1\4\57\uffff\1\3\142\uffff\1\1\1\2",
            "\1\4\3\uffff\1\4\57\uffff\1\3\142\uffff\1\1\1\2",
            "",
            ""
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "986:1: member_initializer : ( (cmnts= comments )? id= IDENTIFIER ASSIGNMENT ival= initializer_value -> memberInitializer(cmnt=cmntsmemberName=$id.textinitVal=ival)| (cmnts= comments ) -> comment(content=cmnts));";
        }
    }
    static final String DFA73_eotS =
        "\31\uffff";
    static final String DFA73_eofS =
        "\31\uffff";
    static final String DFA73_minS =
        "\1\16\1\32\1\uffff\1\32\1\114\1\16\1\114\1\0\1\uffff\1\32\2\uffff"+
        "\1\32\1\16\1\114\1\0\1\16\1\0\2\uffff\1\32\2\uffff\1\16\1\0";
    static final String DFA73_maxS =
        "\1\u00db\1\u00b3\1\uffff\1\u00b3\1\114\1\u00db\1\114\1\0\1\uffff"+
        "\1\u00b3\2\uffff\1\u00b3\1\u00db\1\114\1\0\1\u00db\1\0\2\uffff\1"+
        "\u00b3\2\uffff\1\u00db\1\0";
    static final String DFA73_acceptS =
        "\2\uffff\1\2\5\uffff\1\3\1\uffff\2\1\6\uffff\2\1\1\uffff\2\1\2\uffff";
    static final String DFA73_specialS =
        "\5\uffff\1\2\1\uffff\1\0\5\uffff\1\1\1\uffff\1\5\1\7\1\3\5\uffff"+
        "\1\4\1\6}>";
    static final String[] DFA73_transitionS = {
            "\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\10\uffff\1\2\22\uffff"+
            "\1\2\14\uffff\1\1\3\uffff\1\2\14\uffff\1\2\14\uffff\1\2\77\uffff"+
            "\1\2\3\uffff\1\2\6\uffff\1\2\21\uffff\2\2\16\uffff\1\2\3\uffff"+
            "\1\3",
            "\1\7\20\uffff\1\6\3\uffff\1\4\44\uffff\1\2\11\uffff\1\5\15"+
            "\uffff\1\2\106\uffff\1\2",
            "",
            "\1\10\u0098\uffff\1\2",
            "\1\11",
            "\1\2\1\uffff\1\2\3\uffff\1\2\7\uffff\1\12\6\uffff\1\2\10\uffff"+
            "\1\2\22\uffff\1\2\7\uffff\1\13\4\uffff\1\2\3\uffff\1\2\14\uffff"+
            "\1\2\14\uffff\1\2\77\uffff\1\2\3\uffff\1\2\6\uffff\1\2\21\uffff"+
            "\2\2\16\uffff\1\2\3\uffff\1\2",
            "\1\14",
            "\1\uffff",
            "",
            "\1\17\20\uffff\1\16\50\uffff\1\2\11\uffff\1\15\15\uffff\1\2"+
            "\106\uffff\1\2",
            "",
            "",
            "\1\21\20\uffff\1\6\50\uffff\1\2\11\uffff\1\20\15\uffff\1\2"+
            "\106\uffff\1\2",
            "\1\2\1\uffff\1\2\3\uffff\1\2\7\uffff\1\22\6\uffff\1\2\10\uffff"+
            "\1\2\22\uffff\1\2\7\uffff\1\23\4\uffff\1\2\3\uffff\1\2\14\uffff"+
            "\1\2\14\uffff\1\2\77\uffff\1\2\3\uffff\1\2\6\uffff\1\2\21\uffff"+
            "\2\2\16\uffff\1\2\3\uffff\1\2",
            "\1\24",
            "\1\uffff",
            "\1\2\1\uffff\1\2\3\uffff\1\2\7\uffff\1\25\6\uffff\1\2\10\uffff"+
            "\1\2\22\uffff\1\2\7\uffff\1\26\4\uffff\1\2\3\uffff\1\2\14\uffff"+
            "\1\2\14\uffff\1\2\77\uffff\1\2\3\uffff\1\2\6\uffff\1\2\21\uffff"+
            "\2\2\16\uffff\1\2\3\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "\1\30\20\uffff\1\16\50\uffff\1\2\11\uffff\1\27\15\uffff\1\2"+
            "\106\uffff\1\2",
            "",
            "",
            "\1\2\1\uffff\1\2\3\uffff\1\2\7\uffff\1\25\6\uffff\1\2\10\uffff"+
            "\1\2\22\uffff\1\2\7\uffff\1\26\4\uffff\1\2\3\uffff\1\2\14\uffff"+
            "\1\2\14\uffff\1\2\77\uffff\1\2\3\uffff\1\2\6\uffff\1\2\21\uffff"+
            "\2\2\16\uffff\1\2\3\uffff\1\2",
            "\1\uffff"
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "1120:4: ( ( unbound_type_name )=>typ= unbound_type_name CLOSE_PARENS | type CLOSE_PARENS | VOID CLOSE_PARENS )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA73_7 = input.LA(1);

                         
                        int index73_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred53_CSharpAngular()) ) {s = 11;}

                        else if ( (((input.LT(1).getText().equals("dynamic"))||(!input.LT(1).getText().equals("ObservableCollection"))||(input.LT(1).getText().equals("ObservableCollection")))) ) {s = 2;}

                         
                        input.seek(index73_7);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA73_13 = input.LA(1);

                         
                        int index73_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA73_13==BOOL||LA73_13==BYTE||LA73_13==CHAR||LA73_13==DECIMAL||LA73_13==DOUBLE||LA73_13==FLOAT||LA73_13==IDENTIFIER||LA73_13==INT||LA73_13==LONG||LA73_13==OBJECT||LA73_13==SBYTE||LA73_13==SHORT||LA73_13==STRING||(LA73_13 >= UINT && LA73_13 <= ULONG)||LA73_13==USHORT||LA73_13==VOID) ) {s = 2;}

                        else if ( (LA73_13==COMMA) && (synpred53_CSharpAngular())) {s = 18;}

                        else if ( (LA73_13==GT) && (synpred53_CSharpAngular())) {s = 19;}

                         
                        input.seek(index73_13);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA73_5 = input.LA(1);

                         
                        int index73_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA73_5==COMMA) && (synpred53_CSharpAngular())) {s = 10;}

                        else if ( (LA73_5==GT) && (synpred53_CSharpAngular())) {s = 11;}

                        else if ( (LA73_5==BOOL||LA73_5==BYTE||LA73_5==CHAR||LA73_5==DECIMAL||LA73_5==DOUBLE||LA73_5==FLOAT||LA73_5==IDENTIFIER||LA73_5==INT||LA73_5==LONG||LA73_5==OBJECT||LA73_5==SBYTE||LA73_5==SHORT||LA73_5==STRING||(LA73_5 >= UINT && LA73_5 <= ULONG)||LA73_5==USHORT||LA73_5==VOID) ) {s = 2;}

                         
                        input.seek(index73_5);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA73_17 = input.LA(1);

                         
                        int index73_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred53_CSharpAngular()) ) {s = 22;}

                        else if ( (((!input.LT(1).getText().equals("ObservableCollection"))||(input.LT(1).getText().equals("ObservableCollection")))) ) {s = 2;}

                         
                        input.seek(index73_17);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA73_23 = input.LA(1);

                         
                        int index73_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA73_23==BOOL||LA73_23==BYTE||LA73_23==CHAR||LA73_23==DECIMAL||LA73_23==DOUBLE||LA73_23==FLOAT||LA73_23==IDENTIFIER||LA73_23==INT||LA73_23==LONG||LA73_23==OBJECT||LA73_23==SBYTE||LA73_23==SHORT||LA73_23==STRING||(LA73_23 >= UINT && LA73_23 <= ULONG)||LA73_23==USHORT||LA73_23==VOID) ) {s = 2;}

                        else if ( (LA73_23==COMMA) && (synpred53_CSharpAngular())) {s = 21;}

                        else if ( (LA73_23==GT) && (synpred53_CSharpAngular())) {s = 22;}

                         
                        input.seek(index73_23);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA73_15 = input.LA(1);

                         
                        int index73_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred53_CSharpAngular()) ) {s = 19;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index73_15);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA73_24 = input.LA(1);

                         
                        int index73_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred53_CSharpAngular()) ) {s = 22;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index73_24);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA73_16 = input.LA(1);

                         
                        int index73_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA73_16==COMMA) && (synpred53_CSharpAngular())) {s = 21;}

                        else if ( (LA73_16==GT) && (synpred53_CSharpAngular())) {s = 22;}

                        else if ( (LA73_16==BOOL||LA73_16==BYTE||LA73_16==CHAR||LA73_16==DECIMAL||LA73_16==DOUBLE||LA73_16==FLOAT||LA73_16==IDENTIFIER||LA73_16==INT||LA73_16==LONG||LA73_16==OBJECT||LA73_16==SBYTE||LA73_16==SHORT||LA73_16==STRING||(LA73_16 >= UINT && LA73_16 <= ULONG)||LA73_16==USHORT||LA73_16==VOID) ) {s = 2;}

                         
                        input.seek(index73_16);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 73, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA82_eotS =
        "\116\uffff";
    static final String DFA82_eofS =
        "\116\uffff";
    static final String DFA82_minS =
        "\1\4\115\uffff";
    static final String DFA82_maxS =
        "\1\u00df\115\uffff";
    static final String DFA82_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
        "\1\114\1\115";
    static final String DFA82_specialS =
        "\116\uffff}>";
    static final String[] DFA82_transitionS = {
            "\1\6\6\uffff\1\2\1\7\1\uffff\1\10\1\11\1\12\1\uffff\1\13\1\14"+
            "\1\15\1\5\1\16\1\17\5\uffff\1\20\1\21\4\uffff\1\22\1\uffff\1"+
            "\23\1\24\3\uffff\1\25\1\uffff\1\26\10\uffff\1\27\1\uffff\1\30"+
            "\1\31\1\32\1\33\1\uffff\1\5\1\34\1\35\1\36\1\37\1\40\4\uffff"+
            "\1\41\5\uffff\1\4\1\42\1\43\1\44\1\45\1\5\1\46\1\47\10\uffff"+
            "\1\50\1\51\5\uffff\1\52\1\53\2\uffff\1\5\2\uffff\1\54\2\uffff"+
            "\1\3\1\55\24\uffff\1\56\1\57\1\60\2\uffff\1\61\1\62\1\63\30"+
            "\uffff\1\64\1\5\1\65\1\66\3\uffff\1\67\1\70\2\uffff\1\71\2\uffff"+
            "\1\72\1\73\1\uffff\1\74\1\75\1\5\1\76\1\77\7\uffff\1\100\1\101"+
            "\1\1\1\5\1\102\1\103\1\uffff\1\104\1\105\1\106\14\uffff\1\107"+
            "\1\110\1\111\1\uffff\1\112\1\113\1\114\2\uffff\1\115",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "1212:1: cast_disambiguation_token : ( TILDE -> text(value=$TILDE.text)| BANG -> text(value=$BANG.text)| OPEN_PARENS -> text(value=$OPEN_PARENS.text)|notselect= not_select_contextual_keyword -> text(value=notselect)|lit= literal -> text(value=lit)| ABSTRACT -> text(value=$ABSTRACT.text)| BASE -> text(value=$BASE.text)| BOOL -> text(value=$BOOL.text)| BREAK -> text(value=$BREAK.text)| BYTE -> text(value=$BYTE.text)| CASE -> text(value=$CASE.text)| CATCH -> text(value=$CATCH.text)| CHAR -> text(value=$CHAR.text)| CHECKED -> text(value=$CHECKED.text)| CLASS -> text(value=$CLASS.text)| CONST -> text(value=$CONST.text)| CONTINUE -> text(value=$CONTINUE.text)| DECIMAL -> text(value=$DECIMAL.text)| DEFAULT -> text(value=$DEFAULT.text)| DELEGATE -> text(value=$DELEGATE.text)| DO -> text(value=$DO.text)| DOUBLE -> text(value=$DOUBLE.text)| ELSE -> text(value=$ELSE.text)| ENUM -> text(value=$ENUM.text)| EVENT -> text(value=$EVENT.text)| EXPLICIT -> text(value=$EXPLICIT.text)| EXTERN -> text(value=$EXTERN.text)| FINALLY -> text(value=$FINALLY.text)| FIXED -> text(value=$FIXED.text)| FLOAT -> text(value=$FLOAT.text)| FOR -> text(value=$FOR.text)| FOREACH -> text(value=$FOREACH.text)| GOTO -> text(value=$GOTO.text)| IF -> text(value=$IF.text)| IMPLICIT -> text(value=$IMPLICIT.text)| IN -> text(value=$IN.text)| INT -> text(value=$INT.text)| INTERFACE -> text(value=$INTERFACE.text)| INTERNAL -> text(value=$INTERNAL.text)| LOCK -> text(value=$LOCK.text)| LONG -> text(value=$LONG.text)| NAMESPACE -> text(value=$NAMESPACE.text)| NEW -> text(value=$NEW.text)| OBJECT -> text(value=\"Object\")| OPERATOR -> text(value=$OPERATOR.text)| OUT -> text(value=$OUT.text)| OVERRIDE -> text(value=$OVERRIDE.text)| PARAMS -> text(value=$PARAMS.text)| PRIVATE -> text(value=$PRIVATE.text)| PROTECTED -> text(value=$PROTECTED.text)| PUBLIC -> text(value=$PUBLIC.text)| READONLY -> text(value=$READONLY.text)| REF -> text(value=$REF.text)| RETURN -> text(value=$RETURN.text)| SBYTE -> text(value=$SBYTE.text)| SEALED -> text(value=$SEALED.text)| SHORT -> text(value=$SHORT.text)| SIZEOF -> text(value=$SIZEOF.text)| STACKALLOC -> text(value=$STACKALLOC.text)| STATIC -> text(value=$STATIC.text)| STRING -> text(value=\"String\")| STRUCT -> text(value=$STRUCT.text)| SWITCH -> text(value=$SWITCH.text)| THIS -> text(value=$THIS.text)| THROW -> text(value=$THROW.text)| TRY -> text(value=$TRY.text)| TYPEOF -> text(value=$TYPEOF.text)| UINT -> text(value=$UINT.text)| ULONG -> text(value=$ULONG.text)| UNCHECKED -> text(value=$UNCHECKED.text)| UNSAFE -> text(value=$UNSAFE.text)| USHORT -> text(value=$USHORT.text)| USING -> text(value=$USING.text)| VIRTUAL -> text(value=$VIRTUAL.text)| VOID -> text(value=$VOID.text)| VOLATILE -> text(value=$VOLATILE.text)| WHILE -> text(value=$WHILE.text));";
        }
    }
    static final String DFA140_eotS =
        "\101\uffff";
    static final String DFA140_eofS =
        "\101\uffff";
    static final String DFA140_minS =
        "\1\5\20\0\60\uffff";
    static final String DFA140_maxS =
        "\1\u00df\20\0\60\uffff";
    static final String DFA140_acceptS =
        "\21\uffff\2\2\1\3\54\uffff\1\1";
    static final String DFA140_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1"+
        "\16\1\17\1\20\60\uffff}>";
    static final String[] DFA140_transitionS = {
            "\1\23\5\uffff\2\23\1\uffff\1\16\1\23\1\3\3\uffff\1\12\2\23\6"+
            "\uffff\1\22\1\23\4\uffff\1\15\1\uffff\2\23\3\uffff\1\23\1\uffff"+
            "\1\14\17\uffff\1\23\1\uffff\1\23\1\13\2\23\4\uffff\1\23\5\uffff"+
            "\1\1\1\23\2\uffff\1\6\1\23\12\uffff\1\23\1\10\4\uffff\1\23\1"+
            "\uffff\1\23\2\uffff\1\23\2\uffff\1\17\1\23\1\uffff\1\23\5\uffff"+
            "\1\23\3\uffff\1\23\17\uffff\1\23\34\uffff\1\23\1\uffff\1\23"+
            "\3\uffff\1\2\1\uffff\1\23\1\uffff\1\4\3\23\1\uffff\1\23\1\uffff"+
            "\1\20\1\23\1\uffff\1\23\7\uffff\6\23\1\uffff\1\7\1\11\1\23\14"+
            "\uffff\1\23\1\5\1\23\2\uffff\1\21\3\uffff\1\23",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "1879:1: statement : ( ( ( labeled_statement )=>lblStmt= labeled_statement ) -> statement(stmt=isLinq()?CSharpAngularHelper.linqSourceTargetAppend($lblStmt.text,lblStmt.st.toString())+updateLinqStatus(false):lblStmt)| ( ( declaration_statement )=>decStmt= declaration_statement ) -> statement(stmt=isLinq()?CSharpAngularHelper.linqSourceTargetAppend($decStmt.text,decStmt.st.toString())+updateLinqStatus(false):decStmt)|embdStmt= embedded_statement (cmnt= comments )? -> statement(stmt=isLinq()?CSharpAngularHelper.linqSourceTargetAppend($embdStmt.text,embdStmt.st.toString())+updateLinqStatus(false):embdStmtcmnts=cmnt));";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA140_0 = input.LA(1);

                         
                        int index140_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA140_0==IDENTIFIER) ) {s = 1;}

                        else if ( (LA140_0==SBYTE) ) {s = 2;}

                        else if ( (LA140_0==BYTE) ) {s = 3;}

                        else if ( (LA140_0==SHORT) ) {s = 4;}

                        else if ( (LA140_0==USHORT) ) {s = 5;}

                        else if ( (LA140_0==INT) ) {s = 6;}

                        else if ( (LA140_0==UINT) ) {s = 7;}

                        else if ( (LA140_0==LONG) ) {s = 8;}

                        else if ( (LA140_0==ULONG) ) {s = 9;}

                        else if ( (LA140_0==CHAR) ) {s = 10;}

                        else if ( (LA140_0==FLOAT) ) {s = 11;}

                        else if ( (LA140_0==DOUBLE) ) {s = 12;}

                        else if ( (LA140_0==DECIMAL) ) {s = 13;}

                        else if ( (LA140_0==BOOL) ) {s = 14;}

                        else if ( (LA140_0==OBJECT) ) {s = 15;}

                        else if ( (LA140_0==STRING) ) {s = 16;}

                        else if ( (LA140_0==VOID) && (synpred69_CSharpAngular())) {s = 17;}

                        else if ( (LA140_0==CONST) && (synpred69_CSharpAngular())) {s = 18;}

                        else if ( (LA140_0==AMP||(LA140_0 >= BANG && LA140_0 <= BASE)||LA140_0==BREAK||(LA140_0 >= CHARACTER_LITERAL && LA140_0 <= CHECKED)||LA140_0==CONTINUE||(LA140_0 >= DEFAULT && LA140_0 <= DELEGATE)||LA140_0==DO||LA140_0==FALSE||LA140_0==FIXED||(LA140_0 >= FOR && LA140_0 <= FOREACH)||LA140_0==GOTO||LA140_0==IF||LA140_0==INTEGER_LITERAL||LA140_0==LOCK||LA140_0==MINUS||LA140_0==NEW||LA140_0==NULL||LA140_0==OPEN_BRACE||LA140_0==OPEN_PARENS||LA140_0==OP_DEC||LA140_0==OP_INC||LA140_0==PLUS||LA140_0==REAL_LITERAL||LA140_0==RETURN||LA140_0==SEMICOLON||(LA140_0 >= SINGLE_LINE_COMMENT && LA140_0 <= SIZEOF)||LA140_0==STAR||LA140_0==STRING_LITERAL||LA140_0==SWITCH||(LA140_0 >= THIS && LA140_0 <= TYPEOF)||LA140_0==UNCHECKED||LA140_0==UNSAFE||LA140_0==USING||LA140_0==WHILE) ) {s = 19;}

                         
                        input.seek(index140_0);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA140_1 = input.LA(1);

                         
                        int index140_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred68_CSharpAngular()) ) {s = 64;}

                        else if ( (synpred69_CSharpAngular()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index140_1);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA140_2 = input.LA(1);

                         
                        int index140_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred69_CSharpAngular()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index140_2);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA140_3 = input.LA(1);

                         
                        int index140_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred69_CSharpAngular()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index140_3);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA140_4 = input.LA(1);

                         
                        int index140_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred69_CSharpAngular()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index140_4);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA140_5 = input.LA(1);

                         
                        int index140_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred69_CSharpAngular()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index140_5);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA140_6 = input.LA(1);

                         
                        int index140_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred69_CSharpAngular()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index140_6);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA140_7 = input.LA(1);

                         
                        int index140_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred69_CSharpAngular()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index140_7);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA140_8 = input.LA(1);

                         
                        int index140_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred69_CSharpAngular()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index140_8);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA140_9 = input.LA(1);

                         
                        int index140_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred69_CSharpAngular()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index140_9);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA140_10 = input.LA(1);

                         
                        int index140_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred69_CSharpAngular()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index140_10);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA140_11 = input.LA(1);

                         
                        int index140_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred69_CSharpAngular()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index140_11);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA140_12 = input.LA(1);

                         
                        int index140_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred69_CSharpAngular()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index140_12);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA140_13 = input.LA(1);

                         
                        int index140_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred69_CSharpAngular()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index140_13);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA140_14 = input.LA(1);

                         
                        int index140_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred69_CSharpAngular()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index140_14);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA140_15 = input.LA(1);

                         
                        int index140_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred69_CSharpAngular()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index140_15);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA140_16 = input.LA(1);

                         
                        int index140_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred69_CSharpAngular()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index140_16);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 140, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA341_eotS =
        "\7\uffff";
    static final String DFA341_eofS =
        "\7\uffff";
    static final String DFA341_minS =
        "\1\124\1\uffff\1\31\1\uffff\1\31\1\uffff\1\31";
    static final String DFA341_maxS =
        "\1\u00b3\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34";
    static final String DFA341_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\uffff\1\1\1\uffff";
    static final String DFA341_specialS =
        "\7\uffff}>";
    static final String[] DFA341_transitionS = {
            "\1\3\27\uffff\1\2\106\uffff\1\1",
            "",
            "\1\5\2\uffff\1\4",
            "",
            "\1\5\2\uffff\1\6",
            "",
            "\1\5\2\uffff\1\6"
    };

    static final short[] DFA341_eot = DFA.unpackEncodedString(DFA341_eotS);
    static final short[] DFA341_eof = DFA.unpackEncodedString(DFA341_eofS);
    static final char[] DFA341_min = DFA.unpackEncodedStringToUnsignedChars(DFA341_minS);
    static final char[] DFA341_max = DFA.unpackEncodedStringToUnsignedChars(DFA341_maxS);
    static final short[] DFA341_accept = DFA.unpackEncodedString(DFA341_acceptS);
    static final short[] DFA341_special = DFA.unpackEncodedString(DFA341_specialS);
    static final short[][] DFA341_transition;

    static {
        int numStates = DFA341_transitionS.length;
        DFA341_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA341_transition[i] = DFA.unpackEncodedString(DFA341_transitionS[i]);
        }
    }

    class DFA341 extends DFA {

        public DFA341(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 341;
            this.eot = DFA341_eot;
            this.eof = DFA341_eof;
            this.min = DFA341_min;
            this.max = DFA341_max;
            this.accept = DFA341_accept;
            this.special = DFA341_special;
            this.transition = DFA341_transition;
        }
        public String getDescription() {
            return "3212:1: array_type_Chld : ( (st+= STAR )* rs= rank_specifier -> arrayTypeChld(symbolLst=$strnkSpcr=rs)| (intr+= INTERR )* rns= rank_specifier -> arrayTypeChld(symbolLst=$intrrnkSpcr=rns));";
        }
    }
    static final String DFA479_eotS =
        "\10\uffff";
    static final String DFA479_eofS =
        "\10\uffff";
    static final String DFA479_minS =
        "\1\53\1\16\2\uffff\1\34\1\16\1\53\1\34";
    static final String DFA479_maxS =
        "\1\155\1\u00db\2\uffff\1\u00b3\1\u00db\1\155\1\u00b3";
    static final String DFA479_acceptS =
        "\2\uffff\1\2\1\1\4\uffff";
    static final String DFA479_specialS =
        "\10\uffff}>";
    static final String[] DFA479_transitionS = {
            "\1\3\62\uffff\1\1\16\uffff\1\2",
            "\1\3\1\uffff\1\3\3\uffff\1\3\16\uffff\1\3\10\uffff\1\3\22\uffff"+
            "\1\3\14\uffff\1\4\3\uffff\1\3\14\uffff\1\3\14\uffff\1\3\1\uffff"+
            "\1\2\75\uffff\1\3\3\uffff\1\3\6\uffff\1\3\21\uffff\2\3\16\uffff"+
            "\1\3\3\uffff\1\3",
            "",
            "",
            "\1\5\16\uffff\1\3\3\uffff\1\3\27\uffff\1\6\14\uffff\1\3\11"+
            "\uffff\1\3\15\uffff\1\3\106\uffff\1\3",
            "\1\3\1\uffff\1\3\3\uffff\1\3\16\uffff\1\3\10\uffff\1\3\22\uffff"+
            "\1\3\14\uffff\1\7\3\uffff\1\3\14\uffff\1\3\14\uffff\1\3\1\uffff"+
            "\1\2\75\uffff\1\3\3\uffff\1\3\6\uffff\1\3\21\uffff\2\3\16\uffff"+
            "\1\3\3\uffff\1\3",
            "\1\3\101\uffff\1\2",
            "\1\5\16\uffff\1\3\3\uffff\1\3\27\uffff\1\6\14\uffff\1\3\11"+
            "\uffff\1\3\15\uffff\1\3\106\uffff\1\3"
    };

    static final short[] DFA479_eot = DFA.unpackEncodedString(DFA479_eotS);
    static final short[] DFA479_eof = DFA.unpackEncodedString(DFA479_eofS);
    static final char[] DFA479_min = DFA.unpackEncodedStringToUnsignedChars(DFA479_minS);
    static final char[] DFA479_max = DFA.unpackEncodedStringToUnsignedChars(DFA479_maxS);
    static final short[] DFA479_accept = DFA.unpackEncodedString(DFA479_acceptS);
    static final short[] DFA479_special = DFA.unpackEncodedString(DFA479_specialS);
    static final short[][] DFA479_transition;

    static {
        int numStates = DFA479_transitionS.length;
        DFA479_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA479_transition[i] = DFA.unpackEncodedString(DFA479_transitionS[i]);
        }
    }

    class DFA479 extends DFA {

        public DFA479(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 479;
            this.eot = DFA479_eot;
            this.eof = DFA479_eof;
            this.min = DFA479_min;
            this.max = DFA479_max;
            this.accept = DFA479_accept;
            this.special = DFA479_special;
            this.transition = DFA479_transition;
        }
        public String getDescription() {
            return "()* loopback of 4181:21: (lst+= method_member_name2_chld )*";
        }
    }
    static final String DFA480_eotS =
        "\10\uffff";
    static final String DFA480_eofS =
        "\10\uffff";
    static final String DFA480_minS =
        "\1\53\1\16\2\uffff\1\34\1\16\1\53\1\34";
    static final String DFA480_maxS =
        "\1\155\1\u00db\2\uffff\1\u00b3\1\u00db\1\155\1\u00b3";
    static final String DFA480_acceptS =
        "\2\uffff\1\2\1\1\4\uffff";
    static final String DFA480_specialS =
        "\10\uffff}>";
    static final String[] DFA480_transitionS = {
            "\1\3\62\uffff\1\1\16\uffff\1\2",
            "\1\3\1\uffff\1\3\3\uffff\1\3\16\uffff\1\3\10\uffff\1\3\22\uffff"+
            "\1\3\14\uffff\1\4\3\uffff\1\3\14\uffff\1\3\14\uffff\1\3\1\uffff"+
            "\1\2\75\uffff\1\3\3\uffff\1\3\6\uffff\1\3\21\uffff\2\3\16\uffff"+
            "\1\3\3\uffff\1\3",
            "",
            "",
            "\1\5\16\uffff\1\3\3\uffff\1\3\27\uffff\1\6\14\uffff\1\3\11"+
            "\uffff\1\3\15\uffff\1\3\106\uffff\1\3",
            "\1\3\1\uffff\1\3\3\uffff\1\3\16\uffff\1\3\10\uffff\1\3\22\uffff"+
            "\1\3\14\uffff\1\7\3\uffff\1\3\14\uffff\1\3\14\uffff\1\3\1\uffff"+
            "\1\2\75\uffff\1\3\3\uffff\1\3\6\uffff\1\3\21\uffff\2\3\16\uffff"+
            "\1\3\3\uffff\1\3",
            "\1\3\101\uffff\1\2",
            "\1\5\16\uffff\1\3\3\uffff\1\3\27\uffff\1\6\14\uffff\1\3\11"+
            "\uffff\1\3\15\uffff\1\3\106\uffff\1\3"
    };

    static final short[] DFA480_eot = DFA.unpackEncodedString(DFA480_eotS);
    static final short[] DFA480_eof = DFA.unpackEncodedString(DFA480_eofS);
    static final char[] DFA480_min = DFA.unpackEncodedStringToUnsignedChars(DFA480_minS);
    static final char[] DFA480_max = DFA.unpackEncodedStringToUnsignedChars(DFA480_maxS);
    static final short[] DFA480_accept = DFA.unpackEncodedString(DFA480_acceptS);
    static final short[] DFA480_special = DFA.unpackEncodedString(DFA480_specialS);
    static final short[][] DFA480_transition;

    static {
        int numStates = DFA480_transitionS.length;
        DFA480_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA480_transition[i] = DFA.unpackEncodedString(DFA480_transitionS[i]);
        }
    }

    class DFA480 extends DFA {

        public DFA480(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 480;
            this.eot = DFA480_eot;
            this.eof = DFA480_eof;
            this.min = DFA480_min;
            this.max = DFA480_max;
            this.accept = DFA480_accept;
            this.special = DFA480_special;
            this.transition = DFA480_transition;
        }
        public String getDescription() {
            return "()* loopback of 4183:48: (lst+= method_member_name2_chld )*";
        }
    }
 

    public static final BitSet FOLLOW_module_in_cSharpAngular92 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_cSharpAngular94 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilation_unit_in_module116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_or_type_name_in_namespace_name145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_or_type_name_in_type_name179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observableCollection_contextual_keyword_in_namespace_or_type_name213 = new BitSet(new long[]{0x0000080000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_namespace_or_type_name217 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_namespace_or_type_name_Chld_in_namespace_or_type_name223 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_qualified_alias_member_in_namespace_or_type_name251 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_namespace_or_type_name_Chld_in_namespace_or_type_name256 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_observableCollection_contextual_keyword290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_observableCollection_contextual_keyword309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_namespace_or_type_name_Chld351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_namespace_or_type_name_Chld355 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_namespace_or_type_name_Chld359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_namespace_or_type_name_Chld396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_namespace_or_type_name_Chld400 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_namespace_or_type_name_Chld404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_namespace_or_type_name_Chld428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_namespace_or_type_name_Chld432 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_namespace_or_type_name_Chld436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_argument_list_in_type_argument_list_opt479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_base_type_in_type527 = new BitSet(new long[]{0x0000000000000002L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_typeChld_in_type539 = new BitSet(new long[]{0x0000000000000002L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_INTERR_in_typeChld575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_specifier_in_typeChld602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_typeChld619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_type_in_base_type660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_type_in_base_type688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_base_type721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_STAR_in_base_type723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numeric_type_in_simple_type772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_simple_type797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integral_type_in_numeric_type835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_floating_point_type_in_numeric_type859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_numeric_type876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SBYTE_in_integral_type915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTE_in_integral_type929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHORT_in_integral_type943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USHORT_in_integral_type957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_integral_type971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UINT_in_integral_type985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_integral_type999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ULONG_in_integral_type1013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_in_integral_type1027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_floating_point_type1052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_floating_point_type1066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_nullable_value_type_in_nullable_type1090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_INTERR_in_nullable_type1092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_base_type_in_non_nullable_value_type1121 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_non_nullable_value_type1135 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_STAR_in_non_nullable_value_type1143 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_simple_type_in_reference_type1186 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_class_type_in_reference_type1196 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_VOID_in_reference_type1204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_STAR_in_reference_type1206 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_reference_type1224 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_reference_type1244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_class_type1264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_in_class_type1296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dynamic_contextual_keyword_in_class_type1339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_class_type1356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_interface_type1404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_delegate_type1437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_type_argument_list1465 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_arguments_in_type_argument_list1469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_type_argument_list1471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_argument_in_type_arguments1495 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_type_arguments_Chld_in_type_arguments1500 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_type_arguments_Chld1528 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_argument_in_type_arguments_Chld1532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_type_argument1558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_type_void1592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variable_reference1622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_in_argument_list1648 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_argument_list_Chld_in_argument_list1653 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_argument_list_Chld1682 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006BC43000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_comments_in_argument_list_Chld1687 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_argument_list_Chld1693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_name_in_argument1723 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_value_in_argument1729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_argument_name1755 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_argument_name1757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_argument_value1781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_in_argument_value1795 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_variable_reference_in_argument_value1799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_in_argument_value1817 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_variable_reference_in_argument_value1819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_start_in_primary_expression1851 = new BitSet(new long[]{0x0000080000000002L,0x0088300000000000L,0x0001800000000001L});
    public static final BitSet FOLLOW_bracket_expression_in_primary_expression1857 = new BitSet(new long[]{0x0000080000000002L,0x0088300000000000L,0x0001800000000001L});
    public static final BitSet FOLLOW_primary_expression_Chld_in_primary_expression1864 = new BitSet(new long[]{0x0000080000000002L,0x0088200000000000L,0x0001800000000001L});
    public static final BitSet FOLLOW_comments_in_primary_expression1871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_week_operations1918 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_week_operations1920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_week_operations1922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_week_operations1946 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_week_operations1948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_week_operations1950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_week_operations1974 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_week_operations1976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_week_operations1978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_week_operations2002 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_week_operations2004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_week_operations2006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_week_operations2030 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_week_operations2032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_week_operations2034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_week_operations2058 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_week_operations2060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_week_operations2062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_week_operations2086 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_week_operations2088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_week_operations2090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_week_operations2112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_week_operations2128 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_week_operations2130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_week_operations2134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2168 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2172 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2176 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_date_operations2180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2204 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2208 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2212 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_date_operations2216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2240 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2244 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2248 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_date_operations2252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2276 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2280 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2284 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_date_operations2288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2312 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2316 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2320 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_date_operations2324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2348 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2352 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2356 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_date_operations2360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2385 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2389 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2393 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_date_operations2397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2421 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2425 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2429 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_date_operations2433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2458 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2462 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2486 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_date_operations2488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_date_operations2490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_string_operations2518 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_string_operations2520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_string_operations2522 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_string_operations2526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_string_operations2548 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_string_operations2550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_string_operations2552 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_string_operations2556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_string_operations2579 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_string_operations2581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_string_operations2583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_string_operations2621 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_string_operations2623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_string_operations2625 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LT_in_string_operations2627 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_string_operations2629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_string_operations2631 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_string_operations2633 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_string_operations2637 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_string_operations2639 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_string_operations2643 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_string_operations2645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_string_operations2675 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_string_operations2677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_string_operations2679 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_string_operations2681 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_string_operations2685 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_string_operations2687 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_string_operations2691 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_string_operations2693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_string_operations2730 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_string_operations2732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_string_operations2734 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_method_invocation2_in_string_operations2738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_string_operations2761 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_string_operations2763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_string_operations2765 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_string_operations2769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_string_operations2817 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_string_operations2819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_string_operations2821 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_string_operations2823 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_string_operations2827 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_string_operations2829 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_string_operations2833 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_string_operations2835 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_string_operations2839 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_string_operations2841 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_string_operations2845 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_string_operations2847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_string_operations2887 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_string_operations2889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_string_operations2891 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_string_operations2893 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_string_operations2897 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_string_operations2899 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_string_operations2903 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_string_operations2905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_string_operations2928 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_string_operations2930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_string_operations2932 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_string_operations2934 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_string_operations2938 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_string_operations2940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_string_operations2962 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_string_operations2964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_string_operations2966 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_method_invocation2_in_string_operations2970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_string_operations2993 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_string_operations2995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_string_operations2997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_primary_expression_Chld3025 = new BitSet(new long[]{0x0000080000000000L,0x0088200000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_primary_expression_sub_Chld_in_primary_expression_Chld3031 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_bracket_expression_in_primary_expression_Chld3036 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_member_access3_in_primary_expression_sub_Chld3087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_access3_in_primary_expression_sub_Chld3120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_access2_in_primary_expression_sub_Chld3139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_invocation2_in_primary_expression_sub_Chld3157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_INC_in_primary_expression_sub_Chld3173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_DEC_in_primary_expression_sub_Chld3189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_PTR_in_primary_expression_sub_Chld3205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_primary_expression_sub_Chld3207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access33273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access33275 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_method_invocation2_in_member_access33279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access33305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access33307 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_member_access33309 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_member_access33311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access33337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access33339 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_member_access33341 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_member_access33343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access33375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access33377 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_method_invocation2_in_member_access33382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access33409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access33411 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_member_access33416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access33455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access33457 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LT_in_member_access33459 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_member_access33461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_member_access33463 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_member_access33465 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_member_access33467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access33493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access33495 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_member_access33497 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_member_access33499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access33525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access33527 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_member_access33529 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_member_access33533 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_member_access33535 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_member_access33539 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_member_access33541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access33568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access33570 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_member_access33572 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_member_access33574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access33601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access33603 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_member_access33607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access33634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access33636 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_method_invocation2_in_member_access33640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access33667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access33669 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_member_access33673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access33700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access33702 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_member_access33704 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_member_access33706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access33733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access33735 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_method_invocation2_in_member_access33739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access33766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access33768 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_member_access33770 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_member_access33772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access33792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access33796 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_member_access33800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary_expression_start3834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_name_in_primary_expression_start3852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesized_expression_in_primary_expression_start3870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predefined_type_in_primary_expression_start3888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualified_alias_member_in_primary_expression_start3907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_this_access_in_primary_expression_start3927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_base_access_in_primary_expression_start3945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_start_Chld_in_primary_expression_start3963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_expression_in_primary_expression_start3986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_checked_expression_in_primary_expression_start4004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unchecked_expression_in_primary_expression_start4022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_value_expression_in_primary_expression_start4040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_method_expression_in_primary_expression_start4058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sizeof_expression_in_primary_expression_start4076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_primary_expression_start_Chld4105 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_primary_expression_start_Chld4110 = new BitSet(new long[]{0x0000000000000000L,0x0000380000000000L});
    public static final BitSet FOLLOW_primary_expression_start_sub_Chld_in_primary_expression_start_Chld4114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_primary_expression_start_Chld4133 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_anonymous_object_initializer_in_primary_expression_start_Chld4137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_primary_expression_start_Chld4152 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_primary_expression_start_Chld4156 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_array_initializer_in_primary_expression_start_Chld4160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_creation_expression2_in_primary_expression_start_sub_Chld4193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_primary_expression_start_sub_Chld4211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_primary_expression_start_sub_Chld4231 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_list_in_primary_expression_start_sub_Chld4235 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_primary_expression_start_sub_Chld4237 = new BitSet(new long[]{0x0000000000000002L,0x0000180000000000L});
    public static final BitSet FOLLOW_rank_specifiers_in_primary_expression_start_sub_Chld4242 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_array_initializer_in_primary_expression_start_sub_Chld4249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_specifiers_in_primary_expression_start_sub_Chld4278 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_array_initializer_in_primary_expression_start_sub_Chld4282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_bracket_expression4313 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_list_in_bracket_expression4317 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_bracket_expression4319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_operations_in_simple_name4359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_week_operations_in_simple_name4387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name4414 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_simple_name4416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name4418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name4445 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_simple_name4447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name4449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name4473 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_simple_name4475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name4477 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_simple_name4481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name4505 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_simple_name4507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name4509 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_simple_name4513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name4537 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_simple_name4539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name4541 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_simple_name4545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name4568 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_simple_name4570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name4572 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_parenthesized_expression_in_simple_name4576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name4602 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_simple_name4604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name4608 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_simple_name4610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name4614 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_method_invocation2_in_simple_name4618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_name1_in_simple_name4651 = new BitSet(new long[]{0x0000000000000000L,0x0000200000001000L});
    public static final BitSet FOLLOW_method_invocation2_in_simple_name4657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_remove_name_in_simple_name4694 = new BitSet(new long[]{0x0000000000000000L,0x0000200000001000L});
    public static final BitSet FOLLOW_method_invocation2_in_simple_name4700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name4723 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_simple_name4727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_remove_name4762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_remove_name4782 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_simple_remove_name4784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_parenthesized_expression4813 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_parenthesized_expression4817 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_parenthesized_expression4819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name14846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name14870 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_simple_name14872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name14892 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_simple_name14894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_in_member_access4926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_predefined_cast_type4955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTE_in_predefined_cast_type4971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_in_predefined_cast_type4987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_predefined_cast_type5003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_predefined_cast_type5019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_predefined_cast_type5035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_predefined_cast_type5051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_predefined_cast_type5067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_in_predefined_cast_type5083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SBYTE_in_predefined_cast_type5099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHORT_in_predefined_cast_type5115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_predefined_cast_type5131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UINT_in_predefined_cast_type5147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ULONG_in_predefined_cast_type5163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USHORT_in_predefined_cast_type5179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_predefined_type5204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTE_in_predefined_type5218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_in_predefined_type5232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_predefined_type5246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_predefined_type5260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_predefined_type5274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_predefined_type5288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_predefined_type5302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_in_predefined_type5316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SBYTE_in_predefined_type5330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHORT_in_predefined_type5344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_operations_in_predefined_type5367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_predefined_type5383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UINT_in_predefined_type5397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ULONG_in_predefined_type5411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USHORT_in_predefined_type5425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expression_list5455 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_expression_list_Chld_in_expression_list5460 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_expression_list_Chld5488 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_expression_list_Chld5492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_this_access5518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BASE_in_base_access5541 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_base_access5543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_base_access5545 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_base_access5549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BASE_in_base_access5563 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_base_access5565 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_list_in_base_access5567 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_base_access5569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_object_creation_expression5590 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_object_creation_expression5594 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L});
    public static final BitSet FOLLOW_object_creation_expression_Chld_in_object_creation_expression5598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_object_creation_expression_Chld5631 = new BitSet(new long[]{0x9000106804715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_list_in_object_creation_expression_Chld5636 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_object_creation_expression_Chld5640 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression_Chld5645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression_Chld5672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_initializer_in_object_or_collection_initializer5706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_initializer_in_object_or_collection_initializer5722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_object_initializer5750 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_object_initializer5752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_object_initializer5768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0001800000000000L});
    public static final BitSet FOLLOW_member_initializer_list_in_object_initializer5772 = new BitSet(new long[]{0x0000000011000000L});
    public static final BitSet FOLLOW_COMMA_in_object_initializer5774 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_object_initializer5777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_initializer_in_member_initializer_list5803 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_member_initializer_list_Chld_in_member_initializer_list5808 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_member_initializer_list_Chld5836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0001800000000000L});
    public static final BitSet FOLLOW_member_initializer_in_member_initializer_list_Chld5840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_member_initializer5867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_initializer5873 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_member_initializer5875 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_initializer_value_in_member_initializer5879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_member_initializer5904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_initializer_value5931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_initializer_value5947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_collection_initializer5975 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006BC41000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_element_initializer_list_in_collection_initializer5979 = new BitSet(new long[]{0x0000000011000000L});
    public static final BitSet FOLLOW_COMMA_in_collection_initializer5981 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_collection_initializer5984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_element_initializer_list6011 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_element_initializer_in_element_initializer_list6017 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_element_initializer_list_Chld_in_element_initializer_list6022 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_element_initializer_list_Chld6054 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006BC41000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_comments_in_element_initializer_list_Chld6059 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_element_initializer_in_element_initializer_list_Chld6065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_assignment_expression_in_element_initializer6093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_element_initializer6107 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_list_in_element_initializer6111 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_element_initializer6113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_array_creation_expression6147 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_array_creation_expression_Chld_in_array_creation_expression6151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_creation_expression_sub_Chld_in_array_creation_expression_Chld6195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_array_type_in_array_creation_expression_Chld6216 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_array_creation_expression_Chld6220 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_list_in_array_creation_expression_Chld6224 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_array_creation_expression_Chld6226 = new BitSet(new long[]{0x0000000000000002L,0x0000180000000000L});
    public static final BitSet FOLLOW_rank_specifiers_in_array_creation_expression_Chld6231 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_array_initializer_in_array_creation_expression_Chld6238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_type_in_array_creation_expression_sub_Chld6290 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_array_initializer_in_array_creation_expression_sub_Chld6294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_delegate_creation_expression6325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_delegate_type_in_delegate_creation_expression6327 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_delegate_creation_expression6329 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_delegate_creation_expression6331 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_delegate_creation_expression6333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_anonymous_object_creation_expression6348 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression6352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_anonymous_object_initializer6380 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer6382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_anonymous_object_initializer6398 = new BitSet(new long[]{0x9000106800715000L,0x0000249020031000L,0x0062441000000000L,0x00000000008003A9L});
    public static final BitSet FOLLOW_member_declarator_list_in_anonymous_object_initializer6402 = new BitSet(new long[]{0x0000000011000000L});
    public static final BitSet FOLLOW_COMMA_in_anonymous_object_initializer6405 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer6409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_declarator_in_member_declarator_list6435 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_member_declarator_list_Chld_in_member_declarator_list6441 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_member_declarator_list_Chld6469 = new BitSet(new long[]{0x9000106800715000L,0x0000249020031000L,0x0063C41000000000L,0x00000000008003A9L});
    public static final BitSet FOLLOW_comments_in_member_declarator_list_Chld6474 = new BitSet(new long[]{0x9000106800715000L,0x0000249020031000L,0x0062441000000000L,0x00000000008003A9L});
    public static final BitSet FOLLOW_member_declarator_in_member_declarator_list_Chld6480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_in_member_declarator6512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_declarator6530 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_member_declarator6532 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_member_declarator6536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_typeof_expression6558 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_typeof_expression6560 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_unbound_type_name_in_typeof_expression6575 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_typeof_expression6577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeof_expression6584 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_typeof_expression6586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_typeof_expression6593 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_typeof_expression6595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_unbound_type_name6627 = new BitSet(new long[]{0x0000880000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name6631 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_DOUBLE_COLON_in_unbound_type_name6651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_unbound_type_name6653 = new BitSet(new long[]{0x0000080000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name6655 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_DOT_in_unbound_type_name6680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_unbound_type_name6682 = new BitSet(new long[]{0x0000080000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name6684 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_LT_in_generic_dimension_specifier6713 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_commas_in_generic_dimension_specifier6718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_generic_dimension_specifier6722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_commas6744 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_commas_Chld_in_commas6749 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_commas_Chld6773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHECKED_in_checked_expression6794 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_checked_expression6796 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_checked_expression6798 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_checked_expression6800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNCHECKED_in_unchecked_expression6811 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_unchecked_expression6813 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_unchecked_expression6815 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_unchecked_expression6817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_default_value_expression6828 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_default_value_expression6830 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_default_value_expression6834 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_default_value_expression6836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_unary_expression6875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_in_unary_expression6892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_unary_expression6906 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression6910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unary_expression6924 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression6928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_unary_expression6942 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression6946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_unary_expression6960 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression6964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pre_increment_expression_in_unary_expression6980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pre_decrement_expression_in_unary_expression6996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_unsafe_in_unary_expression7012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_scan_for_cast_generic_precedence7039 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_scan_for_cast_generic_precedence7043 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_scan_for_cast_generic_precedence7045 = new BitSet(new long[]{0xF7A0146860FDD810L,0x00006498300FF043L,0x01F64C7800000738L,0x000000009DC003BFL});
    public static final BitSet FOLLOW_cast_disambiguation_token_in_scan_for_cast_generic_precedence7049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_cast_disambiguation_token7081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_cast_disambiguation_token7111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_cast_disambiguation_token7140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_select_contextual_keyword_in_cast_disambiguation_token7164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_cast_disambiguation_token7189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_cast_disambiguation_token7211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BASE_in_cast_disambiguation_token7236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_cast_disambiguation_token7265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_cast_disambiguation_token7294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTE_in_cast_disambiguation_token7322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_cast_disambiguation_token7351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_in_cast_disambiguation_token7380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_in_cast_disambiguation_token7408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHECKED_in_cast_disambiguation_token7437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_cast_disambiguation_token7463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_in_cast_disambiguation_token7491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_cast_disambiguation_token7519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_cast_disambiguation_token7544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_cast_disambiguation_token7570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELEGATE_in_cast_disambiguation_token7596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_cast_disambiguation_token7621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_cast_disambiguation_token7652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_cast_disambiguation_token7679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_in_cast_disambiguation_token7708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENT_in_cast_disambiguation_token7737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPLICIT_in_cast_disambiguation_token7765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_cast_disambiguation_token7790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_cast_disambiguation_token7817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIXED_in_cast_disambiguation_token7843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_cast_disambiguation_token7871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_cast_disambiguation_token7899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_cast_disambiguation_token7929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GOTO_in_cast_disambiguation_token7955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_cast_disambiguation_token7984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLICIT_in_cast_disambiguation_token8015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_in_cast_disambiguation_token8040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_cast_disambiguation_token8071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_in_cast_disambiguation_token8101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_cast_disambiguation_token8125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOCK_in_cast_disambiguation_token8150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_cast_disambiguation_token8179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_cast_disambiguation_token8208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_cast_disambiguation_token8232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_in_cast_disambiguation_token8262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPERATOR_in_cast_disambiguation_token8289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_in_cast_disambiguation_token8314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_cast_disambiguation_token8344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARAMS_in_cast_disambiguation_token8369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_cast_disambiguation_token8396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_cast_disambiguation_token8422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_cast_disambiguation_token8446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_READONLY_in_cast_disambiguation_token8473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_in_cast_disambiguation_token8498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_cast_disambiguation_token8528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SBYTE_in_cast_disambiguation_token8555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_cast_disambiguation_token8583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHORT_in_cast_disambiguation_token8610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZEOF_in_cast_disambiguation_token8638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STACKALLOC_in_cast_disambiguation_token8665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_cast_disambiguation_token8688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_cast_disambiguation_token8715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_in_cast_disambiguation_token8742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_cast_disambiguation_token8769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_cast_disambiguation_token8796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_cast_disambiguation_token8825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_cast_disambiguation_token8853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_cast_disambiguation_token8883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UINT_in_cast_disambiguation_token8910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ULONG_in_cast_disambiguation_token8939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNCHECKED_in_cast_disambiguation_token8967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_cast_disambiguation_token8991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USHORT_in_cast_disambiguation_token9018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_cast_disambiguation_token9045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIRTUAL_in_cast_disambiguation_token9073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_cast_disambiguation_token9099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOLATILE_in_cast_disambiguation_token9128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_cast_disambiguation_token9153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_INC_in_pre_increment_expression9190 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_pre_increment_expression9194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_DEC_in_pre_decrement_expression9220 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_pre_decrement_expression9224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_cast_expression9250 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_cast_expression9254 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_cast_expression9256 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_cast_expression9260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression9288 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0008000000000040L});
    public static final BitSet FOLLOW_multiplicative_expression_Chld_in_multiplicative_expression9293 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0008000000000040L});
    public static final BitSet FOLLOW_STAR_in_multiplicative_expression_Chld9321 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression_Chld9326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_in_multiplicative_expression_Chld9344 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression_Chld9349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_multiplicative_expression_Chld9367 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression_Chld9372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression9400 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0001800000000080L});
    public static final BitSet FOLLOW_additive_expression_Chld_in_additive_expression9405 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0001800000000080L});
    public static final BitSet FOLLOW_comments_in_additive_expression_Chld9436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_PLUS_in_additive_expression_Chld9440 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006BC41000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_comments_in_additive_expression_Chld9445 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression_Chld9451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_additive_expression_Chld9468 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression_Chld9473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression9503 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000080L});
    public static final BitSet FOLLOW_shift_expression_Chld_in_shift_expression9508 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000080L});
    public static final BitSet FOLLOW_OP_LEFT_SHIFT_in_shift_expression_Chld9536 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression_Chld9541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_right_shift_in_shift_expression_Chld9560 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression_Chld9565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression9605 = new BitSet(new long[]{0x0000000000000042L,0x0140000040200080L});
    public static final BitSet FOLLOW_relational_expression_Chld_in_relational_expression9611 = new BitSet(new long[]{0x0000000000000042L,0x0140000040200080L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression9638 = new BitSet(new long[]{0x0000000000000042L,0x0140000040200080L});
    public static final BitSet FOLLOW_relational_expression_Chld_in_relational_expression9644 = new BitSet(new long[]{0x0000000000000042L,0x0140000040200080L});
    public static final BitSet FOLLOW_LT_in_relational_expression_Chld9691 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression_Chld9695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_relational_expression_Chld9714 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression_Chld9718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_LE_in_relational_expression_Chld9738 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression_Chld9742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_GE_in_relational_expression_Chld9762 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression_Chld9766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_relational_expression_Chld9786 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_isType_in_relational_expression_Chld9790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_relational_expression_Chld9810 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_relational_expression_Chld9814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_scan_for_shift_generic_precedence9857 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LT_in_scan_for_shift_generic_precedence9859 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_scan_for_shift_generic_precedence9861 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COMMA_in_scan_for_shift_generic_precedence9864 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_scan_for_shift_generic_precedence9866 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_scan_for_shift_generic_precedence9870 = new BitSet(new long[]{0x000008001E000000L,0x2020200000100080L,0x0000100000000000L});
    public static final BitSet FOLLOW_shift_disambiguation_token_in_scan_for_shift_generic_precedence9872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_shift_disambiguation_token9890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_shift_disambiguation_token9913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_shift_disambiguation_token9933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_shift_disambiguation_token9952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_shift_disambiguation_token9979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_shift_disambiguation_token10002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_shift_disambiguation_token10029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERR_in_shift_disambiguation_token10058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_EQ_in_shift_disambiguation_token10084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_NE_in_shift_disambiguation_token10111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_shift_disambiguation_token10138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_nullable_value_type_in_isType10181 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_INTERR_in_isType10193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_is_disambiguation_token10224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_AND_in_is_disambiguation_token10245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_OR_in_is_disambiguation_token10270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERR_in_is_disambiguation_token10296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression10332 = new BitSet(new long[]{0x0000000000000002L,0x2020000000000000L});
    public static final BitSet FOLLOW_equality_expression_Chld_in_equality_expression10337 = new BitSet(new long[]{0x0000000000000002L,0x2020000000000000L});
    public static final BitSet FOLLOW_OP_EQ_in_equality_expression_Chld10365 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression_Chld10370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_NE_in_equality_expression_Chld10387 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression_Chld10392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_equality_expression_in_and_expression10422 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_and_expression_Chld_in_and_expression10428 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_AMP_in_and_expression_Chld10461 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_equality_expression_in_and_expression_Chld10465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression10500 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_exclusive_or_expression_Chld_in_exclusive_or_expression10505 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_CARET_in_exclusive_or_expression_Chld10538 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression_Chld10542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression10576 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_inclusive_or_expression_Chld_in_inclusive_or_expression10581 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_BITWISE_OR_in_inclusive_or_expression_Chld10614 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression_Chld10618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression10654 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_conditional_and_expression_Chld_in_conditional_and_expression10659 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_OP_AND_in_conditional_and_expression_Chld10692 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression_Chld10696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression10727 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_conditional_or_expression_Chld_in_conditional_or_expression10732 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_OP_OR_in_conditional_or_expression_Chld10765 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression_Chld10769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditional_or_expression_in_null_coalescing_expression10807 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_OP_COALESCING_in_null_coalescing_expression10810 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_null_coalescing_expression_in_null_coalescing_expression10814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_coalescing_expression_in_conditional_expression10860 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_INTERR_in_conditional_expression10863 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_conditional_expression10867 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_conditional_expression10869 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_conditional_expression10873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_function_signature_in_lambda_expression10919 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_right_arrow_in_lambda_expression10921 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006BC41000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_comments_in_lambda_expression10926 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_anonymous_function_body_in_lambda_expression10932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELEGATE_in_anonymous_method_expression10964 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L});
    public static final BitSet FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression10969 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_anonymous_method_expression10975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_anonymous_function_signature11007 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_anonymous_function_signature11009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_anonymous_function_signature11035 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020442000000008L,0x0000000008800180L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature11039 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_anonymous_function_signature11041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_anonymous_function_signature11057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature11061 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_anonymous_function_signature11063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_anonymous_function_signature11081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_explicit_anonymous_function_signature11105 = new BitSet(new long[]{0x8000100804114000L,0x0000040020011000L,0x0020442000000008L,0x0000000008800180L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature11110 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_explicit_anonymous_function_signature11114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list11138 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_list_Chld_in_explicit_anonymous_function_parameter_list11143 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_explicit_anonymous_function_parameter_list_Chld11171 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020442000000008L,0x0000000008800180L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list_Chld11175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter11202 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_explicit_anonymous_function_parameter11208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_explicit_anonymous_function_parameter11210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_in_anonymous_function_parameter_modifier11240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_in_anonymous_function_parameter_modifier11260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_implicit_anonymous_function_signature11286 = new BitSet(new long[]{0x0000000004000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_implicit_anonymous_function_signature11291 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_implicit_anonymous_function_signature11295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_signature11311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list11335 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_list_Chld_in_implicit_anonymous_function_parameter_list11340 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_implicit_anonymous_function_parameter_list_Chld11368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list_Chld11372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_implicit_anonymous_function_parameter11396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_anonymous_function_body11423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_anonymous_function_body11439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_from_clause_in_query_expression11464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_query_body_in_query_expression11468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_from_contextual_keyword_in_from_clause11504 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_from_clause11519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_from_clause11525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_from_clause11527 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_from_clause_chld_in_from_clause11531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_from_clause_chld11577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_from_clause_chld11605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_from_clause_chld11633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_from_clause_chld11661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_from_clause_chld11681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_body_clauses_in_query_body11712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_select_or_group_clause_in_query_body11718 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_query_continuation_in_query_body11729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_body_clause_in_query_body_clauses11777 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_query_body_clause_in_query_body_clauses_Chld11806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_from_clause_in_query_body_clause11834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_let_clause_in_query_body_clause11852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_where_clause_in_query_body_clause11870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_combined_join_clause_in_query_body_clause11888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderby_clause_in_query_body_clause11906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_let_contextual_keyword_in_let_clause11934 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_let_clause11938 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_let_clause11940 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_let_clause11944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_where_contextual_keyword_in_where_clause111976 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_boolean_expression_in_where_clause111980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_where_clause1_in_where_clause12022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_orderby_clause_in_where_clause12026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_where_clause1_in_where_clause12049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_contextual_keyword_in_join_clause12083 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_join_clause12088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_join_clause12094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_join_clause12096 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_join_clause12100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_on_contextual_keyword_in_join_clause12102 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_join_clause12106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_equals_contextual_keyword_in_join_clause12108 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_join_clause12112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_contextual_keyword_in_join_into_clause12156 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_join_into_clause12160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_join_into_clause12166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_join_into_clause12168 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_join_into_clause12172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_on_contextual_keyword_in_join_into_clause12176 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_join_into_clause12180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_equals_contextual_keyword_in_join_into_clause12184 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_join_into_clause12188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_into_contextual_keyword_in_join_into_clause12190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_join_into_clause12194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_contextual_keyword_in_combined_join_clause12257 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_combined_join_clause12262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_combined_join_clause12268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_combined_join_clause12270 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_combined_join_clause12274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_on_contextual_keyword_in_combined_join_clause12278 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_combined_join_clause12282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_equals_contextual_keyword_in_combined_join_clause12286 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_combined_join_clause12290 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_into_query_clause_in_combined_join_clause12295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_into_contextual_keyword_in_into_query_clause12360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_into_query_clause12364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_from_contextual_keyword_in_into_query_clause12366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_into_query_clause12370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_into_query_clause12372 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_into_query_clause12376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_into_contextual_keyword_in_into_query_clause12396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_into_query_clause12400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderby_contextual_keyword_in_orderby_clause12439 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_orderings_in_orderby_clause12443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ordering_in_orderings12470 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_orderings_Chld_in_orderings12475 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_orderings_Chld12505 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_ordering_in_orderings_Chld12510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_ordering12544 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_ordering_direction_in_ordering12549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ascending_contextual_keyword_in_ordering_direction12588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_descending_contextual_keyword_in_ordering_direction12601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_clause_in_select_or_group_clause12624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_clause_in_select_or_group_clause12640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_contextual_keyword_in_select_clause12673 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_select_clause12677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_contextual_keyword_in_group_clause12703 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_group_clause12707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_by_contextual_keyword_in_group_clause12711 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_group_clause12715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_into_contextual_keyword_in_query_continuation12754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_query_continuation12756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_query_body_in_query_continuation12760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_in_assignment12794 = new BitSet(new long[]{0x0000000000000080L,0x9C12800000000080L,0x0000000000000006L});
    public static final BitSet FOLLOW_assignment_operator_in_assignment12798 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_assignment12808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_assignment12823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_assignment_operator12848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_ADD_ASSIGNMENT_in_assignment_operator12862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_SUB_ASSIGNMENT_in_assignment_operator12876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_MULT_ASSIGNMENT_in_assignment_operator12890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_DIV_ASSIGNMENT_in_assignment_operator12904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_MOD_ASSIGNMENT_in_assignment_operator12918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_AND_ASSIGNMENT_in_assignment_operator12932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_OR_ASSIGNMENT_in_assignment_operator12946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_XOR_ASSIGNMENT_in_assignment_operator12960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_LEFT_SHIFT_ASSIGNMENT_in_assignment_operator12974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_right_shift_assignment_in_assignment_operator12990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_in_expression13019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_assignment_expression_in_expression13035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expression_in_non_assignment_expression13067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_expression_in_non_assignment_expression13091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditional_expression_in_non_assignment_expression13108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constant_expression13134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_boolean_expression13158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_labeled_statement_in_statement13191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_statement_in_statement13215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_embedded_statement_in_statement13232 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_statement13237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_embedded_statement13268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_empty_statement_in_embedded_statement13284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_statement_in_embedded_statement13300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selection_statement_in_embedded_statement13316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iteration_statement_in_embedded_statement13332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jump_statement_in_embedded_statement13348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_statement_in_embedded_statement13364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_checked_statement_in_embedded_statement13380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unchecked_statement_in_embedded_statement13396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_statement_in_embedded_statement13412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_statement_in_embedded_statement13428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yield_statement_in_embedded_statement13444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_embedded_statement_unsafe_in_embedded_statement13460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_embedded_statement13476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_block13500 = new BitSet(new long[]{0xD00014686171D820L,0x00882C9430033043L,0x016BD45000000080L,0x0000000089C003BFL});
    public static final BitSet FOLLOW_comments_in_block13506 = new BitSet(new long[]{0xD00014686171D820L,0x00882C9430033043L,0x016BD45000000080L,0x0000000089C003BFL});
    public static final BitSet FOLLOW_statement_list_in_block13515 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_block13521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_statement_list13551 = new BitSet(new long[]{0xD00014686071D822L,0x00882C9430033043L,0x016BD45000000080L,0x0000000089C003BFL});
    public static final BitSet FOLLOW_comments_in_statement_list13558 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_empty_statement13588 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_empty_statement13593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_labeled_statement13625 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_labeled_statement13627 = new BitSet(new long[]{0xD00014686071D820L,0x00882C9430033043L,0x016BD45000000080L,0x0000000089C003BFL});
    public static final BitSet FOLLOW_statement_in_labeled_statement13631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_declaration_statement13661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_declaration_statement13663 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_declaration_statement13668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_constant_declaration_in_declaration_statement13690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_declaration_statement13692 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_declaration_statement13697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_type_in_local_variable_declaration13727 = new BitSet(new long[]{0x0000000000000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_array_initializer_in_local_variable_declaration13732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_local_variable_declarators_in_local_variable_declaration13738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_local_variable_type13772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators13799 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_local_variable_declarators_Chld_in_local_variable_declarators13805 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_local_variable_declarators_Chld13834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators_Chld13839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_local_variable_declarator13867 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_local_variable_declarator13871 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006E441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_local_variable_initializer_in_local_variable_declarator13875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_local_variable_initializer13906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_initializer_in_local_variable_initializer13922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_initializer_unsafe_in_local_variable_initializer13938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_in_local_constant_declaration13962 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_local_constant_declaration13966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_constant_declarators_in_local_constant_declaration13970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_expression_in_expression_statement13999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_expression_statement14001 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_expression_statement14006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statement_expression14042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_selection_statement14073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_statement_in_selection_statement14088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_if_statement14114 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_if_statement14116 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006BC41000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_comments_in_if_statement14121 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_boolean_expression_in_if_statement14127 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_if_statement14129 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016BD45000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_comments_in_if_statement14134 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016BD45000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_if_statement14140 = new BitSet(new long[]{0x0020000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_if_statement14145 = new BitSet(new long[]{0x0020000000000002L});
    public static final BitSet FOLLOW_ELSE_in_if_statement14157 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016BD45000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_if_statement14161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_switch_statement14206 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_switch_statement14208 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_switch_statement14212 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_switch_statement14214 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_switch_statement14219 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_switch_block_in_switch_statement14225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_switch_block14253 = new BitSet(new long[]{0x0000002001040000L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_switch_block14258 = new BitSet(new long[]{0x0000002001040000L});
    public static final BitSet FOLLOW_switch_sections_in_switch_block14265 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_switch_block14269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_section_in_switch_sections14296 = new BitSet(new long[]{0x0000002000040002L});
    public static final BitSet FOLLOW_switch_labels_in_switch_section14320 = new BitSet(new long[]{0xD00014686071D820L,0x00882C9430033043L,0x016BD45000000080L,0x0000000089C003BFL});
    public static final BitSet FOLLOW_statement_list_in_switch_section14324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_label_in_switch_labels14351 = new BitSet(new long[]{0x0000002000040002L});
    public static final BitSet FOLLOW_CASE_in_switch_label14373 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_constant_expression_in_switch_label14377 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_switch_label14379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_switch_label14393 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_switch_label14395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_statement_in_iteration_statement14413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_statement_in_iteration_statement14429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_statement_in_iteration_statement14445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_statement_in_iteration_statement14461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_while_statement14483 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_while_statement14485 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_boolean_expression_in_while_statement14489 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_while_statement14491 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016BD45000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_while_statement14495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_do_statement14521 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016BD45000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_do_statement14525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_WHILE_in_do_statement14527 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_do_statement14529 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_boolean_expression_in_do_statement14533 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_do_statement14535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_do_statement14537 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_do_statement14542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_for_statement14574 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_for_statement14576 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A541000000080L,0x00000000088003ADL});
    public static final BitSet FOLLOW_for_initializer_in_for_statement14581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_statement14585 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A541000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_for_condition_in_for_statement14590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_statement14594 = new BitSet(new long[]{0x9000106804715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_for_iterator_in_for_statement14599 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_for_statement14603 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016BD45000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_for_statement14607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_for_initializer14647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_expression_list_in_for_initializer14663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_expression_in_for_condition14687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_expression_list_in_for_iterator14714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_expression_in_statement_expression_list14743 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_statement_expression_list_Chld_in_statement_expression_list14748 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_statement_expression_list_Chld14781 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_statement_expression_in_statement_expression_list_Chld14786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_statement14811 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_foreach_statement14813 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_local_variable_type_in_foreach_statement14817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_foreach_statement14821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_foreach_statement14823 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_foreach_statement14827 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_foreach_statement14829 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016BD45000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_foreach_statement14833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_statement_in_jump_statement14869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_statement_in_jump_statement14885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_statement_in_jump_statement14901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_statement_in_jump_statement14917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_statement_in_jump_statement14933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_break_statement14957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_break_statement14959 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_break_statement14964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_continue_statement14994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_continue_statement14996 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_continue_statement15001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GOTO_in_goto_statement15029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_goto_statement15033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_goto_statement15035 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_goto_statement15040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GOTO_in_goto_statement15060 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_CASE_in_goto_statement15062 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_constant_expression_in_goto_statement15066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_goto_statement15068 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_goto_statement15073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GOTO_in_goto_statement15093 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_DEFAULT_in_goto_statement15095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_goto_statement15097 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_goto_statement15102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_return_statement15126 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A541000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_return_statement15131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_return_statement15135 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_return_statement15140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_throw_statement15168 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A541000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_throw_statement15173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_throw_statement15177 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_throw_statement15182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_try_statement15214 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_try_statement15218 = new BitSet(new long[]{0x2000000000080002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_try_statement15223 = new BitSet(new long[]{0x2000000000080002L});
    public static final BitSet FOLLOW_catch_clauses_in_try_statement15230 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_finally_clause_in_try_statement15237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specific_catch_clauses_in_catch_clauses15282 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_general_catch_clause_in_catch_clauses15287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_catch_clause_in_catch_clauses15311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specific_catch_clause_in_specific_catch_clauses15338 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_CATCH_in_specific_catch_clause15360 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_specific_catch_clause15362 = new BitSet(new long[]{0x0000000000000000L,0x0000040000001000L,0x0020000000000000L});
    public static final BitSet FOLLOW_class_type_in_specific_catch_clause15366 = new BitSet(new long[]{0x0000000004000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_specific_catch_clause15371 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_specific_catch_clause15375 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_specific_catch_clause15379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_in_general_catch_clause15411 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_general_catch_clause15415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_finally_clause15441 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_finally_clause15445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHECKED_in_checked_statement15467 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_checked_statement15469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNCHECKED_in_unchecked_statement15480 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_unchecked_statement15482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOCK_in_lock_statement15493 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_lock_statement15495 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_lock_statement15497 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_lock_statement15499 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016BD45000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_lock_statement15501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_using_statement15516 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_using_statement15518 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000088003ADL});
    public static final BitSet FOLLOW_resource_acquisition_in_using_statement15522 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_using_statement15524 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016BD45000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_using_statement15528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_resource_acquisition15564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_resource_acquisition15580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yield_contextual_keyword_in_yield_statement15602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RETURN_in_yield_statement15604 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_yield_statement15608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_yield_statement15610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yield_contextual_keyword_in_yield_statement15630 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_BREAK_in_yield_statement15632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_yield_statement15634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_alias_directives_in_compilation_unit15668 = new BitSet(new long[]{0x0480004000800010L,0x00001018000C1000L,0x0091880800000710L,0x0000000015400000L});
    public static final BitSet FOLLOW_using_directives_in_compilation_unit15675 = new BitSet(new long[]{0x0480004000800010L,0x00001018000C1000L,0x0091880800000710L,0x0000000014400000L});
    public static final BitSet FOLLOW_global_attribute_section_in_compilation_unit15694 = new BitSet(new long[]{0x0480004000800010L,0x00001018000C1000L,0x0091880800000710L,0x0000000014400000L});
    public static final BitSet FOLLOW_namespace_member_declarations_in_compilation_unit15707 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_compilation_unit15711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_namespace_declaration15747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_qualified_identifier_in_namespace_declaration15751 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_namespace_body_in_namespace_declaration15755 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001900000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_namespace_declaration15760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_namespace_declaration15767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualified_identifier15805 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_qualified_identifier_Chld_in_qualified_identifier15810 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_DOT_in_qualified_identifier_Chld15838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualified_identifier_Chld15843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_namespace_body15870 = new BitSet(new long[]{0x0480004001800010L,0x00001018000C1000L,0x0091880800000710L,0x0000000015400000L});
    public static final BitSet FOLLOW_comments_in_namespace_body15875 = new BitSet(new long[]{0x0480004001800010L,0x00001018000C1000L,0x0091880800000710L,0x0000000015400000L});
    public static final BitSet FOLLOW_extern_alias_directives_in_namespace_body15882 = new BitSet(new long[]{0x0480004001800010L,0x00001018000C1000L,0x0091880800000710L,0x0000000015400000L});
    public static final BitSet FOLLOW_using_directives_in_namespace_body15889 = new BitSet(new long[]{0x0480004001800010L,0x00001018000C1000L,0x0091880800000710L,0x0000000014400000L});
    public static final BitSet FOLLOW_namespace_member_declarations_in_namespace_body15896 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_namespace_body15900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_alias_directive_in_extern_alias_directives15937 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_extern_alias_directive15961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_alias_contextual_keyword_in_extern_alias_directive15963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_extern_alias_directive15965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_extern_alias_directive15967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_directive_in_using_directives15992 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_using_alias_directive_in_using_directive16018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_namespace_directive_in_using_directive16041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_using_alias_directive16066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_using_alias_directive16068 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_using_alias_directive16070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_namespace_or_type_name_in_using_alias_directive16072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_using_alias_directive16074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_using_namespace_directive16096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_namespace_name_in_using_namespace_directive16100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_using_namespace_directive16102 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_using_namespace_directive16107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_member_declaration_in_namespace_member_declarations16138 = new BitSet(new long[]{0x0480004000800012L,0x00001018000C1000L,0x0091880800000710L,0x0000000014400000L});
    public static final BitSet FOLLOW_namespace_declaration_in_namespace_member_declaration16164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_namespace_member_declaration16187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_type_declaration16229 = new BitSet(new long[]{0x0480004000800010L,0x00000010000C1000L,0x0091880800000710L,0x0000000014400000L});
    public static final BitSet FOLLOW_comments_in_type_declaration16236 = new BitSet(new long[]{0x0480004000800010L,0x00000010000C1000L,0x0090080800000710L,0x0000000014400000L});
    public static final BitSet FOLLOW_all_member_modifiers_in_type_declaration16243 = new BitSet(new long[]{0x0080004000800000L,0x0000000000040000L,0x0080000000000000L});
    public static final BitSet FOLLOW_type_declaration_Chld_in_type_declaration16250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_definition_in_type_declaration_Chld16292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_definition_in_type_declaration_Chld16310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_definition_in_type_declaration_Chld16328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_definition_in_type_declaration_Chld16346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_definition_in_type_declaration_Chld16364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualified_alias_member16393 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_DOUBLE_COLON_in_qualified_alias_member16395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualified_alias_member16399 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_qualified_alias_member16403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_class_declaration16434 = new BitSet(new long[]{0x0000000000800010L,0x0000001000081000L,0x0010080000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_class_modifiers_in_class_declaration16437 = new BitSet(new long[]{0x0000000000800000L,0x0000000000001000L});
    public static final BitSet FOLLOW_partial_contextual_keyword_in_class_declaration16440 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CLASS_in_class_declaration16443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_class_declaration16445 = new BitSet(new long[]{0x0000000008000000L,0x0000080040001000L});
    public static final BitSet FOLLOW_type_parameter_list_in_class_declaration16447 = new BitSet(new long[]{0x0000000008000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_class_base_in_class_declaration16455 = new BitSet(new long[]{0x0000000000000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_class_declaration16458 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_class_body_in_class_declaration16461 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_class_declaration16463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_modifier_in_class_modifiers16475 = new BitSet(new long[]{0x0000000000000012L,0x0000001000080000L,0x0010080000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_class_modifier_in_class_modifiers16479 = new BitSet(new long[]{0x0000000000000012L,0x0000001000080000L,0x0010080000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_NEW_in_class_modifier16502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_class_modifier16551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_class_modifier16595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_class_modifier16636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_class_modifier16678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_class_modifier16721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_class_modifier16763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_class_modifier16807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_modifier_unsafe_in_class_modifier16853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_type_parameter_list16885 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_type_parameters_in_type_parameter_list16889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_type_parameter_list16891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_type_parameters16916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_parameter_in_type_parameters16922 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_type_parameters_Chld_in_type_parameters16928 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_type_parameters_Chld16961 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_attributes_in_type_parameters_Chld16967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_parameter_in_type_parameters_Chld16974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_type_parameter17005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_class_base17037 = new BitSet(new long[]{0x0000000000000000L,0x0000040000001000L,0x0020000000000000L});
    public static final BitSet FOLLOW_class_type_in_class_base17041 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_classbaseandInterfaceChld_in_class_base17046 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_interface_type_in_interface_type_list17077 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_classbaseandInterfaceChld_in_interface_type_list17082 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_classbaseandInterfaceChld17112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_interface_type_in_classbaseandInterfaceChld17117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses17145 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_where_contextual_keyword_in_type_parameter_constraints_clause17169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_parameter_in_type_parameter_constraints_clause17173 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_type_parameter_constraints_clause17175 = new BitSet(new long[]{0x0000000000800000L,0x0000041000001000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_in_type_parameter_constraints_clause17179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_constraint_in_type_parameter_constraints17210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_constraint_in_type_parameter_constraints17218 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_type_parameter_constraints17221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_secondary_constraints_in_type_parameter_constraints17223 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_type_parameter_constraints17228 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_constructor_constraint_in_type_parameter_constraints17230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_type_in_primary_constraint17265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_primary_constraint17283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_in_primary_constraint17311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_type_in_secondary_constraints17347 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_secondary_constraints17350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_interface_type_in_secondary_constraints17352 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_NEW_in_constructor_constraint17366 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_constructor_constraint17368 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_constructor_constraint17370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_class_body17383 = new BitSet(new long[]{0x8780104821914010L,0x00001410200D5000L,0x00B1CC0800000710L,0x000000001CC00184L});
    public static final BitSet FOLLOW_class_member_declarations_in_class_body17389 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_class_body17394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_member_declaration_in_class_member_declarations17419 = new BitSet(new long[]{0x8780104820914012L,0x00001410200D5000L,0x00B1CC0800000710L,0x000000001CC00184L});
    public static final BitSet FOLLOW_attributes_in_class_member_declaration17454 = new BitSet(new long[]{0x8780104820914010L,0x00000410200D5000L,0x00B1CC0800000710L,0x000000001CC00180L});
    public static final BitSet FOLLOW_all_member_modifiers_in_class_member_declaration17461 = new BitSet(new long[]{0x8380104820914000L,0x0000040020055000L,0x00A1C40000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_common_member_declaration_in_class_member_declaration17467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_class_member_declaration17491 = new BitSet(new long[]{0x0400000000000010L,0x0000001000081000L,0x0010080800000710L,0x0000000014400004L});
    public static final BitSet FOLLOW_all_member_modifiers_in_class_member_declaration17498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_TILDE_in_class_member_declaration17502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_class_member_declaration17504 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_class_member_declaration17506 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_class_member_declaration17508 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_destructor_body_in_class_member_declaration17510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_all_member_modifier_in_all_member_modifiers17544 = new BitSet(new long[]{0x0400000000000012L,0x0000001000081000L,0x0010080800000710L,0x0000000014400000L});
    public static final BitSet FOLLOW_NEW_in_all_member_modifier17573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_all_member_modifier17591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_all_member_modifier17609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_all_member_modifier17627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_all_member_modifier17645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_READONLY_in_all_member_modifier17663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOLATILE_in_all_member_modifier17681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIRTUAL_in_all_member_modifier17699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_all_member_modifier17717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_all_member_modifier17735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_all_member_modifier17753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_all_member_modifier17771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_all_member_modifier17789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_all_member_modifier17807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_partial_contextual_keyword_in_all_member_modifier17825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_common_member_declaration17861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_declaration2_in_common_member_declaration17882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typed_member_declaration_in_common_member_declaration17904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_event_declaration2_in_common_member_declaration17926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conversion_operator_declarator_in_common_member_declaration17948 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_operator_body_in_common_member_declaration17952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declaration2_in_common_member_declaration17974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_void_in_common_member_declaration17996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_method_declaration2_in_common_member_declaration18002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_definition_in_common_member_declaration18026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_definition_in_common_member_declaration18048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_definition_in_common_member_declaration18070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_definition_in_common_member_declaration18092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_definition_in_common_member_declaration18114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typed_member_declaration18147 = new BitSet(new long[]{0x0000000000000000L,0x0000400000001000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_typed_member_declaration_Chld_in_typed_member_declaration18153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_type_in_typed_member_declaration_Chld18193 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_typed_member_declaration_Chld18195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_indexer_declaration2_in_typed_member_declaration_Chld18199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration2_in_typed_member_declaration_Chld18232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_declaration2_in_typed_member_declaration_Chld18262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexer_declaration2_in_typed_member_declaration_Chld18284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_declaration2_in_typed_member_declaration_Chld18306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration2_in_typed_member_declaration_Chld18328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_declarator_in_constant_declarators18370 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_constant_declarators_Chld_in_constant_declarators18376 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_constant_declarators_Chld18404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_constant_declarator_in_constant_declarators_Chld18409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_constant_declarator18436 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_constant_declarator18438 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_constant_expression_in_constant_declarator18442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declarator_in_variable_declarators18469 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_variable_declarators_Chld_in_variable_declarators18476 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_variable_declarators_Chld18505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_variable_declarator_in_variable_declarators_Chld18510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_variable_declarator18536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_variable_declarator18550 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_variable_declarator18552 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_variable_initializer_in_variable_declarator18556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variable_initializer18584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_initializer_in_variable_initializer18600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_in_method_declaration18620 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_method_body_in_method_declaration18622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_method_header18633 = new BitSet(new long[]{0x8400100800114010L,0x0000041020091000L,0x00304C0000000710L,0x000000000CC00180L});
    public static final BitSet FOLLOW_method_modifiers_in_method_header18636 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_partial_contextual_keyword_in_method_header18639 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_return_type_in_method_header18642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_member_name_in_method_header18644 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_method_header18646 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_method_header18649 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_method_header18651 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_method_header18654 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_method_header18656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifiers18668 = new BitSet(new long[]{0x0400000000000012L,0x0000001000080000L,0x0010080000000710L,0x0000000004400000L});
    public static final BitSet FOLLOW_NEW_in_method_modifier18680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_method_modifier18685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_method_modifier18690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_method_modifier18695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_method_modifier18700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_method_modifier18705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIRTUAL_in_method_modifier18710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_method_modifier18715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_method_modifier18720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_method_modifier18725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_method_modifier18730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_unsafe_in_method_modifier18735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_return_type18748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_return_type18753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_type_in_member_name18774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_method_body18800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_method_body18817 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_method_body18822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_array_in_formal_parameter_list18865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_parameters_in_formal_parameter_list18887 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_formal_parameter_list_Chld_in_formal_parameter_list18893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_formal_parameter_list_Chld18934 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_parameter_array_in_formal_parameter_list_Chld18938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_parameter_in_fixed_parameters18964 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_fixed_parameters_Chld_in_fixed_parameters18970 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_fixed_parameters_Chld19007 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_fixed_parameter_in_fixed_parameters_Chld19011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_fixed_parameter19040 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_parameter_modifier_in_fixed_parameter19047 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020440000000020L,0x0000000008800180L});
    public static final BitSet FOLLOW_fixed_parameter_child_in_fixed_parameter19054 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_default_argument_in_fixed_parameter19059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arglist_in_fixed_parameter19091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_array_in_fixed_parameter_child19120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_fixed_parameter_child19138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_fixed_parameter_child19142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_default_argument19173 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_default_argument19177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_in_parameter_modifier19201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_in_parameter_modifier19223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_parameter_modifier19243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_parameter_array19273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_PARAMS_in_parameter_array19279 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_array_type_in_parameter_array19283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_parameter_array19287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_property_declaration19324 = new BitSet(new long[]{0x8400100800114010L,0x0000041020091000L,0x00304C0000000710L,0x000000000CC00180L});
    public static final BitSet FOLLOW_property_modifiers_in_property_declaration19331 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_property_declaration19337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_member_name_in_property_declaration19341 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_property_declaration19343 = new BitSet(new long[]{0x0000000000000000L,0x0000100000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_accessor_declarations_in_property_declaration19347 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_property_declaration19349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_modifier_in_property_modifiers19390 = new BitSet(new long[]{0x0400000000000012L,0x0000001000080000L,0x0010080000000710L,0x0000000004400000L});
    public static final BitSet FOLLOW_NEW_in_property_modifier19415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_property_modifier19463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_property_modifier19506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_property_modifier19546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_property_modifier19587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_property_modifier19629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIRTUAL_in_property_modifier19672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_property_modifier19714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_property_modifier19757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_property_modifier19798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_property_modifier19839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_modifier_unsafe_in_property_modifier19884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_accessor_declarations19918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_accessor_modifier_in_accessor_declarations19925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_get_contextual_keyword_in_accessor_declarations19932 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_accessor_body_in_accessor_declarations19936 = new BitSet(new long[]{0x0000000000000002L,0x0000100000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_set_accessor_declaration_in_accessor_declarations19941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_accessor_declarations19978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_accessor_modifier_in_accessor_declarations19985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_set_contextual_keyword_in_accessor_declarations19991 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_accessor_body_in_accessor_declarations19995 = new BitSet(new long[]{0x0000000000000002L,0x0000100000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_get_accessor_declaration_in_accessor_declarations20000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_get_accessor_declaration20047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_accessor_modifier_in_get_accessor_declaration20054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_get_contextual_keyword_in_get_accessor_declaration20060 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_accessor_body_in_get_accessor_declaration20064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_set_accessor_declaration20101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_accessor_modifier_in_set_accessor_declaration20108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_set_contextual_keyword_in_set_accessor_declaration20114 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_accessor_body_in_set_accessor_declaration20118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_accessor_modifier20152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_accessor_modifier20180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_accessor_modifier20207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_accessor_modifier20235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_INTERNAL_in_accessor_modifier20237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_accessor_modifier20254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_PROTECTED_in_accessor_modifier20256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_accessor_body20283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_accessor_body20297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_event_declaration20320 = new BitSet(new long[]{0x0500000000000010L,0x0000001000080000L,0x0010080000000710L,0x0000000004400000L});
    public static final BitSet FOLLOW_event_modifiers_in_event_declaration20323 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_EVENT_in_event_declaration20326 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_event_declaration20328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_variable_declarators_in_event_declaration20336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_event_declaration20338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_event_declaration20346 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_event_declaration20348 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_event_accessor_declarations_in_event_declaration20350 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_event_declaration20352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_event_modifier_in_event_modifiers20370 = new BitSet(new long[]{0x0400000000000012L,0x0000001000080000L,0x0010080000000710L,0x0000000004400000L});
    public static final BitSet FOLLOW_event_modifier_in_event_modifiers20374 = new BitSet(new long[]{0x0400000000000012L,0x0000001000080000L,0x0010080000000710L,0x0000000004400000L});
    public static final BitSet FOLLOW_NEW_in_event_modifier20388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_event_modifier20434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_event_modifier20475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_event_modifier20513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_event_modifier20552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_event_modifier20592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIRTUAL_in_event_modifier20633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_event_modifier20673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_event_modifier20714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_event_modifier20753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_event_modifier20792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_event_modifier_unsafe_in_event_modifier20835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_event_accessor_declarations20857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_add_contextual_keyword_in_event_accessor_declarations20865 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_event_accessor_declarations20867 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_remove_accessor_declaration_in_event_accessor_declarations20869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_remove_contextual_keyword_in_event_accessor_declarations20876 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_event_accessor_declarations20878 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_add_accessor_declaration_in_event_accessor_declarations20880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_add_accessor_declaration20896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_add_contextual_keyword_in_add_accessor_declaration20899 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_add_accessor_declaration20901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_remove_accessor_declaration20912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_remove_contextual_keyword_in_remove_accessor_declaration20915 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_remove_accessor_declaration20917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_indexer_declaration20928 = new BitSet(new long[]{0x8400100800114010L,0x0000041020091000L,0x00204C0000000710L,0x000000000CC00180L});
    public static final BitSet FOLLOW_indexer_modifiers_in_indexer_declaration20931 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_indexer_declarator_in_indexer_declaration20934 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_indexer_declaration20936 = new BitSet(new long[]{0x0000000000000000L,0x0000100000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_accessor_declarations_in_indexer_declaration20938 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_indexer_declaration20940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexer_modifier_in_indexer_modifiers20951 = new BitSet(new long[]{0x0400000000000012L,0x0000001000080000L,0x0000080000000710L,0x0000000004400000L});
    public static final BitSet FOLLOW_indexer_modifier_in_indexer_modifiers20955 = new BitSet(new long[]{0x0400000000000012L,0x0000001000080000L,0x0000080000000710L,0x0000000004400000L});
    public static final BitSet FOLLOW_NEW_in_indexer_modifier20978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_indexer_modifier21026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_indexer_modifier21069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_indexer_modifier21109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_indexer_modifier21150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIRTUAL_in_indexer_modifier21192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_indexer_modifier21234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_indexer_modifier21277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_indexer_modifier21318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_indexer_modifier21359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexer_modifier_unsafe_in_indexer_modifier21404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_indexer_declarator21432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_interface_type_in_indexer_declarator21435 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_indexer_declarator21437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_THIS_in_indexer_declarator21441 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_indexer_declarator21443 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_indexer_declarator21445 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_indexer_declarator21447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_operator_declaration21459 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000000L,0x0010000000000400L,0x0000000000400000L});
    public static final BitSet FOLLOW_operator_modifiers_in_operator_declaration21462 = new BitSet(new long[]{0x8200100800114000L,0x0000040020015000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_operator_declarator_in_operator_declaration21464 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_operator_body_in_operator_declaration21466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_modifier_in_operator_modifiers21477 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000000L,0x0010000000000400L,0x0000000000400000L});
    public static final BitSet FOLLOW_operator_modifier_in_operator_modifiers21481 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000000L,0x0010000000000400L,0x0000000000400000L});
    public static final BitSet FOLLOW_PUBLIC_in_operator_modifier21499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_operator_modifier21544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_operator_modifier21587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_modifier_unsafe_in_operator_modifier21632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_operator_declarator_in_operator_declarator21666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_binary_operator_declarator_in_operator_declarator21672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conversion_operator_declarator_in_operator_declarator21678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_unary_operator_declarator21690 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_OPERATOR_in_unary_operator_declarator21692 = new BitSet(new long[]{0x1000000000000800L,0x0088000400000000L,0x0000000000000080L,0x000000000000000CL});
    public static final BitSet FOLLOW_overloadable_unary_operator_in_unary_operator_declarator21694 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_unary_operator_declarator21696 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_unary_operator_declarator21698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_unary_operator_declarator21700 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_unary_operator_declarator21702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_overloadable_unary_operator21717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_overloadable_unary_operator21742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_overloadable_unary_operator21764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_overloadable_unary_operator21787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_INC_in_overloadable_unary_operator21809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_DEC_in_overloadable_unary_operator21830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_overloadable_unary_operator21851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_overloadable_unary_operator21874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_binary_operator_declarator21903 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_OPERATOR_in_binary_operator_declarator21905 = new BitSet(new long[]{0x0000020000022020L,0x2360000440000080L,0x00080000000000C0L});
    public static final BitSet FOLLOW_overloadable_binary_operator_in_binary_operator_declarator21907 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_binary_operator_declarator21909 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_binary_operator_declarator21911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_binary_operator_declarator21913 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_binary_operator_declarator21915 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_binary_operator_declarator21917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_binary_operator_declarator21919 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_binary_operator_declarator21921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_overloadable_binary_operator21938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_overloadable_binary_operator21972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_overloadable_binary_operator22003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_in_overloadable_binary_operator22035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_overloadable_binary_operator22068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMP_in_overloadable_binary_operator22097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISE_OR_in_overloadable_binary_operator22130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CARET_in_overloadable_binary_operator22156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_LEFT_SHIFT_in_overloadable_binary_operator22187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_right_shift_in_overloadable_binary_operator22212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_EQ_in_overloadable_binary_operator22233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_NE_in_overloadable_binary_operator22264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_overloadable_binary_operator22295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_overloadable_binary_operator22329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_GE_in_overloadable_binary_operator22363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_LE_in_overloadable_binary_operator22394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_overloadable_operator22435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_overloadable_operator22468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_overloadable_operator22500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_overloadable_operator22533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_INC_in_overloadable_operator22565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_DEC_in_overloadable_operator22596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_overloadable_operator22627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_overloadable_operator22660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_overloadable_operator22692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_in_overloadable_operator22725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_overloadable_operator22759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMP_in_overloadable_operator22789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISE_OR_in_overloadable_operator22823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CARET_in_overloadable_operator22850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_LEFT_SHIFT_in_overloadable_operator22882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_right_shift_in_overloadable_operator22908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_EQ_in_overloadable_operator22930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_NE_in_overloadable_operator22962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_overloadable_operator22994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_overloadable_operator23029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_GE_in_overloadable_operator23064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_LE_in_overloadable_operator23096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLICIT_in_conversion_operator_declarator23136 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_OPERATOR_in_conversion_operator_declarator23138 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_conversion_operator_declarator23140 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_conversion_operator_declarator23142 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_conversion_operator_declarator23144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_conversion_operator_declarator23146 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_conversion_operator_declarator23148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPLICIT_in_conversion_operator_declarator23153 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_OPERATOR_in_conversion_operator_declarator23155 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_conversion_operator_declarator23157 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_conversion_operator_declarator23159 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_conversion_operator_declarator23161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_conversion_operator_declarator23163 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_conversion_operator_declarator23165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_operator_body23184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_operator_body23205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_constructor_declaration23231 = new BitSet(new long[]{0x0400000000000000L,0x0000000000081000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_constructor_modifiers_in_constructor_declaration23234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_constructor_declarator_in_constructor_declaration23237 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_constructor_body_in_constructor_declaration23239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_modifier_in_constructor_modifiers23250 = new BitSet(new long[]{0x0400000000000002L,0x0000000000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_PUBLIC_in_constructor_modifier23266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_constructor_modifier23315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_constructor_modifier23359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_constructor_modifier23404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_constructor_modifier23450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_modifier_unsafe_in_constructor_modifier23499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_constructor_declarator23524 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_constructor_declarator23526 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_constructor_declarator23528 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_constructor_declarator23531 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_constructor_initializer_in_constructor_declarator23533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_constructor_initializer23549 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_BASE_in_constructor_initializer23551 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_constructor_initializer23553 = new BitSet(new long[]{0x9000106804715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_list_in_constructor_initializer23558 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_constructor_initializer23562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_constructor_initializer23582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_THIS_in_constructor_initializer23584 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_constructor_initializer23586 = new BitSet(new long[]{0x9000106804715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_list_in_constructor_initializer23588 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_constructor_initializer23591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_constructor_body23626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_constructor_body23649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_static_constructor_declaration23677 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_static_constructor_modifiers_in_static_constructor_declaration23680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_static_constructor_declaration23682 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_static_constructor_declaration23684 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_static_constructor_declaration23686 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_static_constructor_body_in_static_constructor_declaration23688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_constructor_modifiers_unsafe_in_static_constructor_modifiers23702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_static_constructor_body23722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_static_constructor_body23746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_destructor_declaration_unsafe_in_destructor_declaration23777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_destructor_body23794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_destructor_body23817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_body23851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_body23869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_struct_declaration23893 = new BitSet(new long[]{0x0000000000000000L,0x0000001000081000L,0x0080000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_struct_modifiers_in_struct_declaration23896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0080000000000000L});
    public static final BitSet FOLLOW_partial_contextual_keyword_in_struct_declaration23899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STRUCT_in_struct_declaration23902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_struct_declaration23904 = new BitSet(new long[]{0x0000000008000000L,0x0000080040001000L});
    public static final BitSet FOLLOW_type_parameter_list_in_struct_declaration23906 = new BitSet(new long[]{0x0000000008000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_struct_interfaces_in_struct_declaration23909 = new BitSet(new long[]{0x0000000000000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_struct_declaration23912 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_struct_body_in_struct_declaration23915 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_struct_declaration23917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_modifier_in_struct_modifiers23929 = new BitSet(new long[]{0x0000000000000002L,0x0000001000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_struct_modifier_in_struct_modifiers23933 = new BitSet(new long[]{0x0000000000000002L,0x0000001000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_NEW_in_struct_modifier23951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_struct_modifier23998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_struct_modifier24040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_struct_modifier24079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_struct_modifier24119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_modifier_unsafe_in_struct_modifier24162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_struct_interfaces24188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_interface_type_list_in_struct_interfaces24190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_struct_body24201 = new BitSet(new long[]{0xC780104821914010L,0x00001410200D5000L,0x00B1CC0800000710L,0x000000001CC00180L});
    public static final BitSet FOLLOW_struct_member_declarations_in_struct_body24203 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_struct_body24206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_member_declaration_in_struct_member_declarations24217 = new BitSet(new long[]{0xC780104820914012L,0x00001410200D5000L,0x00B1CC0800000710L,0x000000001CC00180L});
    public static final BitSet FOLLOW_struct_member_declaration_in_struct_member_declarations24221 = new BitSet(new long[]{0xC780104820914012L,0x00001410200D5000L,0x00B1CC0800000710L,0x000000001CC00180L});
    public static final BitSet FOLLOW_attributes_in_struct_member_declaration24237 = new BitSet(new long[]{0xC780104820914010L,0x00000410200D5000L,0x00B1CC0800000710L,0x000000001CC00180L});
    public static final BitSet FOLLOW_all_member_modifiers_in_struct_member_declaration24240 = new BitSet(new long[]{0xC380104820914000L,0x0000040020055000L,0x00A1C40000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_common_member_declaration_in_struct_member_declaration24247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIXED_in_struct_member_declaration24253 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_buffer_element_type_in_struct_member_declaration24255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_fixed_size_buffer_declarators_in_struct_member_declaration24257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_struct_member_declaration24259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_base_type_in_array_type24283 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_array_type_Chld_in_array_type24288 = new BitSet(new long[]{0x0000000000000002L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_STAR_in_array_type_Chld24318 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_array_type_Chld24324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERR_in_array_type_Chld24345 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L});
    public static final BitSet FOLLOW_rank_specifier_in_array_type_Chld24351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_base_type_in_non_array_type24383 = new BitSet(new long[]{0x0000000000000002L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_non_array_type_Chld_in_non_array_type24388 = new BitSet(new long[]{0x0000000000000002L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_non_array_type_Chld24419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERR_in_non_array_type_Chld24432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_non_array_type_Chld24445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_specifier_in_rank_specifiers24476 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_rank_specifier24505 = new BitSet(new long[]{0x0000000012000000L});
    public static final BitSet FOLLOW_dim_separators_in_rank_specifier24510 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_rank_specifier24514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_dim_separators24536 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_dim_separators_Chld_in_dim_separators24541 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_dim_separators_Chld24566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_array_initializer24598 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_array_initializer24600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_array_initializer24616 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_variable_initializer_list_in_array_initializer24620 = new BitSet(new long[]{0x0000000011000000L});
    public static final BitSet FOLLOW_COMMA_in_array_initializer24622 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_array_initializer24625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_initializer_in_variable_initializer_list24651 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_variable_initializer_list_Chld_in_variable_initializer_list24656 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_variable_initializer_list_Chld24684 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_variable_initializer_in_variable_initializer_list_Chld24689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_declaration24710 = new BitSet(new long[]{0x0000000000000000L,0x00000010000C1000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_interface_modifiers_in_interface_declaration24713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000041000L});
    public static final BitSet FOLLOW_partial_contextual_keyword_in_interface_declaration24716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_INTERFACE_in_interface_declaration24719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_declaration24721 = new BitSet(new long[]{0x0000000008000000L,0x0000080040001000L});
    public static final BitSet FOLLOW_variant_type_parameter_list_in_interface_declaration24723 = new BitSet(new long[]{0x0000000008000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_interface_base_in_interface_declaration24726 = new BitSet(new long[]{0x0000000000000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_declaration24729 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_interface_body_in_interface_declaration24732 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_declaration24734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_modifier_in_interface_modifiers24746 = new BitSet(new long[]{0x0000000000000002L,0x0000001000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_interface_modifier_in_interface_modifiers24750 = new BitSet(new long[]{0x0000000000000002L,0x0000001000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_NEW_in_interface_modifier24768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_interface_modifier24818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_interface_modifier24863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_interface_modifier24905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_interface_modifier24948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_modifier_unsafe_in_interface_modifier24994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_variant_type_parameter_list25019 = new BitSet(new long[]{0x0000000000000000L,0x0000100000009000L,0x0000000000000008L});
    public static final BitSet FOLLOW_variant_type_parameters_in_variant_type_parameter_list25021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_variant_type_parameter_list25023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_variant_type_parameters25034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000009000L,0x0000000000000008L});
    public static final BitSet FOLLOW_variance_annotation_in_variant_type_parameters25037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_parameter_in_variant_type_parameters25040 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_variant_type_parameters25044 = new BitSet(new long[]{0x0000000000000000L,0x0000100000009000L,0x0000000000000008L});
    public static final BitSet FOLLOW_attributes_in_variant_type_parameters25047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000009000L,0x0000000000000008L});
    public static final BitSet FOLLOW_variance_annotation_in_variant_type_parameters25051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_parameter_in_variant_type_parameters25055 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_IN_in_variance_annotation25073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_in_variance_annotation25096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_interface_base25127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_interface_type_list_in_interface_base25131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_interface_body25157 = new BitSet(new long[]{0x8100100801114000L,0x0000141020011000L,0x0021C40000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_comments_in_interface_body25162 = new BitSet(new long[]{0x8100100801114000L,0x0000141020011000L,0x0021C40000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_interface_member_declarations_in_interface_body25169 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_interface_body25173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_member_declaration_in_interface_member_declarations25206 = new BitSet(new long[]{0x8100100800114002L,0x0000141020011000L,0x0021C40000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_comments_in_interface_member_declaration25241 = new BitSet(new long[]{0x8100100800114000L,0x0000141020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_attributes_in_interface_member_declaration25248 = new BitSet(new long[]{0x8100100800114000L,0x0000041020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_NEW_in_interface_member_declaration25255 = new BitSet(new long[]{0x8100100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_interface_member_declaration_Chld_in_interface_member_declaration25261 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_interface_member_declaration25266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interface_member_declaration_Chld25310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_interface_member_declaration_sub_Chld_in_interface_member_declaration_Chld25315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_interface_member_declaration_Chld25335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_member_declaration_Chld25337 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_interface_member_declaration_Chld25342 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_interface_member_declaration_Chld25346 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_member_declaration_Chld25351 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_interface_member_declaration_Chld25355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000100000000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_member_declaration_Chld25360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_member_declaration_Chld25364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENT_in_interface_member_declaration_Chld25392 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_interface_member_declaration_Chld25396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_member_declaration_Chld25398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_member_declaration_Chld25400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_member_declaration_sub_Chld25432 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_interface_member_declaration_sub_Chld25437 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_interface_member_declaration_sub_Chld25441 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_member_declaration_sub_Chld25446 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_interface_member_declaration_sub_Chld25450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000100000000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_member_declaration_sub_Chld25455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_member_declaration_sub_Chld25459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_member_declaration_sub_Chld25487 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_interface_member_declaration_sub_Chld25489 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_interface_accessors_in_interface_member_declaration_sub_Chld25493 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_interface_member_declaration_sub_Chld25495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_interface_member_declaration_sub_Chld25515 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_interface_member_declaration_sub_Chld25517 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_member_declaration_sub_Chld25521 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_interface_member_declaration_sub_Chld25523 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_interface_member_declaration_sub_Chld25525 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_interface_accessors_in_interface_member_declaration_sub_Chld25529 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_interface_member_declaration_sub_Chld25531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_method_declaration25557 = new BitSet(new long[]{0x8000100800114000L,0x0000041020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_NEW_in_interface_method_declaration25560 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_return_type_in_interface_method_declaration25563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_method_declaration25565 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_interface_method_declaration25567 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_interface_method_declaration25570 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_method_declaration25572 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_interface_method_declaration25575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000100000000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration25577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_method_declaration25580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_property_declaration25591 = new BitSet(new long[]{0x8000100800114000L,0x0000041020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_NEW_in_interface_property_declaration25594 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_interface_property_declaration25597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_property_declaration25599 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_interface_property_declaration25601 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_interface_accessors_in_interface_property_declaration25603 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_interface_property_declaration25605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_accessors25628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_get_contextual_keyword_in_interface_accessors25640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_accessors25642 = new BitSet(new long[]{0x0000000000000002L,0x0000100000001000L});
    public static final BitSet FOLLOW_attributes_in_interface_accessors25645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_set_contextual_keyword_in_interface_accessors25650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_accessors25652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_contextual_keyword_in_interface_accessors25684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_accessors25686 = new BitSet(new long[]{0x0000000000000002L,0x0000100000001000L});
    public static final BitSet FOLLOW_attributes_in_interface_accessors25689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_get_contextual_keyword_in_interface_accessors25694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_accessors25696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_event_declaration25744 = new BitSet(new long[]{0x0100000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_NEW_in_interface_event_declaration25747 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_EVENT_in_interface_event_declaration25750 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_interface_event_declaration25752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_event_declaration25754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_event_declaration25756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_indexer_declaration25767 = new BitSet(new long[]{0x8000100800114000L,0x0000041020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_NEW_in_interface_indexer_declaration25770 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_interface_indexer_declaration25773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_THIS_in_interface_indexer_declaration25775 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_interface_indexer_declaration25777 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_indexer_declaration25779 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_interface_indexer_declaration25781 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_interface_indexer_declaration25783 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_interface_accessors_in_interface_indexer_declaration25785 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_interface_indexer_declaration25787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_enum_declaration25801 = new BitSet(new long[]{0x0080000000000000L,0x0000001000080000L,0x0000000000000700L});
    public static final BitSet FOLLOW_enum_modifiers_in_enum_declaration25804 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ENUM_in_enum_declaration25807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enum_declaration25809 = new BitSet(new long[]{0x0000000008000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_enum_base_in_enum_declaration25811 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_enum_body_in_enum_declaration25814 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_enum_declaration25816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_enum_base25828 = new BitSet(new long[]{0x0000000000110000L,0x0000000020010000L,0x0000440000000000L,0x0000000000800180L});
    public static final BitSet FOLLOW_integral_type_in_enum_base25830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_enum_body25844 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_enum_body25846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_enum_body25852 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_enum_member_declarations_in_enum_body25856 = new BitSet(new long[]{0x0000000011000000L});
    public static final BitSet FOLLOW_COMMA_in_enum_body25861 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_enum_body25865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_modifier_in_enum_modifiers25891 = new BitSet(new long[]{0x0000000000000002L,0x0000001000080000L,0x0000000000000700L});
    public static final BitSet FOLLOW_NEW_in_enum_modifier25907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_enum_modifier25935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_enum_modifier25958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_enum_modifier25978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_enum_modifier25999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations26030 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_enum_member_declarations26034 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations26039 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_attributes_in_enum_member_declaration26071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enum_member_declaration26076 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_enum_member_declaration26079 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_constant_expression_in_enum_member_declaration26083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_delegate_declaration26117 = new BitSet(new long[]{0x0000004000000000L,0x0000001000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_delegate_modifiers_in_delegate_declaration26120 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_DELEGATE_in_delegate_declaration26123 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_return_type_in_delegate_declaration26125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_delegate_declaration26127 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_variant_type_parameter_list_in_delegate_declaration26129 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_delegate_declaration26138 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_delegate_declaration26140 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_delegate_declaration26143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000100000000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration26145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_delegate_declaration26148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_modifier_in_delegate_modifiers26159 = new BitSet(new long[]{0x0000000000000002L,0x0000001000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_delegate_modifier_in_delegate_modifiers26163 = new BitSet(new long[]{0x0000000000000002L,0x0000001000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_NEW_in_delegate_modifier26181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_delegate_modifier26230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_delegate_modifier26274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_delegate_modifier26315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_delegate_modifier26357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_modifier_unsafe_in_delegate_modifier26402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_attribute_sections_in_global_attributes26437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_attribute_section_in_global_attribute_sections26462 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_global_attribute_section26490 = new BitSet(new long[]{0xF7A0146860DDD050L,0x00004498302DF043L,0x01B64C6800000738L,0x000000009DC003BBL});
    public static final BitSet FOLLOW_global_attribute_target_specifier_in_global_attribute_section26492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_attribute_list_in_global_attribute_section26494 = new BitSet(new long[]{0x0000000012000000L});
    public static final BitSet FOLLOW_COMMA_in_global_attribute_section26496 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_global_attribute_section26499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_attribute_target_in_global_attribute_target_specifier26511 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_global_attribute_target_specifier26513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyword_in_global_attribute_target26530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_global_attribute_target26552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_sections_in_attributes26586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_section_in_attribute_sections26617 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_attribute_section26645 = new BitSet(new long[]{0xF7A0146860DDD050L,0x00004498302DF043L,0x01B64C6800000738L,0x000000009DC003BBL});
    public static final BitSet FOLLOW_attribute_target_specifier_in_attribute_section26650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_attribute_list_in_attribute_section26656 = new BitSet(new long[]{0x0000000012000000L});
    public static final BitSet FOLLOW_COMMA_in_attribute_section26658 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_attribute_section26661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_target_in_attribute_target_specifier26691 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_attribute_target_specifier26693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyword_in_attribute_target26716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_attribute_target26737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_in_attribute_list26769 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_attribute_list_Chld_in_attribute_list26774 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_attribute_list_Chld26802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_attribute_in_attribute_list_Chld26806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_name_in_attribute26832 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_attribute_arguments_in_attribute26837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_attribute_name26868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_attribute_arguments26903 = new BitSet(new long[]{0x9000106804715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_positional_argument_list_in_attribute_arguments26908 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_attribute_arguments26912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_positional_argument_in_positional_argument_list26938 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_positional_argument_list_Chld_in_positional_argument_list26943 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_positional_argument_list_Chld26971 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_positional_argument_in_positional_argument_list_Chld26976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_argument_expression_in_positional_argument27002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_named_argument_in_named_argument_list27024 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_named_argument_list27028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_named_argument_in_named_argument_list27031 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_named_argument27047 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_named_argument27049 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_attribute_argument_expression_in_named_argument27051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_attribute_argument_expression27066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_class_modifier_unsafe27091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_struct_modifier_unsafe27116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_interface_modifier_unsafe27139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_delegate_modifier_unsafe27162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_field_modifier_unsafe27185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_method_modifier_unsafe27209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_property_modifier_unsafe27234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_event_modifier_unsafe27259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_indexer_modifier_unsafe27282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_operator_modifier_unsafe27305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_constructor_modifier_unsafe27328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_destructor_declaration_unsafe27354 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400004L});
    public static final BitSet FOLLOW_EXTERN_in_destructor_declaration_unsafe27363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400004L});
    public static final BitSet FOLLOW_UNSAFE_in_destructor_declaration_unsafe27366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_UNSAFE_in_destructor_declaration_unsafe27375 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_EXTERN_in_destructor_declaration_unsafe27377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_TILDE_in_destructor_declaration_unsafe27391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_destructor_declaration_unsafe27393 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_destructor_declaration_unsafe27395 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_destructor_declaration_unsafe27397 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_destructor_body_in_destructor_declaration_unsafe27399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe27423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe27429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe27431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe27433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe27439 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe27441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe27443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe27449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe27451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe27453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe27459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe27461 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe27463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe27469 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_set_in_static_constructor_modifiers_unsafe27471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe27483 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe27485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe27487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe27493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe27495 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe27497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unsafe_statement_in_embedded_statement_unsafe27511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_statement_in_embedded_statement_unsafe27516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_unsafe_statement27527 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_unsafe_statement27529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pointer_type_in_type_unsafe27540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_type_in_pointer_type27562 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_class_type_in_pointer_type27569 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_VOID_in_pointer_type27576 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_pointer_type27590 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_INTERR_in_pointer_type27602 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_STAR_in_pointer_type27610 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_STAR_in_pointer_type27621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_unmanaged_type27648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_in_primary_no_array_creation_expression_unsafe27674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pointer_indirection_expression_in_unary_expression_unsafe27696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_addressof_expression_in_unary_expression_unsafe27701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_pointer_indirection_expression27712 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_pointer_indirection_expression27714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMP_in_addressof_expression27731 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_addressof_expression27733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZEOF_in_sizeof_expression27744 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_sizeof_expression27746 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_unmanaged_type_in_sizeof_expression27748 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_sizeof_expression27750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIXED_in_fixed_statement27761 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_fixed_statement27763 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_pointer_type_in_fixed_statement27765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_fixed_pointer_declarators_in_fixed_statement27767 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_fixed_statement27769 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016BD45000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_fixed_statement27771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators27782 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_fixed_pointer_declarators27786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators27789 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_fixed_pointer_declarator27803 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_fixed_pointer_declarator27805 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator27807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMP_in_fixed_pointer_initializer27827 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_variable_reference_in_fixed_pointer_initializer27829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_fixed_pointer_initializer27835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_size_buffer_declaration_in_struct_member_declaration_unsafe27847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_fixed_size_buffer_declaration27860 = new BitSet(new long[]{0x4000000000000000L,0x0000001000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_fixed_size_buffer_modifiers_in_fixed_size_buffer_declaration27863 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_FIXED_in_fixed_size_buffer_declaration27866 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_buffer_element_type_in_fixed_size_buffer_declaration27868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_fixed_size_buffer_declarators_in_fixed_size_buffer_declaration27870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_fixed_size_buffer_declaration27872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_size_buffer_modifier_in_fixed_size_buffer_modifiers27889 = new BitSet(new long[]{0x0000000000000002L,0x0000001000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_NEW_in_fixed_size_buffer_modifier27915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_fixed_size_buffer_modifier27943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_fixed_size_buffer_modifier27966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_fixed_size_buffer_modifier27986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_fixed_size_buffer_modifier28007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_fixed_size_buffer_modifier28029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_buffer_element_type28059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_size_buffer_declarator_in_fixed_size_buffer_declarators28070 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_fixed_size_buffer_declarator28082 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_fixed_size_buffer_declarator28084 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_constant_expression_in_fixed_size_buffer_declarator28086 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_fixed_size_buffer_declarator28088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stackalloc_initializer_in_local_variable_initializer_unsafe28105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STACKALLOC_in_stackalloc_initializer28127 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_unmanaged_type_in_stackalloc_initializer28129 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_stackalloc_initializer28131 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_stackalloc_initializer28133 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_stackalloc_initializer28135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_from_contextual_keyword28175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_from_contextual_keyword28212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_from_contextual_keyword28248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_from_contextual_keyword28284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_from_contextual_keyword28320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_from_contextual_keyword28356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_from_contextual_keyword28392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_from_contextual_keyword28412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_let_contextual_keyword28436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_where_contextual_keyword28463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_join_contextual_keyword28490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_on_contextual_keyword28519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_equals_contextual_keyword28547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_into_contextual_keyword28572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_orderby_contextual_keyword28597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_ascending_contextual_keyword28623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_descending_contextual_keyword28649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_select_contextual_keyword28675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_not_select_contextual_keyword28704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_group_contextual_keyword28735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_by_contextual_keyword28764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_partial_contextual_keyword28793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_alias_contextual_keyword28817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_yield_contextual_keyword28844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_get_contextual_keyword28874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_set_contextual_keyword28901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_add_contextual_keyword28925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_remove_contextual_keyword28956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_dynamic_contextual_keyword28985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_arglist29014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_right_arrow29038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_right_arrow29042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_right_shift29062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_right_shift29066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_right_shift_assignment29096 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_OP_GE_in_right_shift_assignment29100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_literal_in_literal29131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_LITERAL_in_literal29147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REAL_LITERAL_in_literal29163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARACTER_LITERAL_in_literal29179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_literal29195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_literal29211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_boolean_literal29243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_boolean_literal29259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_keyword29285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_keyword29307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BASE_in_keyword29332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_keyword29355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_keyword29378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTE_in_keyword29400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_keyword29423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_in_keyword29446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_in_keyword29468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHECKED_in_keyword29491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_keyword29511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_in_keyword29533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_keyword29555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_keyword29574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_keyword29594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELEGATE_in_keyword29614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_keyword29633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_keyword29658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_keyword29679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_in_keyword29702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENT_in_keyword29725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPLICIT_in_keyword29747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_keyword29766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_keyword29787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_keyword29809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIXED_in_keyword29829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_keyword29851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_keyword29873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_keyword29897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GOTO_in_keyword29917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_keyword29940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLICIT_in_keyword29965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_in_keyword29984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_keyword30009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_in_keyword30033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_keyword30051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_keyword30070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOCK_in_keyword30095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_keyword30118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_keyword30141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_keyword30159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_keyword30183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_in_keyword30206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPERATOR_in_keyword30227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_in_keyword30246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_keyword30270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARAMS_in_keyword30289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_keyword30310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_keyword30330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_keyword30348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_READONLY_in_keyword30369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_in_keyword30388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_keyword30412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SBYTE_in_keyword30433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_keyword30455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHORT_in_keyword30476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZEOF_in_keyword30498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STACKALLOC_in_keyword30519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_keyword30536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_keyword30557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_in_keyword30578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_keyword30599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_keyword30620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_keyword30643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_keyword30665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_keyword30688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_keyword30712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UINT_in_keyword30733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ULONG_in_keyword30756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNCHECKED_in_keyword30778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_keyword30796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USHORT_in_keyword30817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_keyword30838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIRTUAL_in_keyword30860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_keyword30880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOLATILE_in_keyword30903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keyword30922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_class_name_definition30954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_class_name_definition30958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_name_definition_in_class_definition30986 = new BitSet(new long[]{0x0000000008000000L,0x0000080040001000L});
    public static final BitSet FOLLOW_type_parameter_list_in_class_definition30988 = new BitSet(new long[]{0x0000000008000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_class_base_in_class_definition30994 = new BitSet(new long[]{0x0000000000000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_class_definition30998 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_class_body_in_class_definition31009 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001900000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_class_definition31014 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_class_definition31021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_in_struct_definition31061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_struct_definition31063 = new BitSet(new long[]{0x0000000008000000L,0x0000080040001000L});
    public static final BitSet FOLLOW_type_parameter_list_in_struct_definition31065 = new BitSet(new long[]{0x0000000008000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_struct_interfaces_in_struct_definition31068 = new BitSet(new long[]{0x0000000000000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_struct_definition31071 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_struct_body_in_struct_definition31080 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_struct_definition31082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_in_interface_definition31099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_definition31103 = new BitSet(new long[]{0x0000000008000000L,0x0000080040001000L});
    public static final BitSet FOLLOW_variant_type_parameter_list_in_interface_definition31108 = new BitSet(new long[]{0x0000000008000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_interface_base_in_interface_definition31115 = new BitSet(new long[]{0x0000000000000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_definition31122 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_interface_body_in_interface_definition31128 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_definition31133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_in_enum_definition31184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enum_definition31186 = new BitSet(new long[]{0x0000000008000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_enum_base_in_enum_definition31191 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_enum_body_in_enum_definition31197 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_enum_definition31201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELEGATE_in_delegate_definition31236 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_return_type_in_delegate_definition31238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_delegate_definition31240 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_variant_type_parameter_list_in_delegate_definition31242 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_delegate_definition31245 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_delegate_definition31253 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_delegate_definition31256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000100000000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_delegate_definition31258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_delegate_definition31261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENT_in_event_declaration231273 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_event_declaration231275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_variable_declarators_in_event_declaration231287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_event_declaration231289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_event_declaration231299 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_event_declaration231301 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_event_accessor_declarations_in_event_declaration231303 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_event_declaration231305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declarators_in_field_declaration231330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration231332 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_field_declaration231337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_property_declaration231370 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_property_declaration231372 = new BitSet(new long[]{0x0000000000000000L,0x0000100000081000L,0x0001800000000300L});
    public static final BitSet FOLLOW_comments_in_property_declaration231377 = new BitSet(new long[]{0x0000000000000000L,0x0000100000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_accessor_declarations_in_property_declaration231383 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_property_declaration231385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_in_constant_declaration231414 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_constant_declaration231418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_constant_declarators_in_constant_declaration231422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_constant_declaration231424 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_constant_declaration231429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_indexer_declaration231464 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_indexer_declaration231466 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_indexer_declaration231470 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_indexer_declaration231472 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_indexer_declaration231474 = new BitSet(new long[]{0x0000000000000000L,0x0000100000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_accessor_declarations_in_indexer_declaration231478 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_indexer_declaration231480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_destructor_definition31506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_destructor_definition31508 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_destructor_definition31510 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_destructor_definition31512 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_destructor_body_in_destructor_definition31514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_constructor_declaration231531 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_constructor_declaration231533 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_constructor_declaration231538 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_constructor_declaration231542 = new BitSet(new long[]{0x0000000008000000L,0x0000080000000000L,0x0001900000000000L});
    public static final BitSet FOLLOW_constructor_initializer_in_constructor_declaration231547 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0001900000000000L});
    public static final BitSet FOLLOW_comments_in_constructor_declaration231554 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_body_in_constructor_declaration231560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comment_in_comments31606 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_SINGLE_LINE_COMMENT_in_comment31633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SINGLE_LINE_DOC_COMMENT_in_comment31650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_member_name_in_method_declaration231680 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_method_declaration231685 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_method_declaration231689 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_method_declaration231694 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_method_declaration231698 = new BitSet(new long[]{0x0000000000000000L,0x0000080000001000L,0x0001900000000000L});
    public static final BitSet FOLLOW_comments_in_method_declaration231703 = new BitSet(new long[]{0x0000000000000000L,0x0000080000001000L,0x0000100000000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_method_declaration231716 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_method_body_in_method_declaration231722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_member_name2_in_method_member_name31770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_method_member_name231797 = new BitSet(new long[]{0x0000080000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_method_member_name2_chld_in_method_member_name231802 = new BitSet(new long[]{0x0000080000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_method_member_name231826 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_DOUBLE_COLON_in_method_member_name231828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_method_member_name231832 = new BitSet(new long[]{0x0000080000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_method_member_name2_chld_in_method_member_name231837 = new BitSet(new long[]{0x0000080000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_method_member_name2_chld31872 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_method_member_name2_chld31874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_method_member_name2_chld31878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPERATOR_in_operator_declaration231904 = new BitSet(new long[]{0x1000020000022820L,0x23E8000440000080L,0x00080000000000C0L,0x000000000000000CL});
    public static final BitSet FOLLOW_overloadable_operator_in_operator_declaration231906 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_operator_declaration231908 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_operator_declaration231910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_operator_declaration231912 = new BitSet(new long[]{0x0000000014000000L});
    public static final BitSet FOLLOW_COMMA_in_operator_declaration231924 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_operator_declaration231926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_operator_declaration231928 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_operator_declaration231932 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_operator_body_in_operator_declaration231934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_method_declaration231946 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_interface_method_declaration231948 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_interface_method_declaration231951 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_method_declaration231953 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_interface_method_declaration231956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000100000000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration231958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_method_declaration231961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_property_declaration231973 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_interface_property_declaration231975 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_interface_accessors_in_interface_property_declaration231977 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_interface_property_declaration231979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENT_in_interface_event_declaration231991 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_interface_event_declaration231993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_event_declaration231995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_event_declaration231997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_interface_indexer_declaration232012 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_interface_indexer_declaration232014 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_indexer_declaration232016 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_interface_indexer_declaration232018 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_interface_indexer_declaration232020 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_interface_accessors_in_interface_indexer_declaration232022 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_interface_indexer_declaration232024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access232047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access232049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access232077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access232079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access232107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access232109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access232136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access232138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access232165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access232167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access232194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access232196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access232223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access232225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access232252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access232254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access232281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access232283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access232310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access232312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access232339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access232341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access232361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access232365 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_member_access232369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_method_invocation232401 = new BitSet(new long[]{0x9000106804715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_list_in_method_invocation232406 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_method_invocation232410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_object_creation_expression232435 = new BitSet(new long[]{0x9000106804715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_list_in_object_creation_expression232440 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_object_creation_expression232444 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression232449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred1_CSharpAngular342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred1_CSharpAngular344 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_synpred1_CSharpAngular346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred2_CSharpAngular386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred2_CSharpAngular388 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LT_in_synpred2_CSharpAngular390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_argument_list_in_synpred3_CSharpAngular472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeChld_in_synpred4_CSharpAngular531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_specifier_in_synpred5_CSharpAngular1130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_synpred22_CSharpAngular2605 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred22_CSharpAngular2607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred22_CSharpAngular2609 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LT_in_synpred22_CSharpAngular2611 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_synpred22_CSharpAngular2613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_synpred22_CSharpAngular2615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_synpred24_CSharpAngular2719 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred24_CSharpAngular2721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred24_CSharpAngular2723 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_method_invocation2_in_synpred24_CSharpAngular2725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_synpred25_CSharpAngular2790 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred25_CSharpAngular2792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred25_CSharpAngular2794 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_synpred25_CSharpAngular2796 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_synpred25_CSharpAngular2798 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred25_CSharpAngular2800 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_synpred25_CSharpAngular2802 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred25_CSharpAngular2804 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_synpred25_CSharpAngular2806 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred25_CSharpAngular2808 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_synpred25_CSharpAngular2810 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_synpred25_CSharpAngular2812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_synpred26_CSharpAngular2868 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred26_CSharpAngular2870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred26_CSharpAngular2872 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_synpred26_CSharpAngular2874 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_synpred26_CSharpAngular2876 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred26_CSharpAngular2878 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_synpred26_CSharpAngular2880 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_synpred26_CSharpAngular2882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred27_CSharpAngular3076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred27_CSharpAngular3078 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_synpred27_CSharpAngular3080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred28_CSharpAngular3109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred28_CSharpAngular3111 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LT_in_synpred28_CSharpAngular3113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred29_CSharpAngular3264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred29_CSharpAngular3266 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_method_invocation2_in_synpred29_CSharpAngular3268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred32_CSharpAngular3366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred32_CSharpAngular3368 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_method_invocation2_in_synpred32_CSharpAngular3370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred34_CSharpAngular3442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred34_CSharpAngular3444 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LT_in_synpred34_CSharpAngular3446 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_synpred34_CSharpAngular3448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_synpred34_CSharpAngular3450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_name1_in_synpred49_CSharpAngular4639 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_simple_remove_name_in_synpred50_CSharpAngular4682 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_array_type_in_synpred52_CSharpAngular6186 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_synpred52_CSharpAngular6188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unbound_type_name_in_synpred53_CSharpAngular6568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scan_for_cast_generic_precedence_in_synpred54_CSharpAngular6862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_synpred54_CSharpAngular6866 = new BitSet(new long[]{0x8000100800114000L,0x0000040020010000L,0x0020440000000000L,0x0000000000800180L});
    public static final BitSet FOLLOW_predefined_cast_type_in_synpred54_CSharpAngular6868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shift_expression_in_synpred55_CSharpAngular9594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERR_in_synpred56_CSharpAngular10186 = new BitSet(new long[]{0x0000000004000000L,0x4001000000100000L});
    public static final BitSet FOLLOW_is_disambiguation_token_in_synpred56_CSharpAngular10188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred57_CSharpAngular11508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred57_CSharpAngular11510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_synpred57_CSharpAngular11512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred58_CSharpAngular11568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred59_CSharpAngular11596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred60_CSharpAngular11624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred61_CSharpAngular11652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_into_contextual_keyword_in_synpred62_CSharpAngular11722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_where_clause1_in_synpred63_CSharpAngular12011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_orderby_clause_in_synpred63_CSharpAngular12013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_into_contextual_keyword_in_synpred64_CSharpAngular12331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred64_CSharpAngular12333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_from_contextual_keyword_in_synpred64_CSharpAngular12335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred64_CSharpAngular12337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_synpred64_CSharpAngular12339 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_synpred64_CSharpAngular12341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_where_clause_in_synpred64_CSharpAngular12343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_in_synpred65_CSharpAngular13013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expression_in_synpred66_CSharpAngular13060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_expression_in_synpred67_CSharpAngular13084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_labeled_statement_in_synpred68_CSharpAngular13184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_statement_in_synpred69_CSharpAngular13208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_synpred70_CSharpAngular14152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_synpred71_CSharpAngular14640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_synpred72_CSharpAngular15557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_attribute_section_in_synpred73_CSharpAngular15687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_type_in_synpred74_CSharpAngular18184 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred74_CSharpAngular18186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_THIS_in_synpred74_CSharpAngular18188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred75_CSharpAngular18220 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_synpred75_CSharpAngular18222 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_synpred75_CSharpAngular18225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred76_CSharpAngular18253 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_synpred76_CSharpAngular18255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_synpred77_CSharpAngular18855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_PARAMS_in_synpred77_CSharpAngular18858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_operator_declarator_in_synpred80_CSharpAngular21661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMP_in_synpred81_CSharpAngular27822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred82_CSharpAngular28161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred82_CSharpAngular28165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_synpred82_CSharpAngular28167 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_synpred82_CSharpAngular28169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_join_contextual_keyword_in_synpred82_CSharpAngular28171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred83_CSharpAngular28198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred83_CSharpAngular28202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_synpred83_CSharpAngular28204 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_synpred83_CSharpAngular28206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_where_contextual_keyword_in_synpred83_CSharpAngular28208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred84_CSharpAngular28234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred84_CSharpAngular28238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_synpred84_CSharpAngular28240 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_synpred84_CSharpAngular28242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred85_CSharpAngular28270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred85_CSharpAngular28274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_synpred85_CSharpAngular28276 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_synpred85_CSharpAngular28278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred86_CSharpAngular28306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred86_CSharpAngular28310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_synpred86_CSharpAngular28312 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_synpred86_CSharpAngular28314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred87_CSharpAngular28342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred87_CSharpAngular28346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_synpred87_CSharpAngular28348 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_synpred87_CSharpAngular28350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred88_CSharpAngular28378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred88_CSharpAngular28382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_synpred88_CSharpAngular28384 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_synpred88_CSharpAngular28386 = new BitSet(new long[]{0x0000000000000002L});

}