// $ANTLR 3.4 CSharp.g 2016-10-03 22:01:53

package com.hcl.atma.converter.parsers;

import java.util.LinkedList;

import com.hcl.atma.converter.util.*;
import com.hcl.atma.converter.generator.*;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;
import java.util.HashMap;
@SuppressWarnings({"all", "warnings", "unchecked"})
public class CSharp extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "AMP", "AS", "ASSIGNMENT", "Asterisks", "Available_identifier", "BACK_SLASH", "BANG", "BASE", "BITWISE_OR", "BOOL", "BREAK", "BYTE", "CARET", "CASE", "CATCH", "CHAR", "CHARACTER_LITERAL", "CHECKED", "CLASS", "CLOSE_BRACE", "CLOSE_BRACKET", "CLOSE_PARENS", "COLON", "COMMA", "CONST", "CONTINUE", "Character", "Combining_character", "Conditional_symbol", "Connecting_character", "DECIMAL", "DECIMAL_DIGIT", "DEFAULT", "DELEGATE", "DELIMITED_COMMENT", "DELIMITED_DOC_COMMENT", "DIV", "DO", "DOT", "DOUBLE", "DOUBLEQUOTED_STRING", "DOUBLE_BACK_SLASH", "DOUBLE_COLON", "DOUBLE_QUOTE", "Decimal_digit_character", "Decimal_digits", "Decimal_integer_literal", "Delimited_comment_section", "ELSE", "ENDCOMMENT", "ENUM", "EVENT", "EXPLICIT", "EXTERN", "Exponent_part", "FALSE", "FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", "File_name", "File_name_character", "File_name_characters", "Formatting_character", "GOTO", "GT", "HEX_DIGIT", "Hex_digits", "Hexadecimal_escape_sequence", "Hexadecimal_integer_literal", "IDENTIFIER", "IF", "IMPLICIT", "IN", "INT", "INTEGER_LITERAL", "INTERFACE", "INTERNAL", "INTERR", "IS", "Identifier_or_keyword", "Identifier_part_character", "Identifier_start_character", "Input_character", "Input_characters", "Integer_type_suffix", "LOCK", "LONG", "LT", "Letter_character", "Line_indicator", "LiteralAccess", "MINUS", "NAMESPACE", "NEW", "NEW_LINE", "NEW_LINE_CHARACTER", "NULL", "Not_number_sign", "Not_slash_or_asterisk", "OBJECT", "OPEN_BRACE", "OPEN_BRACKET", "OPEN_PARENS", "OPERATOR", "OP_ADD_ASSIGNMENT", "OP_AND", "OP_AND_ASSIGNMENT", "OP_COALESCING", "OP_DEC", "OP_DIV_ASSIGNMENT", "OP_EQ", "OP_GE", "OP_INC", "OP_LE", "OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_MOD_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_NE", "OP_OR", "OP_OR_ASSIGNMENT", "OP_PTR", "OP_SUB_ASSIGNMENT", "OP_XOR_ASSIGNMENT", "OUT", "OVERRIDE", "PARAMS", "PERCENT", "PLUS", "PRIVATE", "PROTECTED", "PUBLIC", "Pp_and_expression", "Pp_conditional", "Pp_declaration", "Pp_diagnostic", "Pp_directive", "Pp_elif_section", "Pp_else_section", "Pp_end_region", "Pp_endif", "Pp_equality_expression", "Pp_expression", "Pp_if_section", "Pp_line", "Pp_message", "Pp_new_line", "Pp_or_expression", "Pp_pragma", "Pp_pragma_text", "Pp_primary_expression", "Pp_region", "Pp_start_region", "Pp_unary_expression", "QUOTE", "Quote_escape_sequence", "READONLY", "REAL_LITERAL", "REF", "RETURN", "Real_type_suffix", "Regular_string_literal", "Regular_string_literal_character", "SBYTE", "SEALED", "SEMICOLON", "SHARP", "SHORT", "SINGLE_LINE_COMMENT", "SINGLE_LINE_DOC_COMMENT", "SIZEOF", "STACKALLOC", "STAR", "STATIC", "STRING", "STRING_LITERAL", "STRUCT", "SWITCH", "Sign", "Simple_escape_sequence", "Single_character", "Single_regular_string_literal_character", "Single_verbatim_string_literal_character", "SkiPped_characters", "SkiPped_section_part", "THIS", "THROW", "TILDE", "TRUE", "TRY", "TYPEOF", "Tokens", "UINT", "ULONG", "UNCHECKED", "UNICODE_CLASS_CF", "UNICODE_CLASS_LL", "UNICODE_CLASS_LM", "UNICODE_CLASS_LO", "UNICODE_CLASS_LT", "UNICODE_CLASS_LU", "UNICODE_CLASS_MC", "UNICODE_CLASS_MN", "UNICODE_CLASS_ND", "UNICODE_CLASS_NL", "UNICODE_CLASS_PC", "UNICODE_CLASS_ZS", "UNSAFE", "USHORT", "USING", "Unicode_escape_sequence", "VIRTUAL", "VOID", "VOLATILE", "Verbatim_string_literal", "Verbatim_string_literal_character", "WHILE", "WHITESPACE", "Whitespace_character", "Whitespace_characters"
    };

    public static final int EOF=-1;
    public static final int ABSTRACT=4;
    public static final int AMP=5;
    public static final int AS=6;
    public static final int ASSIGNMENT=7;
    public static final int Asterisks=8;
    public static final int Available_identifier=9;
    public static final int BACK_SLASH=10;
    public static final int BANG=11;
    public static final int BASE=12;
    public static final int BITWISE_OR=13;
    public static final int BOOL=14;
    public static final int BREAK=15;
    public static final int BYTE=16;
    public static final int CARET=17;
    public static final int CASE=18;
    public static final int CATCH=19;
    public static final int CHAR=20;
    public static final int CHARACTER_LITERAL=21;
    public static final int CHECKED=22;
    public static final int CLASS=23;
    public static final int CLOSE_BRACE=24;
    public static final int CLOSE_BRACKET=25;
    public static final int CLOSE_PARENS=26;
    public static final int COLON=27;
    public static final int COMMA=28;
    public static final int CONST=29;
    public static final int CONTINUE=30;
    public static final int Character=31;
    public static final int Combining_character=32;
    public static final int Conditional_symbol=33;
    public static final int Connecting_character=34;
    public static final int DECIMAL=35;
    public static final int DECIMAL_DIGIT=36;
    public static final int DEFAULT=37;
    public static final int DELEGATE=38;
    public static final int DELIMITED_COMMENT=39;
    public static final int DELIMITED_DOC_COMMENT=40;
    public static final int DIV=41;
    public static final int DO=42;
    public static final int DOT=43;
    public static final int DOUBLE=44;
    public static final int DOUBLEQUOTED_STRING=45;
    public static final int DOUBLE_BACK_SLASH=46;
    public static final int DOUBLE_COLON=47;
    public static final int DOUBLE_QUOTE=48;
    public static final int Decimal_digit_character=49;
    public static final int Decimal_digits=50;
    public static final int Decimal_integer_literal=51;
    public static final int Delimited_comment_section=52;
    public static final int ELSE=53;
    public static final int ENDCOMMENT=54;
    public static final int ENUM=55;
    public static final int EVENT=56;
    public static final int EXPLICIT=57;
    public static final int EXTERN=58;
    public static final int Exponent_part=59;
    public static final int FALSE=60;
    public static final int FINALLY=61;
    public static final int FIXED=62;
    public static final int FLOAT=63;
    public static final int FOR=64;
    public static final int FOREACH=65;
    public static final int File_name=66;
    public static final int File_name_character=67;
    public static final int File_name_characters=68;
    public static final int Formatting_character=69;
    public static final int GOTO=70;
    public static final int GT=71;
    public static final int HEX_DIGIT=72;
    public static final int Hex_digits=73;
    public static final int Hexadecimal_escape_sequence=74;
    public static final int Hexadecimal_integer_literal=75;
    public static final int IDENTIFIER=76;
    public static final int IF=77;
    public static final int IMPLICIT=78;
    public static final int IN=79;
    public static final int INT=80;
    public static final int INTEGER_LITERAL=81;
    public static final int INTERFACE=82;
    public static final int INTERNAL=83;
    public static final int INTERR=84;
    public static final int IS=85;
    public static final int Identifier_or_keyword=86;
    public static final int Identifier_part_character=87;
    public static final int Identifier_start_character=88;
    public static final int Input_character=89;
    public static final int Input_characters=90;
    public static final int Integer_type_suffix=91;
    public static final int LOCK=92;
    public static final int LONG=93;
    public static final int LT=94;
    public static final int Letter_character=95;
    public static final int Line_indicator=96;
    public static final int LiteralAccess=97;
    public static final int MINUS=98;
    public static final int NAMESPACE=99;
    public static final int NEW=100;
    public static final int NEW_LINE=101;
    public static final int NEW_LINE_CHARACTER=102;
    public static final int NULL=103;
    public static final int Not_number_sign=104;
    public static final int Not_slash_or_asterisk=105;
    public static final int OBJECT=106;
    public static final int OPEN_BRACE=107;
    public static final int OPEN_BRACKET=108;
    public static final int OPEN_PARENS=109;
    public static final int OPERATOR=110;
    public static final int OP_ADD_ASSIGNMENT=111;
    public static final int OP_AND=112;
    public static final int OP_AND_ASSIGNMENT=113;
    public static final int OP_COALESCING=114;
    public static final int OP_DEC=115;
    public static final int OP_DIV_ASSIGNMENT=116;
    public static final int OP_EQ=117;
    public static final int OP_GE=118;
    public static final int OP_INC=119;
    public static final int OP_LE=120;
    public static final int OP_LEFT_SHIFT=121;
    public static final int OP_LEFT_SHIFT_ASSIGNMENT=122;
    public static final int OP_MOD_ASSIGNMENT=123;
    public static final int OP_MULT_ASSIGNMENT=124;
    public static final int OP_NE=125;
    public static final int OP_OR=126;
    public static final int OP_OR_ASSIGNMENT=127;
    public static final int OP_PTR=128;
    public static final int OP_SUB_ASSIGNMENT=129;
    public static final int OP_XOR_ASSIGNMENT=130;
    public static final int OUT=131;
    public static final int OVERRIDE=132;
    public static final int PARAMS=133;
    public static final int PERCENT=134;
    public static final int PLUS=135;
    public static final int PRIVATE=136;
    public static final int PROTECTED=137;
    public static final int PUBLIC=138;
    public static final int Pp_and_expression=139;
    public static final int Pp_conditional=140;
    public static final int Pp_declaration=141;
    public static final int Pp_diagnostic=142;
    public static final int Pp_directive=143;
    public static final int Pp_elif_section=144;
    public static final int Pp_else_section=145;
    public static final int Pp_end_region=146;
    public static final int Pp_endif=147;
    public static final int Pp_equality_expression=148;
    public static final int Pp_expression=149;
    public static final int Pp_if_section=150;
    public static final int Pp_line=151;
    public static final int Pp_message=152;
    public static final int Pp_new_line=153;
    public static final int Pp_or_expression=154;
    public static final int Pp_pragma=155;
    public static final int Pp_pragma_text=156;
    public static final int Pp_primary_expression=157;
    public static final int Pp_region=158;
    public static final int Pp_start_region=159;
    public static final int Pp_unary_expression=160;
    public static final int QUOTE=161;
    public static final int Quote_escape_sequence=162;
    public static final int READONLY=163;
    public static final int REAL_LITERAL=164;
    public static final int REF=165;
    public static final int RETURN=166;
    public static final int Real_type_suffix=167;
    public static final int Regular_string_literal=168;
    public static final int Regular_string_literal_character=169;
    public static final int SBYTE=170;
    public static final int SEALED=171;
    public static final int SEMICOLON=172;
    public static final int SHARP=173;
    public static final int SHORT=174;
    public static final int SINGLE_LINE_COMMENT=175;
    public static final int SINGLE_LINE_DOC_COMMENT=176;
    public static final int SIZEOF=177;
    public static final int STACKALLOC=178;
    public static final int STAR=179;
    public static final int STATIC=180;
    public static final int STRING=181;
    public static final int STRING_LITERAL=182;
    public static final int STRUCT=183;
    public static final int SWITCH=184;
    public static final int Sign=185;
    public static final int Simple_escape_sequence=186;
    public static final int Single_character=187;
    public static final int Single_regular_string_literal_character=188;
    public static final int Single_verbatim_string_literal_character=189;
    public static final int SkiPped_characters=190;
    public static final int SkiPped_section_part=191;
    public static final int THIS=192;
    public static final int THROW=193;
    public static final int TILDE=194;
    public static final int TRUE=195;
    public static final int TRY=196;
    public static final int TYPEOF=197;
    public static final int Tokens=198;
    public static final int UINT=199;
    public static final int ULONG=200;
    public static final int UNCHECKED=201;
    public static final int UNICODE_CLASS_CF=202;
    public static final int UNICODE_CLASS_LL=203;
    public static final int UNICODE_CLASS_LM=204;
    public static final int UNICODE_CLASS_LO=205;
    public static final int UNICODE_CLASS_LT=206;
    public static final int UNICODE_CLASS_LU=207;
    public static final int UNICODE_CLASS_MC=208;
    public static final int UNICODE_CLASS_MN=209;
    public static final int UNICODE_CLASS_ND=210;
    public static final int UNICODE_CLASS_NL=211;
    public static final int UNICODE_CLASS_PC=212;
    public static final int UNICODE_CLASS_ZS=213;
    public static final int UNSAFE=214;
    public static final int USHORT=215;
    public static final int USING=216;
    public static final int Unicode_escape_sequence=217;
    public static final int VIRTUAL=218;
    public static final int VOID=219;
    public static final int VOLATILE=220;
    public static final int Verbatim_string_literal=221;
    public static final int Verbatim_string_literal_character=222;
    public static final int WHILE=223;
    public static final int WHITESPACE=224;
    public static final int Whitespace_character=225;
    public static final int Whitespace_characters=226;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public CSharp(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public CSharp(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected StringTemplateGroup templateLib =
  new StringTemplateGroup("CSharpTemplates", AngleBracketTemplateLexer.class);

public void setTemplateLib(StringTemplateGroup templateLib) {
  this.templateLib = templateLib;
}
public StringTemplateGroup getTemplateLib() {
  return templateLib;
}
/** allows convenient multi-value initialization:
 *  "new STAttrMap().put(...).put(...)"
 */
public static class STAttrMap extends HashMap {
  public STAttrMap put(String attrName, Object value) {
    super.put(attrName, value);
    return this;
  }
  public STAttrMap put(String attrName, int value) {
    super.put(attrName, new Integer(value));
    return this;
  }
}
    public String[] getTokenNames() { return CSharp.tokenNames; }
    public String getGrammarFileName() { return "CSharp.g"; }


    // the following methods are only used for debug purposes
    private List<String> errors = new LinkedList<String>();
    private List<String> methodList = new LinkedList<String>();

    @Override
    public void displayRecognitionError(String[] tokenNames, RecognitionException e) {
        super.displayRecognitionError(tokenNames, e);
        String hdr = getErrorHeader(e);
        String msg = getErrorMessage(e, tokenNames);
    //    errors.add(hdr + " " + msg);
    //    System.err.println("Error--");
        
    }

    public List<String> getErrors() {
        return errors;
    }

    private String methodName;

    public String assignmethodName(String methodName) {
       methodList.add(methodName);
       return "";
      }

     private String className;

     public String getClassName() {
        return className;
      }

    public String assignClassName(String className) {
        setClassName(className);
        return "";
      }

      public void setClassName(String className) {
        this.className = className;
      }
    private void next(int n) {
      System.err.print("next: ");
      for (int i=1; i<=n; i++) {
    //    System.err.print(" | " + input.LT(i).getType() + "=" + input.LT(i).getText());
      }
    //  System.err.println("Error--");
    }



    public static class cSharp_return extends ParserRuleReturnScope {
        public String javaContent;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "cSharp"
    // CSharp.g:71:1: cSharp returns [String javaContent] : module EOF ;
    public final CSharp.cSharp_return cSharp() throws RecognitionException {
        CSharp.cSharp_return retval = new CSharp.cSharp_return();
        retval.start = input.LT(1);


        CSharp.module_return module1 =null;


        try {
            // CSharp.g:72:3: ( module EOF )
            // CSharp.g:73:3: module EOF
            {
            pushFollow(FOLLOW_module_in_cSharp92);
            module1=module();

            state._fsp--;
            if (state.failed) return retval;

            match(input,EOF,FOLLOW_EOF_in_cSharp94); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
                retval.javaContent = (module1!=null?module1.st:null).toString();
              }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cSharp"


    public static class module_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "module"
    // CSharp.g:82:1: module : cb= compilation_unit -> createClass(classBody=cb);
    public final CSharp.module_return module() throws RecognitionException {
        CSharp.module_return retval = new CSharp.module_return();
        retval.start = input.LT(1);


        CSharp.compilation_unit_return cb =null;


        try {
            // CSharp.g:83:3: (cb= compilation_unit -> createClass(classBody=cb))
            // CSharp.g:84:3: cb= compilation_unit
            {
            pushFollow(FOLLOW_compilation_unit_in_module116);
            cb=compilation_unit();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 85:3: -> createClass(classBody=cb)
              {
                  retval.st = templateLib.getInstanceOf("createClass",new STAttrMap().put("classBody", cb));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "module"


    public static class namespace_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_name"
    // CSharp.g:88:1: namespace_name : nms= namespace_or_type_name -> namespaceName(value=nms);
    public final CSharp.namespace_name_return namespace_name() throws RecognitionException {
        CSharp.namespace_name_return retval = new CSharp.namespace_name_return();
        retval.start = input.LT(1);


        CSharp.namespace_or_type_name_return nms =null;


        try {
            // CSharp.g:89:2: (nms= namespace_or_type_name -> namespaceName(value=nms))
            // CSharp.g:90:2: nms= namespace_or_type_name
            {
            pushFollow(FOLLOW_namespace_or_type_name_in_namespace_name145);
            nms=namespace_or_type_name();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 91:3: -> namespaceName(value=nms)
              {
                  retval.st = templateLib.getInstanceOf("namespaceName",new STAttrMap().put("value", nms));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "namespace_name"


    public static class type_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_name"
    // CSharp.g:93:1: type_name : nmsName= namespace_or_type_name -> typeName(value=nmsName);
    public final CSharp.type_name_return type_name() throws RecognitionException {
        CSharp.type_name_return retval = new CSharp.type_name_return();
        retval.start = input.LT(1);


        CSharp.namespace_or_type_name_return nmsName =null;


        try {
            // CSharp.g:94:2: (nmsName= namespace_or_type_name -> typeName(value=nmsName))
            // CSharp.g:95:2: nmsName= namespace_or_type_name
            {
            pushFollow(FOLLOW_namespace_or_type_name_in_type_name179);
            nmsName=namespace_or_type_name();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 96:2: -> typeName(value=nmsName)
              {
                  retval.st = templateLib.getInstanceOf("typeName",new STAttrMap().put("value", nmsName));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_name"


    public static class namespace_or_type_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_or_type_name"
    // CSharp.g:105:1: namespace_or_type_name : (id= IDENTIFIER typArg= type_argument_list_opt (nmsTypChld1+= namespace_or_type_name_Chld )* -> namespaceOrTypeName(firstPart=CSharpHelper.replaceJavaType($id.text)argList=typArgsecondPart=$nmsTypChld1)|fstPrt= qualified_alias_member (nmsTypChld2+= namespace_or_type_name_Chld )* -> namespaceOrTypeName2(firstPart=$fstPrt.textsecondPart=$nmsTypChld2));
    public final CSharp.namespace_or_type_name_return namespace_or_type_name() throws RecognitionException {
        CSharp.namespace_or_type_name_return retval = new CSharp.namespace_or_type_name_return();
        retval.start = input.LT(1);


        Token id=null;
        List list_nmsTypChld1=null;
        List list_nmsTypChld2=null;
        CSharp.type_argument_list_opt_return typArg =null;

        CSharp.qualified_alias_member_return fstPrt =null;

        RuleReturnScope nmsTypChld1 = null;
        RuleReturnScope nmsTypChld2 = null;
        try {
            // CSharp.g:106:3: (id= IDENTIFIER typArg= type_argument_list_opt (nmsTypChld1+= namespace_or_type_name_Chld )* -> namespaceOrTypeName(firstPart=CSharpHelper.replaceJavaType($id.text)argList=typArgsecondPart=$nmsTypChld1)|fstPrt= qualified_alias_member (nmsTypChld2+= namespace_or_type_name_Chld )* -> namespaceOrTypeName2(firstPart=$fstPrt.textsecondPart=$nmsTypChld2))
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==IDENTIFIER) ) {
                int LA3_1 = input.LA(2);

                if ( (LA3_1==DOUBLE_COLON) ) {
                    alt3=2;
                }
                else if ( (LA3_1==EOF||(LA3_1 >= AMP && LA3_1 <= AS)||(LA3_1 >= BITWISE_OR && LA3_1 <= BOOL)||(LA3_1 >= BYTE && LA3_1 <= CARET)||LA3_1==CHAR||(LA3_1 >= CLOSE_BRACE && LA3_1 <= COMMA)||LA3_1==DECIMAL||(LA3_1 >= DOT && LA3_1 <= DOUBLE)||LA3_1==FLOAT||LA3_1==GT||LA3_1==IDENTIFIER||LA3_1==INT||(LA3_1 >= INTERR && LA3_1 <= IS)||(LA3_1 >= LONG && LA3_1 <= LT)||(LA3_1 >= OBJECT && LA3_1 <= OPERATOR)||LA3_1==OP_AND||LA3_1==OP_COALESCING||(LA3_1 >= OP_EQ && LA3_1 <= OP_GE)||LA3_1==OP_LE||(LA3_1 >= OP_NE && LA3_1 <= OP_OR)||LA3_1==SBYTE||LA3_1==SEMICOLON||(LA3_1 >= SHORT && LA3_1 <= SINGLE_LINE_DOC_COMMENT)||LA3_1==STAR||LA3_1==STRING||LA3_1==THIS||(LA3_1 >= UINT && LA3_1 <= ULONG)||LA3_1==USHORT||LA3_1==VOID) ) {
                    alt3=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 3, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // CSharp.g:107:3: id= IDENTIFIER typArg= type_argument_list_opt (nmsTypChld1+= namespace_or_type_name_Chld )*
                    {
                    id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_namespace_or_type_name214); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_argument_list_opt_in_namespace_or_type_name218);
                    typArg=type_argument_list_opt();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp.g:107:48: (nmsTypChld1+= namespace_or_type_name_Chld )*
                    loop1:
                    do {
                        int alt1=2;
                        int LA1_0 = input.LA(1);

                        if ( (LA1_0==DOT) ) {
                            int LA1_2 = input.LA(2);

                            if ( (LA1_2==IDENTIFIER) ) {
                                alt1=1;
                            }


                        }


                        switch (alt1) {
                    	case 1 :
                    	    // CSharp.g:107:49: nmsTypChld1+= namespace_or_type_name_Chld
                    	    {
                    	    pushFollow(FOLLOW_namespace_or_type_name_Chld_in_namespace_or_type_name224);
                    	    nmsTypChld1=namespace_or_type_name_Chld();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_nmsTypChld1==null) list_nmsTypChld1=new ArrayList();
                    	    list_nmsTypChld1.add(nmsTypChld1.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    break loop1;
                        }
                    } while (true);


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 108:3: -> namespaceOrTypeName(firstPart=CSharpHelper.replaceJavaType($id.text)argList=typArgsecondPart=$nmsTypChld1)
                      {
                          retval.st = templateLib.getInstanceOf("namespaceOrTypeName",new STAttrMap().put("firstPart", CSharpHelper.replaceJavaType((id!=null?id.getText():null))).put("argList", typArg).put("secondPart", list_nmsTypChld1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:109:4: fstPrt= qualified_alias_member (nmsTypChld2+= namespace_or_type_name_Chld )*
                    {
                    pushFollow(FOLLOW_qualified_alias_member_in_namespace_or_type_name252);
                    fstPrt=qualified_alias_member();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp.g:109:34: (nmsTypChld2+= namespace_or_type_name_Chld )*
                    loop2:
                    do {
                        int alt2=2;
                        int LA2_0 = input.LA(1);

                        if ( (LA2_0==DOT) ) {
                            int LA2_2 = input.LA(2);

                            if ( (LA2_2==IDENTIFIER) ) {
                                alt2=1;
                            }


                        }


                        switch (alt2) {
                    	case 1 :
                    	    // CSharp.g:109:35: nmsTypChld2+= namespace_or_type_name_Chld
                    	    {
                    	    pushFollow(FOLLOW_namespace_or_type_name_Chld_in_namespace_or_type_name257);
                    	    nmsTypChld2=namespace_or_type_name_Chld();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_nmsTypChld2==null) list_nmsTypChld2=new ArrayList();
                    	    list_nmsTypChld2.add(nmsTypChld2.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    break loop2;
                        }
                    } while (true);


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 110:3: -> namespaceOrTypeName2(firstPart=$fstPrt.textsecondPart=$nmsTypChld2)
                      {
                          retval.st = templateLib.getInstanceOf("namespaceOrTypeName2",new STAttrMap().put("firstPart", (fstPrt!=null?input.toString(fstPrt.start,fstPrt.stop):null)).put("secondPart", list_nmsTypChld2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "namespace_or_type_name"


    public static class namespace_or_type_name_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_or_type_name_Chld"
    // CSharp.g:113:1: namespace_or_type_name_Chld : DOT id= IDENTIFIER argLst= type_argument_list_opt -> namespaceOrTypeNameChld(identifier=NamingUtil.toCamelCase($id.text)argumentList=argLst);
    public final CSharp.namespace_or_type_name_Chld_return namespace_or_type_name_Chld() throws RecognitionException {
        CSharp.namespace_or_type_name_Chld_return retval = new CSharp.namespace_or_type_name_Chld_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharp.type_argument_list_opt_return argLst =null;


        try {
            // CSharp.g:114:3: ( DOT id= IDENTIFIER argLst= type_argument_list_opt -> namespaceOrTypeNameChld(identifier=NamingUtil.toCamelCase($id.text)argumentList=argLst))
            // CSharp.g:115:3: DOT id= IDENTIFIER argLst= type_argument_list_opt
            {
            match(input,DOT,FOLLOW_DOT_in_namespace_or_type_name_Chld291); if (state.failed) return retval;

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_namespace_or_type_name_Chld295); if (state.failed) return retval;

            pushFollow(FOLLOW_type_argument_list_opt_in_namespace_or_type_name_Chld299);
            argLst=type_argument_list_opt();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 116:3: -> namespaceOrTypeNameChld(identifier=NamingUtil.toCamelCase($id.text)argumentList=argLst)
              {
                  retval.st = templateLib.getInstanceOf("namespaceOrTypeNameChld",new STAttrMap().put("identifier", NamingUtil.toCamelCase((id!=null?id.getText():null))).put("argumentList", argLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "namespace_or_type_name_Chld"


    public static class type_argument_list_opt_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_argument_list_opt"
    // CSharp.g:121:1: type_argument_list_opt : ( ( ( type_argument_list )=>tal= type_argument_list ) -> typeArgumentListOpt(argList=tal)| -> typeArgumentListOpt(argList=null));
    public final CSharp.type_argument_list_opt_return type_argument_list_opt() throws RecognitionException {
        CSharp.type_argument_list_opt_return retval = new CSharp.type_argument_list_opt_return();
        retval.start = input.LT(1);


        CSharp.type_argument_list_return tal =null;


        try {
            // CSharp.g:122:3: ( ( ( type_argument_list )=>tal= type_argument_list ) -> typeArgumentListOpt(argList=tal)| -> typeArgumentListOpt(argList=null))
            int alt4=2;
            alt4 = dfa4.predict(input);
            switch (alt4) {
                case 1 :
                    // CSharp.g:123:3: ( ( type_argument_list )=>tal= type_argument_list )
                    {
                    // CSharp.g:123:3: ( ( type_argument_list )=>tal= type_argument_list )
                    // CSharp.g:123:4: ( type_argument_list )=>tal= type_argument_list
                    {
                    pushFollow(FOLLOW_type_argument_list_in_type_argument_list_opt342);
                    tal=type_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 124:3: -> typeArgumentListOpt(argList=tal)
                      {
                          retval.st = templateLib.getInstanceOf("typeArgumentListOpt",new STAttrMap().put("argList", tal));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:126:3: 
                    {
                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 126:3: -> typeArgumentListOpt(argList=null)
                      {
                          retval.st = templateLib.getInstanceOf("typeArgumentListOpt",new STAttrMap().put("argList", null));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_argument_list_opt"


    public static class type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type"
    // CSharp.g:137:1: type : bTyp= base_type (chld+= typeChld )* -> dattype(firstType=bTyplist=$chld);
    public final CSharp.type_return type() throws RecognitionException {
        CSharp.type_return retval = new CSharp.type_return();
        retval.start = input.LT(1);


        List list_chld=null;
        CSharp.base_type_return bTyp =null;

        RuleReturnScope chld = null;
        try {
            // CSharp.g:138:3: (bTyp= base_type (chld+= typeChld )* -> dattype(firstType=bTyplist=$chld))
            // CSharp.g:139:3: bTyp= base_type (chld+= typeChld )*
            {
            pushFollow(FOLLOW_base_type_in_type390);
            bTyp=base_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:139:18: (chld+= typeChld )*
            loop5:
            do {
                int alt5=2;
                switch ( input.LA(1) ) {
                case OPEN_BRACKET:
                    {
                    alt5=1;
                    }
                    break;
                case INTERR:
                    {
                    alt5=1;
                    }
                    break;
                case STAR:
                    {
                    alt5=1;
                    }
                    break;

                }

                switch (alt5) {
            	case 1 :
            	    // CSharp.g:139:19: chld+= typeChld
            	    {
            	    pushFollow(FOLLOW_typeChld_in_type395);
            	    chld=typeChld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_chld==null) list_chld=new ArrayList();
            	    list_chld.add(chld.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 140:3: -> dattype(firstType=bTyplist=$chld)
              {
                  retval.st = templateLib.getInstanceOf("dattype",new STAttrMap().put("firstType", bTyp).put("list", list_chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type"


    public static class typeChld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "typeChld"
    // CSharp.g:143:1: typeChld : ( ( ( INTERR )=>inter= INTERR ) -> typeChld(value=\"\")| ( ( rank_specifier )=>rnkSp= rank_specifier ) -> typeChld(value=rnkSp)|st= STAR -> typeChld(value=$STAR.text));
    public final CSharp.typeChld_return typeChld() throws RecognitionException {
        CSharp.typeChld_return retval = new CSharp.typeChld_return();
        retval.start = input.LT(1);


        Token inter=null;
        Token st=null;
        CSharp.rank_specifier_return rnkSp =null;


        try {
            // CSharp.g:144:3: ( ( ( INTERR )=>inter= INTERR ) -> typeChld(value=\"\")| ( ( rank_specifier )=>rnkSp= rank_specifier ) -> typeChld(value=rnkSp)|st= STAR -> typeChld(value=$STAR.text))
            int alt6=3;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==INTERR) && (synpred2_CSharp())) {
                alt6=1;
            }
            else if ( (LA6_0==OPEN_BRACKET) && (synpred3_CSharp())) {
                alt6=2;
            }
            else if ( (LA6_0==STAR) ) {
                alt6=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }
            switch (alt6) {
                case 1 :
                    // CSharp.g:145:3: ( ( INTERR )=>inter= INTERR )
                    {
                    // CSharp.g:145:3: ( ( INTERR )=>inter= INTERR )
                    // CSharp.g:145:4: ( INTERR )=>inter= INTERR
                    {
                    inter=(Token)match(input,INTERR,FOLLOW_INTERR_in_typeChld437); if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 145:49: -> typeChld(value=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("typeChld",new STAttrMap().put("value", ""));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:146:5: ( ( rank_specifier )=>rnkSp= rank_specifier )
                    {
                    // CSharp.g:146:5: ( ( rank_specifier )=>rnkSp= rank_specifier )
                    // CSharp.g:146:6: ( rank_specifier )=>rnkSp= rank_specifier
                    {
                    pushFollow(FOLLOW_rank_specifier_in_typeChld480);
                    rnkSp=rank_specifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 146:49: -> typeChld(value=rnkSp)
                      {
                          retval.st = templateLib.getInstanceOf("typeChld",new STAttrMap().put("value", rnkSp));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:147:5: st= STAR
                    {
                    st=(Token)match(input,STAR,FOLLOW_STAR_in_typeChld498); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 147:49: -> typeChld(value=$STAR.text)
                      {
                          retval.st = templateLib.getInstanceOf("typeChld",new STAttrMap().put("value", (st!=null?st.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeChld"


    public static class base_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "base_type"
    // CSharp.g:151:1: base_type : (simpType= simple_type -> baseType(type=simpType)|cType= class_type -> baseType(type=cType)| VOID STAR -> text(value=\" void *\"));
    public final CSharp.base_type_return base_type() throws RecognitionException {
        CSharp.base_type_return retval = new CSharp.base_type_return();
        retval.start = input.LT(1);


        CSharp.simple_type_return simpType =null;

        CSharp.class_type_return cType =null;


        try {
            // CSharp.g:152:3: (simpType= simple_type -> baseType(type=simpType)|cType= class_type -> baseType(type=cType)| VOID STAR -> text(value=\" void *\"))
            int alt7=3;
            switch ( input.LA(1) ) {
            case BOOL:
            case BYTE:
            case CHAR:
            case DECIMAL:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SBYTE:
            case SHORT:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt7=1;
                }
                break;
            case IDENTIFIER:
            case OBJECT:
            case STRING:
                {
                alt7=2;
                }
                break;
            case VOID:
                {
                alt7=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }

            switch (alt7) {
                case 1 :
                    // CSharp.g:153:3: simpType= simple_type
                    {
                    pushFollow(FOLLOW_simple_type_in_base_type561);
                    simpType=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 154:3: -> baseType(type=simpType)
                      {
                          retval.st = templateLib.getInstanceOf("baseType",new STAttrMap().put("type", simpType));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:155:5: cType= class_type
                    {
                    pushFollow(FOLLOW_class_type_in_base_type589);
                    cType=class_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 156:3: -> baseType(type=cType)
                      {
                          retval.st = templateLib.getInstanceOf("baseType",new STAttrMap().put("type", cType));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:157:5: VOID STAR
                    {
                    match(input,VOID,FOLLOW_VOID_in_base_type622); if (state.failed) return retval;

                    match(input,STAR,FOLLOW_STAR_in_base_type624); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 157:35: -> text(value=\" void *\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", " void *"));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "base_type"


    public static class simple_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "simple_type"
    // CSharp.g:172:1: simple_type : (numType= numeric_type -> simpleType(type=numType)|boolType= BOOL -> simpleType(type=\"boolean\"));
    public final CSharp.simple_type_return simple_type() throws RecognitionException {
        CSharp.simple_type_return retval = new CSharp.simple_type_return();
        retval.start = input.LT(1);


        Token boolType=null;
        CSharp.numeric_type_return numType =null;


        try {
            // CSharp.g:173:2: (numType= numeric_type -> simpleType(type=numType)|boolType= BOOL -> simpleType(type=\"boolean\"))
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==BYTE||LA8_0==CHAR||LA8_0==DECIMAL||LA8_0==DOUBLE||LA8_0==FLOAT||LA8_0==INT||LA8_0==LONG||LA8_0==SBYTE||LA8_0==SHORT||(LA8_0 >= UINT && LA8_0 <= ULONG)||LA8_0==USHORT) ) {
                alt8=1;
            }
            else if ( (LA8_0==BOOL) ) {
                alt8=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }
            switch (alt8) {
                case 1 :
                    // CSharp.g:174:2: numType= numeric_type
                    {
                    pushFollow(FOLLOW_numeric_type_in_simple_type673);
                    numType=numeric_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 174:33: -> simpleType(type=numType)
                      {
                          retval.st = templateLib.getInstanceOf("simpleType",new STAttrMap().put("type", numType));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:175:4: boolType= BOOL
                    {
                    boolType=(Token)match(input,BOOL,FOLLOW_BOOL_in_simple_type698); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 175:33: -> simpleType(type=\"boolean\")
                      {
                          retval.st = templateLib.getInstanceOf("simpleType",new STAttrMap().put("type", "boolean"));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_type"


    public static class numeric_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "numeric_type"
    // CSharp.g:177:1: numeric_type : (intType= integral_type -> numericType(type=intType)|fpType= floating_point_type -> numericType(type=fpType)|dec= DECIMAL -> numericType(type=$DECIMAL.text));
    public final CSharp.numeric_type_return numeric_type() throws RecognitionException {
        CSharp.numeric_type_return retval = new CSharp.numeric_type_return();
        retval.start = input.LT(1);


        Token dec=null;
        CSharp.integral_type_return intType =null;

        CSharp.floating_point_type_return fpType =null;


        try {
            // CSharp.g:178:2: (intType= integral_type -> numericType(type=intType)|fpType= floating_point_type -> numericType(type=fpType)|dec= DECIMAL -> numericType(type=$DECIMAL.text))
            int alt9=3;
            switch ( input.LA(1) ) {
            case BYTE:
            case CHAR:
            case INT:
            case LONG:
            case SBYTE:
            case SHORT:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt9=1;
                }
                break;
            case DOUBLE:
            case FLOAT:
                {
                alt9=2;
                }
                break;
            case DECIMAL:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }

            switch (alt9) {
                case 1 :
                    // CSharp.g:179:2: intType= integral_type
                    {
                    pushFollow(FOLLOW_integral_type_in_numeric_type736);
                    intType=integral_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 179:33: -> numericType(type=intType)
                      {
                          retval.st = templateLib.getInstanceOf("numericType",new STAttrMap().put("type", intType));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:180:4: fpType= floating_point_type
                    {
                    pushFollow(FOLLOW_floating_point_type_in_numeric_type760);
                    fpType=floating_point_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 180:33: -> numericType(type=fpType)
                      {
                          retval.st = templateLib.getInstanceOf("numericType",new STAttrMap().put("type", fpType));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:181:4: dec= DECIMAL
                    {
                    dec=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_numeric_type777); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 181:33: -> numericType(type=$DECIMAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("numericType",new STAttrMap().put("type", (dec!=null?dec.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "numeric_type"


    public static class integral_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "integral_type"
    // CSharp.g:184:1: integral_type : ( SBYTE -> text(value=$SBYTE.text)| BYTE -> text(value=$BYTE.text)| SHORT -> text(value=$SHORT.text)| USHORT -> text(value=$USHORT.text)| INT -> text(value=$INT.text)| UINT -> text(value=$UINT.text)| LONG -> text(value=$LONG.text)| ULONG -> text(value=$ULONG.text)| CHAR -> text(value=$CHAR.text));
    public final CSharp.integral_type_return integral_type() throws RecognitionException {
        CSharp.integral_type_return retval = new CSharp.integral_type_return();
        retval.start = input.LT(1);


        Token SBYTE2=null;
        Token BYTE3=null;
        Token SHORT4=null;
        Token USHORT5=null;
        Token INT6=null;
        Token UINT7=null;
        Token LONG8=null;
        Token ULONG9=null;
        Token CHAR10=null;

        try {
            // CSharp.g:185:2: ( SBYTE -> text(value=$SBYTE.text)| BYTE -> text(value=$BYTE.text)| SHORT -> text(value=$SHORT.text)| USHORT -> text(value=$USHORT.text)| INT -> text(value=$INT.text)| UINT -> text(value=$UINT.text)| LONG -> text(value=$LONG.text)| ULONG -> text(value=$ULONG.text)| CHAR -> text(value=$CHAR.text))
            int alt10=9;
            switch ( input.LA(1) ) {
            case SBYTE:
                {
                alt10=1;
                }
                break;
            case BYTE:
                {
                alt10=2;
                }
                break;
            case SHORT:
                {
                alt10=3;
                }
                break;
            case USHORT:
                {
                alt10=4;
                }
                break;
            case INT:
                {
                alt10=5;
                }
                break;
            case UINT:
                {
                alt10=6;
                }
                break;
            case LONG:
                {
                alt10=7;
                }
                break;
            case ULONG:
                {
                alt10=8;
                }
                break;
            case CHAR:
                {
                alt10=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;

            }

            switch (alt10) {
                case 1 :
                    // CSharp.g:186:2: SBYTE
                    {
                    SBYTE2=(Token)match(input,SBYTE,FOLLOW_SBYTE_in_integral_type816); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 187:2: -> text(value=$SBYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SBYTE2!=null?SBYTE2.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:188:4: BYTE
                    {
                    BYTE3=(Token)match(input,BYTE,FOLLOW_BYTE_in_integral_type830); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 189:2: -> text(value=$BYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BYTE3!=null?BYTE3.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:190:4: SHORT
                    {
                    SHORT4=(Token)match(input,SHORT,FOLLOW_SHORT_in_integral_type844); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 191:2: -> text(value=$SHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SHORT4!=null?SHORT4.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:192:4: USHORT
                    {
                    USHORT5=(Token)match(input,USHORT,FOLLOW_USHORT_in_integral_type858); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 193:2: -> text(value=$USHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (USHORT5!=null?USHORT5.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:194:4: INT
                    {
                    INT6=(Token)match(input,INT,FOLLOW_INT_in_integral_type872); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 195:2: -> text(value=$INT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INT6!=null?INT6.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:196:4: UINT
                    {
                    UINT7=(Token)match(input,UINT,FOLLOW_UINT_in_integral_type886); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 197:2: -> text(value=$UINT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UINT7!=null?UINT7.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:198:4: LONG
                    {
                    LONG8=(Token)match(input,LONG,FOLLOW_LONG_in_integral_type900); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 199:2: -> text(value=$LONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (LONG8!=null?LONG8.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:200:4: ULONG
                    {
                    ULONG9=(Token)match(input,ULONG,FOLLOW_ULONG_in_integral_type914); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 201:2: -> text(value=$ULONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ULONG9!=null?ULONG9.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:202:4: CHAR
                    {
                    CHAR10=(Token)match(input,CHAR,FOLLOW_CHAR_in_integral_type928); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 203:2: -> text(value=$CHAR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CHAR10!=null?CHAR10.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "integral_type"


    public static class floating_point_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "floating_point_type"
    // CSharp.g:207:1: floating_point_type : ( FLOAT -> text(value=$FLOAT.text)| DOUBLE -> text(value=$DOUBLE.text));
    public final CSharp.floating_point_type_return floating_point_type() throws RecognitionException {
        CSharp.floating_point_type_return retval = new CSharp.floating_point_type_return();
        retval.start = input.LT(1);


        Token FLOAT11=null;
        Token DOUBLE12=null;

        try {
            // CSharp.g:208:2: ( FLOAT -> text(value=$FLOAT.text)| DOUBLE -> text(value=$DOUBLE.text))
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==FLOAT) ) {
                alt11=1;
            }
            else if ( (LA11_0==DOUBLE) ) {
                alt11=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;

            }
            switch (alt11) {
                case 1 :
                    // CSharp.g:209:2: FLOAT
                    {
                    FLOAT11=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_floating_point_type953); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 210:2: -> text(value=$FLOAT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FLOAT11!=null?FLOAT11.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:211:3: DOUBLE
                    {
                    DOUBLE12=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_floating_point_type967); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 212:2: -> text(value=$DOUBLE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DOUBLE12!=null?DOUBLE12.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "floating_point_type"


    public static class nullable_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "nullable_type"
    // CSharp.g:214:1: nullable_type : val= non_nullable_value_type INTERR -> nullableType(value=valkwd=\"\");
    public final CSharp.nullable_type_return nullable_type() throws RecognitionException {
        CSharp.nullable_type_return retval = new CSharp.nullable_type_return();
        retval.start = input.LT(1);


        CSharp.non_nullable_value_type_return val =null;


        try {
            // CSharp.g:215:2: (val= non_nullable_value_type INTERR -> nullableType(value=valkwd=\"\"))
            // CSharp.g:216:2: val= non_nullable_value_type INTERR
            {
            pushFollow(FOLLOW_non_nullable_value_type_in_nullable_type991);
            val=non_nullable_value_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,INTERR,FOLLOW_INTERR_in_nullable_type993); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 217:2: -> nullableType(value=valkwd=\"\")
              {
                  retval.st = templateLib.getInstanceOf("nullableType",new STAttrMap().put("value", val).put("kwd", ""));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nullable_type"


    public static class non_nullable_value_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "non_nullable_value_type"
    // CSharp.g:225:1: non_nullable_value_type : base_type ( ( rank_specifier )=> rank_specifier | STAR )* ;
    public final CSharp.non_nullable_value_type_return non_nullable_value_type() throws RecognitionException {
        CSharp.non_nullable_value_type_return retval = new CSharp.non_nullable_value_type_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:226:2: ( base_type ( ( rank_specifier )=> rank_specifier | STAR )* )
            // CSharp.g:226:4: base_type ( ( rank_specifier )=> rank_specifier | STAR )*
            {
            pushFollow(FOLLOW_base_type_in_non_nullable_value_type1020);
            base_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:227:5: ( ( rank_specifier )=> rank_specifier | STAR )*
            loop12:
            do {
                int alt12=3;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==OPEN_BRACKET) && (synpred4_CSharp())) {
                    alt12=1;
                }
                else if ( (LA12_0==STAR) ) {
                    alt12=2;
                }


                switch (alt12) {
            	case 1 :
            	    // CSharp.g:227:7: ( rank_specifier )=> rank_specifier
            	    {
            	    pushFollow(FOLLOW_rank_specifier_in_non_nullable_value_type1034);
            	    rank_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;
            	case 2 :
            	    // CSharp.g:228:7: STAR
            	    {
            	    match(input,STAR,FOLLOW_STAR_in_non_nullable_value_type1042); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "non_nullable_value_type"


    public static class reference_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "reference_type"
    // CSharp.g:244:1: reference_type : ( simple_type | class_type | VOID STAR ) ( ( STAR | INTERR )* rank_specifier )* ({...}? ( STAR | INTERR )* rank_specifier ) ;
    public final CSharp.reference_type_return reference_type() throws RecognitionException {
        CSharp.reference_type_return retval = new CSharp.reference_type_return();
        retval.start = input.LT(1);


        boolean oneOrMore = false;
        try {
            // CSharp.g:246:3: ( ( simple_type | class_type | VOID STAR ) ( ( STAR | INTERR )* rank_specifier )* ({...}? ( STAR | INTERR )* rank_specifier ) )
            // CSharp.g:246:5: ( simple_type | class_type | VOID STAR ) ( ( STAR | INTERR )* rank_specifier )* ({...}? ( STAR | INTERR )* rank_specifier )
            {
            // CSharp.g:246:5: ( simple_type | class_type | VOID STAR )
            int alt13=3;
            switch ( input.LA(1) ) {
            case BOOL:
            case BYTE:
            case CHAR:
            case DECIMAL:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SBYTE:
            case SHORT:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt13=1;
                }
                break;
            case IDENTIFIER:
            case OBJECT:
            case STRING:
                {
                alt13=2;
                }
                break;
            case VOID:
                {
                alt13=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }

            switch (alt13) {
                case 1 :
                    // CSharp.g:246:7: simple_type
                    {
                    pushFollow(FOLLOW_simple_type_in_reference_type1072);
                    simple_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) {oneOrMore=true;}

                    }
                    break;
                case 2 :
                    // CSharp.g:247:7: class_type
                    {
                    pushFollow(FOLLOW_class_type_in_reference_type1082);
                    class_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp.g:248:7: VOID STAR
                    {
                    match(input,VOID,FOLLOW_VOID_in_reference_type1090); if (state.failed) return retval;

                    match(input,STAR,FOLLOW_STAR_in_reference_type1092); if (state.failed) return retval;

                    if ( state.backtracking==0 ) {oneOrMore=true;}

                    }
                    break;

            }


            // CSharp.g:249:5: ( ( STAR | INTERR )* rank_specifier )*
            loop15:
            do {
                int alt15=2;
                alt15 = dfa15.predict(input);
                switch (alt15) {
            	case 1 :
            	    // CSharp.g:249:6: ( STAR | INTERR )* rank_specifier
            	    {
            	    // CSharp.g:249:6: ( STAR | INTERR )*
            	    loop14:
            	    do {
            	        int alt14=2;
            	        int LA14_0 = input.LA(1);

            	        if ( (LA14_0==INTERR||LA14_0==STAR) ) {
            	            alt14=1;
            	        }


            	        switch (alt14) {
            	    	case 1 :
            	    	    // CSharp.g:
            	    	    {
            	    	    if ( input.LA(1)==INTERR||input.LA(1)==STAR ) {
            	    	        input.consume();
            	    	        state.errorRecovery=false;
            	    	        state.failed=false;
            	    	    }
            	    	    else {
            	    	        if (state.backtracking>0) {state.failed=true; return retval;}
            	    	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	    	        throw mse;
            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop14;
            	        }
            	    } while (true);


            	    pushFollow(FOLLOW_rank_specifier_in_reference_type1110);
            	    rank_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            // CSharp.g:250:5: ({...}? ( STAR | INTERR )* rank_specifier )
            // CSharp.g:250:6: {...}? ( STAR | INTERR )* rank_specifier
            {
            if ( !((oneOrMore)) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "reference_type", "oneOrMore");
            }

            // CSharp.g:250:19: ( STAR | INTERR )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==INTERR||LA16_0==STAR) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // CSharp.g:
            	    {
            	    if ( input.LA(1)==INTERR||input.LA(1)==STAR ) {
            	        input.consume();
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            pushFollow(FOLLOW_rank_specifier_in_reference_type1130);
            rank_specifier();

            state._fsp--;
            if (state.failed) return retval;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "reference_type"


    public static class class_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_type"
    // CSharp.g:254:1: class_type : (typName= type_name -> classType(value=typName)|obj= OBJECT -> classType(value=\"Object\")|dck= dynamic_contextual_keyword -> classType(value=dck)|str= STRING -> classType(value=\"String\"));
    public final CSharp.class_type_return class_type() throws RecognitionException {
        CSharp.class_type_return retval = new CSharp.class_type_return();
        retval.start = input.LT(1);


        Token obj=null;
        Token str=null;
        CSharp.type_name_return typName =null;

        CSharp.dynamic_contextual_keyword_return dck =null;


        try {
            // CSharp.g:255:2: (typName= type_name -> classType(value=typName)|obj= OBJECT -> classType(value=\"Object\")|dck= dynamic_contextual_keyword -> classType(value=dck)|str= STRING -> classType(value=\"String\"))
            int alt17=4;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
                {
                int LA17_1 = input.LA(2);

                if ( (!(((input.LT(1).getText().equals("dynamic"))))) ) {
                    alt17=1;
                }
                else if ( ((input.LT(1).getText().equals("dynamic"))) ) {
                    alt17=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 1, input);

                    throw nvae;

                }
                }
                break;
            case OBJECT:
                {
                alt17=2;
                }
                break;
            case STRING:
                {
                alt17=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }

            switch (alt17) {
                case 1 :
                    // CSharp.g:256:2: typName= type_name
                    {
                    pushFollow(FOLLOW_type_name_in_class_type1150);
                    typName=type_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 256:37: -> classType(value=typName)
                      {
                          retval.st = templateLib.getInstanceOf("classType",new STAttrMap().put("value", typName));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:257:4: obj= OBJECT
                    {
                    obj=(Token)match(input,OBJECT,FOLLOW_OBJECT_in_class_type1182); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 257:37: -> classType(value=\"Object\")
                      {
                          retval.st = templateLib.getInstanceOf("classType",new STAttrMap().put("value", "Object"));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:258:4: dck= dynamic_contextual_keyword
                    {
                    pushFollow(FOLLOW_dynamic_contextual_keyword_in_class_type1225);
                    dck=dynamic_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 258:37: -> classType(value=dck)
                      {
                          retval.st = templateLib.getInstanceOf("classType",new STAttrMap().put("value", dck));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:259:4: str= STRING
                    {
                    str=(Token)match(input,STRING,FOLLOW_STRING_in_class_type1242); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 259:37: -> classType(value=\"String\")
                      {
                          retval.st = templateLib.getInstanceOf("classType",new STAttrMap().put("value", "String"));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_type"


    public static class interface_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_type"
    // CSharp.g:263:1: interface_type : typName= type_name -> interfaceType(value=typName);
    public final CSharp.interface_type_return interface_type() throws RecognitionException {
        CSharp.interface_type_return retval = new CSharp.interface_type_return();
        retval.start = input.LT(1);


        CSharp.type_name_return typName =null;


        try {
            // CSharp.g:264:2: (typName= type_name -> interfaceType(value=typName))
            // CSharp.g:265:2: typName= type_name
            {
            pushFollow(FOLLOW_type_name_in_interface_type1290);
            typName=type_name();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 265:27: -> interfaceType(value=typName)
              {
                  retval.st = templateLib.getInstanceOf("interfaceType",new STAttrMap().put("value", typName));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_type"


    public static class delegate_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_type"
    // CSharp.g:269:1: delegate_type : typName= type_name -> text(value=typName);
    public final CSharp.delegate_type_return delegate_type() throws RecognitionException {
        CSharp.delegate_type_return retval = new CSharp.delegate_type_return();
        retval.start = input.LT(1);


        CSharp.type_name_return typName =null;


        try {
            // CSharp.g:270:2: (typName= type_name -> text(value=typName))
            // CSharp.g:271:2: typName= type_name
            {
            pushFollow(FOLLOW_type_name_in_delegate_type1323);
            typName=type_name();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 271:27: -> text(value=typName)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", typName));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delegate_type"


    public static class type_argument_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_argument_list"
    // CSharp.g:273:1: type_argument_list : LT args= type_arguments GT -> typeArgumentList(arguments=$args.st.toString().trim());
    public final CSharp.type_argument_list_return type_argument_list() throws RecognitionException {
        CSharp.type_argument_list_return retval = new CSharp.type_argument_list_return();
        retval.start = input.LT(1);


        CSharp.type_arguments_return args =null;


        try {
            // CSharp.g:274:2: ( LT args= type_arguments GT -> typeArgumentList(arguments=$args.st.toString().trim()))
            // CSharp.g:275:2: LT args= type_arguments GT
            {
            match(input,LT,FOLLOW_LT_in_type_argument_list1351); if (state.failed) return retval;

            pushFollow(FOLLOW_type_arguments_in_type_argument_list1355);
            args=type_arguments();

            state._fsp--;
            if (state.failed) return retval;

            match(input,GT,FOLLOW_GT_in_type_argument_list1357); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 276:2: -> typeArgumentList(arguments=$args.st.toString().trim())
              {
                  retval.st = templateLib.getInstanceOf("typeArgumentList",new STAttrMap().put("arguments", (args!=null?args.st:null).toString().trim()));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_argument_list"


    public static class type_arguments_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_arguments"
    // CSharp.g:278:1: type_arguments : fstArg= type_argument (tChld+= type_arguments_Chld )* -> typeArguments(firstArg=fstArgchldLst=$tChld);
    public final CSharp.type_arguments_return type_arguments() throws RecognitionException {
        CSharp.type_arguments_return retval = new CSharp.type_arguments_return();
        retval.start = input.LT(1);


        List list_tChld=null;
        CSharp.type_argument_return fstArg =null;

        RuleReturnScope tChld = null;
        try {
            // CSharp.g:279:2: (fstArg= type_argument (tChld+= type_arguments_Chld )* -> typeArguments(firstArg=fstArgchldLst=$tChld))
            // CSharp.g:280:2: fstArg= type_argument (tChld+= type_arguments_Chld )*
            {
            pushFollow(FOLLOW_type_argument_in_type_arguments1381);
            fstArg=type_argument();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:280:23: (tChld+= type_arguments_Chld )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==COMMA) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // CSharp.g:280:24: tChld+= type_arguments_Chld
            	    {
            	    pushFollow(FOLLOW_type_arguments_Chld_in_type_arguments1386);
            	    tChld=type_arguments_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_tChld==null) list_tChld=new ArrayList();
            	    list_tChld.add(tChld.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 281:2: -> typeArguments(firstArg=fstArgchldLst=$tChld)
              {
                  retval.st = templateLib.getInstanceOf("typeArguments",new STAttrMap().put("firstArg", fstArg).put("chldLst", list_tChld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_arguments"


    public static class type_arguments_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_arguments_Chld"
    // CSharp.g:284:1: type_arguments_Chld : COMMA arg= type_argument -> typeArgumentsChld(args=arg);
    public final CSharp.type_arguments_Chld_return type_arguments_Chld() throws RecognitionException {
        CSharp.type_arguments_Chld_return retval = new CSharp.type_arguments_Chld_return();
        retval.start = input.LT(1);


        CSharp.type_argument_return arg =null;


        try {
            // CSharp.g:285:2: ( COMMA arg= type_argument -> typeArgumentsChld(args=arg))
            // CSharp.g:286:2: COMMA arg= type_argument
            {
            match(input,COMMA,FOLLOW_COMMA_in_type_arguments_Chld1414); if (state.failed) return retval;

            pushFollow(FOLLOW_type_argument_in_type_arguments_Chld1418);
            arg=type_argument();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 287:2: -> typeArgumentsChld(args=arg)
              {
                  retval.st = templateLib.getInstanceOf("typeArgumentsChld",new STAttrMap().put("args", arg));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_arguments_Chld"


    public static class type_argument_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_argument"
    // CSharp.g:290:1: type_argument : ta= type -> typeArgument(value=CSharpHelper.replaceJavaType($ta.text));
    public final CSharp.type_argument_return type_argument() throws RecognitionException {
        CSharp.type_argument_return retval = new CSharp.type_argument_return();
        retval.start = input.LT(1);


        CSharp.type_return ta =null;


        try {
            // CSharp.g:291:2: (ta= type -> typeArgument(value=CSharpHelper.replaceJavaType($ta.text)))
            // CSharp.g:292:2: ta= type
            {
            pushFollow(FOLLOW_type_in_type_argument1444);
            ta=type();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 293:2: -> typeArgument(value=CSharpHelper.replaceJavaType($ta.text))
              {
                  retval.st = templateLib.getInstanceOf("typeArgument",new STAttrMap().put("value", CSharpHelper.replaceJavaType((ta!=null?input.toString(ta.start,ta.stop):null))));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_argument"


    public static class type_void_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_void"
    // CSharp.g:296:1: type_void : v= VOID -> text(value=\" \"+$v.text);
    public final CSharp.type_void_return type_void() throws RecognitionException {
        CSharp.type_void_return retval = new CSharp.type_void_return();
        retval.start = input.LT(1);


        Token v=null;

        try {
            // CSharp.g:297:3: (v= VOID -> text(value=\" \"+$v.text))
            // CSharp.g:298:3: v= VOID
            {
            v=(Token)match(input,VOID,FOLLOW_VOID_in_type_void1480); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 299:3: -> text(value=\" \"+$v.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", " "+(v!=null?v.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_void"


    public static class variable_reference_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_reference"
    // CSharp.g:304:1: variable_reference : expr= expression -> variableReference(ref=expr);
    public final CSharp.variable_reference_return variable_reference() throws RecognitionException {
        CSharp.variable_reference_return retval = new CSharp.variable_reference_return();
        retval.start = input.LT(1);


        CSharp.expression_return expr =null;


        try {
            // CSharp.g:305:2: (expr= expression -> variableReference(ref=expr))
            // CSharp.g:306:2: expr= expression
            {
            pushFollow(FOLLOW_expression_in_variable_reference1510);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 307:2: -> variableReference(ref=expr)
              {
                  retval.st = templateLib.getInstanceOf("variableReference",new STAttrMap().put("ref", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_reference"


    public static class argument_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "argument_list"
    // CSharp.g:311:1: argument_list : fstArg= argument (lst+= argument_list_Chld )* -> argumentList(firstArgmnt=NamingUtil.toCamelCase($fstArg.text)list=$lst);
    public final CSharp.argument_list_return argument_list() throws RecognitionException {
        CSharp.argument_list_return retval = new CSharp.argument_list_return();
        retval.start = input.LT(1);


        List list_lst=null;
        CSharp.argument_return fstArg =null;

        RuleReturnScope lst = null;
        try {
            // CSharp.g:312:2: (fstArg= argument (lst+= argument_list_Chld )* -> argumentList(firstArgmnt=NamingUtil.toCamelCase($fstArg.text)list=$lst))
            // CSharp.g:313:2: fstArg= argument (lst+= argument_list_Chld )*
            {
            pushFollow(FOLLOW_argument_in_argument_list1536);
            fstArg=argument();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:313:18: (lst+= argument_list_Chld )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==COMMA) ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // CSharp.g:313:19: lst+= argument_list_Chld
            	    {
            	    pushFollow(FOLLOW_argument_list_Chld_in_argument_list1541);
            	    lst=argument_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 314:2: -> argumentList(firstArgmnt=NamingUtil.toCamelCase($fstArg.text)list=$lst)
              {
                  retval.st = templateLib.getInstanceOf("argumentList",new STAttrMap().put("firstArgmnt", NamingUtil.toCamelCase((fstArg!=null?input.toString(fstArg.start,fstArg.stop):null))).put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "argument_list"


    public static class argument_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "argument_list_Chld"
    // CSharp.g:317:1: argument_list_Chld : COMMA arg= argument -> argumentListChld(args=NamingUtil.toCamelCase($arg.text).toString().trim());
    public final CSharp.argument_list_Chld_return argument_list_Chld() throws RecognitionException {
        CSharp.argument_list_Chld_return retval = new CSharp.argument_list_Chld_return();
        retval.start = input.LT(1);


        CSharp.argument_return arg =null;


        try {
            // CSharp.g:318:3: ( COMMA arg= argument -> argumentListChld(args=NamingUtil.toCamelCase($arg.text).toString().trim()))
            // CSharp.g:319:2: COMMA arg= argument
            {
            match(input,COMMA,FOLLOW_COMMA_in_argument_list_Chld1570); if (state.failed) return retval;

            pushFollow(FOLLOW_argument_in_argument_list_Chld1574);
            arg=argument();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 320:2: -> argumentListChld(args=NamingUtil.toCamelCase($arg.text).toString().trim())
              {
                  retval.st = templateLib.getInstanceOf("argumentListChld",new STAttrMap().put("args", NamingUtil.toCamelCase((arg!=null?input.toString(arg.start,arg.stop):null)).toString().trim()));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "argument_list_Chld"


    public static class argument_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "argument"
    // CSharp.g:323:1: argument : (argNam= argument_name )? val= argument_value -> argument(argName=argNamargValue=val);
    public final CSharp.argument_return argument() throws RecognitionException {
        CSharp.argument_return retval = new CSharp.argument_return();
        retval.start = input.LT(1);


        CSharp.argument_name_return argNam =null;

        CSharp.argument_value_return val =null;


        try {
            // CSharp.g:324:2: ( (argNam= argument_name )? val= argument_value -> argument(argName=argNamargValue=val))
            // CSharp.g:325:2: (argNam= argument_name )? val= argument_value
            {
            // CSharp.g:325:2: (argNam= argument_name )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==IDENTIFIER) ) {
                int LA20_1 = input.LA(2);

                if ( (LA20_1==COLON) ) {
                    alt20=1;
                }
            }
            switch (alt20) {
                case 1 :
                    // CSharp.g:325:3: argNam= argument_name
                    {
                    pushFollow(FOLLOW_argument_name_in_argument1600);
                    argNam=argument_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_argument_value_in_argument1606);
            val=argument_value();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 326:2: -> argument(argName=argNamargValue=val)
              {
                  retval.st = templateLib.getInstanceOf("argument",new STAttrMap().put("argName", argNam).put("argValue", val));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "argument"


    public static class argument_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "argument_name"
    // CSharp.g:328:1: argument_name : IDENTIFIER COLON -> argumentName(id=NamingUtil.toCamelCase($IDENTIFIER.text));
    public final CSharp.argument_name_return argument_name() throws RecognitionException {
        CSharp.argument_name_return retval = new CSharp.argument_name_return();
        retval.start = input.LT(1);


        Token IDENTIFIER13=null;

        try {
            // CSharp.g:329:2: ( IDENTIFIER COLON -> argumentName(id=NamingUtil.toCamelCase($IDENTIFIER.text)))
            // CSharp.g:330:2: IDENTIFIER COLON
            {
            IDENTIFIER13=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_argument_name1632); if (state.failed) return retval;

            match(input,COLON,FOLLOW_COLON_in_argument_name1634); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 331:2: -> argumentName(id=NamingUtil.toCamelCase($IDENTIFIER.text))
              {
                  retval.st = templateLib.getInstanceOf("argumentName",new STAttrMap().put("id", NamingUtil.toCamelCase((IDENTIFIER13!=null?IDENTIFIER13.getText():null))));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "argument_name"


    public static class argument_value_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "argument_value"
    // CSharp.g:333:1: argument_value : (expr= expression -> argumentValue(value=expr)| REF varRef= variable_reference -> argumentValue2(type=$REF.textvalue=expr)| OUT variable_reference -> argumentValue2(type=$OUT.textvalue=expr));
    public final CSharp.argument_value_return argument_value() throws RecognitionException {
        CSharp.argument_value_return retval = new CSharp.argument_value_return();
        retval.start = input.LT(1);


        Token REF14=null;
        Token OUT15=null;
        CSharp.expression_return expr =null;

        CSharp.variable_reference_return varRef =null;


        try {
            // CSharp.g:334:2: (expr= expression -> argumentValue(value=expr)| REF varRef= variable_reference -> argumentValue2(type=$REF.textvalue=expr)| OUT variable_reference -> argumentValue2(type=$OUT.textvalue=expr))
            int alt21=3;
            switch ( input.LA(1) ) {
            case AMP:
            case BANG:
            case BASE:
            case BOOL:
            case BYTE:
            case CHAR:
            case CHARACTER_LITERAL:
            case CHECKED:
            case DECIMAL:
            case DEFAULT:
            case DELEGATE:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case IDENTIFIER:
            case INT:
            case INTEGER_LITERAL:
            case LONG:
            case MINUS:
            case NEW:
            case NULL:
            case OBJECT:
            case OPEN_PARENS:
            case OP_DEC:
            case OP_INC:
            case PLUS:
            case REAL_LITERAL:
            case SBYTE:
            case SHORT:
            case SIZEOF:
            case STAR:
            case STRING:
            case STRING_LITERAL:
            case THIS:
            case TILDE:
            case TRUE:
            case TYPEOF:
            case UINT:
            case ULONG:
            case UNCHECKED:
            case USHORT:
                {
                alt21=1;
                }
                break;
            case REF:
                {
                alt21=2;
                }
                break;
            case OUT:
                {
                alt21=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;

            }

            switch (alt21) {
                case 1 :
                    // CSharp.g:335:2: expr= expression
                    {
                    pushFollow(FOLLOW_expression_in_argument_value1658);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 336:2: -> argumentValue(value=expr)
                      {
                          retval.st = templateLib.getInstanceOf("argumentValue",new STAttrMap().put("value", expr));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:337:4: REF varRef= variable_reference
                    {
                    REF14=(Token)match(input,REF,FOLLOW_REF_in_argument_value1672); if (state.failed) return retval;

                    pushFollow(FOLLOW_variable_reference_in_argument_value1676);
                    varRef=variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 338:2: -> argumentValue2(type=$REF.textvalue=expr)
                      {
                          retval.st = templateLib.getInstanceOf("argumentValue2",new STAttrMap().put("type", (REF14!=null?REF14.getText():null)).put("value", expr));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:339:4: OUT variable_reference
                    {
                    OUT15=(Token)match(input,OUT,FOLLOW_OUT_in_argument_value1694); if (state.failed) return retval;

                    pushFollow(FOLLOW_variable_reference_in_argument_value1696);
                    variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 340:2: -> argumentValue2(type=$OUT.textvalue=expr)
                      {
                          retval.st = templateLib.getInstanceOf("argumentValue2",new STAttrMap().put("type", (OUT15!=null?OUT15.getText():null)).put("value", expr));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "argument_value"


    public static class primary_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_expression"
    // CSharp.g:349:1: primary_expression : pe= primary_expression_start (fbe+= bracket_expression )* (pcl+= primary_expression_Chld )* -> primaryExpression(prmExprStrt=pefrstBrktExpr=$fbeprmChldLst=$pcl);
    public final CSharp.primary_expression_return primary_expression() throws RecognitionException {
        CSharp.primary_expression_return retval = new CSharp.primary_expression_return();
        retval.start = input.LT(1);


        List list_fbe=null;
        List list_pcl=null;
        CSharp.primary_expression_start_return pe =null;

        RuleReturnScope fbe = null;
        RuleReturnScope pcl = null;
        try {
            // CSharp.g:350:3: (pe= primary_expression_start (fbe+= bracket_expression )* (pcl+= primary_expression_Chld )* -> primaryExpression(prmExprStrt=pefrstBrktExpr=$fbeprmChldLst=$pcl))
            // CSharp.g:351:3: pe= primary_expression_start (fbe+= bracket_expression )* (pcl+= primary_expression_Chld )*
            {
            pushFollow(FOLLOW_primary_expression_start_in_primary_expression1729);
            pe=primary_expression_start();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:351:32: (fbe+= bracket_expression )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==OPEN_BRACKET) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // CSharp.g:351:33: fbe+= bracket_expression
            	    {
            	    pushFollow(FOLLOW_bracket_expression_in_primary_expression1735);
            	    fbe=bracket_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_fbe==null) list_fbe=new ArrayList();
            	    list_fbe.add(fbe.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            // CSharp.g:351:59: (pcl+= primary_expression_Chld )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==DOT||LA23_0==OPEN_PARENS||LA23_0==OP_DEC||LA23_0==OP_INC||LA23_0==OP_PTR) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // CSharp.g:351:60: pcl+= primary_expression_Chld
            	    {
            	    pushFollow(FOLLOW_primary_expression_Chld_in_primary_expression1742);
            	    pcl=primary_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_pcl==null) list_pcl=new ArrayList();
            	    list_pcl.add(pcl.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 352:3: -> primaryExpression(prmExprStrt=pefrstBrktExpr=$fbeprmChldLst=$pcl)
              {
                  retval.st = templateLib.getInstanceOf("primaryExpression",new STAttrMap().put("prmExprStrt", pe).put("frstBrktExpr", list_fbe).put("prmChldLst", list_pcl));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primary_expression"


    public static class primary_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_expression_Chld"
    // CSharp.g:355:1: primary_expression_Chld : pesc= primary_expression_sub_Chld (brktExpr+= bracket_expression )* -> primaryExpressionChld(peChild=pescbracketExpr=$brktExpr);
    public final CSharp.primary_expression_Chld_return primary_expression_Chld() throws RecognitionException {
        CSharp.primary_expression_Chld_return retval = new CSharp.primary_expression_Chld_return();
        retval.start = input.LT(1);


        List list_brktExpr=null;
        CSharp.primary_expression_sub_Chld_return pesc =null;

        RuleReturnScope brktExpr = null;
        try {
            // CSharp.g:356:3: (pesc= primary_expression_sub_Chld (brktExpr+= bracket_expression )* -> primaryExpressionChld(peChild=pescbracketExpr=$brktExpr))
            // CSharp.g:357:3: pesc= primary_expression_sub_Chld (brktExpr+= bracket_expression )*
            {
            pushFollow(FOLLOW_primary_expression_sub_Chld_in_primary_expression_Chld1779);
            pesc=primary_expression_sub_Chld();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:357:36: (brktExpr+= bracket_expression )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==OPEN_BRACKET) ) {
                    alt24=1;
                }


                switch (alt24) {
            	case 1 :
            	    // CSharp.g:357:37: brktExpr+= bracket_expression
            	    {
            	    pushFollow(FOLLOW_bracket_expression_in_primary_expression_Chld1784);
            	    brktExpr=bracket_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_brktExpr==null) list_brktExpr=new ArrayList();
            	    list_brktExpr.add(brktExpr.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 358:3: -> primaryExpressionChld(peChild=pescbracketExpr=$brktExpr)
              {
                  retval.st = templateLib.getInstanceOf("primaryExpressionChld",new STAttrMap().put("peChild", pesc).put("bracketExpr", list_brktExpr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primary_expression_Chld"


    public static class primary_expression_sub_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_expression_sub_Chld"
    // CSharp.g:361:1: primary_expression_sub_Chld : (memAcc= member_access2 -> primaryExpressionSubChld(expressionChild=memAcc)|methdInc= method_invocation2 -> primaryExpressionSubChld(expressionChild=methdInc)| OP_INC -> primaryExpressionSubChld(expressionChild=$OP_INC.text)| OP_DEC -> primaryExpressionSubChld(expressionChild=$OP_DEC.text)| OP_PTR IDENTIFIER -> primaryExpressionSubChld2(expressionChildprt1=$OP_PTR.textexpressionChildprt2=$IDENTIFIER.text));
    public final CSharp.primary_expression_sub_Chld_return primary_expression_sub_Chld() throws RecognitionException {
        CSharp.primary_expression_sub_Chld_return retval = new CSharp.primary_expression_sub_Chld_return();
        retval.start = input.LT(1);


        Token OP_INC16=null;
        Token OP_DEC17=null;
        Token OP_PTR18=null;
        Token IDENTIFIER19=null;
        CSharp.member_access2_return memAcc =null;

        CSharp.method_invocation2_return methdInc =null;


        try {
            // CSharp.g:362:2: (memAcc= member_access2 -> primaryExpressionSubChld(expressionChild=memAcc)|methdInc= method_invocation2 -> primaryExpressionSubChld(expressionChild=methdInc)| OP_INC -> primaryExpressionSubChld(expressionChild=$OP_INC.text)| OP_DEC -> primaryExpressionSubChld(expressionChild=$OP_DEC.text)| OP_PTR IDENTIFIER -> primaryExpressionSubChld2(expressionChildprt1=$OP_PTR.textexpressionChildprt2=$IDENTIFIER.text))
            int alt25=5;
            switch ( input.LA(1) ) {
            case DOT:
                {
                alt25=1;
                }
                break;
            case OPEN_PARENS:
                {
                alt25=2;
                }
                break;
            case OP_INC:
                {
                alt25=3;
                }
                break;
            case OP_DEC:
                {
                alt25=4;
                }
                break;
            case OP_PTR:
                {
                alt25=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;

            }

            switch (alt25) {
                case 1 :
                    // CSharp.g:363:3: memAcc= member_access2
                    {
                    pushFollow(FOLLOW_member_access2_in_primary_expression_sub_Chld1818);
                    memAcc=member_access2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 364:3: -> primaryExpressionSubChld(expressionChild=memAcc)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionSubChld",new STAttrMap().put("expressionChild", memAcc));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:365:5: methdInc= method_invocation2
                    {
                    pushFollow(FOLLOW_method_invocation2_in_primary_expression_sub_Chld1836);
                    methdInc=method_invocation2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 366:3: -> primaryExpressionSubChld(expressionChild=methdInc)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionSubChld",new STAttrMap().put("expressionChild", methdInc));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:367:5: OP_INC
                    {
                    OP_INC16=(Token)match(input,OP_INC,FOLLOW_OP_INC_in_primary_expression_sub_Chld1852); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 368:3: -> primaryExpressionSubChld(expressionChild=$OP_INC.text)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionSubChld",new STAttrMap().put("expressionChild", (OP_INC16!=null?OP_INC16.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:369:5: OP_DEC
                    {
                    OP_DEC17=(Token)match(input,OP_DEC,FOLLOW_OP_DEC_in_primary_expression_sub_Chld1868); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 370:3: -> primaryExpressionSubChld(expressionChild=$OP_DEC.text)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionSubChld",new STAttrMap().put("expressionChild", (OP_DEC17!=null?OP_DEC17.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:371:5: OP_PTR IDENTIFIER
                    {
                    OP_PTR18=(Token)match(input,OP_PTR,FOLLOW_OP_PTR_in_primary_expression_sub_Chld1884); if (state.failed) return retval;

                    IDENTIFIER19=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_primary_expression_sub_Chld1886); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 372:3: -> primaryExpressionSubChld2(expressionChildprt1=$OP_PTR.textexpressionChildprt2=$IDENTIFIER.text)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionSubChld2",new STAttrMap().put("expressionChildprt1", (OP_PTR18!=null?OP_PTR18.getText():null)).put("expressionChildprt2", (IDENTIFIER19!=null?IDENTIFIER19.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primary_expression_sub_Chld"


    public static class primary_expression_start_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_expression_start"
    // CSharp.g:375:1: primary_expression_start : (exp1= literal -> primaryExpressionStart(expression=exp1)|exp2= simple_name -> primaryExpressionStart(expression=exp2)|exp3= parenthesized_expression -> primaryExpressionStart(expression=exp3)|exp4= predefined_type -> primaryExpressionStart(expression=exp4)|exp5= qualified_alias_member -> primaryExpressionStart(expression=exp5)|exp6= this_access -> primaryExpressionStart(expression=exp6)|exp7= base_access -> primaryExpressionStart(expression=exp7)|exp8= primary_expression_start_Chld -> primaryExpressionStart(expression=exp8)|exp9= typeof_expression -> primaryExpressionStart(expression=exp9)|exp10= checked_expression -> primaryExpressionStart(expression=exp10)|exp11= unchecked_expression -> primaryExpressionStart(expression=exp11)|exp12= default_value_expression -> primaryExpressionStart(expression=exp12)|exp13= anonymous_method_expression -> primaryExpressionStart(expression=exp13)|exp14= sizeof_expression -> primaryExpressionStart(expression=exp14));
    public final CSharp.primary_expression_start_return primary_expression_start() throws RecognitionException {
        CSharp.primary_expression_start_return retval = new CSharp.primary_expression_start_return();
        retval.start = input.LT(1);


        CSharp.literal_return exp1 =null;

        CSharp.simple_name_return exp2 =null;

        CSharp.parenthesized_expression_return exp3 =null;

        CSharp.predefined_type_return exp4 =null;

        CSharp.qualified_alias_member_return exp5 =null;

        CSharp.this_access_return exp6 =null;

        CSharp.base_access_return exp7 =null;

        CSharp.primary_expression_start_Chld_return exp8 =null;

        CSharp.typeof_expression_return exp9 =null;

        CSharp.checked_expression_return exp10 =null;

        CSharp.unchecked_expression_return exp11 =null;

        CSharp.default_value_expression_return exp12 =null;

        CSharp.anonymous_method_expression_return exp13 =null;

        CSharp.sizeof_expression_return exp14 =null;


        try {
            // CSharp.g:376:3: (exp1= literal -> primaryExpressionStart(expression=exp1)|exp2= simple_name -> primaryExpressionStart(expression=exp2)|exp3= parenthesized_expression -> primaryExpressionStart(expression=exp3)|exp4= predefined_type -> primaryExpressionStart(expression=exp4)|exp5= qualified_alias_member -> primaryExpressionStart(expression=exp5)|exp6= this_access -> primaryExpressionStart(expression=exp6)|exp7= base_access -> primaryExpressionStart(expression=exp7)|exp8= primary_expression_start_Chld -> primaryExpressionStart(expression=exp8)|exp9= typeof_expression -> primaryExpressionStart(expression=exp9)|exp10= checked_expression -> primaryExpressionStart(expression=exp10)|exp11= unchecked_expression -> primaryExpressionStart(expression=exp11)|exp12= default_value_expression -> primaryExpressionStart(expression=exp12)|exp13= anonymous_method_expression -> primaryExpressionStart(expression=exp13)|exp14= sizeof_expression -> primaryExpressionStart(expression=exp14))
            int alt26=14;
            switch ( input.LA(1) ) {
            case CHARACTER_LITERAL:
            case FALSE:
            case INTEGER_LITERAL:
            case NULL:
            case REAL_LITERAL:
            case STRING_LITERAL:
            case TRUE:
                {
                alt26=1;
                }
                break;
            case IDENTIFIER:
                {
                int LA26_2 = input.LA(2);

                if ( (LA26_2==DOUBLE_COLON) ) {
                    alt26=5;
                }
                else if ( (LA26_2==EOF||(LA26_2 >= AMP && LA26_2 <= ASSIGNMENT)||LA26_2==BITWISE_OR||LA26_2==CARET||(LA26_2 >= CLOSE_BRACE && LA26_2 <= COMMA)||LA26_2==DIV||LA26_2==DOT||LA26_2==GT||LA26_2==IDENTIFIER||(LA26_2 >= INTERR && LA26_2 <= IS)||LA26_2==LT||LA26_2==MINUS||(LA26_2 >= OPEN_BRACKET && LA26_2 <= OPEN_PARENS)||(LA26_2 >= OP_ADD_ASSIGNMENT && LA26_2 <= OP_XOR_ASSIGNMENT)||(LA26_2 >= PERCENT && LA26_2 <= PLUS)||LA26_2==SEMICOLON||LA26_2==STAR) ) {
                    alt26=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 2, input);

                    throw nvae;

                }
                }
                break;
            case OPEN_PARENS:
                {
                alt26=3;
                }
                break;
            case BOOL:
            case BYTE:
            case CHAR:
            case DECIMAL:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case OBJECT:
            case SBYTE:
            case SHORT:
            case STRING:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt26=4;
                }
                break;
            case THIS:
                {
                alt26=6;
                }
                break;
            case BASE:
                {
                alt26=7;
                }
                break;
            case NEW:
                {
                alt26=8;
                }
                break;
            case TYPEOF:
                {
                alt26=9;
                }
                break;
            case CHECKED:
                {
                alt26=10;
                }
                break;
            case UNCHECKED:
                {
                alt26=11;
                }
                break;
            case DEFAULT:
                {
                alt26=12;
                }
                break;
            case DELEGATE:
                {
                alt26=13;
                }
                break;
            case SIZEOF:
                {
                alt26=14;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;

            }

            switch (alt26) {
                case 1 :
                    // CSharp.g:377:3: exp1= literal
                    {
                    pushFollow(FOLLOW_literal_in_primary_expression_start1943);
                    exp1=literal();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 378:3: -> primaryExpressionStart(expression=exp1)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:379:5: exp2= simple_name
                    {
                    pushFollow(FOLLOW_simple_name_in_primary_expression_start1961);
                    exp2=simple_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 380:3: -> primaryExpressionStart(expression=exp2)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp2));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:381:5: exp3= parenthesized_expression
                    {
                    pushFollow(FOLLOW_parenthesized_expression_in_primary_expression_start1979);
                    exp3=parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 382:3: -> primaryExpressionStart(expression=exp3)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp3));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:383:5: exp4= predefined_type
                    {
                    pushFollow(FOLLOW_predefined_type_in_primary_expression_start1997);
                    exp4=predefined_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 384:3: -> primaryExpressionStart(expression=exp4)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp4));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:385:5: exp5= qualified_alias_member
                    {
                    pushFollow(FOLLOW_qualified_alias_member_in_primary_expression_start2016);
                    exp5=qualified_alias_member();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 386:3: -> primaryExpressionStart(expression=exp5)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp5));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:387:5: exp6= this_access
                    {
                    pushFollow(FOLLOW_this_access_in_primary_expression_start2036);
                    exp6=this_access();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 388:3: -> primaryExpressionStart(expression=exp6)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp6));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:389:5: exp7= base_access
                    {
                    pushFollow(FOLLOW_base_access_in_primary_expression_start2054);
                    exp7=base_access();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 390:3: -> primaryExpressionStart(expression=exp7)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp7));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:391:5: exp8= primary_expression_start_Chld
                    {
                    pushFollow(FOLLOW_primary_expression_start_Chld_in_primary_expression_start2072);
                    exp8=primary_expression_start_Chld();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 392:3: -> primaryExpressionStart(expression=exp8)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp8));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:393:5: exp9= typeof_expression
                    {
                    pushFollow(FOLLOW_typeof_expression_in_primary_expression_start2095);
                    exp9=typeof_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 394:3: -> primaryExpressionStart(expression=exp9)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp9));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharp.g:395:5: exp10= checked_expression
                    {
                    pushFollow(FOLLOW_checked_expression_in_primary_expression_start2113);
                    exp10=checked_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 396:3: -> primaryExpressionStart(expression=exp10)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp10));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharp.g:397:5: exp11= unchecked_expression
                    {
                    pushFollow(FOLLOW_unchecked_expression_in_primary_expression_start2131);
                    exp11=unchecked_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 398:3: -> primaryExpressionStart(expression=exp11)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp11));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharp.g:399:5: exp12= default_value_expression
                    {
                    pushFollow(FOLLOW_default_value_expression_in_primary_expression_start2149);
                    exp12=default_value_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 400:3: -> primaryExpressionStart(expression=exp12)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp12));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharp.g:401:5: exp13= anonymous_method_expression
                    {
                    pushFollow(FOLLOW_anonymous_method_expression_in_primary_expression_start2167);
                    exp13=anonymous_method_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 402:3: -> primaryExpressionStart(expression=exp13)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp13));
                      }


                    }

                    }
                    break;
                case 14 :
                    // CSharp.g:403:5: exp14= sizeof_expression
                    {
                    pushFollow(FOLLOW_sizeof_expression_in_primary_expression_start2185);
                    exp14=sizeof_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 404:3: -> primaryExpressionStart(expression=exp14)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStart",new STAttrMap().put("expression", exp14));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primary_expression_start"


    public static class primary_expression_start_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_expression_start_Chld"
    // CSharp.g:407:1: primary_expression_start_Chld : ( NEW t= type prc= primary_expression_start_sub_Chld -> primaryExpressionStartChld(type=texpression=prc)| NEW aoi= anonymous_object_initializer -> primaryExpressionStartChld2(anyObjInit=aoi)| NEW rs= rank_specifier ai= array_initializer -> primaryExpressionStartChld3(rnkSpcr=rsarrInit=ai));
    public final CSharp.primary_expression_start_Chld_return primary_expression_start_Chld() throws RecognitionException {
        CSharp.primary_expression_start_Chld_return retval = new CSharp.primary_expression_start_Chld_return();
        retval.start = input.LT(1);


        CSharp.type_return t =null;

        CSharp.primary_expression_start_sub_Chld_return prc =null;

        CSharp.anonymous_object_initializer_return aoi =null;

        CSharp.rank_specifier_return rs =null;

        CSharp.array_initializer_return ai =null;


        try {
            // CSharp.g:408:3: ( NEW t= type prc= primary_expression_start_sub_Chld -> primaryExpressionStartChld(type=texpression=prc)| NEW aoi= anonymous_object_initializer -> primaryExpressionStartChld2(anyObjInit=aoi)| NEW rs= rank_specifier ai= array_initializer -> primaryExpressionStartChld3(rnkSpcr=rsarrInit=ai))
            int alt27=3;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==NEW) ) {
                switch ( input.LA(2) ) {
                case BOOL:
                case BYTE:
                case CHAR:
                case DECIMAL:
                case DOUBLE:
                case FLOAT:
                case IDENTIFIER:
                case INT:
                case LONG:
                case OBJECT:
                case SBYTE:
                case SHORT:
                case STRING:
                case UINT:
                case ULONG:
                case USHORT:
                case VOID:
                    {
                    alt27=1;
                    }
                    break;
                case OPEN_BRACE:
                    {
                    alt27=2;
                    }
                    break;
                case OPEN_BRACKET:
                    {
                    alt27=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 1, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;

            }
            switch (alt27) {
                case 1 :
                    // CSharp.g:409:3: NEW t= type prc= primary_expression_start_sub_Chld
                    {
                    match(input,NEW,FOLLOW_NEW_in_primary_expression_start_Chld2214); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_primary_expression_start_Chld2219);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_primary_expression_start_sub_Chld_in_primary_expression_start_Chld2223);
                    prc=primary_expression_start_sub_Chld();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 410:3: -> primaryExpressionStartChld(type=texpression=prc)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStartChld",new STAttrMap().put("type", t).put("expression", prc));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:411:4: NEW aoi= anonymous_object_initializer
                    {
                    match(input,NEW,FOLLOW_NEW_in_primary_expression_start_Chld2242); if (state.failed) return retval;

                    pushFollow(FOLLOW_anonymous_object_initializer_in_primary_expression_start_Chld2246);
                    aoi=anonymous_object_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 412:3: -> primaryExpressionStartChld2(anyObjInit=aoi)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStartChld2",new STAttrMap().put("anyObjInit", aoi));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:413:4: NEW rs= rank_specifier ai= array_initializer
                    {
                    match(input,NEW,FOLLOW_NEW_in_primary_expression_start_Chld2261); if (state.failed) return retval;

                    pushFollow(FOLLOW_rank_specifier_in_primary_expression_start_Chld2265);
                    rs=rank_specifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_array_initializer_in_primary_expression_start_Chld2269);
                    ai=array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 414:3: -> primaryExpressionStartChld3(rnkSpcr=rsarrInit=ai)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStartChld3",new STAttrMap().put("rnkSpcr", rs).put("arrInit", ai));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primary_expression_start_Chld"


    public static class primary_expression_start_sub_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_expression_start_sub_Chld"
    // CSharp.g:417:1: primary_expression_start_sub_Chld : (objExpr= object_creation_expression2 -> primaryExpressionStartSubChld(expr=objExpr)|objOrColInit= object_or_collection_initializer -> primaryExpressionStartSubChld(expr=objOrColInit)| OPEN_BRACKET el= expression_list CLOSE_BRACKET (rs= rank_specifiers )? (arinit= array_initializer )? -> primaryExpressionStartSubChld2(exprList=elrnkSpecfr=rsarryInit=arinit)|rnkSpr= rank_specifiers arrInit= array_initializer -> primaryExpressionStartSubChld3(expr1=rnkSprexpr2=arrInit));
    public final CSharp.primary_expression_start_sub_Chld_return primary_expression_start_sub_Chld() throws RecognitionException {
        CSharp.primary_expression_start_sub_Chld_return retval = new CSharp.primary_expression_start_sub_Chld_return();
        retval.start = input.LT(1);


        CSharp.object_creation_expression2_return objExpr =null;

        CSharp.object_or_collection_initializer_return objOrColInit =null;

        CSharp.expression_list_return el =null;

        CSharp.rank_specifiers_return rs =null;

        CSharp.array_initializer_return arinit =null;

        CSharp.rank_specifiers_return rnkSpr =null;

        CSharp.array_initializer_return arrInit =null;


        try {
            // CSharp.g:418:3: (objExpr= object_creation_expression2 -> primaryExpressionStartSubChld(expr=objExpr)|objOrColInit= object_or_collection_initializer -> primaryExpressionStartSubChld(expr=objOrColInit)| OPEN_BRACKET el= expression_list CLOSE_BRACKET (rs= rank_specifiers )? (arinit= array_initializer )? -> primaryExpressionStartSubChld2(exprList=elrnkSpecfr=rsarryInit=arinit)|rnkSpr= rank_specifiers arrInit= array_initializer -> primaryExpressionStartSubChld3(expr1=rnkSprexpr2=arrInit))
            int alt30=4;
            switch ( input.LA(1) ) {
            case OPEN_PARENS:
                {
                alt30=1;
                }
                break;
            case OPEN_BRACE:
                {
                alt30=2;
                }
                break;
            case OPEN_BRACKET:
                {
                int LA30_3 = input.LA(2);

                if ( (LA30_3==AMP||(LA30_3 >= BANG && LA30_3 <= BASE)||LA30_3==BOOL||LA30_3==BYTE||(LA30_3 >= CHAR && LA30_3 <= CHECKED)||LA30_3==DECIMAL||(LA30_3 >= DEFAULT && LA30_3 <= DELEGATE)||LA30_3==DOUBLE||LA30_3==FALSE||LA30_3==FLOAT||LA30_3==IDENTIFIER||(LA30_3 >= INT && LA30_3 <= INTEGER_LITERAL)||LA30_3==LONG||LA30_3==MINUS||LA30_3==NEW||LA30_3==NULL||LA30_3==OBJECT||LA30_3==OPEN_PARENS||LA30_3==OP_DEC||LA30_3==OP_INC||LA30_3==PLUS||LA30_3==REAL_LITERAL||LA30_3==SBYTE||LA30_3==SHORT||LA30_3==SIZEOF||LA30_3==STAR||(LA30_3 >= STRING && LA30_3 <= STRING_LITERAL)||LA30_3==THIS||(LA30_3 >= TILDE && LA30_3 <= TRUE)||LA30_3==TYPEOF||(LA30_3 >= UINT && LA30_3 <= UNCHECKED)||LA30_3==USHORT) ) {
                    alt30=3;
                }
                else if ( (LA30_3==CLOSE_BRACKET||LA30_3==COMMA) ) {
                    alt30=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 30, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;

            }

            switch (alt30) {
                case 1 :
                    // CSharp.g:419:3: objExpr= object_creation_expression2
                    {
                    pushFollow(FOLLOW_object_creation_expression2_in_primary_expression_start_sub_Chld2302);
                    objExpr=object_creation_expression2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 420:3: -> primaryExpressionStartSubChld(expr=objExpr)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStartSubChld",new STAttrMap().put("expr", objExpr));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:421:5: objOrColInit= object_or_collection_initializer
                    {
                    pushFollow(FOLLOW_object_or_collection_initializer_in_primary_expression_start_sub_Chld2320);
                    objOrColInit=object_or_collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 422:5: -> primaryExpressionStartSubChld(expr=objOrColInit)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStartSubChld",new STAttrMap().put("expr", objOrColInit));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:423:5: OPEN_BRACKET el= expression_list CLOSE_BRACKET (rs= rank_specifiers )? (arinit= array_initializer )?
                    {
                    match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_primary_expression_start_sub_Chld2340); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_list_in_primary_expression_start_sub_Chld2344);
                    el=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_primary_expression_start_sub_Chld2346); if (state.failed) return retval;

                    // CSharp.g:423:51: (rs= rank_specifiers )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==OPEN_BRACKET) ) {
                        int LA28_1 = input.LA(2);

                        if ( (LA28_1==CLOSE_BRACKET||LA28_1==COMMA) ) {
                            alt28=1;
                        }
                    }
                    switch (alt28) {
                        case 1 :
                            // CSharp.g:423:52: rs= rank_specifiers
                            {
                            pushFollow(FOLLOW_rank_specifiers_in_primary_expression_start_sub_Chld2351);
                            rs=rank_specifiers();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp.g:423:73: (arinit= array_initializer )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==OPEN_BRACE) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // CSharp.g:423:74: arinit= array_initializer
                            {
                            pushFollow(FOLLOW_array_initializer_in_primary_expression_start_sub_Chld2358);
                            arinit=array_initializer();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 424:3: -> primaryExpressionStartSubChld2(exprList=elrnkSpecfr=rsarryInit=arinit)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStartSubChld2",new STAttrMap().put("exprList", el).put("rnkSpecfr", rs).put("arryInit", arinit));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:425:5: rnkSpr= rank_specifiers arrInit= array_initializer
                    {
                    pushFollow(FOLLOW_rank_specifiers_in_primary_expression_start_sub_Chld2387);
                    rnkSpr=rank_specifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_array_initializer_in_primary_expression_start_sub_Chld2391);
                    arrInit=array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 426:3: -> primaryExpressionStartSubChld3(expr1=rnkSprexpr2=arrInit)
                      {
                          retval.st = templateLib.getInstanceOf("primaryExpressionStartSubChld3",new STAttrMap().put("expr1", rnkSpr).put("expr2", arrInit));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primary_expression_start_sub_Chld"


    public static class bracket_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "bracket_expression"
    // CSharp.g:434:1: bracket_expression : OPEN_BRACKET exprLst= expression_list CLOSE_BRACKET -> bracketExpression(expressionList=exprLst);
    public final CSharp.bracket_expression_return bracket_expression() throws RecognitionException {
        CSharp.bracket_expression_return retval = new CSharp.bracket_expression_return();
        retval.start = input.LT(1);


        CSharp.expression_list_return exprLst =null;


        try {
            // CSharp.g:435:3: ( OPEN_BRACKET exprLst= expression_list CLOSE_BRACKET -> bracketExpression(expressionList=exprLst))
            // CSharp.g:436:3: OPEN_BRACKET exprLst= expression_list CLOSE_BRACKET
            {
            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_bracket_expression2422); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_list_in_bracket_expression2426);
            exprLst=expression_list();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_bracket_expression2428); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 437:3: -> bracketExpression(expressionList=exprLst)
              {
                  retval.st = templateLib.getInstanceOf("bracketExpression",new STAttrMap().put("expressionList", exprLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bracket_expression"


    public static class simple_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "simple_name"
    // CSharp.g:512:1: simple_name : IDENTIFIER talo= type_argument_list_opt -> simpleName(name=$IDENTIFIER.textargList=talo);
    public final CSharp.simple_name_return simple_name() throws RecognitionException {
        CSharp.simple_name_return retval = new CSharp.simple_name_return();
        retval.start = input.LT(1);


        Token IDENTIFIER20=null;
        CSharp.type_argument_list_opt_return talo =null;


        try {
            // CSharp.g:513:2: ( IDENTIFIER talo= type_argument_list_opt -> simpleName(name=$IDENTIFIER.textargList=talo))
            // CSharp.g:514:2: IDENTIFIER talo= type_argument_list_opt
            {
            IDENTIFIER20=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name2458); if (state.failed) return retval;

            pushFollow(FOLLOW_type_argument_list_opt_in_simple_name2462);
            talo=type_argument_list_opt();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 515:2: -> simpleName(name=$IDENTIFIER.textargList=talo)
              {
                  retval.st = templateLib.getInstanceOf("simpleName",new STAttrMap().put("name", (IDENTIFIER20!=null?IDENTIFIER20.getText():null)).put("argList", talo));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_name"


    public static class parenthesized_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "parenthesized_expression"
    // CSharp.g:518:1: parenthesized_expression : OPEN_PARENS expr= expression CLOSE_PARENS -> parenthesizedExpression(expression=expr);
    public final CSharp.parenthesized_expression_return parenthesized_expression() throws RecognitionException {
        CSharp.parenthesized_expression_return retval = new CSharp.parenthesized_expression_return();
        retval.start = input.LT(1);


        CSharp.expression_return expr =null;


        try {
            // CSharp.g:519:2: ( OPEN_PARENS expr= expression CLOSE_PARENS -> parenthesizedExpression(expression=expr))
            // CSharp.g:520:2: OPEN_PARENS expr= expression CLOSE_PARENS
            {
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_parenthesized_expression2490); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_parenthesized_expression2494);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_parenthesized_expression2496); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 521:2: -> parenthesizedExpression(expression=expr)
              {
                  retval.st = templateLib.getInstanceOf("parenthesizedExpression",new STAttrMap().put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parenthesized_expression"


    public static class member_access_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_access"
    // CSharp.g:531:1: member_access : ma= primary_expression -> memberAccess(expr=ma);
    public final CSharp.member_access_return member_access() throws RecognitionException {
        CSharp.member_access_return retval = new CSharp.member_access_return();
        retval.start = input.LT(1);


        CSharp.primary_expression_return ma =null;


        try {
            // CSharp.g:532:3: (ma= primary_expression -> memberAccess(expr=ma))
            // CSharp.g:533:3: ma= primary_expression
            {
            pushFollow(FOLLOW_primary_expression_in_member_access2526);
            ma=primary_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 534:3: -> memberAccess(expr=ma)
              {
                  retval.st = templateLib.getInstanceOf("memberAccess",new STAttrMap().put("expr", ma));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_access"


    public static class predefined_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "predefined_type"
    // CSharp.g:536:1: predefined_type : ( BOOL -> text(value=\"boolean\")| BYTE -> text(value=$BYTE.text)| CHAR -> text(value=$CHAR.text)| DECIMAL -> text(value=$DECIMAL.text)| DOUBLE -> text(value=$DOUBLE.text)| FLOAT -> text(value=$FLOAT.text)| INT -> text(value=$INT.text)| LONG -> text(value=$LONG.text)| OBJECT -> text(value=\"Object\")| SBYTE -> text(value=$SBYTE.text)| SHORT -> text(value=$SHORT.text)| STRING -> text(value=\"String\")| UINT -> text(value=$UINT.text)| ULONG -> text(value=$ULONG.text)| USHORT -> text(value=$USHORT.text));
    public final CSharp.predefined_type_return predefined_type() throws RecognitionException {
        CSharp.predefined_type_return retval = new CSharp.predefined_type_return();
        retval.start = input.LT(1);


        Token BYTE21=null;
        Token CHAR22=null;
        Token DECIMAL23=null;
        Token DOUBLE24=null;
        Token FLOAT25=null;
        Token INT26=null;
        Token LONG27=null;
        Token SBYTE28=null;
        Token SHORT29=null;
        Token UINT30=null;
        Token ULONG31=null;
        Token USHORT32=null;

        try {
            // CSharp.g:537:2: ( BOOL -> text(value=\"boolean\")| BYTE -> text(value=$BYTE.text)| CHAR -> text(value=$CHAR.text)| DECIMAL -> text(value=$DECIMAL.text)| DOUBLE -> text(value=$DOUBLE.text)| FLOAT -> text(value=$FLOAT.text)| INT -> text(value=$INT.text)| LONG -> text(value=$LONG.text)| OBJECT -> text(value=\"Object\")| SBYTE -> text(value=$SBYTE.text)| SHORT -> text(value=$SHORT.text)| STRING -> text(value=\"String\")| UINT -> text(value=$UINT.text)| ULONG -> text(value=$ULONG.text)| USHORT -> text(value=$USHORT.text))
            int alt31=15;
            switch ( input.LA(1) ) {
            case BOOL:
                {
                alt31=1;
                }
                break;
            case BYTE:
                {
                alt31=2;
                }
                break;
            case CHAR:
                {
                alt31=3;
                }
                break;
            case DECIMAL:
                {
                alt31=4;
                }
                break;
            case DOUBLE:
                {
                alt31=5;
                }
                break;
            case FLOAT:
                {
                alt31=6;
                }
                break;
            case INT:
                {
                alt31=7;
                }
                break;
            case LONG:
                {
                alt31=8;
                }
                break;
            case OBJECT:
                {
                alt31=9;
                }
                break;
            case SBYTE:
                {
                alt31=10;
                }
                break;
            case SHORT:
                {
                alt31=11;
                }
                break;
            case STRING:
                {
                alt31=12;
                }
                break;
            case UINT:
                {
                alt31=13;
                }
                break;
            case ULONG:
                {
                alt31=14;
                }
                break;
            case USHORT:
                {
                alt31=15;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;

            }

            switch (alt31) {
                case 1 :
                    // CSharp.g:538:2: BOOL
                    {
                    match(input,BOOL,FOLLOW_BOOL_in_predefined_type2550); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 539:2: -> text(value=\"boolean\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "boolean"));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:540:4: BYTE
                    {
                    BYTE21=(Token)match(input,BYTE,FOLLOW_BYTE_in_predefined_type2564); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 541:2: -> text(value=$BYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BYTE21!=null?BYTE21.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:542:4: CHAR
                    {
                    CHAR22=(Token)match(input,CHAR,FOLLOW_CHAR_in_predefined_type2578); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 543:2: -> text(value=$CHAR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CHAR22!=null?CHAR22.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:544:4: DECIMAL
                    {
                    DECIMAL23=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_predefined_type2592); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 545:2: -> text(value=$DECIMAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DECIMAL23!=null?DECIMAL23.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:546:4: DOUBLE
                    {
                    DOUBLE24=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_predefined_type2606); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 547:2: -> text(value=$DOUBLE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DOUBLE24!=null?DOUBLE24.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:548:4: FLOAT
                    {
                    FLOAT25=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_predefined_type2620); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 549:2: -> text(value=$FLOAT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FLOAT25!=null?FLOAT25.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:550:4: INT
                    {
                    INT26=(Token)match(input,INT,FOLLOW_INT_in_predefined_type2634); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 551:2: -> text(value=$INT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INT26!=null?INT26.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:552:4: LONG
                    {
                    LONG27=(Token)match(input,LONG,FOLLOW_LONG_in_predefined_type2648); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 553:2: -> text(value=$LONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (LONG27!=null?LONG27.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:554:4: OBJECT
                    {
                    match(input,OBJECT,FOLLOW_OBJECT_in_predefined_type2662); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 555:2: -> text(value=\"Object\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "Object"));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharp.g:556:4: SBYTE
                    {
                    SBYTE28=(Token)match(input,SBYTE,FOLLOW_SBYTE_in_predefined_type2676); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 557:2: -> text(value=$SBYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SBYTE28!=null?SBYTE28.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharp.g:558:4: SHORT
                    {
                    SHORT29=(Token)match(input,SHORT,FOLLOW_SHORT_in_predefined_type2690); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 559:2: -> text(value=$SHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SHORT29!=null?SHORT29.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharp.g:560:4: STRING
                    {
                    match(input,STRING,FOLLOW_STRING_in_predefined_type2704); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 561:2: -> text(value=\"String\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "String"));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharp.g:562:4: UINT
                    {
                    UINT30=(Token)match(input,UINT,FOLLOW_UINT_in_predefined_type2718); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 563:2: -> text(value=$UINT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UINT30!=null?UINT30.getText():null)));
                      }


                    }

                    }
                    break;
                case 14 :
                    // CSharp.g:564:4: ULONG
                    {
                    ULONG31=(Token)match(input,ULONG,FOLLOW_ULONG_in_predefined_type2732); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 565:2: -> text(value=$ULONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ULONG31!=null?ULONG31.getText():null)));
                      }


                    }

                    }
                    break;
                case 15 :
                    // CSharp.g:566:4: USHORT
                    {
                    USHORT32=(Token)match(input,USHORT,FOLLOW_USHORT_in_predefined_type2746); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 567:2: -> text(value=$USHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (USHORT32!=null?USHORT32.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "predefined_type"


    public static class expression_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "expression_list"
    // CSharp.g:580:1: expression_list : frstExpr= expression (ChldLst+= expression_list_Chld )* -> expressionList(firstExpr=frstExprlist=$ChldLst);
    public final CSharp.expression_list_return expression_list() throws RecognitionException {
        CSharp.expression_list_return retval = new CSharp.expression_list_return();
        retval.start = input.LT(1);


        List list_ChldLst=null;
        CSharp.expression_return frstExpr =null;

        RuleReturnScope ChldLst = null;
        try {
            // CSharp.g:581:2: (frstExpr= expression (ChldLst+= expression_list_Chld )* -> expressionList(firstExpr=frstExprlist=$ChldLst))
            // CSharp.g:582:2: frstExpr= expression (ChldLst+= expression_list_Chld )*
            {
            pushFollow(FOLLOW_expression_in_expression_list2776);
            frstExpr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:582:22: (ChldLst+= expression_list_Chld )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==COMMA) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // CSharp.g:582:23: ChldLst+= expression_list_Chld
            	    {
            	    pushFollow(FOLLOW_expression_list_Chld_in_expression_list2781);
            	    ChldLst=expression_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_ChldLst==null) list_ChldLst=new ArrayList();
            	    list_ChldLst.add(ChldLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 583:2: -> expressionList(firstExpr=frstExprlist=$ChldLst)
              {
                  retval.st = templateLib.getInstanceOf("expressionList",new STAttrMap().put("firstExpr", frstExpr).put("list", list_ChldLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression_list"


    public static class expression_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "expression_list_Chld"
    // CSharp.g:586:1: expression_list_Chld : COMMA expr= expression -> expressionListChld(expression=expr);
    public final CSharp.expression_list_Chld_return expression_list_Chld() throws RecognitionException {
        CSharp.expression_list_Chld_return retval = new CSharp.expression_list_Chld_return();
        retval.start = input.LT(1);


        CSharp.expression_return expr =null;


        try {
            // CSharp.g:587:2: ( COMMA expr= expression -> expressionListChld(expression=expr))
            // CSharp.g:588:2: COMMA expr= expression
            {
            match(input,COMMA,FOLLOW_COMMA_in_expression_list_Chld2809); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_expression_list_Chld2813);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 589:2: -> expressionListChld(expression=expr)
              {
                  retval.st = templateLib.getInstanceOf("expressionListChld",new STAttrMap().put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression_list_Chld"


    public static class this_access_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "this_access"
    // CSharp.g:592:1: this_access : t= THIS -> text(value=$t.text);
    public final CSharp.this_access_return this_access() throws RecognitionException {
        CSharp.this_access_return retval = new CSharp.this_access_return();
        retval.start = input.LT(1);


        Token t=null;

        try {
            // CSharp.g:593:2: (t= THIS -> text(value=$t.text))
            // CSharp.g:594:2: t= THIS
            {
            t=(Token)match(input,THIS,FOLLOW_THIS_in_this_access2839); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 595:2: -> text(value=$t.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (t!=null?t.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "this_access"


    public static class base_access_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "base_access"
    // CSharp.g:598:1: base_access : ( BASE DOT IDENTIFIER type_argument_list_opt | BASE OPEN_BRACKET expression_list CLOSE_BRACKET );
    public final CSharp.base_access_return base_access() throws RecognitionException {
        CSharp.base_access_return retval = new CSharp.base_access_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:599:2: ( BASE DOT IDENTIFIER type_argument_list_opt | BASE OPEN_BRACKET expression_list CLOSE_BRACKET )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==BASE) ) {
                int LA33_1 = input.LA(2);

                if ( (LA33_1==DOT) ) {
                    alt33=1;
                }
                else if ( (LA33_1==OPEN_BRACKET) ) {
                    alt33=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;

            }
            switch (alt33) {
                case 1 :
                    // CSharp.g:600:2: BASE DOT IDENTIFIER type_argument_list_opt
                    {
                    match(input,BASE,FOLLOW_BASE_in_base_access2862); if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_base_access2864); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_base_access2866); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_argument_list_opt_in_base_access2868);
                    type_argument_list_opt();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp.g:601:4: BASE OPEN_BRACKET expression_list CLOSE_BRACKET
                    {
                    match(input,BASE,FOLLOW_BASE_in_base_access2873); if (state.failed) return retval;

                    match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_base_access2875); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_list_in_base_access2877);
                    expression_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_base_access2879); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "base_access"


    public static class object_creation_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "object_creation_expression"
    // CSharp.g:618:1: object_creation_expression : NEW t= type chld= object_creation_expression_Chld -> objectCreationExpression(type=tchild=chld);
    public final CSharp.object_creation_expression_return object_creation_expression() throws RecognitionException {
        CSharp.object_creation_expression_return retval = new CSharp.object_creation_expression_return();
        retval.start = input.LT(1);


        CSharp.type_return t =null;

        CSharp.object_creation_expression_Chld_return chld =null;


        try {
            // CSharp.g:619:3: ( NEW t= type chld= object_creation_expression_Chld -> objectCreationExpression(type=tchild=chld))
            // CSharp.g:620:3: NEW t= type chld= object_creation_expression_Chld
            {
            match(input,NEW,FOLLOW_NEW_in_object_creation_expression2900); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_object_creation_expression2904);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_object_creation_expression_Chld_in_object_creation_expression2908);
            chld=object_creation_expression_Chld();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 621:3: -> objectCreationExpression(type=tchild=chld)
              {
                  retval.st = templateLib.getInstanceOf("objectCreationExpression",new STAttrMap().put("type", t).put("child", chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_creation_expression"


    public static class object_creation_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "object_creation_expression_Chld"
    // CSharp.g:623:1: object_creation_expression_Chld : ( OPEN_PARENS (lst= argument_list )? CLOSE_PARENS (ObjInit= object_or_collection_initializer )? -> objectCreationExpressionChld(argLst=$lst.st.toString().trim()init=ObjInit)|ObjColInit= object_or_collection_initializer -> objectCreationExpressionChld(argLst=nullinit=ObjColInit));
    public final CSharp.object_creation_expression_Chld_return object_creation_expression_Chld() throws RecognitionException {
        CSharp.object_creation_expression_Chld_return retval = new CSharp.object_creation_expression_Chld_return();
        retval.start = input.LT(1);


        CSharp.argument_list_return lst =null;

        CSharp.object_or_collection_initializer_return ObjInit =null;

        CSharp.object_or_collection_initializer_return ObjColInit =null;


        try {
            // CSharp.g:624:4: ( OPEN_PARENS (lst= argument_list )? CLOSE_PARENS (ObjInit= object_or_collection_initializer )? -> objectCreationExpressionChld(argLst=$lst.st.toString().trim()init=ObjInit)|ObjColInit= object_or_collection_initializer -> objectCreationExpressionChld(argLst=nullinit=ObjColInit))
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==OPEN_PARENS) ) {
                alt36=1;
            }
            else if ( (LA36_0==OPEN_BRACE) ) {
                alt36=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }
            switch (alt36) {
                case 1 :
                    // CSharp.g:625:4: OPEN_PARENS (lst= argument_list )? CLOSE_PARENS (ObjInit= object_or_collection_initializer )?
                    {
                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_object_creation_expression_Chld2941); if (state.failed) return retval;

                    // CSharp.g:625:16: (lst= argument_list )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==AMP||(LA34_0 >= BANG && LA34_0 <= BASE)||LA34_0==BOOL||LA34_0==BYTE||(LA34_0 >= CHAR && LA34_0 <= CHECKED)||LA34_0==DECIMAL||(LA34_0 >= DEFAULT && LA34_0 <= DELEGATE)||LA34_0==DOUBLE||LA34_0==FALSE||LA34_0==FLOAT||LA34_0==IDENTIFIER||(LA34_0 >= INT && LA34_0 <= INTEGER_LITERAL)||LA34_0==LONG||LA34_0==MINUS||LA34_0==NEW||LA34_0==NULL||LA34_0==OBJECT||LA34_0==OPEN_PARENS||LA34_0==OP_DEC||LA34_0==OP_INC||LA34_0==OUT||LA34_0==PLUS||(LA34_0 >= REAL_LITERAL && LA34_0 <= REF)||LA34_0==SBYTE||LA34_0==SHORT||LA34_0==SIZEOF||LA34_0==STAR||(LA34_0 >= STRING && LA34_0 <= STRING_LITERAL)||LA34_0==THIS||(LA34_0 >= TILDE && LA34_0 <= TRUE)||LA34_0==TYPEOF||(LA34_0 >= UINT && LA34_0 <= UNCHECKED)||LA34_0==USHORT) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // CSharp.g:625:17: lst= argument_list
                            {
                            pushFollow(FOLLOW_argument_list_in_object_creation_expression_Chld2946);
                            lst=argument_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_object_creation_expression_Chld2950); if (state.failed) return retval;

                    // CSharp.g:625:50: (ObjInit= object_or_collection_initializer )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==OPEN_BRACE) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // CSharp.g:625:51: ObjInit= object_or_collection_initializer
                            {
                            pushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression_Chld2955);
                            ObjInit=object_or_collection_initializer();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 626:4: -> objectCreationExpressionChld(argLst=$lst.st.toString().trim()init=ObjInit)
                      {
                          retval.st = templateLib.getInstanceOf("objectCreationExpressionChld",new STAttrMap().put("argLst", (lst!=null?lst.st:null).toString().trim()).put("init", ObjInit));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:627:6: ObjColInit= object_or_collection_initializer
                    {
                    pushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression_Chld2982);
                    ObjColInit=object_or_collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 628:4: -> objectCreationExpressionChld(argLst=nullinit=ObjColInit)
                      {
                          retval.st = templateLib.getInstanceOf("objectCreationExpressionChld",new STAttrMap().put("argLst", null).put("init", ObjColInit));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_creation_expression_Chld"


    public static class object_or_collection_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "object_or_collection_initializer"
    // CSharp.g:631:1: object_or_collection_initializer : (objInit= object_initializer -> objectOrCollectionInitializer(init=objInit)|colInit= collection_initializer -> objectOrCollectionInitializer(init=colInit));
    public final CSharp.object_or_collection_initializer_return object_or_collection_initializer() throws RecognitionException {
        CSharp.object_or_collection_initializer_return retval = new CSharp.object_or_collection_initializer_return();
        retval.start = input.LT(1);


        CSharp.object_initializer_return objInit =null;

        CSharp.collection_initializer_return colInit =null;


        try {
            // CSharp.g:632:2: (objInit= object_initializer -> objectOrCollectionInitializer(init=objInit)|colInit= collection_initializer -> objectOrCollectionInitializer(init=colInit))
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==OPEN_BRACE) ) {
                switch ( input.LA(2) ) {
                case CLOSE_BRACE:
                    {
                    alt37=1;
                    }
                    break;
                case IDENTIFIER:
                    {
                    int LA37_3 = input.LA(3);

                    if ( (LA37_3==ASSIGNMENT) ) {
                        int LA37_5 = input.LA(4);

                        if ( (LA37_5==GT) ) {
                            alt37=2;
                        }
                        else if ( (LA37_5==AMP||(LA37_5 >= BANG && LA37_5 <= BASE)||LA37_5==BOOL||LA37_5==BYTE||(LA37_5 >= CHAR && LA37_5 <= CHECKED)||LA37_5==DECIMAL||(LA37_5 >= DEFAULT && LA37_5 <= DELEGATE)||LA37_5==DOUBLE||LA37_5==FALSE||LA37_5==FLOAT||LA37_5==IDENTIFIER||(LA37_5 >= INT && LA37_5 <= INTEGER_LITERAL)||LA37_5==LONG||LA37_5==MINUS||LA37_5==NEW||LA37_5==NULL||(LA37_5 >= OBJECT && LA37_5 <= OPEN_BRACE)||LA37_5==OPEN_PARENS||LA37_5==OP_DEC||LA37_5==OP_INC||LA37_5==PLUS||LA37_5==REAL_LITERAL||LA37_5==SBYTE||LA37_5==SHORT||LA37_5==SIZEOF||LA37_5==STAR||(LA37_5 >= STRING && LA37_5 <= STRING_LITERAL)||LA37_5==THIS||(LA37_5 >= TILDE && LA37_5 <= TRUE)||LA37_5==TYPEOF||(LA37_5 >= UINT && LA37_5 <= UNCHECKED)||LA37_5==USHORT) ) {
                            alt37=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 37, 5, input);

                            throw nvae;

                        }
                    }
                    else if ( ((LA37_3 >= AMP && LA37_3 <= AS)||(LA37_3 >= BITWISE_OR && LA37_3 <= BOOL)||(LA37_3 >= BYTE && LA37_3 <= CARET)||LA37_3==CHAR||LA37_3==CLOSE_BRACE||LA37_3==COMMA||LA37_3==DECIMAL||LA37_3==DIV||(LA37_3 >= DOT && LA37_3 <= DOUBLE)||LA37_3==DOUBLE_COLON||LA37_3==FLOAT||LA37_3==GT||LA37_3==IDENTIFIER||LA37_3==INT||(LA37_3 >= INTERR && LA37_3 <= IS)||(LA37_3 >= LONG && LA37_3 <= LT)||LA37_3==MINUS||LA37_3==OBJECT||(LA37_3 >= OPEN_BRACKET && LA37_3 <= OPEN_PARENS)||LA37_3==OP_AND||(LA37_3 >= OP_COALESCING && LA37_3 <= OP_DEC)||(LA37_3 >= OP_EQ && LA37_3 <= OP_LEFT_SHIFT)||(LA37_3 >= OP_NE && LA37_3 <= OP_OR)||LA37_3==OP_PTR||(LA37_3 >= PERCENT && LA37_3 <= PLUS)||LA37_3==SBYTE||LA37_3==SHORT||LA37_3==STAR||LA37_3==STRING||(LA37_3 >= UINT && LA37_3 <= ULONG)||LA37_3==USHORT||LA37_3==VOID) ) {
                        alt37=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 37, 3, input);

                        throw nvae;

                    }
                    }
                    break;
                case AMP:
                case BANG:
                case BASE:
                case BOOL:
                case BYTE:
                case CHAR:
                case CHARACTER_LITERAL:
                case CHECKED:
                case DECIMAL:
                case DEFAULT:
                case DELEGATE:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case INTEGER_LITERAL:
                case LONG:
                case MINUS:
                case NEW:
                case NULL:
                case OBJECT:
                case OPEN_BRACE:
                case OPEN_PARENS:
                case OP_DEC:
                case OP_INC:
                case PLUS:
                case REAL_LITERAL:
                case SBYTE:
                case SHORT:
                case SIZEOF:
                case STAR:
                case STRING:
                case STRING_LITERAL:
                case THIS:
                case TILDE:
                case TRUE:
                case TYPEOF:
                case UINT:
                case ULONG:
                case UNCHECKED:
                case USHORT:
                    {
                    alt37=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 1, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }
            switch (alt37) {
                case 1 :
                    // CSharp.g:633:2: objInit= object_initializer
                    {
                    pushFollow(FOLLOW_object_initializer_in_object_or_collection_initializer3016);
                    objInit=object_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 634:2: -> objectOrCollectionInitializer(init=objInit)
                      {
                          retval.st = templateLib.getInstanceOf("objectOrCollectionInitializer",new STAttrMap().put("init", objInit));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:635:4: colInit= collection_initializer
                    {
                    pushFollow(FOLLOW_collection_initializer_in_object_or_collection_initializer3032);
                    colInit=collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 636:2: -> objectOrCollectionInitializer(init=colInit)
                      {
                          retval.st = templateLib.getInstanceOf("objectOrCollectionInitializer",new STAttrMap().put("init", colInit));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_or_collection_initializer"


    public static class object_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "object_initializer"
    // CSharp.g:645:1: object_initializer : ( OPEN_BRACE CLOSE_BRACE -> text(value=\"{}\")| OPEN_BRACE mil= member_initializer_list ( COMMA )? CLOSE_BRACE -> objectInitializer(memInitList=mil));
    public final CSharp.object_initializer_return object_initializer() throws RecognitionException {
        CSharp.object_initializer_return retval = new CSharp.object_initializer_return();
        retval.start = input.LT(1);


        CSharp.member_initializer_list_return mil =null;


        try {
            // CSharp.g:646:3: ( OPEN_BRACE CLOSE_BRACE -> text(value=\"{}\")| OPEN_BRACE mil= member_initializer_list ( COMMA )? CLOSE_BRACE -> objectInitializer(memInitList=mil))
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==OPEN_BRACE) ) {
                int LA39_1 = input.LA(2);

                if ( (LA39_1==CLOSE_BRACE) ) {
                    alt39=1;
                }
                else if ( (LA39_1==IDENTIFIER) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }
            switch (alt39) {
                case 1 :
                    // CSharp.g:647:3: OPEN_BRACE CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_object_initializer3060); if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_object_initializer3062); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 648:3: -> text(value=\"{}\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "{}"));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:649:5: OPEN_BRACE mil= member_initializer_list ( COMMA )? CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_object_initializer3078); if (state.failed) return retval;

                    pushFollow(FOLLOW_member_initializer_list_in_object_initializer3082);
                    mil=member_initializer_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp.g:649:44: ( COMMA )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==COMMA) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // CSharp.g:649:44: COMMA
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_object_initializer3084); if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_object_initializer3087); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 650:3: -> objectInitializer(memInitList=mil)
                      {
                          retval.st = templateLib.getInstanceOf("objectInitializer",new STAttrMap().put("memInitList", mil));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_initializer"


    public static class member_initializer_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_initializer_list"
    // CSharp.g:652:1: member_initializer_list : frstInit= member_initializer (memChldLst+= member_initializer_list_Chld )* -> memberInitializerList(firstInit=frstInitlist=$memChldLst);
    public final CSharp.member_initializer_list_return member_initializer_list() throws RecognitionException {
        CSharp.member_initializer_list_return retval = new CSharp.member_initializer_list_return();
        retval.start = input.LT(1);


        List list_memChldLst=null;
        CSharp.member_initializer_return frstInit =null;

        RuleReturnScope memChldLst = null;
        try {
            // CSharp.g:653:2: (frstInit= member_initializer (memChldLst+= member_initializer_list_Chld )* -> memberInitializerList(firstInit=frstInitlist=$memChldLst))
            // CSharp.g:654:2: frstInit= member_initializer (memChldLst+= member_initializer_list_Chld )*
            {
            pushFollow(FOLLOW_member_initializer_in_member_initializer_list3113);
            frstInit=member_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:654:30: (memChldLst+= member_initializer_list_Chld )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==COMMA) ) {
                    int LA40_1 = input.LA(2);

                    if ( (LA40_1==IDENTIFIER) ) {
                        alt40=1;
                    }


                }


                switch (alt40) {
            	case 1 :
            	    // CSharp.g:654:31: memChldLst+= member_initializer_list_Chld
            	    {
            	    pushFollow(FOLLOW_member_initializer_list_Chld_in_member_initializer_list3118);
            	    memChldLst=member_initializer_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_memChldLst==null) list_memChldLst=new ArrayList();
            	    list_memChldLst.add(memChldLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 655:2: -> memberInitializerList(firstInit=frstInitlist=$memChldLst)
              {
                  retval.st = templateLib.getInstanceOf("memberInitializerList",new STAttrMap().put("firstInit", frstInit).put("list", list_memChldLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_initializer_list"


    public static class member_initializer_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_initializer_list_Chld"
    // CSharp.g:658:1: member_initializer_list_Chld : COMMA mi= member_initializer -> memberInitializerListChld(memInit=mi);
    public final CSharp.member_initializer_list_Chld_return member_initializer_list_Chld() throws RecognitionException {
        CSharp.member_initializer_list_Chld_return retval = new CSharp.member_initializer_list_Chld_return();
        retval.start = input.LT(1);


        CSharp.member_initializer_return mi =null;


        try {
            // CSharp.g:659:2: ( COMMA mi= member_initializer -> memberInitializerListChld(memInit=mi))
            // CSharp.g:660:2: COMMA mi= member_initializer
            {
            match(input,COMMA,FOLLOW_COMMA_in_member_initializer_list_Chld3146); if (state.failed) return retval;

            pushFollow(FOLLOW_member_initializer_in_member_initializer_list_Chld3150);
            mi=member_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 661:2: -> memberInitializerListChld(memInit=mi)
              {
                  retval.st = templateLib.getInstanceOf("memberInitializerListChld",new STAttrMap().put("memInit", mi));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_initializer_list_Chld"


    public static class member_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_initializer"
    // CSharp.g:664:1: member_initializer : id= IDENTIFIER ASSIGNMENT ival= initializer_value -> memberInitializer(memberName=$id.textinitVal=ival);
    public final CSharp.member_initializer_return member_initializer() throws RecognitionException {
        CSharp.member_initializer_return retval = new CSharp.member_initializer_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharp.initializer_value_return ival =null;


        try {
            // CSharp.g:665:2: (id= IDENTIFIER ASSIGNMENT ival= initializer_value -> memberInitializer(memberName=$id.textinitVal=ival))
            // CSharp.g:666:2: id= IDENTIFIER ASSIGNMENT ival= initializer_value
            {
            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_initializer3176); if (state.failed) return retval;

            match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_member_initializer3178); if (state.failed) return retval;

            pushFollow(FOLLOW_initializer_value_in_member_initializer3182);
            ival=initializer_value();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 667:2: -> memberInitializer(memberName=$id.textinitVal=ival)
              {
                  retval.st = templateLib.getInstanceOf("memberInitializer",new STAttrMap().put("memberName", (id!=null?id.getText():null)).put("initVal", ival));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_initializer"


    public static class initializer_value_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "initializer_value"
    // CSharp.g:670:1: initializer_value : (expr= expression -> initializerValue(expression=expr)|objCrtInit= object_or_collection_initializer -> initializerValue(expression=objCrtInit));
    public final CSharp.initializer_value_return initializer_value() throws RecognitionException {
        CSharp.initializer_value_return retval = new CSharp.initializer_value_return();
        retval.start = input.LT(1);


        CSharp.expression_return expr =null;

        CSharp.object_or_collection_initializer_return objCrtInit =null;


        try {
            // CSharp.g:671:2: (expr= expression -> initializerValue(expression=expr)|objCrtInit= object_or_collection_initializer -> initializerValue(expression=objCrtInit))
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==AMP||(LA41_0 >= BANG && LA41_0 <= BASE)||LA41_0==BOOL||LA41_0==BYTE||(LA41_0 >= CHAR && LA41_0 <= CHECKED)||LA41_0==DECIMAL||(LA41_0 >= DEFAULT && LA41_0 <= DELEGATE)||LA41_0==DOUBLE||LA41_0==FALSE||LA41_0==FLOAT||LA41_0==IDENTIFIER||(LA41_0 >= INT && LA41_0 <= INTEGER_LITERAL)||LA41_0==LONG||LA41_0==MINUS||LA41_0==NEW||LA41_0==NULL||LA41_0==OBJECT||LA41_0==OPEN_PARENS||LA41_0==OP_DEC||LA41_0==OP_INC||LA41_0==PLUS||LA41_0==REAL_LITERAL||LA41_0==SBYTE||LA41_0==SHORT||LA41_0==SIZEOF||LA41_0==STAR||(LA41_0 >= STRING && LA41_0 <= STRING_LITERAL)||LA41_0==THIS||(LA41_0 >= TILDE && LA41_0 <= TRUE)||LA41_0==TYPEOF||(LA41_0 >= UINT && LA41_0 <= UNCHECKED)||LA41_0==USHORT) ) {
                alt41=1;
            }
            else if ( (LA41_0==OPEN_BRACE) ) {
                alt41=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }
            switch (alt41) {
                case 1 :
                    // CSharp.g:672:2: expr= expression
                    {
                    pushFollow(FOLLOW_expression_in_initializer_value3212);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 673:2: -> initializerValue(expression=expr)
                      {
                          retval.st = templateLib.getInstanceOf("initializerValue",new STAttrMap().put("expression", expr));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:674:4: objCrtInit= object_or_collection_initializer
                    {
                    pushFollow(FOLLOW_object_or_collection_initializer_in_initializer_value3228);
                    objCrtInit=object_or_collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 675:2: -> initializerValue(expression=objCrtInit)
                      {
                          retval.st = templateLib.getInstanceOf("initializerValue",new STAttrMap().put("expression", objCrtInit));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "initializer_value"


    public static class collection_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "collection_initializer"
    // CSharp.g:684:1: collection_initializer : OPEN_BRACE elemntLst= element_initializer_list ( COMMA )? CLOSE_BRACE -> collectionInitializer(elementList=elemntLst);
    public final CSharp.collection_initializer_return collection_initializer() throws RecognitionException {
        CSharp.collection_initializer_return retval = new CSharp.collection_initializer_return();
        retval.start = input.LT(1);


        CSharp.element_initializer_list_return elemntLst =null;


        try {
            // CSharp.g:685:3: ( OPEN_BRACE elemntLst= element_initializer_list ( COMMA )? CLOSE_BRACE -> collectionInitializer(elementList=elemntLst))
            // CSharp.g:686:3: OPEN_BRACE elemntLst= element_initializer_list ( COMMA )? CLOSE_BRACE
            {
            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_collection_initializer3256); if (state.failed) return retval;

            pushFollow(FOLLOW_element_initializer_list_in_collection_initializer3260);
            elemntLst=element_initializer_list();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:686:49: ( COMMA )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==COMMA) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // CSharp.g:686:49: COMMA
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_collection_initializer3262); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_collection_initializer3265); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 687:3: -> collectionInitializer(elementList=elemntLst)
              {
                  retval.st = templateLib.getInstanceOf("collectionInitializer",new STAttrMap().put("elementList", elemntLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "collection_initializer"


    public static class element_initializer_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "element_initializer_list"
    // CSharp.g:689:1: element_initializer_list : fstElmnt= element_initializer (chld+= element_initializer_list_Chld )* -> elementInitializerList(firstElement=fstElmntchldList=$chld);
    public final CSharp.element_initializer_list_return element_initializer_list() throws RecognitionException {
        CSharp.element_initializer_list_return retval = new CSharp.element_initializer_list_return();
        retval.start = input.LT(1);


        List list_chld=null;
        CSharp.element_initializer_return fstElmnt =null;

        RuleReturnScope chld = null;
        try {
            // CSharp.g:690:2: (fstElmnt= element_initializer (chld+= element_initializer_list_Chld )* -> elementInitializerList(firstElement=fstElmntchldList=$chld))
            // CSharp.g:691:2: fstElmnt= element_initializer (chld+= element_initializer_list_Chld )*
            {
            pushFollow(FOLLOW_element_initializer_in_element_initializer_list3291);
            fstElmnt=element_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:691:31: (chld+= element_initializer_list_Chld )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==COMMA) ) {
                    int LA43_1 = input.LA(2);

                    if ( (LA43_1==AMP||(LA43_1 >= BANG && LA43_1 <= BASE)||LA43_1==BOOL||LA43_1==BYTE||(LA43_1 >= CHAR && LA43_1 <= CHECKED)||LA43_1==DECIMAL||(LA43_1 >= DEFAULT && LA43_1 <= DELEGATE)||LA43_1==DOUBLE||LA43_1==FALSE||LA43_1==FLOAT||LA43_1==IDENTIFIER||(LA43_1 >= INT && LA43_1 <= INTEGER_LITERAL)||LA43_1==LONG||LA43_1==MINUS||LA43_1==NEW||LA43_1==NULL||(LA43_1 >= OBJECT && LA43_1 <= OPEN_BRACE)||LA43_1==OPEN_PARENS||LA43_1==OP_DEC||LA43_1==OP_INC||LA43_1==PLUS||LA43_1==REAL_LITERAL||LA43_1==SBYTE||LA43_1==SHORT||LA43_1==SIZEOF||LA43_1==STAR||(LA43_1 >= STRING && LA43_1 <= STRING_LITERAL)||LA43_1==THIS||(LA43_1 >= TILDE && LA43_1 <= TRUE)||LA43_1==TYPEOF||(LA43_1 >= UINT && LA43_1 <= UNCHECKED)||LA43_1==USHORT) ) {
                        alt43=1;
                    }


                }


                switch (alt43) {
            	case 1 :
            	    // CSharp.g:691:32: chld+= element_initializer_list_Chld
            	    {
            	    pushFollow(FOLLOW_element_initializer_list_Chld_in_element_initializer_list3296);
            	    chld=element_initializer_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_chld==null) list_chld=new ArrayList();
            	    list_chld.add(chld.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 692:2: -> elementInitializerList(firstElement=fstElmntchldList=$chld)
              {
                  retval.st = templateLib.getInstanceOf("elementInitializerList",new STAttrMap().put("firstElement", fstElmnt).put("chldList", list_chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_initializer_list"


    public static class element_initializer_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "element_initializer_list_Chld"
    // CSharp.g:695:1: element_initializer_list_Chld : COMMA eleInit= element_initializer -> elementInitializerListChld(init=eleInit);
    public final CSharp.element_initializer_list_Chld_return element_initializer_list_Chld() throws RecognitionException {
        CSharp.element_initializer_list_Chld_return retval = new CSharp.element_initializer_list_Chld_return();
        retval.start = input.LT(1);


        CSharp.element_initializer_return eleInit =null;


        try {
            // CSharp.g:696:2: ( COMMA eleInit= element_initializer -> elementInitializerListChld(init=eleInit))
            // CSharp.g:697:2: COMMA eleInit= element_initializer
            {
            match(input,COMMA,FOLLOW_COMMA_in_element_initializer_list_Chld3324); if (state.failed) return retval;

            pushFollow(FOLLOW_element_initializer_in_element_initializer_list_Chld3328);
            eleInit=element_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 698:2: -> elementInitializerListChld(init=eleInit)
              {
                  retval.st = templateLib.getInstanceOf("elementInitializerListChld",new STAttrMap().put("init", eleInit));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_initializer_list_Chld"


    public static class element_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "element_initializer"
    // CSharp.g:700:1: element_initializer : (expr= non_assignment_expression -> elementInitializer(expression=expr)| OPEN_BRACE el= expression_list CLOSE_BRACE -> elementInitializer(expression=el));
    public final CSharp.element_initializer_return element_initializer() throws RecognitionException {
        CSharp.element_initializer_return retval = new CSharp.element_initializer_return();
        retval.start = input.LT(1);


        CSharp.non_assignment_expression_return expr =null;

        CSharp.expression_list_return el =null;


        try {
            // CSharp.g:701:2: (expr= non_assignment_expression -> elementInitializer(expression=expr)| OPEN_BRACE el= expression_list CLOSE_BRACE -> elementInitializer(expression=el))
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==AMP||(LA44_0 >= BANG && LA44_0 <= BASE)||LA44_0==BOOL||LA44_0==BYTE||(LA44_0 >= CHAR && LA44_0 <= CHECKED)||LA44_0==DECIMAL||(LA44_0 >= DEFAULT && LA44_0 <= DELEGATE)||LA44_0==DOUBLE||LA44_0==FALSE||LA44_0==FLOAT||LA44_0==IDENTIFIER||(LA44_0 >= INT && LA44_0 <= INTEGER_LITERAL)||LA44_0==LONG||LA44_0==MINUS||LA44_0==NEW||LA44_0==NULL||LA44_0==OBJECT||LA44_0==OPEN_PARENS||LA44_0==OP_DEC||LA44_0==OP_INC||LA44_0==PLUS||LA44_0==REAL_LITERAL||LA44_0==SBYTE||LA44_0==SHORT||LA44_0==SIZEOF||LA44_0==STAR||(LA44_0 >= STRING && LA44_0 <= STRING_LITERAL)||LA44_0==THIS||(LA44_0 >= TILDE && LA44_0 <= TRUE)||LA44_0==TYPEOF||(LA44_0 >= UINT && LA44_0 <= UNCHECKED)||LA44_0==USHORT) ) {
                alt44=1;
            }
            else if ( (LA44_0==OPEN_BRACE) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;

            }
            switch (alt44) {
                case 1 :
                    // CSharp.g:702:2: expr= non_assignment_expression
                    {
                    pushFollow(FOLLOW_non_assignment_expression_in_element_initializer3352);
                    expr=non_assignment_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 703:2: -> elementInitializer(expression=expr)
                      {
                          retval.st = templateLib.getInstanceOf("elementInitializer",new STAttrMap().put("expression", expr));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:704:4: OPEN_BRACE el= expression_list CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_element_initializer3366); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_list_in_element_initializer3370);
                    el=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_element_initializer3372); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 705:2: -> elementInitializer(expression=el)
                      {
                          retval.st = templateLib.getInstanceOf("elementInitializer",new STAttrMap().put("expression", el));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_initializer"


    public static class array_creation_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "array_creation_expression"
    // CSharp.g:717:1: array_creation_expression : NEW arc= array_creation_expression_Chld -> arrayCreationExpression(Chld=arc);
    public final CSharp.array_creation_expression_return array_creation_expression() throws RecognitionException {
        CSharp.array_creation_expression_return retval = new CSharp.array_creation_expression_return();
        retval.start = input.LT(1);


        CSharp.array_creation_expression_Chld_return arc =null;


        try {
            // CSharp.g:718:3: ( NEW arc= array_creation_expression_Chld -> arrayCreationExpression(Chld=arc))
            // CSharp.g:719:2: NEW arc= array_creation_expression_Chld
            {
            match(input,NEW,FOLLOW_NEW_in_array_creation_expression3406); if (state.failed) return retval;

            pushFollow(FOLLOW_array_creation_expression_Chld_in_array_creation_expression3410);
            arc=array_creation_expression_Chld();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 720:3: -> arrayCreationExpression(Chld=arc)
              {
                  retval.st = templateLib.getInstanceOf("arrayCreationExpression",new STAttrMap().put("Chld", arc));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_creation_expression"


    public static class array_creation_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "array_creation_expression_Chld"
    // CSharp.g:723:1: array_creation_expression_Chld : ( ( array_type OPEN_BRACKET )=>acexpsChld= array_creation_expression_sub_Chld -> arrayCreationExpressionChld(subChld=acexpsChld)| (t= non_array_type )* OPEN_BRACKET eLst= expression_list CLOSE_BRACKET (rs= rank_specifiers )? (ai= array_initializer )? -> arrayCreationExpressionChld2(type=texpList=eLstrnkSpcr=rsarrInitlr=ai));
    public final CSharp.array_creation_expression_Chld_return array_creation_expression_Chld() throws RecognitionException {
        CSharp.array_creation_expression_Chld_return retval = new CSharp.array_creation_expression_Chld_return();
        retval.start = input.LT(1);


        CSharp.array_creation_expression_sub_Chld_return acexpsChld =null;

        CSharp.non_array_type_return t =null;

        CSharp.expression_list_return eLst =null;

        CSharp.rank_specifiers_return rs =null;

        CSharp.array_initializer_return ai =null;


        try {
            // CSharp.g:724:4: ( ( array_type OPEN_BRACKET )=>acexpsChld= array_creation_expression_sub_Chld -> arrayCreationExpressionChld(subChld=acexpsChld)| (t= non_array_type )* OPEN_BRACKET eLst= expression_list CLOSE_BRACKET (rs= rank_specifiers )? (ai= array_initializer )? -> arrayCreationExpressionChld2(type=texpList=eLstrnkSpcr=rsarrInitlr=ai))
            int alt48=2;
            switch ( input.LA(1) ) {
            case SBYTE:
                {
                int LA48_1 = input.LA(2);

                if ( (synpred5_CSharp()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 1, input);

                    throw nvae;

                }
                }
                break;
            case BYTE:
                {
                int LA48_2 = input.LA(2);

                if ( (synpred5_CSharp()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 2, input);

                    throw nvae;

                }
                }
                break;
            case SHORT:
                {
                int LA48_3 = input.LA(2);

                if ( (synpred5_CSharp()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 3, input);

                    throw nvae;

                }
                }
                break;
            case USHORT:
                {
                int LA48_4 = input.LA(2);

                if ( (synpred5_CSharp()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 4, input);

                    throw nvae;

                }
                }
                break;
            case INT:
                {
                int LA48_5 = input.LA(2);

                if ( (synpred5_CSharp()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 5, input);

                    throw nvae;

                }
                }
                break;
            case UINT:
                {
                int LA48_6 = input.LA(2);

                if ( (synpred5_CSharp()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 6, input);

                    throw nvae;

                }
                }
                break;
            case LONG:
                {
                int LA48_7 = input.LA(2);

                if ( (synpred5_CSharp()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 7, input);

                    throw nvae;

                }
                }
                break;
            case ULONG:
                {
                int LA48_8 = input.LA(2);

                if ( (synpred5_CSharp()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 8, input);

                    throw nvae;

                }
                }
                break;
            case CHAR:
                {
                int LA48_9 = input.LA(2);

                if ( (synpred5_CSharp()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 9, input);

                    throw nvae;

                }
                }
                break;
            case FLOAT:
                {
                int LA48_10 = input.LA(2);

                if ( (synpred5_CSharp()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 10, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE:
                {
                int LA48_11 = input.LA(2);

                if ( (synpred5_CSharp()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 11, input);

                    throw nvae;

                }
                }
                break;
            case DECIMAL:
                {
                int LA48_12 = input.LA(2);

                if ( (synpred5_CSharp()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 12, input);

                    throw nvae;

                }
                }
                break;
            case BOOL:
                {
                int LA48_13 = input.LA(2);

                if ( (synpred5_CSharp()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 13, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA48_14 = input.LA(2);

                if ( (synpred5_CSharp()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 14, input);

                    throw nvae;

                }
                }
                break;
            case OBJECT:
                {
                int LA48_15 = input.LA(2);

                if ( (synpred5_CSharp()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 15, input);

                    throw nvae;

                }
                }
                break;
            case STRING:
                {
                int LA48_16 = input.LA(2);

                if ( (synpred5_CSharp()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 16, input);

                    throw nvae;

                }
                }
                break;
            case VOID:
                {
                int LA48_17 = input.LA(2);

                if ( (synpred5_CSharp()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 17, input);

                    throw nvae;

                }
                }
                break;
            case OPEN_BRACKET:
                {
                alt48=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;

            }

            switch (alt48) {
                case 1 :
                    // CSharp.g:725:4: ( array_type OPEN_BRACKET )=>acexpsChld= array_creation_expression_sub_Chld
                    {
                    pushFollow(FOLLOW_array_creation_expression_sub_Chld_in_array_creation_expression_Chld3454);
                    acexpsChld=array_creation_expression_sub_Chld();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 726:4: -> arrayCreationExpressionChld(subChld=acexpsChld)
                      {
                          retval.st = templateLib.getInstanceOf("arrayCreationExpressionChld",new STAttrMap().put("subChld", acexpsChld));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:727:6: (t= non_array_type )* OPEN_BRACKET eLst= expression_list CLOSE_BRACKET (rs= rank_specifiers )? (ai= array_initializer )?
                    {
                    // CSharp.g:727:6: (t= non_array_type )*
                    loop45:
                    do {
                        int alt45=2;
                        int LA45_0 = input.LA(1);

                        if ( (LA45_0==BOOL||LA45_0==BYTE||LA45_0==CHAR||LA45_0==DECIMAL||LA45_0==DOUBLE||LA45_0==FLOAT||LA45_0==IDENTIFIER||LA45_0==INT||LA45_0==LONG||LA45_0==OBJECT||LA45_0==SBYTE||LA45_0==SHORT||LA45_0==STRING||(LA45_0 >= UINT && LA45_0 <= ULONG)||LA45_0==USHORT||LA45_0==VOID) ) {
                            alt45=1;
                        }


                        switch (alt45) {
                    	case 1 :
                    	    // CSharp.g:727:7: t= non_array_type
                    	    {
                    	    pushFollow(FOLLOW_non_array_type_in_array_creation_expression_Chld3475);
                    	    t=non_array_type();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop45;
                        }
                    } while (true);


                    match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_array_creation_expression_Chld3479); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_list_in_array_creation_expression_Chld3483);
                    eLst=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_array_creation_expression_Chld3485); if (state.failed) return retval;

                    // CSharp.g:727:74: (rs= rank_specifiers )?
                    int alt46=2;
                    int LA46_0 = input.LA(1);

                    if ( (LA46_0==OPEN_BRACKET) ) {
                        alt46=1;
                    }
                    switch (alt46) {
                        case 1 :
                            // CSharp.g:727:75: rs= rank_specifiers
                            {
                            pushFollow(FOLLOW_rank_specifiers_in_array_creation_expression_Chld3490);
                            rs=rank_specifiers();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp.g:727:96: (ai= array_initializer )?
                    int alt47=2;
                    int LA47_0 = input.LA(1);

                    if ( (LA47_0==OPEN_BRACE) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            // CSharp.g:727:97: ai= array_initializer
                            {
                            pushFollow(FOLLOW_array_initializer_in_array_creation_expression_Chld3497);
                            ai=array_initializer();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 728:4: -> arrayCreationExpressionChld2(type=texpList=eLstrnkSpcr=rsarrInitlr=ai)
                      {
                          retval.st = templateLib.getInstanceOf("arrayCreationExpressionChld2",new STAttrMap().put("type", t).put("expList", eLst).put("rnkSpcr", rs).put("arrInitlr", ai));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_creation_expression_Chld"


    public static class array_creation_expression_sub_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "array_creation_expression_sub_Chld"
    // CSharp.g:733:1: array_creation_expression_sub_Chld : aType= array_type aInit= array_initializer -> arrayCreationExpressionSubChld(arryType=aTypearInit=aInit);
    public final CSharp.array_creation_expression_sub_Chld_return array_creation_expression_sub_Chld() throws RecognitionException {
        CSharp.array_creation_expression_sub_Chld_return retval = new CSharp.array_creation_expression_sub_Chld_return();
        retval.start = input.LT(1);


        CSharp.array_type_return aType =null;

        CSharp.array_initializer_return aInit =null;


        try {
            // CSharp.g:734:3: (aType= array_type aInit= array_initializer -> arrayCreationExpressionSubChld(arryType=aTypearInit=aInit))
            // CSharp.g:735:4: aType= array_type aInit= array_initializer
            {
            pushFollow(FOLLOW_array_type_in_array_creation_expression_sub_Chld3549);
            aType=array_type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_array_initializer_in_array_creation_expression_sub_Chld3553);
            aInit=array_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 736:4: -> arrayCreationExpressionSubChld(arryType=aTypearInit=aInit)
              {
                  retval.st = templateLib.getInstanceOf("arrayCreationExpressionSubChld",new STAttrMap().put("arryType", aType).put("arInit", aInit));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_creation_expression_sub_Chld"


    public static class delegate_creation_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_creation_expression"
    // CSharp.g:745:1: delegate_creation_expression : NEW delegate_type OPEN_PARENS expression CLOSE_PARENS ;
    public final CSharp.delegate_creation_expression_return delegate_creation_expression() throws RecognitionException {
        CSharp.delegate_creation_expression_return retval = new CSharp.delegate_creation_expression_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:746:2: ( NEW delegate_type OPEN_PARENS expression CLOSE_PARENS )
            // CSharp.g:746:4: NEW delegate_type OPEN_PARENS expression CLOSE_PARENS
            {
            match(input,NEW,FOLLOW_NEW_in_delegate_creation_expression3584); if (state.failed) return retval;

            pushFollow(FOLLOW_delegate_type_in_delegate_creation_expression3586);
            delegate_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_delegate_creation_expression3588); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_delegate_creation_expression3590);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_delegate_creation_expression3592); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delegate_creation_expression"


    public static class anonymous_object_creation_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_object_creation_expression"
    // CSharp.g:749:1: anonymous_object_creation_expression : NEW aobjInit= anonymous_object_initializer -> anonymousObjectCreationExpression(anyObjInit=aobjInit);
    public final CSharp.anonymous_object_creation_expression_return anonymous_object_creation_expression() throws RecognitionException {
        CSharp.anonymous_object_creation_expression_return retval = new CSharp.anonymous_object_creation_expression_return();
        retval.start = input.LT(1);


        CSharp.anonymous_object_initializer_return aobjInit =null;


        try {
            // CSharp.g:750:2: ( NEW aobjInit= anonymous_object_initializer -> anonymousObjectCreationExpression(anyObjInit=aobjInit))
            // CSharp.g:751:2: NEW aobjInit= anonymous_object_initializer
            {
            match(input,NEW,FOLLOW_NEW_in_anonymous_object_creation_expression3607); if (state.failed) return retval;

            pushFollow(FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression3611);
            aobjInit=anonymous_object_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 752:2: -> anonymousObjectCreationExpression(anyObjInit=aobjInit)
              {
                  retval.st = templateLib.getInstanceOf("anonymousObjectCreationExpression",new STAttrMap().put("anyObjInit", aobjInit));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "anonymous_object_creation_expression"


    public static class anonymous_object_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_object_initializer"
    // CSharp.g:761:1: anonymous_object_initializer : ( OPEN_BRACE CLOSE_BRACE -> anonymousObjectInitializer(memDeclLst=null)| OPEN_BRACE lst= member_declarator_list ( COMMA )? CLOSE_BRACE -> anonymousObjectInitializer(memDeclLst=lst));
    public final CSharp.anonymous_object_initializer_return anonymous_object_initializer() throws RecognitionException {
        CSharp.anonymous_object_initializer_return retval = new CSharp.anonymous_object_initializer_return();
        retval.start = input.LT(1);


        CSharp.member_declarator_list_return lst =null;


        try {
            // CSharp.g:762:3: ( OPEN_BRACE CLOSE_BRACE -> anonymousObjectInitializer(memDeclLst=null)| OPEN_BRACE lst= member_declarator_list ( COMMA )? CLOSE_BRACE -> anonymousObjectInitializer(memDeclLst=lst))
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==OPEN_BRACE) ) {
                int LA50_1 = input.LA(2);

                if ( (LA50_1==CLOSE_BRACE) ) {
                    alt50=1;
                }
                else if ( (LA50_1==BASE||LA50_1==BOOL||LA50_1==BYTE||(LA50_1 >= CHAR && LA50_1 <= CHECKED)||LA50_1==DECIMAL||(LA50_1 >= DEFAULT && LA50_1 <= DELEGATE)||LA50_1==DOUBLE||LA50_1==FALSE||LA50_1==FLOAT||LA50_1==IDENTIFIER||(LA50_1 >= INT && LA50_1 <= INTEGER_LITERAL)||LA50_1==LONG||LA50_1==NEW||LA50_1==NULL||LA50_1==OBJECT||LA50_1==OPEN_PARENS||LA50_1==REAL_LITERAL||LA50_1==SBYTE||LA50_1==SHORT||LA50_1==SIZEOF||(LA50_1 >= STRING && LA50_1 <= STRING_LITERAL)||LA50_1==THIS||LA50_1==TRUE||LA50_1==TYPEOF||(LA50_1 >= UINT && LA50_1 <= UNCHECKED)||LA50_1==USHORT) ) {
                    alt50=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 50, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;

            }
            switch (alt50) {
                case 1 :
                    // CSharp.g:763:3: OPEN_BRACE CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_anonymous_object_initializer3639); if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer3641); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 764:3: -> anonymousObjectInitializer(memDeclLst=null)
                      {
                          retval.st = templateLib.getInstanceOf("anonymousObjectInitializer",new STAttrMap().put("memDeclLst", null));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:765:5: OPEN_BRACE lst= member_declarator_list ( COMMA )? CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_anonymous_object_initializer3657); if (state.failed) return retval;

                    pushFollow(FOLLOW_member_declarator_list_in_anonymous_object_initializer3661);
                    lst=member_declarator_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp.g:765:43: ( COMMA )?
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==COMMA) ) {
                        alt49=1;
                    }
                    switch (alt49) {
                        case 1 :
                            // CSharp.g:765:44: COMMA
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_anonymous_object_initializer3664); if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer3668); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 766:3: -> anonymousObjectInitializer(memDeclLst=lst)
                      {
                          retval.st = templateLib.getInstanceOf("anonymousObjectInitializer",new STAttrMap().put("memDeclLst", lst));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "anonymous_object_initializer"


    public static class member_declarator_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_declarator_list"
    // CSharp.g:768:1: member_declarator_list : md= member_declarator (memlst+= member_declarator_list_Chld )* -> memberDeclaratorList(memberDecl=mdlist=$memlst);
    public final CSharp.member_declarator_list_return member_declarator_list() throws RecognitionException {
        CSharp.member_declarator_list_return retval = new CSharp.member_declarator_list_return();
        retval.start = input.LT(1);


        List list_memlst=null;
        CSharp.member_declarator_return md =null;

        RuleReturnScope memlst = null;
        try {
            // CSharp.g:769:2: (md= member_declarator (memlst+= member_declarator_list_Chld )* -> memberDeclaratorList(memberDecl=mdlist=$memlst))
            // CSharp.g:770:2: md= member_declarator (memlst+= member_declarator_list_Chld )*
            {
            pushFollow(FOLLOW_member_declarator_in_member_declarator_list3694);
            md=member_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:770:23: (memlst+= member_declarator_list_Chld )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==COMMA) ) {
                    int LA51_1 = input.LA(2);

                    if ( (LA51_1==BASE||LA51_1==BOOL||LA51_1==BYTE||(LA51_1 >= CHAR && LA51_1 <= CHECKED)||LA51_1==DECIMAL||(LA51_1 >= DEFAULT && LA51_1 <= DELEGATE)||LA51_1==DOUBLE||LA51_1==FALSE||LA51_1==FLOAT||LA51_1==IDENTIFIER||(LA51_1 >= INT && LA51_1 <= INTEGER_LITERAL)||LA51_1==LONG||LA51_1==NEW||LA51_1==NULL||LA51_1==OBJECT||LA51_1==OPEN_PARENS||LA51_1==REAL_LITERAL||LA51_1==SBYTE||LA51_1==SHORT||LA51_1==SIZEOF||(LA51_1 >= STRING && LA51_1 <= STRING_LITERAL)||LA51_1==THIS||LA51_1==TRUE||LA51_1==TYPEOF||(LA51_1 >= UINT && LA51_1 <= UNCHECKED)||LA51_1==USHORT) ) {
                        alt51=1;
                    }


                }


                switch (alt51) {
            	case 1 :
            	    // CSharp.g:770:25: memlst+= member_declarator_list_Chld
            	    {
            	    pushFollow(FOLLOW_member_declarator_list_Chld_in_member_declarator_list3700);
            	    memlst=member_declarator_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_memlst==null) list_memlst=new ArrayList();
            	    list_memlst.add(memlst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 771:2: -> memberDeclaratorList(memberDecl=mdlist=$memlst)
              {
                  retval.st = templateLib.getInstanceOf("memberDeclaratorList",new STAttrMap().put("memberDecl", md).put("list", list_memlst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_declarator_list"


    public static class member_declarator_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_declarator_list_Chld"
    // CSharp.g:774:1: member_declarator_list_Chld : COMMA memDcl= member_declarator -> memberDeclaratorListChld(decl=memDcl);
    public final CSharp.member_declarator_list_Chld_return member_declarator_list_Chld() throws RecognitionException {
        CSharp.member_declarator_list_Chld_return retval = new CSharp.member_declarator_list_Chld_return();
        retval.start = input.LT(1);


        CSharp.member_declarator_return memDcl =null;


        try {
            // CSharp.g:775:2: ( COMMA memDcl= member_declarator -> memberDeclaratorListChld(decl=memDcl))
            // CSharp.g:776:2: COMMA memDcl= member_declarator
            {
            match(input,COMMA,FOLLOW_COMMA_in_member_declarator_list_Chld3728); if (state.failed) return retval;

            pushFollow(FOLLOW_member_declarator_in_member_declarator_list_Chld3732);
            memDcl=member_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 777:2: -> memberDeclaratorListChld(decl=memDcl)
              {
                  retval.st = templateLib.getInstanceOf("memberDeclaratorListChld",new STAttrMap().put("decl", memDcl));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_declarator_list_Chld"


    public static class member_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_declarator"
    // CSharp.g:787:1: member_declarator : (expr1= primary_expression -> memberDeclarator(expression=expr1)|id= IDENTIFIER ASSIGNMENT expr2= expression -> memberDeclarator(expression=expr2));
    public final CSharp.member_declarator_return member_declarator() throws RecognitionException {
        CSharp.member_declarator_return retval = new CSharp.member_declarator_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharp.primary_expression_return expr1 =null;

        CSharp.expression_return expr2 =null;


        try {
            // CSharp.g:788:3: (expr1= primary_expression -> memberDeclarator(expression=expr1)|id= IDENTIFIER ASSIGNMENT expr2= expression -> memberDeclarator(expression=expr2))
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==BASE||LA52_0==BOOL||LA52_0==BYTE||(LA52_0 >= CHAR && LA52_0 <= CHECKED)||LA52_0==DECIMAL||(LA52_0 >= DEFAULT && LA52_0 <= DELEGATE)||LA52_0==DOUBLE||LA52_0==FALSE||LA52_0==FLOAT||(LA52_0 >= INT && LA52_0 <= INTEGER_LITERAL)||LA52_0==LONG||LA52_0==NEW||LA52_0==NULL||LA52_0==OBJECT||LA52_0==OPEN_PARENS||LA52_0==REAL_LITERAL||LA52_0==SBYTE||LA52_0==SHORT||LA52_0==SIZEOF||(LA52_0 >= STRING && LA52_0 <= STRING_LITERAL)||LA52_0==THIS||LA52_0==TRUE||LA52_0==TYPEOF||(LA52_0 >= UINT && LA52_0 <= UNCHECKED)||LA52_0==USHORT) ) {
                alt52=1;
            }
            else if ( (LA52_0==IDENTIFIER) ) {
                int LA52_2 = input.LA(2);

                if ( (LA52_2==CLOSE_BRACE||LA52_2==COMMA||LA52_2==DOT||LA52_2==DOUBLE_COLON||LA52_2==LT||(LA52_2 >= OPEN_BRACKET && LA52_2 <= OPEN_PARENS)||LA52_2==OP_DEC||LA52_2==OP_INC||LA52_2==OP_PTR) ) {
                    alt52=1;
                }
                else if ( (LA52_2==ASSIGNMENT) ) {
                    alt52=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 52, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;

            }
            switch (alt52) {
                case 1 :
                    // CSharp.g:789:3: expr1= primary_expression
                    {
                    pushFollow(FOLLOW_primary_expression_in_member_declarator3760);
                    expr1=primary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 790:3: -> memberDeclarator(expression=expr1)
                      {
                          retval.st = templateLib.getInstanceOf("memberDeclarator",new STAttrMap().put("expression", expr1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:791:5: id= IDENTIFIER ASSIGNMENT expr2= expression
                    {
                    id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_declarator3778); if (state.failed) return retval;

                    match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_member_declarator3780); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_in_member_declarator3784);
                    expr2=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 792:3: -> memberDeclarator(expression=expr2)
                      {
                          retval.st = templateLib.getInstanceOf("memberDeclarator",new STAttrMap().put("expression", expr2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_declarator"


    public static class typeof_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "typeof_expression"
    // CSharp.g:794:1: typeof_expression : TYPEOF OPEN_PARENS ( ( unbound_type_name )=> (unboundtyp= unbound_type_name ) CLOSE_PARENS -> typeofexpression(unboundtype=unboundtyp)| type CLOSE_PARENS | VOID CLOSE_PARENS ) ;
    public final CSharp.typeof_expression_return typeof_expression() throws RecognitionException {
        CSharp.typeof_expression_return retval = new CSharp.typeof_expression_return();
        retval.start = input.LT(1);


        CSharp.unbound_type_name_return unboundtyp =null;


        try {
            // CSharp.g:795:2: ( TYPEOF OPEN_PARENS ( ( unbound_type_name )=> (unboundtyp= unbound_type_name ) CLOSE_PARENS -> typeofexpression(unboundtype=unboundtyp)| type CLOSE_PARENS | VOID CLOSE_PARENS ) )
            // CSharp.g:795:4: TYPEOF OPEN_PARENS ( ( unbound_type_name )=> (unboundtyp= unbound_type_name ) CLOSE_PARENS -> typeofexpression(unboundtype=unboundtyp)| type CLOSE_PARENS | VOID CLOSE_PARENS )
            {
            match(input,TYPEOF,FOLLOW_TYPEOF_in_typeof_expression3806); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_typeof_expression3808); if (state.failed) return retval;

            // CSharp.g:796:4: ( ( unbound_type_name )=> (unboundtyp= unbound_type_name ) CLOSE_PARENS -> typeofexpression(unboundtype=unboundtyp)| type CLOSE_PARENS | VOID CLOSE_PARENS )
            int alt53=3;
            alt53 = dfa53.predict(input);
            switch (alt53) {
                case 1 :
                    // CSharp.g:796:6: ( unbound_type_name )=> (unboundtyp= unbound_type_name ) CLOSE_PARENS
                    {
                    // CSharp.g:796:29: (unboundtyp= unbound_type_name )
                    // CSharp.g:796:30: unboundtyp= unbound_type_name
                    {
                    pushFollow(FOLLOW_unbound_type_name_in_typeof_expression3824);
                    unboundtyp=unbound_type_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_typeof_expression3827); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 797:4: -> typeofexpression(unboundtype=unboundtyp)
                      {
                          retval.st = templateLib.getInstanceOf("typeofexpression",new STAttrMap().put("unboundtype", unboundtyp));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:798:6: type CLOSE_PARENS
                    {
                    pushFollow(FOLLOW_type_in_typeof_expression3845);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_typeof_expression3847); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp.g:799:6: VOID CLOSE_PARENS
                    {
                    match(input,VOID,FOLLOW_VOID_in_typeof_expression3854); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_typeof_expression3856); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof_expression"


    public static class unbound_type_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unbound_type_name"
    // CSharp.g:809:3: unbound_type_name : ( IDENTIFIER (genericdim= generic_dimension_specifier )? ( DOT IDENTIFIER (genericdim1= generic_dimension_specifier )? )* -> unboundtypename(genericdim=genericdimgenericdim1=genericdim1)| IDENTIFIER DOUBLE_COLON IDENTIFIER (genericdim= generic_dimension_specifier )? ( DOT IDENTIFIER (genericdim1= generic_dimension_specifier )? )* -> unboundtypename(genericdimsp=genericdimgenericdim1=genericdim1));
    public final CSharp.unbound_type_name_return unbound_type_name() throws RecognitionException {
        CSharp.unbound_type_name_return retval = new CSharp.unbound_type_name_return();
        retval.start = input.LT(1);


        CSharp.generic_dimension_specifier_return genericdim =null;

        CSharp.generic_dimension_specifier_return genericdim1 =null;


        try {
            // CSharp.g:810:3: ( IDENTIFIER (genericdim= generic_dimension_specifier )? ( DOT IDENTIFIER (genericdim1= generic_dimension_specifier )? )* -> unboundtypename(genericdim=genericdimgenericdim1=genericdim1)| IDENTIFIER DOUBLE_COLON IDENTIFIER (genericdim= generic_dimension_specifier )? ( DOT IDENTIFIER (genericdim1= generic_dimension_specifier )? )* -> unboundtypename(genericdimsp=genericdimgenericdim1=genericdim1))
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==IDENTIFIER) ) {
                int LA60_1 = input.LA(2);

                if ( (LA60_1==DOUBLE_COLON) ) {
                    alt60=2;
                }
                else if ( (LA60_1==EOF||LA60_1==CLOSE_PARENS||LA60_1==DOT||LA60_1==LT) ) {
                    alt60=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 60, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;

            }
            switch (alt60) {
                case 1 :
                    // CSharp.g:810:5: IDENTIFIER (genericdim= generic_dimension_specifier )? ( DOT IDENTIFIER (genericdim1= generic_dimension_specifier )? )*
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_unbound_type_name3879); if (state.failed) return retval;

                    // CSharp.g:810:26: (genericdim= generic_dimension_specifier )?
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==LT) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            // CSharp.g:810:26: genericdim= generic_dimension_specifier
                            {
                            pushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name3883);
                            genericdim=generic_dimension_specifier();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp.g:810:56: ( DOT IDENTIFIER (genericdim1= generic_dimension_specifier )? )*
                    loop56:
                    do {
                        int alt56=2;
                        int LA56_0 = input.LA(1);

                        if ( (LA56_0==DOT) ) {
                            alt56=1;
                        }


                        switch (alt56) {
                    	case 1 :
                    	    // CSharp.g:810:57: DOT IDENTIFIER (genericdim1= generic_dimension_specifier )?
                    	    {
                    	    match(input,DOT,FOLLOW_DOT_in_unbound_type_name3887); if (state.failed) return retval;

                    	    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_unbound_type_name3889); if (state.failed) return retval;

                    	    // CSharp.g:810:83: (genericdim1= generic_dimension_specifier )?
                    	    int alt55=2;
                    	    int LA55_0 = input.LA(1);

                    	    if ( (LA55_0==LT) ) {
                    	        alt55=1;
                    	    }
                    	    switch (alt55) {
                    	        case 1 :
                    	            // CSharp.g:810:83: genericdim1= generic_dimension_specifier
                    	            {
                    	            pushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name3893);
                    	            genericdim1=generic_dimension_specifier();

                    	            state._fsp--;
                    	            if (state.failed) return retval;

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop56;
                        }
                    } while (true);


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 811:3: -> unboundtypename(genericdim=genericdimgenericdim1=genericdim1)
                      {
                          retval.st = templateLib.getInstanceOf("unboundtypename",new STAttrMap().put("genericdim", genericdim).put("genericdim1", genericdim1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:812:6: IDENTIFIER DOUBLE_COLON IDENTIFIER (genericdim= generic_dimension_specifier )? ( DOT IDENTIFIER (genericdim1= generic_dimension_specifier )? )*
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_unbound_type_name3917); if (state.failed) return retval;

                    match(input,DOUBLE_COLON,FOLLOW_DOUBLE_COLON_in_unbound_type_name3919); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_unbound_type_name3921); if (state.failed) return retval;

                    // CSharp.g:812:51: (genericdim= generic_dimension_specifier )?
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==LT) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // CSharp.g:812:51: genericdim= generic_dimension_specifier
                            {
                            pushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name3925);
                            genericdim=generic_dimension_specifier();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp.g:812:81: ( DOT IDENTIFIER (genericdim1= generic_dimension_specifier )? )*
                    loop59:
                    do {
                        int alt59=2;
                        int LA59_0 = input.LA(1);

                        if ( (LA59_0==DOT) ) {
                            alt59=1;
                        }


                        switch (alt59) {
                    	case 1 :
                    	    // CSharp.g:812:82: DOT IDENTIFIER (genericdim1= generic_dimension_specifier )?
                    	    {
                    	    match(input,DOT,FOLLOW_DOT_in_unbound_type_name3929); if (state.failed) return retval;

                    	    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_unbound_type_name3931); if (state.failed) return retval;

                    	    // CSharp.g:812:108: (genericdim1= generic_dimension_specifier )?
                    	    int alt58=2;
                    	    int LA58_0 = input.LA(1);

                    	    if ( (LA58_0==LT) ) {
                    	        alt58=1;
                    	    }
                    	    switch (alt58) {
                    	        case 1 :
                    	            // CSharp.g:812:108: genericdim1= generic_dimension_specifier
                    	            {
                    	            pushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name3935);
                    	            genericdim1=generic_dimension_specifier();

                    	            state._fsp--;
                    	            if (state.failed) return retval;

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop59;
                        }
                    } while (true);


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 813:3: -> unboundtypename(genericdimsp=genericdimgenericdim1=genericdim1)
                      {
                          retval.st = templateLib.getInstanceOf("unboundtypename",new STAttrMap().put("genericdimsp", genericdim).put("genericdim1", genericdim1));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unbound_type_name"


    public static class generic_dimension_specifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "generic_dimension_specifier"
    // CSharp.g:815:1: generic_dimension_specifier : LT (cl= commas )? GT -> genericDimensionSpecifier(cList=\"<\"+cl+\">\");
    public final CSharp.generic_dimension_specifier_return generic_dimension_specifier() throws RecognitionException {
        CSharp.generic_dimension_specifier_return retval = new CSharp.generic_dimension_specifier_return();
        retval.start = input.LT(1);


        CSharp.commas_return cl =null;


        try {
            // CSharp.g:816:2: ( LT (cl= commas )? GT -> genericDimensionSpecifier(cList=\"<\"+cl+\">\"))
            // CSharp.g:817:2: LT (cl= commas )? GT
            {
            match(input,LT,FOLLOW_LT_in_generic_dimension_specifier3966); if (state.failed) return retval;

            // CSharp.g:817:5: (cl= commas )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==COMMA) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // CSharp.g:817:6: cl= commas
                    {
                    pushFollow(FOLLOW_commas_in_generic_dimension_specifier3971);
                    cl=commas();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,GT,FOLLOW_GT_in_generic_dimension_specifier3975); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 818:2: -> genericDimensionSpecifier(cList=\"<\"+cl+\">\")
              {
                  retval.st = templateLib.getInstanceOf("genericDimensionSpecifier",new STAttrMap().put("cList", "<"+cl+">"));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic_dimension_specifier"


    public static class commas_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "commas"
    // CSharp.g:820:1: commas : COMMA (lst+= commas_Chld )* -> commas(list=$lst);
    public final CSharp.commas_return commas() throws RecognitionException {
        CSharp.commas_return retval = new CSharp.commas_return();
        retval.start = input.LT(1);


        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharp.g:821:2: ( COMMA (lst+= commas_Chld )* -> commas(list=$lst))
            // CSharp.g:822:2: COMMA (lst+= commas_Chld )*
            {
            match(input,COMMA,FOLLOW_COMMA_in_commas3997); if (state.failed) return retval;

            // CSharp.g:822:8: (lst+= commas_Chld )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==COMMA) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // CSharp.g:822:9: lst+= commas_Chld
            	    {
            	    pushFollow(FOLLOW_commas_Chld_in_commas4002);
            	    lst=commas_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 823:2: -> commas(list=$lst)
              {
                  retval.st = templateLib.getInstanceOf("commas",new STAttrMap().put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "commas"


    public static class commas_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "commas_Chld"
    // CSharp.g:826:1: commas_Chld : COMMA -> text(value=$COMMA.text);
    public final CSharp.commas_Chld_return commas_Chld() throws RecognitionException {
        CSharp.commas_Chld_return retval = new CSharp.commas_Chld_return();
        retval.start = input.LT(1);


        Token COMMA33=null;

        try {
            // CSharp.g:827:2: ( COMMA -> text(value=$COMMA.text))
            // CSharp.g:828:2: COMMA
            {
            COMMA33=(Token)match(input,COMMA,FOLLOW_COMMA_in_commas_Chld4026); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 829:2: -> text(value=$COMMA.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (COMMA33!=null?COMMA33.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "commas_Chld"


    public static class checked_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "checked_expression"
    // CSharp.g:831:1: checked_expression : CHECKED OPEN_PARENS expression CLOSE_PARENS ;
    public final CSharp.checked_expression_return checked_expression() throws RecognitionException {
        CSharp.checked_expression_return retval = new CSharp.checked_expression_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:832:2: ( CHECKED OPEN_PARENS expression CLOSE_PARENS )
            // CSharp.g:832:4: CHECKED OPEN_PARENS expression CLOSE_PARENS
            {
            match(input,CHECKED,FOLLOW_CHECKED_in_checked_expression4047); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_checked_expression4049); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_checked_expression4051);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_checked_expression4053); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "checked_expression"


    public static class unchecked_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unchecked_expression"
    // CSharp.g:834:1: unchecked_expression : UNCHECKED OPEN_PARENS expression CLOSE_PARENS ;
    public final CSharp.unchecked_expression_return unchecked_expression() throws RecognitionException {
        CSharp.unchecked_expression_return retval = new CSharp.unchecked_expression_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:835:2: ( UNCHECKED OPEN_PARENS expression CLOSE_PARENS )
            // CSharp.g:835:4: UNCHECKED OPEN_PARENS expression CLOSE_PARENS
            {
            match(input,UNCHECKED,FOLLOW_UNCHECKED_in_unchecked_expression4064); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_unchecked_expression4066); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_unchecked_expression4068);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_unchecked_expression4070); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unchecked_expression"


    public static class default_value_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "default_value_expression"
    // CSharp.g:837:1: default_value_expression : DEFAULT OPEN_PARENS type CLOSE_PARENS ;
    public final CSharp.default_value_expression_return default_value_expression() throws RecognitionException {
        CSharp.default_value_expression_return retval = new CSharp.default_value_expression_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:838:2: ( DEFAULT OPEN_PARENS type CLOSE_PARENS )
            // CSharp.g:838:4: DEFAULT OPEN_PARENS type CLOSE_PARENS
            {
            match(input,DEFAULT,FOLLOW_DEFAULT_in_default_value_expression4081); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_default_value_expression4083); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_default_value_expression4085);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_default_value_expression4087); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_value_expression"


    public static class unary_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unary_expression"
    // CSharp.g:853:1: unary_expression : ( ( ( scan_for_cast_generic_precedence | OPEN_PARENS predefined_type )=>val1= cast_expression ) -> unaryExpression(value=val1)|val2= primary_expression -> unaryExpression(value=val2)| PLUS val3= unary_expression -> unaryExpression(value=val3)| MINUS val4= unary_expression -> unaryExpression(value=val4)| BANG val5= unary_expression -> unaryExpression(value=val5)| TILDE val6= unary_expression -> unaryExpression(value=val6)|val7= pre_increment_expression -> unaryExpression(value=val7)|val8= pre_decrement_expression -> unaryExpression(value=val8)|val9= unary_expression_unsafe -> unaryExpression(value=val9));
    public final CSharp.unary_expression_return unary_expression() throws RecognitionException {
        CSharp.unary_expression_return retval = new CSharp.unary_expression_return();
        retval.start = input.LT(1);


        CSharp.cast_expression_return val1 =null;

        CSharp.primary_expression_return val2 =null;

        CSharp.unary_expression_return val3 =null;

        CSharp.unary_expression_return val4 =null;

        CSharp.unary_expression_return val5 =null;

        CSharp.unary_expression_return val6 =null;

        CSharp.pre_increment_expression_return val7 =null;

        CSharp.pre_decrement_expression_return val8 =null;

        CSharp.unary_expression_unsafe_return val9 =null;


        try {
            // CSharp.g:854:2: ( ( ( scan_for_cast_generic_precedence | OPEN_PARENS predefined_type )=>val1= cast_expression ) -> unaryExpression(value=val1)|val2= primary_expression -> unaryExpression(value=val2)| PLUS val3= unary_expression -> unaryExpression(value=val3)| MINUS val4= unary_expression -> unaryExpression(value=val4)| BANG val5= unary_expression -> unaryExpression(value=val5)| TILDE val6= unary_expression -> unaryExpression(value=val6)|val7= pre_increment_expression -> unaryExpression(value=val7)|val8= pre_decrement_expression -> unaryExpression(value=val8)|val9= unary_expression_unsafe -> unaryExpression(value=val9))
            int alt63=9;
            switch ( input.LA(1) ) {
            case OPEN_PARENS:
                {
                int LA63_1 = input.LA(2);

                if ( (synpred7_CSharp()) ) {
                    alt63=1;
                }
                else if ( (true) ) {
                    alt63=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 63, 1, input);

                    throw nvae;

                }
                }
                break;
            case BASE:
            case BOOL:
            case BYTE:
            case CHAR:
            case CHARACTER_LITERAL:
            case CHECKED:
            case DECIMAL:
            case DEFAULT:
            case DELEGATE:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case IDENTIFIER:
            case INT:
            case INTEGER_LITERAL:
            case LONG:
            case NEW:
            case NULL:
            case OBJECT:
            case REAL_LITERAL:
            case SBYTE:
            case SHORT:
            case SIZEOF:
            case STRING:
            case STRING_LITERAL:
            case THIS:
            case TRUE:
            case TYPEOF:
            case UINT:
            case ULONG:
            case UNCHECKED:
            case USHORT:
                {
                alt63=2;
                }
                break;
            case PLUS:
                {
                alt63=3;
                }
                break;
            case MINUS:
                {
                alt63=4;
                }
                break;
            case BANG:
                {
                alt63=5;
                }
                break;
            case TILDE:
                {
                alt63=6;
                }
                break;
            case OP_INC:
                {
                alt63=7;
                }
                break;
            case OP_DEC:
                {
                alt63=8;
                }
                break;
            case AMP:
            case STAR:
                {
                alt63=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;

            }

            switch (alt63) {
                case 1 :
                    // CSharp.g:855:2: ( ( scan_for_cast_generic_precedence | OPEN_PARENS predefined_type )=>val1= cast_expression )
                    {
                    // CSharp.g:855:2: ( ( scan_for_cast_generic_precedence | OPEN_PARENS predefined_type )=>val1= cast_expression )
                    // CSharp.g:855:3: ( scan_for_cast_generic_precedence | OPEN_PARENS predefined_type )=>val1= cast_expression
                    {
                    pushFollow(FOLLOW_cast_expression_in_unary_expression4117);
                    val1=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 856:2: -> unaryExpression(value=val1)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:857:4: val2= primary_expression
                    {
                    pushFollow(FOLLOW_primary_expression_in_unary_expression4134);
                    val2=primary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 858:2: -> unaryExpression(value=val2)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val2));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:859:4: PLUS val3= unary_expression
                    {
                    match(input,PLUS,FOLLOW_PLUS_in_unary_expression4148); if (state.failed) return retval;

                    pushFollow(FOLLOW_unary_expression_in_unary_expression4152);
                    val3=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 860:2: -> unaryExpression(value=val3)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val3));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:861:4: MINUS val4= unary_expression
                    {
                    match(input,MINUS,FOLLOW_MINUS_in_unary_expression4166); if (state.failed) return retval;

                    pushFollow(FOLLOW_unary_expression_in_unary_expression4170);
                    val4=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 862:2: -> unaryExpression(value=val4)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val4));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:863:4: BANG val5= unary_expression
                    {
                    match(input,BANG,FOLLOW_BANG_in_unary_expression4184); if (state.failed) return retval;

                    pushFollow(FOLLOW_unary_expression_in_unary_expression4188);
                    val5=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 864:2: -> unaryExpression(value=val5)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val5));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:865:4: TILDE val6= unary_expression
                    {
                    match(input,TILDE,FOLLOW_TILDE_in_unary_expression4202); if (state.failed) return retval;

                    pushFollow(FOLLOW_unary_expression_in_unary_expression4206);
                    val6=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 866:2: -> unaryExpression(value=val6)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val6));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:867:4: val7= pre_increment_expression
                    {
                    pushFollow(FOLLOW_pre_increment_expression_in_unary_expression4222);
                    val7=pre_increment_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 868:2: -> unaryExpression(value=val7)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val7));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:869:4: val8= pre_decrement_expression
                    {
                    pushFollow(FOLLOW_pre_decrement_expression_in_unary_expression4238);
                    val8=pre_decrement_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 870:2: -> unaryExpression(value=val8)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val8));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:871:4: val9= unary_expression_unsafe
                    {
                    pushFollow(FOLLOW_unary_expression_unsafe_in_unary_expression4254);
                    val9=unary_expression_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 872:2: -> unaryExpression(value=val9)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpression",new STAttrMap().put("value", val9));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unary_expression"


    public static class scan_for_cast_generic_precedence_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "scan_for_cast_generic_precedence"
    // CSharp.g:877:1: scan_for_cast_generic_precedence : OPEN_PARENS typ= type CLOSE_PARENS cadt= cast_disambiguation_token -> scanForCastGenericPrecedence(type=typcastDisAmbTok=cadt);
    public final CSharp.scan_for_cast_generic_precedence_return scan_for_cast_generic_precedence() throws RecognitionException {
        CSharp.scan_for_cast_generic_precedence_return retval = new CSharp.scan_for_cast_generic_precedence_return();
        retval.start = input.LT(1);


        CSharp.type_return typ =null;

        CSharp.cast_disambiguation_token_return cadt =null;


        try {
            // CSharp.g:878:3: ( OPEN_PARENS typ= type CLOSE_PARENS cadt= cast_disambiguation_token -> scanForCastGenericPrecedence(type=typcastDisAmbTok=cadt))
            // CSharp.g:879:3: OPEN_PARENS typ= type CLOSE_PARENS cadt= cast_disambiguation_token
            {
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_scan_for_cast_generic_precedence4280); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_scan_for_cast_generic_precedence4284);
            typ=type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_scan_for_cast_generic_precedence4286); if (state.failed) return retval;

            pushFollow(FOLLOW_cast_disambiguation_token_in_scan_for_cast_generic_precedence4290);
            cadt=cast_disambiguation_token();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 880:3: -> scanForCastGenericPrecedence(type=typcastDisAmbTok=cadt)
              {
                  retval.st = templateLib.getInstanceOf("scanForCastGenericPrecedence",new STAttrMap().put("type", typ).put("castDisAmbTok", cadt));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "scan_for_cast_generic_precedence"


    public static class cast_disambiguation_token_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "cast_disambiguation_token"
    // CSharp.g:885:1: cast_disambiguation_token : ( TILDE -> text(value=$TILDE.text)| BANG -> text(value=$BANG.text)| OPEN_PARENS -> text(value=$OPEN_PARENS.text)| IDENTIFIER -> text(value=$IDENTIFIER.text)|lit= literal -> text(value=lit)| ABSTRACT -> text(value=$ABSTRACT.text)| BASE -> text(value=$BASE.text)| BOOL -> text(value=\"boolean\")| BREAK -> text(value=$BREAK.text)| BYTE -> text(value=$BYTE.text)| CASE -> text(value=$CASE.text)| CATCH -> text(value=$CATCH.text)| CHAR -> text(value=$CHAR.text)| CHECKED -> text(value=$CHECKED.text)| CLASS -> text(value=$CLASS.text)| CONST -> text(value=$CONST.text)| CONTINUE -> text(value=$CONTINUE.text)| DECIMAL -> text(value=$DECIMAL.text)| DEFAULT -> text(value=$DEFAULT.text)| DELEGATE -> text(value=$DELEGATE.text)| DO -> text(value=$DO.text)| DOUBLE -> text(value=$DOUBLE.text)| ELSE -> text(value=$ELSE.text)| ENUM -> text(value=$ENUM.text)| EVENT -> text(value=$EVENT.text)| EXPLICIT -> text(value=$EXPLICIT.text)| EXTERN -> text(value=$EXTERN.text)| FINALLY -> text(value=$FINALLY.text)| FIXED -> text(value=$FIXED.text)| FLOAT -> text(value=$FLOAT.text)| FOR -> text(value=$FOR.text)| FOREACH -> text(value=$FOREACH.text)| GOTO -> text(value=$GOTO.text)| IF -> text(value=$IF.text)| IMPLICIT -> text(value=$IMPLICIT.text)| IN -> text(value=$IN.text)| INT -> text(value=$INT.text)| INTERFACE -> text(value=$INTERFACE.text)| INTERNAL -> text(value=\"private\")| LOCK -> text(value=$LOCK.text)| LONG -> text(value=$LONG.text)| NAMESPACE -> text(value=$NAMESPACE.text)| NEW -> text(value=$NEW.text)| OBJECT -> text(value=\"Object\")| OPERATOR -> text(value=$OPERATOR.text)| OUT -> text(value=$OUT.text)| OVERRIDE -> text(value=\"@Override\\n\")| PARAMS -> text(value=$PARAMS.text)| PRIVATE -> text(value=$PRIVATE.text)| PROTECTED -> text(value=$PROTECTED.text)| PUBLIC -> text(value=$PUBLIC.text)| READONLY -> text(value=$READONLY.text)| REF -> text(value=$REF.text)| RETURN -> text(value=$RETURN.text)| SBYTE -> text(value=$SBYTE.text)| SEALED -> text(value=$SEALED.text)| SHORT -> text(value=$SHORT.text)| SIZEOF -> text(value=$SIZEOF.text)| STACKALLOC -> text(value=$STACKALLOC.text)| STATIC -> text(value=$STATIC.text)| STRING -> text(value=\"String\")| STRUCT -> text(value=$STRUCT.text)| SWITCH -> text(value=$SWITCH.text)| THIS -> text(value=$THIS.text)| THROW -> text(value=$THROW.text)| TRY -> text(value=$TRY.text)| TYPEOF -> text(value=$TYPEOF.text)| UINT -> text(value=$UINT.text)| ULONG -> text(value=$ULONG.text)| UNCHECKED -> text(value=$UNCHECKED.text)| UNSAFE -> text(value=$UNSAFE.text)| USHORT -> text(value=$USHORT.text)| USING -> text(value=$USING.text)| VIRTUAL -> text(value=$VIRTUAL.text)| VOID -> text(value=$VOID.text)| VOLATILE -> text(value=$VOLATILE.text)| WHILE -> text(value=$WHILE.text));
    public final CSharp.cast_disambiguation_token_return cast_disambiguation_token() throws RecognitionException {
        CSharp.cast_disambiguation_token_return retval = new CSharp.cast_disambiguation_token_return();
        retval.start = input.LT(1);


        Token TILDE34=null;
        Token BANG35=null;
        Token OPEN_PARENS36=null;
        Token IDENTIFIER37=null;
        Token ABSTRACT38=null;
        Token BASE39=null;
        Token BREAK40=null;
        Token BYTE41=null;
        Token CASE42=null;
        Token CATCH43=null;
        Token CHAR44=null;
        Token CHECKED45=null;
        Token CLASS46=null;
        Token CONST47=null;
        Token CONTINUE48=null;
        Token DECIMAL49=null;
        Token DEFAULT50=null;
        Token DELEGATE51=null;
        Token DO52=null;
        Token DOUBLE53=null;
        Token ELSE54=null;
        Token ENUM55=null;
        Token EVENT56=null;
        Token EXPLICIT57=null;
        Token EXTERN58=null;
        Token FINALLY59=null;
        Token FIXED60=null;
        Token FLOAT61=null;
        Token FOR62=null;
        Token FOREACH63=null;
        Token GOTO64=null;
        Token IF65=null;
        Token IMPLICIT66=null;
        Token IN67=null;
        Token INT68=null;
        Token INTERFACE69=null;
        Token LOCK70=null;
        Token LONG71=null;
        Token NAMESPACE72=null;
        Token NEW73=null;
        Token OPERATOR74=null;
        Token OUT75=null;
        Token PARAMS76=null;
        Token PRIVATE77=null;
        Token PROTECTED78=null;
        Token PUBLIC79=null;
        Token READONLY80=null;
        Token REF81=null;
        Token RETURN82=null;
        Token SBYTE83=null;
        Token SEALED84=null;
        Token SHORT85=null;
        Token SIZEOF86=null;
        Token STACKALLOC87=null;
        Token STATIC88=null;
        Token STRUCT89=null;
        Token SWITCH90=null;
        Token THIS91=null;
        Token THROW92=null;
        Token TRY93=null;
        Token TYPEOF94=null;
        Token UINT95=null;
        Token ULONG96=null;
        Token UNCHECKED97=null;
        Token UNSAFE98=null;
        Token USHORT99=null;
        Token USING100=null;
        Token VIRTUAL101=null;
        Token VOID102=null;
        Token VOLATILE103=null;
        Token WHILE104=null;
        CSharp.literal_return lit =null;


        try {
            // CSharp.g:886:3: ( TILDE -> text(value=$TILDE.text)| BANG -> text(value=$BANG.text)| OPEN_PARENS -> text(value=$OPEN_PARENS.text)| IDENTIFIER -> text(value=$IDENTIFIER.text)|lit= literal -> text(value=lit)| ABSTRACT -> text(value=$ABSTRACT.text)| BASE -> text(value=$BASE.text)| BOOL -> text(value=\"boolean\")| BREAK -> text(value=$BREAK.text)| BYTE -> text(value=$BYTE.text)| CASE -> text(value=$CASE.text)| CATCH -> text(value=$CATCH.text)| CHAR -> text(value=$CHAR.text)| CHECKED -> text(value=$CHECKED.text)| CLASS -> text(value=$CLASS.text)| CONST -> text(value=$CONST.text)| CONTINUE -> text(value=$CONTINUE.text)| DECIMAL -> text(value=$DECIMAL.text)| DEFAULT -> text(value=$DEFAULT.text)| DELEGATE -> text(value=$DELEGATE.text)| DO -> text(value=$DO.text)| DOUBLE -> text(value=$DOUBLE.text)| ELSE -> text(value=$ELSE.text)| ENUM -> text(value=$ENUM.text)| EVENT -> text(value=$EVENT.text)| EXPLICIT -> text(value=$EXPLICIT.text)| EXTERN -> text(value=$EXTERN.text)| FINALLY -> text(value=$FINALLY.text)| FIXED -> text(value=$FIXED.text)| FLOAT -> text(value=$FLOAT.text)| FOR -> text(value=$FOR.text)| FOREACH -> text(value=$FOREACH.text)| GOTO -> text(value=$GOTO.text)| IF -> text(value=$IF.text)| IMPLICIT -> text(value=$IMPLICIT.text)| IN -> text(value=$IN.text)| INT -> text(value=$INT.text)| INTERFACE -> text(value=$INTERFACE.text)| INTERNAL -> text(value=\"private\")| LOCK -> text(value=$LOCK.text)| LONG -> text(value=$LONG.text)| NAMESPACE -> text(value=$NAMESPACE.text)| NEW -> text(value=$NEW.text)| OBJECT -> text(value=\"Object\")| OPERATOR -> text(value=$OPERATOR.text)| OUT -> text(value=$OUT.text)| OVERRIDE -> text(value=\"@Override\\n\")| PARAMS -> text(value=$PARAMS.text)| PRIVATE -> text(value=$PRIVATE.text)| PROTECTED -> text(value=$PROTECTED.text)| PUBLIC -> text(value=$PUBLIC.text)| READONLY -> text(value=$READONLY.text)| REF -> text(value=$REF.text)| RETURN -> text(value=$RETURN.text)| SBYTE -> text(value=$SBYTE.text)| SEALED -> text(value=$SEALED.text)| SHORT -> text(value=$SHORT.text)| SIZEOF -> text(value=$SIZEOF.text)| STACKALLOC -> text(value=$STACKALLOC.text)| STATIC -> text(value=$STATIC.text)| STRING -> text(value=\"String\")| STRUCT -> text(value=$STRUCT.text)| SWITCH -> text(value=$SWITCH.text)| THIS -> text(value=$THIS.text)| THROW -> text(value=$THROW.text)| TRY -> text(value=$TRY.text)| TYPEOF -> text(value=$TYPEOF.text)| UINT -> text(value=$UINT.text)| ULONG -> text(value=$ULONG.text)| UNCHECKED -> text(value=$UNCHECKED.text)| UNSAFE -> text(value=$UNSAFE.text)| USHORT -> text(value=$USHORT.text)| USING -> text(value=$USING.text)| VIRTUAL -> text(value=$VIRTUAL.text)| VOID -> text(value=$VOID.text)| VOLATILE -> text(value=$VOLATILE.text)| WHILE -> text(value=$WHILE.text))
            int alt64=77;
            switch ( input.LA(1) ) {
            case TILDE:
                {
                alt64=1;
                }
                break;
            case BANG:
                {
                alt64=2;
                }
                break;
            case OPEN_PARENS:
                {
                alt64=3;
                }
                break;
            case IDENTIFIER:
                {
                alt64=4;
                }
                break;
            case CHARACTER_LITERAL:
            case FALSE:
            case INTEGER_LITERAL:
            case NULL:
            case REAL_LITERAL:
            case STRING_LITERAL:
            case TRUE:
                {
                alt64=5;
                }
                break;
            case ABSTRACT:
                {
                alt64=6;
                }
                break;
            case BASE:
                {
                alt64=7;
                }
                break;
            case BOOL:
                {
                alt64=8;
                }
                break;
            case BREAK:
                {
                alt64=9;
                }
                break;
            case BYTE:
                {
                alt64=10;
                }
                break;
            case CASE:
                {
                alt64=11;
                }
                break;
            case CATCH:
                {
                alt64=12;
                }
                break;
            case CHAR:
                {
                alt64=13;
                }
                break;
            case CHECKED:
                {
                alt64=14;
                }
                break;
            case CLASS:
                {
                alt64=15;
                }
                break;
            case CONST:
                {
                alt64=16;
                }
                break;
            case CONTINUE:
                {
                alt64=17;
                }
                break;
            case DECIMAL:
                {
                alt64=18;
                }
                break;
            case DEFAULT:
                {
                alt64=19;
                }
                break;
            case DELEGATE:
                {
                alt64=20;
                }
                break;
            case DO:
                {
                alt64=21;
                }
                break;
            case DOUBLE:
                {
                alt64=22;
                }
                break;
            case ELSE:
                {
                alt64=23;
                }
                break;
            case ENUM:
                {
                alt64=24;
                }
                break;
            case EVENT:
                {
                alt64=25;
                }
                break;
            case EXPLICIT:
                {
                alt64=26;
                }
                break;
            case EXTERN:
                {
                alt64=27;
                }
                break;
            case FINALLY:
                {
                alt64=28;
                }
                break;
            case FIXED:
                {
                alt64=29;
                }
                break;
            case FLOAT:
                {
                alt64=30;
                }
                break;
            case FOR:
                {
                alt64=31;
                }
                break;
            case FOREACH:
                {
                alt64=32;
                }
                break;
            case GOTO:
                {
                alt64=33;
                }
                break;
            case IF:
                {
                alt64=34;
                }
                break;
            case IMPLICIT:
                {
                alt64=35;
                }
                break;
            case IN:
                {
                alt64=36;
                }
                break;
            case INT:
                {
                alt64=37;
                }
                break;
            case INTERFACE:
                {
                alt64=38;
                }
                break;
            case INTERNAL:
                {
                alt64=39;
                }
                break;
            case LOCK:
                {
                alt64=40;
                }
                break;
            case LONG:
                {
                alt64=41;
                }
                break;
            case NAMESPACE:
                {
                alt64=42;
                }
                break;
            case NEW:
                {
                alt64=43;
                }
                break;
            case OBJECT:
                {
                alt64=44;
                }
                break;
            case OPERATOR:
                {
                alt64=45;
                }
                break;
            case OUT:
                {
                alt64=46;
                }
                break;
            case OVERRIDE:
                {
                alt64=47;
                }
                break;
            case PARAMS:
                {
                alt64=48;
                }
                break;
            case PRIVATE:
                {
                alt64=49;
                }
                break;
            case PROTECTED:
                {
                alt64=50;
                }
                break;
            case PUBLIC:
                {
                alt64=51;
                }
                break;
            case READONLY:
                {
                alt64=52;
                }
                break;
            case REF:
                {
                alt64=53;
                }
                break;
            case RETURN:
                {
                alt64=54;
                }
                break;
            case SBYTE:
                {
                alt64=55;
                }
                break;
            case SEALED:
                {
                alt64=56;
                }
                break;
            case SHORT:
                {
                alt64=57;
                }
                break;
            case SIZEOF:
                {
                alt64=58;
                }
                break;
            case STACKALLOC:
                {
                alt64=59;
                }
                break;
            case STATIC:
                {
                alt64=60;
                }
                break;
            case STRING:
                {
                alt64=61;
                }
                break;
            case STRUCT:
                {
                alt64=62;
                }
                break;
            case SWITCH:
                {
                alt64=63;
                }
                break;
            case THIS:
                {
                alt64=64;
                }
                break;
            case THROW:
                {
                alt64=65;
                }
                break;
            case TRY:
                {
                alt64=66;
                }
                break;
            case TYPEOF:
                {
                alt64=67;
                }
                break;
            case UINT:
                {
                alt64=68;
                }
                break;
            case ULONG:
                {
                alt64=69;
                }
                break;
            case UNCHECKED:
                {
                alt64=70;
                }
                break;
            case UNSAFE:
                {
                alt64=71;
                }
                break;
            case USHORT:
                {
                alt64=72;
                }
                break;
            case USING:
                {
                alt64=73;
                }
                break;
            case VIRTUAL:
                {
                alt64=74;
                }
                break;
            case VOID:
                {
                alt64=75;
                }
                break;
            case VOLATILE:
                {
                alt64=76;
                }
                break;
            case WHILE:
                {
                alt64=77;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;

            }

            switch (alt64) {
                case 1 :
                    // CSharp.g:887:3: TILDE
                    {
                    TILDE34=(Token)match(input,TILDE,FOLLOW_TILDE_in_cast_disambiguation_token4322); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 887:25: -> text(value=$TILDE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TILDE34!=null?TILDE34.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:888:5: BANG
                    {
                    BANG35=(Token)match(input,BANG,FOLLOW_BANG_in_cast_disambiguation_token4352); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 888:25: -> text(value=$BANG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BANG35!=null?BANG35.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:889:5: OPEN_PARENS
                    {
                    OPEN_PARENS36=(Token)match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_cast_disambiguation_token4381); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 889:25: -> text(value=$OPEN_PARENS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OPEN_PARENS36!=null?OPEN_PARENS36.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:890:5: IDENTIFIER
                    {
                    IDENTIFIER37=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_cast_disambiguation_token4403); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 890:25: -> text(value=$IDENTIFIER.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IDENTIFIER37!=null?IDENTIFIER37.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:891:5: lit= literal
                    {
                    pushFollow(FOLLOW_literal_in_cast_disambiguation_token4428);
                    lit=literal();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 891:25: -> text(value=lit)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", lit));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:892:5: ABSTRACT
                    {
                    ABSTRACT38=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_cast_disambiguation_token4450); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 892:25: -> text(value=$ABSTRACT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ABSTRACT38!=null?ABSTRACT38.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:893:5: BASE
                    {
                    BASE39=(Token)match(input,BASE,FOLLOW_BASE_in_cast_disambiguation_token4475); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 893:25: -> text(value=$BASE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BASE39!=null?BASE39.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:894:5: BOOL
                    {
                    match(input,BOOL,FOLLOW_BOOL_in_cast_disambiguation_token4504); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 894:25: -> text(value=\"boolean\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "boolean"));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:895:5: BREAK
                    {
                    BREAK40=(Token)match(input,BREAK,FOLLOW_BREAK_in_cast_disambiguation_token4533); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 895:25: -> text(value=$BREAK.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BREAK40!=null?BREAK40.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharp.g:896:5: BYTE
                    {
                    BYTE41=(Token)match(input,BYTE,FOLLOW_BYTE_in_cast_disambiguation_token4561); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 896:25: -> text(value=$BYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BYTE41!=null?BYTE41.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharp.g:897:5: CASE
                    {
                    CASE42=(Token)match(input,CASE,FOLLOW_CASE_in_cast_disambiguation_token4590); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 897:25: -> text(value=$CASE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CASE42!=null?CASE42.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharp.g:898:5: CATCH
                    {
                    CATCH43=(Token)match(input,CATCH,FOLLOW_CATCH_in_cast_disambiguation_token4619); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 898:25: -> text(value=$CATCH.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CATCH43!=null?CATCH43.getText():null)));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharp.g:899:5: CHAR
                    {
                    CHAR44=(Token)match(input,CHAR,FOLLOW_CHAR_in_cast_disambiguation_token4647); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 899:25: -> text(value=$CHAR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CHAR44!=null?CHAR44.getText():null)));
                      }


                    }

                    }
                    break;
                case 14 :
                    // CSharp.g:900:5: CHECKED
                    {
                    CHECKED45=(Token)match(input,CHECKED,FOLLOW_CHECKED_in_cast_disambiguation_token4676); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 900:25: -> text(value=$CHECKED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CHECKED45!=null?CHECKED45.getText():null)));
                      }


                    }

                    }
                    break;
                case 15 :
                    // CSharp.g:901:5: CLASS
                    {
                    CLASS46=(Token)match(input,CLASS,FOLLOW_CLASS_in_cast_disambiguation_token4702); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 901:25: -> text(value=$CLASS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CLASS46!=null?CLASS46.getText():null)));
                      }


                    }

                    }
                    break;
                case 16 :
                    // CSharp.g:902:5: CONST
                    {
                    CONST47=(Token)match(input,CONST,FOLLOW_CONST_in_cast_disambiguation_token4730); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 902:25: -> text(value=$CONST.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CONST47!=null?CONST47.getText():null)));
                      }


                    }

                    }
                    break;
                case 17 :
                    // CSharp.g:903:5: CONTINUE
                    {
                    CONTINUE48=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_cast_disambiguation_token4758); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 903:25: -> text(value=$CONTINUE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CONTINUE48!=null?CONTINUE48.getText():null)));
                      }


                    }

                    }
                    break;
                case 18 :
                    // CSharp.g:904:5: DECIMAL
                    {
                    DECIMAL49=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_cast_disambiguation_token4783); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 904:25: -> text(value=$DECIMAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DECIMAL49!=null?DECIMAL49.getText():null)));
                      }


                    }

                    }
                    break;
                case 19 :
                    // CSharp.g:905:5: DEFAULT
                    {
                    DEFAULT50=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_cast_disambiguation_token4809); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 905:25: -> text(value=$DEFAULT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DEFAULT50!=null?DEFAULT50.getText():null)));
                      }


                    }

                    }
                    break;
                case 20 :
                    // CSharp.g:906:5: DELEGATE
                    {
                    DELEGATE51=(Token)match(input,DELEGATE,FOLLOW_DELEGATE_in_cast_disambiguation_token4835); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 906:25: -> text(value=$DELEGATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DELEGATE51!=null?DELEGATE51.getText():null)));
                      }


                    }

                    }
                    break;
                case 21 :
                    // CSharp.g:907:5: DO
                    {
                    DO52=(Token)match(input,DO,FOLLOW_DO_in_cast_disambiguation_token4860); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 907:25: -> text(value=$DO.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DO52!=null?DO52.getText():null)));
                      }


                    }

                    }
                    break;
                case 22 :
                    // CSharp.g:908:5: DOUBLE
                    {
                    DOUBLE53=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_cast_disambiguation_token4891); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 908:25: -> text(value=$DOUBLE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DOUBLE53!=null?DOUBLE53.getText():null)));
                      }


                    }

                    }
                    break;
                case 23 :
                    // CSharp.g:909:5: ELSE
                    {
                    ELSE54=(Token)match(input,ELSE,FOLLOW_ELSE_in_cast_disambiguation_token4918); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 909:25: -> text(value=$ELSE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ELSE54!=null?ELSE54.getText():null)));
                      }


                    }

                    }
                    break;
                case 24 :
                    // CSharp.g:910:5: ENUM
                    {
                    ENUM55=(Token)match(input,ENUM,FOLLOW_ENUM_in_cast_disambiguation_token4947); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 910:25: -> text(value=$ENUM.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ENUM55!=null?ENUM55.getText():null)));
                      }


                    }

                    }
                    break;
                case 25 :
                    // CSharp.g:911:5: EVENT
                    {
                    EVENT56=(Token)match(input,EVENT,FOLLOW_EVENT_in_cast_disambiguation_token4976); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 911:25: -> text(value=$EVENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EVENT56!=null?EVENT56.getText():null)));
                      }


                    }

                    }
                    break;
                case 26 :
                    // CSharp.g:912:5: EXPLICIT
                    {
                    EXPLICIT57=(Token)match(input,EXPLICIT,FOLLOW_EXPLICIT_in_cast_disambiguation_token5004); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 912:25: -> text(value=$EXPLICIT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXPLICIT57!=null?EXPLICIT57.getText():null)));
                      }


                    }

                    }
                    break;
                case 27 :
                    // CSharp.g:913:5: EXTERN
                    {
                    EXTERN58=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_cast_disambiguation_token5029); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 913:25: -> text(value=$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXTERN58!=null?EXTERN58.getText():null)));
                      }


                    }

                    }
                    break;
                case 28 :
                    // CSharp.g:914:5: FINALLY
                    {
                    FINALLY59=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_cast_disambiguation_token5056); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 914:25: -> text(value=$FINALLY.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FINALLY59!=null?FINALLY59.getText():null)));
                      }


                    }

                    }
                    break;
                case 29 :
                    // CSharp.g:915:5: FIXED
                    {
                    FIXED60=(Token)match(input,FIXED,FOLLOW_FIXED_in_cast_disambiguation_token5082); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 915:25: -> text(value=$FIXED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FIXED60!=null?FIXED60.getText():null)));
                      }


                    }

                    }
                    break;
                case 30 :
                    // CSharp.g:916:5: FLOAT
                    {
                    FLOAT61=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_cast_disambiguation_token5110); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 916:25: -> text(value=$FLOAT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FLOAT61!=null?FLOAT61.getText():null)));
                      }


                    }

                    }
                    break;
                case 31 :
                    // CSharp.g:917:5: FOR
                    {
                    FOR62=(Token)match(input,FOR,FOLLOW_FOR_in_cast_disambiguation_token5138); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 917:25: -> text(value=$FOR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FOR62!=null?FOR62.getText():null)));
                      }


                    }

                    }
                    break;
                case 32 :
                    // CSharp.g:918:5: FOREACH
                    {
                    FOREACH63=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_cast_disambiguation_token5168); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 918:25: -> text(value=$FOREACH.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FOREACH63!=null?FOREACH63.getText():null)));
                      }


                    }

                    }
                    break;
                case 33 :
                    // CSharp.g:919:5: GOTO
                    {
                    GOTO64=(Token)match(input,GOTO,FOLLOW_GOTO_in_cast_disambiguation_token5194); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 919:25: -> text(value=$GOTO.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (GOTO64!=null?GOTO64.getText():null)));
                      }


                    }

                    }
                    break;
                case 34 :
                    // CSharp.g:920:5: IF
                    {
                    IF65=(Token)match(input,IF,FOLLOW_IF_in_cast_disambiguation_token5223); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 920:25: -> text(value=$IF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IF65!=null?IF65.getText():null)));
                      }


                    }

                    }
                    break;
                case 35 :
                    // CSharp.g:921:5: IMPLICIT
                    {
                    IMPLICIT66=(Token)match(input,IMPLICIT,FOLLOW_IMPLICIT_in_cast_disambiguation_token5254); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 921:25: -> text(value=$IMPLICIT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IMPLICIT66!=null?IMPLICIT66.getText():null)));
                      }


                    }

                    }
                    break;
                case 36 :
                    // CSharp.g:922:5: IN
                    {
                    IN67=(Token)match(input,IN,FOLLOW_IN_in_cast_disambiguation_token5279); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 922:25: -> text(value=$IN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IN67!=null?IN67.getText():null)));
                      }


                    }

                    }
                    break;
                case 37 :
                    // CSharp.g:923:5: INT
                    {
                    INT68=(Token)match(input,INT,FOLLOW_INT_in_cast_disambiguation_token5310); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 923:25: -> text(value=$INT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INT68!=null?INT68.getText():null)));
                      }


                    }

                    }
                    break;
                case 38 :
                    // CSharp.g:924:5: INTERFACE
                    {
                    INTERFACE69=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_cast_disambiguation_token5340); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 924:25: -> text(value=$INTERFACE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERFACE69!=null?INTERFACE69.getText():null)));
                      }


                    }

                    }
                    break;
                case 39 :
                    // CSharp.g:925:5: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_cast_disambiguation_token5364); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 925:25: -> text(value=\"private\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "private"));
                      }


                    }

                    }
                    break;
                case 40 :
                    // CSharp.g:926:5: LOCK
                    {
                    LOCK70=(Token)match(input,LOCK,FOLLOW_LOCK_in_cast_disambiguation_token5389); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 926:25: -> text(value=$LOCK.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (LOCK70!=null?LOCK70.getText():null)));
                      }


                    }

                    }
                    break;
                case 41 :
                    // CSharp.g:927:5: LONG
                    {
                    LONG71=(Token)match(input,LONG,FOLLOW_LONG_in_cast_disambiguation_token5418); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 927:25: -> text(value=$LONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (LONG71!=null?LONG71.getText():null)));
                      }


                    }

                    }
                    break;
                case 42 :
                    // CSharp.g:928:5: NAMESPACE
                    {
                    NAMESPACE72=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_cast_disambiguation_token5447); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 928:25: -> text(value=$NAMESPACE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NAMESPACE72!=null?NAMESPACE72.getText():null)));
                      }


                    }

                    }
                    break;
                case 43 :
                    // CSharp.g:929:5: NEW
                    {
                    NEW73=(Token)match(input,NEW,FOLLOW_NEW_in_cast_disambiguation_token5471); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 929:25: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW73!=null?NEW73.getText():null)));
                      }


                    }

                    }
                    break;
                case 44 :
                    // CSharp.g:930:5: OBJECT
                    {
                    match(input,OBJECT,FOLLOW_OBJECT_in_cast_disambiguation_token5501); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 930:25: -> text(value=\"Object\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "Object"));
                      }


                    }

                    }
                    break;
                case 45 :
                    // CSharp.g:931:5: OPERATOR
                    {
                    OPERATOR74=(Token)match(input,OPERATOR,FOLLOW_OPERATOR_in_cast_disambiguation_token5528); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 931:25: -> text(value=$OPERATOR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OPERATOR74!=null?OPERATOR74.getText():null)));
                      }


                    }

                    }
                    break;
                case 46 :
                    // CSharp.g:932:5: OUT
                    {
                    OUT75=(Token)match(input,OUT,FOLLOW_OUT_in_cast_disambiguation_token5553); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 932:25: -> text(value=$OUT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OUT75!=null?OUT75.getText():null)));
                      }


                    }

                    }
                    break;
                case 47 :
                    // CSharp.g:933:5: OVERRIDE
                    {
                    match(input,OVERRIDE,FOLLOW_OVERRIDE_in_cast_disambiguation_token5583); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 933:25: -> text(value=\"@Override\\n\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "@Override\n"));
                      }


                    }

                    }
                    break;
                case 48 :
                    // CSharp.g:934:5: PARAMS
                    {
                    PARAMS76=(Token)match(input,PARAMS,FOLLOW_PARAMS_in_cast_disambiguation_token5608); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 934:25: -> text(value=$PARAMS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PARAMS76!=null?PARAMS76.getText():null)));
                      }


                    }

                    }
                    break;
                case 49 :
                    // CSharp.g:935:5: PRIVATE
                    {
                    PRIVATE77=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_cast_disambiguation_token5635); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 935:25: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE77!=null?PRIVATE77.getText():null)));
                      }


                    }

                    }
                    break;
                case 50 :
                    // CSharp.g:936:5: PROTECTED
                    {
                    PROTECTED78=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_cast_disambiguation_token5661); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 936:25: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED78!=null?PROTECTED78.getText():null)));
                      }


                    }

                    }
                    break;
                case 51 :
                    // CSharp.g:937:5: PUBLIC
                    {
                    PUBLIC79=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_cast_disambiguation_token5685); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 937:25: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC79!=null?PUBLIC79.getText():null)));
                      }


                    }

                    }
                    break;
                case 52 :
                    // CSharp.g:938:5: READONLY
                    {
                    READONLY80=(Token)match(input,READONLY,FOLLOW_READONLY_in_cast_disambiguation_token5712); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 938:25: -> text(value=$READONLY.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (READONLY80!=null?READONLY80.getText():null)));
                      }


                    }

                    }
                    break;
                case 53 :
                    // CSharp.g:939:5: REF
                    {
                    REF81=(Token)match(input,REF,FOLLOW_REF_in_cast_disambiguation_token5737); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 939:25: -> text(value=$REF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (REF81!=null?REF81.getText():null)));
                      }


                    }

                    }
                    break;
                case 54 :
                    // CSharp.g:940:5: RETURN
                    {
                    RETURN82=(Token)match(input,RETURN,FOLLOW_RETURN_in_cast_disambiguation_token5767); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 940:25: -> text(value=$RETURN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (RETURN82!=null?RETURN82.getText():null)));
                      }


                    }

                    }
                    break;
                case 55 :
                    // CSharp.g:941:5: SBYTE
                    {
                    SBYTE83=(Token)match(input,SBYTE,FOLLOW_SBYTE_in_cast_disambiguation_token5794); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 941:25: -> text(value=$SBYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SBYTE83!=null?SBYTE83.getText():null)));
                      }


                    }

                    }
                    break;
                case 56 :
                    // CSharp.g:942:5: SEALED
                    {
                    SEALED84=(Token)match(input,SEALED,FOLLOW_SEALED_in_cast_disambiguation_token5822); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 942:25: -> text(value=$SEALED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEALED84!=null?SEALED84.getText():null)));
                      }


                    }

                    }
                    break;
                case 57 :
                    // CSharp.g:943:5: SHORT
                    {
                    SHORT85=(Token)match(input,SHORT,FOLLOW_SHORT_in_cast_disambiguation_token5849); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 943:25: -> text(value=$SHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SHORT85!=null?SHORT85.getText():null)));
                      }


                    }

                    }
                    break;
                case 58 :
                    // CSharp.g:944:5: SIZEOF
                    {
                    SIZEOF86=(Token)match(input,SIZEOF,FOLLOW_SIZEOF_in_cast_disambiguation_token5877); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 944:25: -> text(value=$SIZEOF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SIZEOF86!=null?SIZEOF86.getText():null)));
                      }


                    }

                    }
                    break;
                case 59 :
                    // CSharp.g:945:5: STACKALLOC
                    {
                    STACKALLOC87=(Token)match(input,STACKALLOC,FOLLOW_STACKALLOC_in_cast_disambiguation_token5904); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 945:25: -> text(value=$STACKALLOC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STACKALLOC87!=null?STACKALLOC87.getText():null)));
                      }


                    }

                    }
                    break;
                case 60 :
                    // CSharp.g:946:5: STATIC
                    {
                    STATIC88=(Token)match(input,STATIC,FOLLOW_STATIC_in_cast_disambiguation_token5927); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 946:25: -> text(value=$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STATIC88!=null?STATIC88.getText():null)));
                      }


                    }

                    }
                    break;
                case 61 :
                    // CSharp.g:947:5: STRING
                    {
                    match(input,STRING,FOLLOW_STRING_in_cast_disambiguation_token5954); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 947:25: -> text(value=\"String\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "String"));
                      }


                    }

                    }
                    break;
                case 62 :
                    // CSharp.g:948:5: STRUCT
                    {
                    STRUCT89=(Token)match(input,STRUCT,FOLLOW_STRUCT_in_cast_disambiguation_token5981); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 948:25: -> text(value=$STRUCT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STRUCT89!=null?STRUCT89.getText():null)));
                      }


                    }

                    }
                    break;
                case 63 :
                    // CSharp.g:949:5: SWITCH
                    {
                    SWITCH90=(Token)match(input,SWITCH,FOLLOW_SWITCH_in_cast_disambiguation_token6008); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 949:25: -> text(value=$SWITCH.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SWITCH90!=null?SWITCH90.getText():null)));
                      }


                    }

                    }
                    break;
                case 64 :
                    // CSharp.g:950:5: THIS
                    {
                    THIS91=(Token)match(input,THIS,FOLLOW_THIS_in_cast_disambiguation_token6035); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 950:25: -> text(value=$THIS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (THIS91!=null?THIS91.getText():null)));
                      }


                    }

                    }
                    break;
                case 65 :
                    // CSharp.g:951:5: THROW
                    {
                    THROW92=(Token)match(input,THROW,FOLLOW_THROW_in_cast_disambiguation_token6064); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 951:25: -> text(value=$THROW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (THROW92!=null?THROW92.getText():null)));
                      }


                    }

                    }
                    break;
                case 66 :
                    // CSharp.g:952:5: TRY
                    {
                    TRY93=(Token)match(input,TRY,FOLLOW_TRY_in_cast_disambiguation_token6092); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 952:25: -> text(value=$TRY.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TRY93!=null?TRY93.getText():null)));
                      }


                    }

                    }
                    break;
                case 67 :
                    // CSharp.g:953:5: TYPEOF
                    {
                    TYPEOF94=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_cast_disambiguation_token6122); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 953:25: -> text(value=$TYPEOF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TYPEOF94!=null?TYPEOF94.getText():null)));
                      }


                    }

                    }
                    break;
                case 68 :
                    // CSharp.g:954:5: UINT
                    {
                    UINT95=(Token)match(input,UINT,FOLLOW_UINT_in_cast_disambiguation_token6149); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 954:25: -> text(value=$UINT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UINT95!=null?UINT95.getText():null)));
                      }


                    }

                    }
                    break;
                case 69 :
                    // CSharp.g:955:5: ULONG
                    {
                    ULONG96=(Token)match(input,ULONG,FOLLOW_ULONG_in_cast_disambiguation_token6178); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 955:25: -> text(value=$ULONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ULONG96!=null?ULONG96.getText():null)));
                      }


                    }

                    }
                    break;
                case 70 :
                    // CSharp.g:956:5: UNCHECKED
                    {
                    UNCHECKED97=(Token)match(input,UNCHECKED,FOLLOW_UNCHECKED_in_cast_disambiguation_token6206); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 956:25: -> text(value=$UNCHECKED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNCHECKED97!=null?UNCHECKED97.getText():null)));
                      }


                    }

                    }
                    break;
                case 71 :
                    // CSharp.g:957:5: UNSAFE
                    {
                    UNSAFE98=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_cast_disambiguation_token6230); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 957:25: -> text(value=$UNSAFE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE98!=null?UNSAFE98.getText():null)));
                      }


                    }

                    }
                    break;
                case 72 :
                    // CSharp.g:958:5: USHORT
                    {
                    USHORT99=(Token)match(input,USHORT,FOLLOW_USHORT_in_cast_disambiguation_token6257); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 958:25: -> text(value=$USHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (USHORT99!=null?USHORT99.getText():null)));
                      }


                    }

                    }
                    break;
                case 73 :
                    // CSharp.g:959:5: USING
                    {
                    USING100=(Token)match(input,USING,FOLLOW_USING_in_cast_disambiguation_token6284); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 959:25: -> text(value=$USING.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (USING100!=null?USING100.getText():null)));
                      }


                    }

                    }
                    break;
                case 74 :
                    // CSharp.g:960:5: VIRTUAL
                    {
                    VIRTUAL101=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_cast_disambiguation_token6312); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 960:25: -> text(value=$VIRTUAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VIRTUAL101!=null?VIRTUAL101.getText():null)));
                      }


                    }

                    }
                    break;
                case 75 :
                    // CSharp.g:961:5: VOID
                    {
                    VOID102=(Token)match(input,VOID,FOLLOW_VOID_in_cast_disambiguation_token6338); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 961:25: -> text(value=$VOID.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VOID102!=null?VOID102.getText():null)));
                      }


                    }

                    }
                    break;
                case 76 :
                    // CSharp.g:962:5: VOLATILE
                    {
                    VOLATILE103=(Token)match(input,VOLATILE,FOLLOW_VOLATILE_in_cast_disambiguation_token6367); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 962:25: -> text(value=$VOLATILE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VOLATILE103!=null?VOLATILE103.getText():null)));
                      }


                    }

                    }
                    break;
                case 77 :
                    // CSharp.g:963:5: WHILE
                    {
                    WHILE104=(Token)match(input,WHILE,FOLLOW_WHILE_in_cast_disambiguation_token6392); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 963:25: -> text(value=$WHILE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (WHILE104!=null?WHILE104.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_disambiguation_token"


    public static class pre_increment_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "pre_increment_expression"
    // CSharp.g:966:1: pre_increment_expression : OP_INC expr= unary_expression -> preIncrementExpression(optr=$OP_INC.textexpression=expr);
    public final CSharp.pre_increment_expression_return pre_increment_expression() throws RecognitionException {
        CSharp.pre_increment_expression_return retval = new CSharp.pre_increment_expression_return();
        retval.start = input.LT(1);


        Token OP_INC105=null;
        CSharp.unary_expression_return expr =null;


        try {
            // CSharp.g:967:2: ( OP_INC expr= unary_expression -> preIncrementExpression(optr=$OP_INC.textexpression=expr))
            // CSharp.g:968:2: OP_INC expr= unary_expression
            {
            OP_INC105=(Token)match(input,OP_INC,FOLLOW_OP_INC_in_pre_increment_expression6429); if (state.failed) return retval;

            pushFollow(FOLLOW_unary_expression_in_pre_increment_expression6433);
            expr=unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 969:2: -> preIncrementExpression(optr=$OP_INC.textexpression=expr)
              {
                  retval.st = templateLib.getInstanceOf("preIncrementExpression",new STAttrMap().put("optr", (OP_INC105!=null?OP_INC105.getText():null)).put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pre_increment_expression"


    public static class pre_decrement_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "pre_decrement_expression"
    // CSharp.g:971:1: pre_decrement_expression : OP_DEC expr= unary_expression -> preDecrementExpression(optr=$OP_DEC.textexpression=expr);
    public final CSharp.pre_decrement_expression_return pre_decrement_expression() throws RecognitionException {
        CSharp.pre_decrement_expression_return retval = new CSharp.pre_decrement_expression_return();
        retval.start = input.LT(1);


        Token OP_DEC106=null;
        CSharp.unary_expression_return expr =null;


        try {
            // CSharp.g:972:2: ( OP_DEC expr= unary_expression -> preDecrementExpression(optr=$OP_DEC.textexpression=expr))
            // CSharp.g:973:2: OP_DEC expr= unary_expression
            {
            OP_DEC106=(Token)match(input,OP_DEC,FOLLOW_OP_DEC_in_pre_decrement_expression6459); if (state.failed) return retval;

            pushFollow(FOLLOW_unary_expression_in_pre_decrement_expression6463);
            expr=unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 974:2: -> preDecrementExpression(optr=$OP_DEC.textexpression=expr)
              {
                  retval.st = templateLib.getInstanceOf("preDecrementExpression",new STAttrMap().put("optr", (OP_DEC106!=null?OP_DEC106.getText():null)).put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pre_decrement_expression"


    public static class cast_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "cast_expression"
    // CSharp.g:976:1: cast_expression : OPEN_PARENS t= type CLOSE_PARENS uExpr= unary_expression -> castExpression(type=tunaryExpr=uExpr);
    public final CSharp.cast_expression_return cast_expression() throws RecognitionException {
        CSharp.cast_expression_return retval = new CSharp.cast_expression_return();
        retval.start = input.LT(1);


        CSharp.type_return t =null;

        CSharp.unary_expression_return uExpr =null;


        try {
            // CSharp.g:977:2: ( OPEN_PARENS t= type CLOSE_PARENS uExpr= unary_expression -> castExpression(type=tunaryExpr=uExpr))
            // CSharp.g:978:2: OPEN_PARENS t= type CLOSE_PARENS uExpr= unary_expression
            {
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_cast_expression6489); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_cast_expression6493);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_cast_expression6495); if (state.failed) return retval;

            pushFollow(FOLLOW_unary_expression_in_cast_expression6499);
            uExpr=unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 979:2: -> castExpression(type=tunaryExpr=uExpr)
              {
                  retval.st = templateLib.getInstanceOf("castExpression",new STAttrMap().put("type", t).put("unaryExpr", uExpr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expression"


    public static class multiplicative_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "multiplicative_expression"
    // CSharp.g:981:1: multiplicative_expression : lhs= unary_expression (rhs+= multiplicative_expression_Chld )* -> multiplicativeExpression(lhs=lhsrhs=$rhs);
    public final CSharp.multiplicative_expression_return multiplicative_expression() throws RecognitionException {
        CSharp.multiplicative_expression_return retval = new CSharp.multiplicative_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharp.unary_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharp.g:982:2: (lhs= unary_expression (rhs+= multiplicative_expression_Chld )* -> multiplicativeExpression(lhs=lhsrhs=$rhs))
            // CSharp.g:983:2: lhs= unary_expression (rhs+= multiplicative_expression_Chld )*
            {
            pushFollow(FOLLOW_unary_expression_in_multiplicative_expression6527);
            lhs=unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:983:23: (rhs+= multiplicative_expression_Chld )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==DIV||LA65_0==PERCENT||LA65_0==STAR) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // CSharp.g:983:24: rhs+= multiplicative_expression_Chld
            	    {
            	    pushFollow(FOLLOW_multiplicative_expression_Chld_in_multiplicative_expression6532);
            	    rhs=multiplicative_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 984:2: -> multiplicativeExpression(lhs=lhsrhs=$rhs)
              {
                  retval.st = templateLib.getInstanceOf("multiplicativeExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multiplicative_expression"


    public static class multiplicative_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "multiplicative_expression_Chld"
    // CSharp.g:987:1: multiplicative_expression_Chld : ( STAR rhs= unary_expression -> multiplicativeExpressionChld(optr=$STAR.textrhs=rhs)| DIV rhs= unary_expression -> multiplicativeExpressionChld(optr=$DIV.textrhs=rhs)| PERCENT rhs= unary_expression -> multiplicativeExpressionChld(optr=$PERCENTrhs=rhs));
    public final CSharp.multiplicative_expression_Chld_return multiplicative_expression_Chld() throws RecognitionException {
        CSharp.multiplicative_expression_Chld_return retval = new CSharp.multiplicative_expression_Chld_return();
        retval.start = input.LT(1);


        Token STAR107=null;
        Token DIV108=null;
        Token PERCENT109=null;
        CSharp.unary_expression_return rhs =null;


        try {
            // CSharp.g:988:2: ( STAR rhs= unary_expression -> multiplicativeExpressionChld(optr=$STAR.textrhs=rhs)| DIV rhs= unary_expression -> multiplicativeExpressionChld(optr=$DIV.textrhs=rhs)| PERCENT rhs= unary_expression -> multiplicativeExpressionChld(optr=$PERCENTrhs=rhs))
            int alt66=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt66=1;
                }
                break;
            case DIV:
                {
                alt66=2;
                }
                break;
            case PERCENT:
                {
                alt66=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;

            }

            switch (alt66) {
                case 1 :
                    // CSharp.g:989:2: STAR rhs= unary_expression
                    {
                    STAR107=(Token)match(input,STAR,FOLLOW_STAR_in_multiplicative_expression_Chld6560); if (state.failed) return retval;

                    pushFollow(FOLLOW_unary_expression_in_multiplicative_expression_Chld6565);
                    rhs=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 990:2: -> multiplicativeExpressionChld(optr=$STAR.textrhs=rhs)
                      {
                          retval.st = templateLib.getInstanceOf("multiplicativeExpressionChld",new STAttrMap().put("optr", (STAR107!=null?STAR107.getText():null)).put("rhs", rhs));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:991:3: DIV rhs= unary_expression
                    {
                    DIV108=(Token)match(input,DIV,FOLLOW_DIV_in_multiplicative_expression_Chld6583); if (state.failed) return retval;

                    pushFollow(FOLLOW_unary_expression_in_multiplicative_expression_Chld6588);
                    rhs=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 992:2: -> multiplicativeExpressionChld(optr=$DIV.textrhs=rhs)
                      {
                          retval.st = templateLib.getInstanceOf("multiplicativeExpressionChld",new STAttrMap().put("optr", (DIV108!=null?DIV108.getText():null)).put("rhs", rhs));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:993:3: PERCENT rhs= unary_expression
                    {
                    PERCENT109=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_multiplicative_expression_Chld6606); if (state.failed) return retval;

                    pushFollow(FOLLOW_unary_expression_in_multiplicative_expression_Chld6611);
                    rhs=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 994:2: -> multiplicativeExpressionChld(optr=$PERCENTrhs=rhs)
                      {
                          retval.st = templateLib.getInstanceOf("multiplicativeExpressionChld",new STAttrMap().put("optr", PERCENT109).put("rhs", rhs));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multiplicative_expression_Chld"


    public static class additive_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "additive_expression"
    // CSharp.g:996:1: additive_expression : lhs= multiplicative_expression (rhs+= additive_expression_Chld )* -> additiveExpression(lhs=lhsrhs=$rhs);
    public final CSharp.additive_expression_return additive_expression() throws RecognitionException {
        CSharp.additive_expression_return retval = new CSharp.additive_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharp.multiplicative_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharp.g:997:2: (lhs= multiplicative_expression (rhs+= additive_expression_Chld )* -> additiveExpression(lhs=lhsrhs=$rhs))
            // CSharp.g:998:2: lhs= multiplicative_expression (rhs+= additive_expression_Chld )*
            {
            pushFollow(FOLLOW_multiplicative_expression_in_additive_expression6639);
            lhs=multiplicative_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:998:32: (rhs+= additive_expression_Chld )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==MINUS||LA67_0==PLUS) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // CSharp.g:998:33: rhs+= additive_expression_Chld
            	    {
            	    pushFollow(FOLLOW_additive_expression_Chld_in_additive_expression6644);
            	    rhs=additive_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 999:2: -> additiveExpression(lhs=lhsrhs=$rhs)
              {
                  retval.st = templateLib.getInstanceOf("additiveExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "additive_expression"


    public static class additive_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "additive_expression_Chld"
    // CSharp.g:1002:1: additive_expression_Chld : ( PLUS rhs1= multiplicative_expression -> additiveExpressionChld(optr=$PLUS.textrhs=rhs1)| MINUS rhs2= multiplicative_expression -> additiveExpressionChld(optr=$MINUS.textrhs=rhs2));
    public final CSharp.additive_expression_Chld_return additive_expression_Chld() throws RecognitionException {
        CSharp.additive_expression_Chld_return retval = new CSharp.additive_expression_Chld_return();
        retval.start = input.LT(1);


        Token PLUS110=null;
        Token MINUS111=null;
        CSharp.multiplicative_expression_return rhs1 =null;

        CSharp.multiplicative_expression_return rhs2 =null;


        try {
            // CSharp.g:1003:2: ( PLUS rhs1= multiplicative_expression -> additiveExpressionChld(optr=$PLUS.textrhs=rhs1)| MINUS rhs2= multiplicative_expression -> additiveExpressionChld(optr=$MINUS.textrhs=rhs2))
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==PLUS) ) {
                alt68=1;
            }
            else if ( (LA68_0==MINUS) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;

            }
            switch (alt68) {
                case 1 :
                    // CSharp.g:1004:2: PLUS rhs1= multiplicative_expression
                    {
                    PLUS110=(Token)match(input,PLUS,FOLLOW_PLUS_in_additive_expression_Chld6672); if (state.failed) return retval;

                    pushFollow(FOLLOW_multiplicative_expression_in_additive_expression_Chld6677);
                    rhs1=multiplicative_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1005:2: -> additiveExpressionChld(optr=$PLUS.textrhs=rhs1)
                      {
                          retval.st = templateLib.getInstanceOf("additiveExpressionChld",new STAttrMap().put("optr", (PLUS110!=null?PLUS110.getText():null)).put("rhs", rhs1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1006:3: MINUS rhs2= multiplicative_expression
                    {
                    MINUS111=(Token)match(input,MINUS,FOLLOW_MINUS_in_additive_expression_Chld6694); if (state.failed) return retval;

                    pushFollow(FOLLOW_multiplicative_expression_in_additive_expression_Chld6699);
                    rhs2=multiplicative_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1007:2: -> additiveExpressionChld(optr=$MINUS.textrhs=rhs2)
                      {
                          retval.st = templateLib.getInstanceOf("additiveExpressionChld",new STAttrMap().put("optr", (MINUS111!=null?MINUS111.getText():null)).put("rhs", rhs2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "additive_expression_Chld"


    public static class shift_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "shift_expression"
    // CSharp.g:1010:1: shift_expression : lhs= additive_expression (rhs+= shift_expression_Chld )* -> shiftExpression(lhs=lhsrhs=rhs);
    public final CSharp.shift_expression_return shift_expression() throws RecognitionException {
        CSharp.shift_expression_return retval = new CSharp.shift_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharp.additive_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharp.g:1011:2: (lhs= additive_expression (rhs+= shift_expression_Chld )* -> shiftExpression(lhs=lhsrhs=rhs))
            // CSharp.g:1012:2: lhs= additive_expression (rhs+= shift_expression_Chld )*
            {
            pushFollow(FOLLOW_additive_expression_in_shift_expression6729);
            lhs=additive_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1012:26: (rhs+= shift_expression_Chld )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==GT) ) {
                    int LA69_2 = input.LA(2);

                    if ( (LA69_2==GT) ) {
                        alt69=1;
                    }


                }
                else if ( (LA69_0==OP_LEFT_SHIFT) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // CSharp.g:1012:27: rhs+= shift_expression_Chld
            	    {
            	    pushFollow(FOLLOW_shift_expression_Chld_in_shift_expression6734);
            	    rhs=shift_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1013:2: -> shiftExpression(lhs=lhsrhs=rhs)
              {
                  retval.st = templateLib.getInstanceOf("shiftExpression",new STAttrMap().put("lhs", lhs).put("rhs", rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "shift_expression"


    public static class shift_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "shift_expression_Chld"
    // CSharp.g:1016:1: shift_expression_Chld : ( OP_LEFT_SHIFT rhs1= additive_expression -> shiftExpressionChld(optr=$OP_LEFT_SHIFT.textrhs=rhs1)|rs= right_shift rhs2= additive_expression -> shiftExpressionChld(optr=rsrhs=rhs2));
    public final CSharp.shift_expression_Chld_return shift_expression_Chld() throws RecognitionException {
        CSharp.shift_expression_Chld_return retval = new CSharp.shift_expression_Chld_return();
        retval.start = input.LT(1);


        Token OP_LEFT_SHIFT112=null;
        CSharp.additive_expression_return rhs1 =null;

        CSharp.right_shift_return rs =null;

        CSharp.additive_expression_return rhs2 =null;


        try {
            // CSharp.g:1017:2: ( OP_LEFT_SHIFT rhs1= additive_expression -> shiftExpressionChld(optr=$OP_LEFT_SHIFT.textrhs=rhs1)|rs= right_shift rhs2= additive_expression -> shiftExpressionChld(optr=rsrhs=rhs2))
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==OP_LEFT_SHIFT) ) {
                alt70=1;
            }
            else if ( (LA70_0==GT) ) {
                alt70=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;

            }
            switch (alt70) {
                case 1 :
                    // CSharp.g:1018:2: OP_LEFT_SHIFT rhs1= additive_expression
                    {
                    OP_LEFT_SHIFT112=(Token)match(input,OP_LEFT_SHIFT,FOLLOW_OP_LEFT_SHIFT_in_shift_expression_Chld6762); if (state.failed) return retval;

                    pushFollow(FOLLOW_additive_expression_in_shift_expression_Chld6767);
                    rhs1=additive_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1019:2: -> shiftExpressionChld(optr=$OP_LEFT_SHIFT.textrhs=rhs1)
                      {
                          retval.st = templateLib.getInstanceOf("shiftExpressionChld",new STAttrMap().put("optr", (OP_LEFT_SHIFT112!=null?OP_LEFT_SHIFT112.getText():null)).put("rhs", rhs1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1020:3: rs= right_shift rhs2= additive_expression
                    {
                    pushFollow(FOLLOW_right_shift_in_shift_expression_Chld6786);
                    rs=right_shift();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_additive_expression_in_shift_expression_Chld6791);
                    rhs2=additive_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1021:2: -> shiftExpressionChld(optr=rsrhs=rhs2)
                      {
                          retval.st = templateLib.getInstanceOf("shiftExpressionChld",new STAttrMap().put("optr", rs).put("rhs", rhs2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "shift_expression_Chld"


    public static class relational_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "relational_expression"
    // CSharp.g:1024:1: relational_expression : lhs= shift_expression (rhs+= relational_expression_Chld )* -> relationalExpression(lhs=lhsrhs=$rhs);
    public final CSharp.relational_expression_return relational_expression() throws RecognitionException {
        CSharp.relational_expression_return retval = new CSharp.relational_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharp.shift_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharp.g:1025:3: (lhs= shift_expression (rhs+= relational_expression_Chld )* -> relationalExpression(lhs=lhsrhs=$rhs))
            // CSharp.g:1026:3: lhs= shift_expression (rhs+= relational_expression_Chld )*
            {
            pushFollow(FOLLOW_shift_expression_in_relational_expression6821);
            lhs=shift_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1026:25: (rhs+= relational_expression_Chld )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==AS||LA71_0==GT||LA71_0==IS||LA71_0==LT||LA71_0==OP_GE||LA71_0==OP_LE) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // CSharp.g:1026:26: rhs+= relational_expression_Chld
            	    {
            	    pushFollow(FOLLOW_relational_expression_Chld_in_relational_expression6827);
            	    rhs=relational_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1027:3: -> relationalExpression(lhs=lhsrhs=$rhs)
              {
                  retval.st = templateLib.getInstanceOf("relationalExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "relational_expression"


    public static class relational_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "relational_expression_Chld"
    // CSharp.g:1030:1: relational_expression_Chld : ( LT rhs1= shift_expression -> relationalExpressionChld(optr=$LT.textrhs=rhs1)| GT rhs2= shift_expression -> relationalExpressionChld(optr=$GT.textrhs=rhs2)| OP_LE rhs3= shift_expression -> relationalExpressionChld(optr=$OP_LE.textrhs=rhs3)| OP_GE rhs4= shift_expression -> relationalExpressionChld(optr=$OP_GE.textrhs=rhs4)| IS rhs5= isType -> relationalExpressionChld(optr=$IS.textrhs=rhs5)| AS rhs6= type -> relationalExpressionChld(optr=$AS.textrhs=rhs6));
    public final CSharp.relational_expression_Chld_return relational_expression_Chld() throws RecognitionException {
        CSharp.relational_expression_Chld_return retval = new CSharp.relational_expression_Chld_return();
        retval.start = input.LT(1);


        Token LT113=null;
        Token GT114=null;
        Token OP_LE115=null;
        Token OP_GE116=null;
        Token IS117=null;
        Token AS118=null;
        CSharp.shift_expression_return rhs1 =null;

        CSharp.shift_expression_return rhs2 =null;

        CSharp.shift_expression_return rhs3 =null;

        CSharp.shift_expression_return rhs4 =null;

        CSharp.isType_return rhs5 =null;

        CSharp.type_return rhs6 =null;


        try {
            // CSharp.g:1031:2: ( LT rhs1= shift_expression -> relationalExpressionChld(optr=$LT.textrhs=rhs1)| GT rhs2= shift_expression -> relationalExpressionChld(optr=$GT.textrhs=rhs2)| OP_LE rhs3= shift_expression -> relationalExpressionChld(optr=$OP_LE.textrhs=rhs3)| OP_GE rhs4= shift_expression -> relationalExpressionChld(optr=$OP_GE.textrhs=rhs4)| IS rhs5= isType -> relationalExpressionChld(optr=$IS.textrhs=rhs5)| AS rhs6= type -> relationalExpressionChld(optr=$AS.textrhs=rhs6))
            int alt72=6;
            switch ( input.LA(1) ) {
            case LT:
                {
                alt72=1;
                }
                break;
            case GT:
                {
                alt72=2;
                }
                break;
            case OP_LE:
                {
                alt72=3;
                }
                break;
            case OP_GE:
                {
                alt72=4;
                }
                break;
            case IS:
                {
                alt72=5;
                }
                break;
            case AS:
                {
                alt72=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;

            }

            switch (alt72) {
                case 1 :
                    // CSharp.g:1032:2: LT rhs1= shift_expression
                    {
                    LT113=(Token)match(input,LT,FOLLOW_LT_in_relational_expression_Chld6874); if (state.failed) return retval;

                    pushFollow(FOLLOW_shift_expression_in_relational_expression_Chld6878);
                    rhs1=shift_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1033:2: -> relationalExpressionChld(optr=$LT.textrhs=rhs1)
                      {
                          retval.st = templateLib.getInstanceOf("relationalExpressionChld",new STAttrMap().put("optr", (LT113!=null?LT113.getText():null)).put("rhs", rhs1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1034:5: GT rhs2= shift_expression
                    {
                    GT114=(Token)match(input,GT,FOLLOW_GT_in_relational_expression_Chld6897); if (state.failed) return retval;

                    pushFollow(FOLLOW_shift_expression_in_relational_expression_Chld6901);
                    rhs2=shift_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1035:3: -> relationalExpressionChld(optr=$GT.textrhs=rhs2)
                      {
                          retval.st = templateLib.getInstanceOf("relationalExpressionChld",new STAttrMap().put("optr", (GT114!=null?GT114.getText():null)).put("rhs", rhs2));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:1036:5: OP_LE rhs3= shift_expression
                    {
                    OP_LE115=(Token)match(input,OP_LE,FOLLOW_OP_LE_in_relational_expression_Chld6921); if (state.failed) return retval;

                    pushFollow(FOLLOW_shift_expression_in_relational_expression_Chld6925);
                    rhs3=shift_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1037:3: -> relationalExpressionChld(optr=$OP_LE.textrhs=rhs3)
                      {
                          retval.st = templateLib.getInstanceOf("relationalExpressionChld",new STAttrMap().put("optr", (OP_LE115!=null?OP_LE115.getText():null)).put("rhs", rhs3));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:1038:5: OP_GE rhs4= shift_expression
                    {
                    OP_GE116=(Token)match(input,OP_GE,FOLLOW_OP_GE_in_relational_expression_Chld6945); if (state.failed) return retval;

                    pushFollow(FOLLOW_shift_expression_in_relational_expression_Chld6949);
                    rhs4=shift_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1039:3: -> relationalExpressionChld(optr=$OP_GE.textrhs=rhs4)
                      {
                          retval.st = templateLib.getInstanceOf("relationalExpressionChld",new STAttrMap().put("optr", (OP_GE116!=null?OP_GE116.getText():null)).put("rhs", rhs4));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:1040:5: IS rhs5= isType
                    {
                    IS117=(Token)match(input,IS,FOLLOW_IS_in_relational_expression_Chld6969); if (state.failed) return retval;

                    pushFollow(FOLLOW_isType_in_relational_expression_Chld6973);
                    rhs5=isType();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1041:3: -> relationalExpressionChld(optr=$IS.textrhs=rhs5)
                      {
                          retval.st = templateLib.getInstanceOf("relationalExpressionChld",new STAttrMap().put("optr", (IS117!=null?IS117.getText():null)).put("rhs", rhs5));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:1042:5: AS rhs6= type
                    {
                    AS118=(Token)match(input,AS,FOLLOW_AS_in_relational_expression_Chld6993); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_relational_expression_Chld6997);
                    rhs6=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1043:3: -> relationalExpressionChld(optr=$AS.textrhs=rhs6)
                      {
                          retval.st = templateLib.getInstanceOf("relationalExpressionChld",new STAttrMap().put("optr", (AS118!=null?AS118.getText():null)).put("rhs", rhs6));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "relational_expression_Chld"


    public static class scan_for_shift_generic_precedence_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "scan_for_shift_generic_precedence"
    // CSharp.g:1047:1: scan_for_shift_generic_precedence : IDENTIFIER LT type ( COMMA type )* GT shift_disambiguation_token ;
    public final CSharp.scan_for_shift_generic_precedence_return scan_for_shift_generic_precedence() throws RecognitionException {
        CSharp.scan_for_shift_generic_precedence_return retval = new CSharp.scan_for_shift_generic_precedence_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:1048:3: ( IDENTIFIER LT type ( COMMA type )* GT shift_disambiguation_token )
            // CSharp.g:1048:5: IDENTIFIER LT type ( COMMA type )* GT shift_disambiguation_token
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_scan_for_shift_generic_precedence7044); if (state.failed) return retval;

            match(input,LT,FOLLOW_LT_in_scan_for_shift_generic_precedence7046); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_scan_for_shift_generic_precedence7048);
            type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1048:24: ( COMMA type )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // CSharp.g:1048:25: COMMA type
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_scan_for_shift_generic_precedence7051); if (state.failed) return retval;

            	    pushFollow(FOLLOW_type_in_scan_for_shift_generic_precedence7053);
            	    type();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            match(input,GT,FOLLOW_GT_in_scan_for_shift_generic_precedence7057); if (state.failed) return retval;

            pushFollow(FOLLOW_shift_disambiguation_token_in_scan_for_shift_generic_precedence7059);
            shift_disambiguation_token();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "scan_for_shift_generic_precedence"


    public static class shift_disambiguation_token_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "shift_disambiguation_token"
    // CSharp.g:1053:1: shift_disambiguation_token : ( OPEN_PARENS -> text(value=$OPEN_PARENS.text)| CLOSE_PARENS -> text(value=$CLOSE_PARENS.text)| CLOSE_BRACKET -> text(value=$CLOSE_BRACKET.text)| COLON -> text(value=$COLON.text)| SEMICOLON -> text(value=$SEMICOLON.text)| COMMA -> text(value=$COMMA.text)| DOT -> text(value=$DOT.text)| INTERR -> text(value=\"\")| OP_EQ -> text(value=$OP_EQ.text)| OP_NE -> text(value=$OP_NE.text)| GT -> text(value=$GT.text));
    public final CSharp.shift_disambiguation_token_return shift_disambiguation_token() throws RecognitionException {
        CSharp.shift_disambiguation_token_return retval = new CSharp.shift_disambiguation_token_return();
        retval.start = input.LT(1);


        Token OPEN_PARENS119=null;
        Token CLOSE_PARENS120=null;
        Token CLOSE_BRACKET121=null;
        Token COLON122=null;
        Token SEMICOLON123=null;
        Token COMMA124=null;
        Token DOT125=null;
        Token OP_EQ126=null;
        Token OP_NE127=null;
        Token GT128=null;

        try {
            // CSharp.g:1054:3: ( OPEN_PARENS -> text(value=$OPEN_PARENS.text)| CLOSE_PARENS -> text(value=$CLOSE_PARENS.text)| CLOSE_BRACKET -> text(value=$CLOSE_BRACKET.text)| COLON -> text(value=$COLON.text)| SEMICOLON -> text(value=$SEMICOLON.text)| COMMA -> text(value=$COMMA.text)| DOT -> text(value=$DOT.text)| INTERR -> text(value=\"\")| OP_EQ -> text(value=$OP_EQ.text)| OP_NE -> text(value=$OP_NE.text)| GT -> text(value=$GT.text))
            int alt74=11;
            switch ( input.LA(1) ) {
            case OPEN_PARENS:
                {
                alt74=1;
                }
                break;
            case CLOSE_PARENS:
                {
                alt74=2;
                }
                break;
            case CLOSE_BRACKET:
                {
                alt74=3;
                }
                break;
            case COLON:
                {
                alt74=4;
                }
                break;
            case SEMICOLON:
                {
                alt74=5;
                }
                break;
            case COMMA:
                {
                alt74=6;
                }
                break;
            case DOT:
                {
                alt74=7;
                }
                break;
            case INTERR:
                {
                alt74=8;
                }
                break;
            case OP_EQ:
                {
                alt74=9;
                }
                break;
            case OP_NE:
                {
                alt74=10;
                }
                break;
            case GT:
                {
                alt74=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;

            }

            switch (alt74) {
                case 1 :
                    // CSharp.g:1055:3: OPEN_PARENS
                    {
                    OPEN_PARENS119=(Token)match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_shift_disambiguation_token7077); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1055:24: -> text(value=$OPEN_PARENS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OPEN_PARENS119!=null?OPEN_PARENS119.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1056:5: CLOSE_PARENS
                    {
                    CLOSE_PARENS120=(Token)match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_shift_disambiguation_token7100); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1056:24: -> text(value=$CLOSE_PARENS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CLOSE_PARENS120!=null?CLOSE_PARENS120.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:1057:5: CLOSE_BRACKET
                    {
                    CLOSE_BRACKET121=(Token)match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_shift_disambiguation_token7120); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1057:24: -> text(value=$CLOSE_BRACKET.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CLOSE_BRACKET121!=null?CLOSE_BRACKET121.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:1058:5: COLON
                    {
                    COLON122=(Token)match(input,COLON,FOLLOW_COLON_in_shift_disambiguation_token7139); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1058:24: -> text(value=$COLON.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (COLON122!=null?COLON122.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:1059:5: SEMICOLON
                    {
                    SEMICOLON123=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_shift_disambiguation_token7166); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1059:24: -> text(value=$SEMICOLON.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEMICOLON123!=null?SEMICOLON123.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:1060:5: COMMA
                    {
                    COMMA124=(Token)match(input,COMMA,FOLLOW_COMMA_in_shift_disambiguation_token7189); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1060:24: -> text(value=$COMMA.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (COMMA124!=null?COMMA124.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:1061:5: DOT
                    {
                    DOT125=(Token)match(input,DOT,FOLLOW_DOT_in_shift_disambiguation_token7216); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1061:24: -> text(value=$DOT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DOT125!=null?DOT125.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:1062:5: INTERR
                    {
                    match(input,INTERR,FOLLOW_INTERR_in_shift_disambiguation_token7245); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1062:24: -> text(value=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:1063:5: OP_EQ
                    {
                    OP_EQ126=(Token)match(input,OP_EQ,FOLLOW_OP_EQ_in_shift_disambiguation_token7271); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1063:24: -> text(value=$OP_EQ.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_EQ126!=null?OP_EQ126.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharp.g:1064:5: OP_NE
                    {
                    OP_NE127=(Token)match(input,OP_NE,FOLLOW_OP_NE_in_shift_disambiguation_token7298); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1064:24: -> text(value=$OP_NE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_NE127!=null?OP_NE127.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharp.g:1065:5: GT
                    {
                    GT128=(Token)match(input,GT,FOLLOW_GT_in_shift_disambiguation_token7325); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1065:24: -> text(value=$GT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (GT128!=null?GT128.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "shift_disambiguation_token"


    public static class isType_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "isType"
    // CSharp.g:1069:1: isType : typ= non_nullable_value_type ( ( INTERR is_disambiguation_token )=> INTERR )? -> isType(type=typopt=\"\");
    public final CSharp.isType_return isType() throws RecognitionException {
        CSharp.isType_return retval = new CSharp.isType_return();
        retval.start = input.LT(1);


        CSharp.non_nullable_value_type_return typ =null;


        try {
            // CSharp.g:1070:3: (typ= non_nullable_value_type ( ( INTERR is_disambiguation_token )=> INTERR )? -> isType(type=typopt=\"\"))
            // CSharp.g:1071:3: typ= non_nullable_value_type ( ( INTERR is_disambiguation_token )=> INTERR )?
            {
            pushFollow(FOLLOW_non_nullable_value_type_in_isType7368);
            typ=non_nullable_value_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1071:31: ( ( INTERR is_disambiguation_token )=> INTERR )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==INTERR) ) {
                int LA75_1 = input.LA(2);

                if ( (synpred8_CSharp()) ) {
                    alt75=1;
                }
            }
            switch (alt75) {
                case 1 :
                    // CSharp.g:1071:33: ( INTERR is_disambiguation_token )=> INTERR
                    {
                    match(input,INTERR,FOLLOW_INTERR_in_isType7380); if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1072:3: -> isType(type=typopt=\"\")
              {
                  retval.st = templateLib.getInstanceOf("isType",new STAttrMap().put("type", typ).put("opt", ""));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "isType"


    public static class is_disambiguation_token_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "is_disambiguation_token"
    // CSharp.g:1074:1: is_disambiguation_token : ( CLOSE_PARENS -> text(value=$CLOSE_PARENS.text)| OP_AND -> text(value=$OP_AND.text)| OP_OR -> text(value=$OP_OR.text)| INTERR -> text(value=\"\"));
    public final CSharp.is_disambiguation_token_return is_disambiguation_token() throws RecognitionException {
        CSharp.is_disambiguation_token_return retval = new CSharp.is_disambiguation_token_return();
        retval.start = input.LT(1);


        Token CLOSE_PARENS129=null;
        Token OP_AND130=null;
        Token OP_OR131=null;

        try {
            // CSharp.g:1075:3: ( CLOSE_PARENS -> text(value=$CLOSE_PARENS.text)| OP_AND -> text(value=$OP_AND.text)| OP_OR -> text(value=$OP_OR.text)| INTERR -> text(value=\"\"))
            int alt76=4;
            switch ( input.LA(1) ) {
            case CLOSE_PARENS:
                {
                alt76=1;
                }
                break;
            case OP_AND:
                {
                alt76=2;
                }
                break;
            case OP_OR:
                {
                alt76=3;
                }
                break;
            case INTERR:
                {
                alt76=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;

            }

            switch (alt76) {
                case 1 :
                    // CSharp.g:1076:3: CLOSE_PARENS
                    {
                    CLOSE_PARENS129=(Token)match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_is_disambiguation_token7411); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1076:23: -> text(value=$CLOSE_PARENS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CLOSE_PARENS129!=null?CLOSE_PARENS129.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1077:5: OP_AND
                    {
                    OP_AND130=(Token)match(input,OP_AND,FOLLOW_OP_AND_in_is_disambiguation_token7432); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1077:23: -> text(value=$OP_AND.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_AND130!=null?OP_AND130.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:1078:5: OP_OR
                    {
                    OP_OR131=(Token)match(input,OP_OR,FOLLOW_OP_OR_in_is_disambiguation_token7457); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1078:23: -> text(value=$OP_OR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_OR131!=null?OP_OR131.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:1079:5: INTERR
                    {
                    match(input,INTERR,FOLLOW_INTERR_in_is_disambiguation_token7483); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1079:23: -> text(value=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "is_disambiguation_token"


    public static class equality_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "equality_expression"
    // CSharp.g:1082:1: equality_expression : lhs= relational_expression (rhs+= equality_expression_Chld )* -> equalityExpression(lhs=lhsrhs=$rhs);
    public final CSharp.equality_expression_return equality_expression() throws RecognitionException {
        CSharp.equality_expression_return retval = new CSharp.equality_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharp.relational_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharp.g:1083:2: (lhs= relational_expression (rhs+= equality_expression_Chld )* -> equalityExpression(lhs=lhsrhs=$rhs))
            // CSharp.g:1084:2: lhs= relational_expression (rhs+= equality_expression_Chld )*
            {
            pushFollow(FOLLOW_relational_expression_in_equality_expression7519);
            lhs=relational_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1084:28: (rhs+= equality_expression_Chld )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==OP_EQ||LA77_0==OP_NE) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // CSharp.g:1084:29: rhs+= equality_expression_Chld
            	    {
            	    pushFollow(FOLLOW_equality_expression_Chld_in_equality_expression7524);
            	    rhs=equality_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1085:2: -> equalityExpression(lhs=lhsrhs=$rhs)
              {
                  retval.st = templateLib.getInstanceOf("equalityExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "equality_expression"


    public static class equality_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "equality_expression_Chld"
    // CSharp.g:1088:1: equality_expression_Chld : ( OP_EQ rhs1= relational_expression -> equalityExpressionChld(optr=$OP_EQ.textrhs=rhs1)| OP_NE rhs2= relational_expression -> equalityExpressionChld(optr=$OP_NE.textrhs=rhs2));
    public final CSharp.equality_expression_Chld_return equality_expression_Chld() throws RecognitionException {
        CSharp.equality_expression_Chld_return retval = new CSharp.equality_expression_Chld_return();
        retval.start = input.LT(1);


        Token OP_EQ132=null;
        Token OP_NE133=null;
        CSharp.relational_expression_return rhs1 =null;

        CSharp.relational_expression_return rhs2 =null;


        try {
            // CSharp.g:1089:2: ( OP_EQ rhs1= relational_expression -> equalityExpressionChld(optr=$OP_EQ.textrhs=rhs1)| OP_NE rhs2= relational_expression -> equalityExpressionChld(optr=$OP_NE.textrhs=rhs2))
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==OP_EQ) ) {
                alt78=1;
            }
            else if ( (LA78_0==OP_NE) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;

            }
            switch (alt78) {
                case 1 :
                    // CSharp.g:1090:2: OP_EQ rhs1= relational_expression
                    {
                    OP_EQ132=(Token)match(input,OP_EQ,FOLLOW_OP_EQ_in_equality_expression_Chld7552); if (state.failed) return retval;

                    pushFollow(FOLLOW_relational_expression_in_equality_expression_Chld7557);
                    rhs1=relational_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1091:2: -> equalityExpressionChld(optr=$OP_EQ.textrhs=rhs1)
                      {
                          retval.st = templateLib.getInstanceOf("equalityExpressionChld",new STAttrMap().put("optr", (OP_EQ132!=null?OP_EQ132.getText():null)).put("rhs", rhs1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1092:3: OP_NE rhs2= relational_expression
                    {
                    OP_NE133=(Token)match(input,OP_NE,FOLLOW_OP_NE_in_equality_expression_Chld7574); if (state.failed) return retval;

                    pushFollow(FOLLOW_relational_expression_in_equality_expression_Chld7579);
                    rhs2=relational_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1093:2: -> equalityExpressionChld(optr=$OP_NE.textrhs=rhs2)
                      {
                          retval.st = templateLib.getInstanceOf("equalityExpressionChld",new STAttrMap().put("optr", (OP_NE133!=null?OP_NE133.getText():null)).put("rhs", rhs2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "equality_expression_Chld"


    public static class and_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "and_expression"
    // CSharp.g:1095:1: and_expression : lhs= equality_expression (rhs+= and_expression_Chld )* -> andExpression(lhs=lhsrhs=$rhs);
    public final CSharp.and_expression_return and_expression() throws RecognitionException {
        CSharp.and_expression_return retval = new CSharp.and_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharp.equality_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharp.g:1096:3: (lhs= equality_expression (rhs+= and_expression_Chld )* -> andExpression(lhs=lhsrhs=$rhs))
            // CSharp.g:1097:3: lhs= equality_expression (rhs+= and_expression_Chld )*
            {
            pushFollow(FOLLOW_equality_expression_in_and_expression7609);
            lhs=equality_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1097:27: (rhs+= and_expression_Chld )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==AMP) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // CSharp.g:1097:29: rhs+= and_expression_Chld
            	    {
            	    pushFollow(FOLLOW_and_expression_Chld_in_and_expression7615);
            	    rhs=and_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1098:3: -> andExpression(lhs=lhsrhs=$rhs)
              {
                  retval.st = templateLib.getInstanceOf("andExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "and_expression"


    public static class and_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "and_expression_Chld"
    // CSharp.g:1101:1: and_expression_Chld : AMP rhs= equality_expression -> andExpressionChld(optr=$AMP.textrhs=rhs);
    public final CSharp.and_expression_Chld_return and_expression_Chld() throws RecognitionException {
        CSharp.and_expression_Chld_return retval = new CSharp.and_expression_Chld_return();
        retval.start = input.LT(1);


        Token AMP134=null;
        CSharp.equality_expression_return rhs =null;


        try {
            // CSharp.g:1102:3: ( AMP rhs= equality_expression -> andExpressionChld(optr=$AMP.textrhs=rhs))
            // CSharp.g:1103:3: AMP rhs= equality_expression
            {
            AMP134=(Token)match(input,AMP,FOLLOW_AMP_in_and_expression_Chld7648); if (state.failed) return retval;

            pushFollow(FOLLOW_equality_expression_in_and_expression_Chld7652);
            rhs=equality_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1104:3: -> andExpressionChld(optr=$AMP.textrhs=rhs)
              {
                  retval.st = templateLib.getInstanceOf("andExpressionChld",new STAttrMap().put("optr", (AMP134!=null?AMP134.getText():null)).put("rhs", rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "and_expression_Chld"


    public static class exclusive_or_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "exclusive_or_expression"
    // CSharp.g:1107:1: exclusive_or_expression : lhs= and_expression (rhs+= exclusive_or_expression_Chld )* -> exclusiveOrExpression(lhs=lhsrhs=$rhs);
    public final CSharp.exclusive_or_expression_return exclusive_or_expression() throws RecognitionException {
        CSharp.exclusive_or_expression_return retval = new CSharp.exclusive_or_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharp.and_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharp.g:1108:3: (lhs= and_expression (rhs+= exclusive_or_expression_Chld )* -> exclusiveOrExpression(lhs=lhsrhs=$rhs))
            // CSharp.g:1109:3: lhs= and_expression (rhs+= exclusive_or_expression_Chld )*
            {
            pushFollow(FOLLOW_and_expression_in_exclusive_or_expression7687);
            lhs=and_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1109:22: (rhs+= exclusive_or_expression_Chld )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==CARET) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // CSharp.g:1109:23: rhs+= exclusive_or_expression_Chld
            	    {
            	    pushFollow(FOLLOW_exclusive_or_expression_Chld_in_exclusive_or_expression7692);
            	    rhs=exclusive_or_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1110:3: -> exclusiveOrExpression(lhs=lhsrhs=$rhs)
              {
                  retval.st = templateLib.getInstanceOf("exclusiveOrExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exclusive_or_expression"


    public static class exclusive_or_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "exclusive_or_expression_Chld"
    // CSharp.g:1113:1: exclusive_or_expression_Chld : CARET rhs= and_expression -> exclusiveOrExpressionChld(optr=$CARET.textrhs=rhs);
    public final CSharp.exclusive_or_expression_Chld_return exclusive_or_expression_Chld() throws RecognitionException {
        CSharp.exclusive_or_expression_Chld_return retval = new CSharp.exclusive_or_expression_Chld_return();
        retval.start = input.LT(1);


        Token CARET135=null;
        CSharp.and_expression_return rhs =null;


        try {
            // CSharp.g:1114:3: ( CARET rhs= and_expression -> exclusiveOrExpressionChld(optr=$CARET.textrhs=rhs))
            // CSharp.g:1115:3: CARET rhs= and_expression
            {
            CARET135=(Token)match(input,CARET,FOLLOW_CARET_in_exclusive_or_expression_Chld7725); if (state.failed) return retval;

            pushFollow(FOLLOW_and_expression_in_exclusive_or_expression_Chld7729);
            rhs=and_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1116:3: -> exclusiveOrExpressionChld(optr=$CARET.textrhs=rhs)
              {
                  retval.st = templateLib.getInstanceOf("exclusiveOrExpressionChld",new STAttrMap().put("optr", (CARET135!=null?CARET135.getText():null)).put("rhs", rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exclusive_or_expression_Chld"


    public static class inclusive_or_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "inclusive_or_expression"
    // CSharp.g:1119:1: inclusive_or_expression : lhs= exclusive_or_expression (rhs+= inclusive_or_expression_Chld )* -> inclusiveOrExpression(lhs=lhsrhs=$rhs);
    public final CSharp.inclusive_or_expression_return inclusive_or_expression() throws RecognitionException {
        CSharp.inclusive_or_expression_return retval = new CSharp.inclusive_or_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharp.exclusive_or_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharp.g:1120:2: (lhs= exclusive_or_expression (rhs+= inclusive_or_expression_Chld )* -> inclusiveOrExpression(lhs=lhsrhs=$rhs))
            // CSharp.g:1121:3: lhs= exclusive_or_expression (rhs+= inclusive_or_expression_Chld )*
            {
            pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression7763);
            lhs=exclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1121:31: (rhs+= inclusive_or_expression_Chld )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==BITWISE_OR) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // CSharp.g:1121:32: rhs+= inclusive_or_expression_Chld
            	    {
            	    pushFollow(FOLLOW_inclusive_or_expression_Chld_in_inclusive_or_expression7768);
            	    rhs=inclusive_or_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1122:3: -> inclusiveOrExpression(lhs=lhsrhs=$rhs)
              {
                  retval.st = templateLib.getInstanceOf("inclusiveOrExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inclusive_or_expression"


    public static class inclusive_or_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "inclusive_or_expression_Chld"
    // CSharp.g:1125:1: inclusive_or_expression_Chld : BITWISE_OR rhs= exclusive_or_expression -> inclusiveOrExpressionChld(optr=$BITWISE_OR.textrhs=rhs);
    public final CSharp.inclusive_or_expression_Chld_return inclusive_or_expression_Chld() throws RecognitionException {
        CSharp.inclusive_or_expression_Chld_return retval = new CSharp.inclusive_or_expression_Chld_return();
        retval.start = input.LT(1);


        Token BITWISE_OR136=null;
        CSharp.exclusive_or_expression_return rhs =null;


        try {
            // CSharp.g:1126:3: ( BITWISE_OR rhs= exclusive_or_expression -> inclusiveOrExpressionChld(optr=$BITWISE_OR.textrhs=rhs))
            // CSharp.g:1127:3: BITWISE_OR rhs= exclusive_or_expression
            {
            BITWISE_OR136=(Token)match(input,BITWISE_OR,FOLLOW_BITWISE_OR_in_inclusive_or_expression_Chld7801); if (state.failed) return retval;

            pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression_Chld7805);
            rhs=exclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1128:3: -> inclusiveOrExpressionChld(optr=$BITWISE_OR.textrhs=rhs)
              {
                  retval.st = templateLib.getInstanceOf("inclusiveOrExpressionChld",new STAttrMap().put("optr", (BITWISE_OR136!=null?BITWISE_OR136.getText():null)).put("rhs", rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inclusive_or_expression_Chld"


    public static class conditional_and_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "conditional_and_expression"
    // CSharp.g:1131:1: conditional_and_expression : lhs= inclusive_or_expression (rhs+= conditional_and_expression_Chld )* -> conditionalAndExpression(lhs=lhsrhs=$rhs);
    public final CSharp.conditional_and_expression_return conditional_and_expression() throws RecognitionException {
        CSharp.conditional_and_expression_return retval = new CSharp.conditional_and_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharp.inclusive_or_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharp.g:1132:2: (lhs= inclusive_or_expression (rhs+= conditional_and_expression_Chld )* -> conditionalAndExpression(lhs=lhsrhs=$rhs))
            // CSharp.g:1133:3: lhs= inclusive_or_expression (rhs+= conditional_and_expression_Chld )*
            {
            pushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression7841);
            lhs=inclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1133:31: (rhs+= conditional_and_expression_Chld )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==OP_AND) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // CSharp.g:1133:32: rhs+= conditional_and_expression_Chld
            	    {
            	    pushFollow(FOLLOW_conditional_and_expression_Chld_in_conditional_and_expression7846);
            	    rhs=conditional_and_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1134:3: -> conditionalAndExpression(lhs=lhsrhs=$rhs)
              {
                  retval.st = templateLib.getInstanceOf("conditionalAndExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conditional_and_expression"


    public static class conditional_and_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "conditional_and_expression_Chld"
    // CSharp.g:1137:1: conditional_and_expression_Chld : OP_AND rhs= inclusive_or_expression -> conditionalAndExpressionChld(optr=$OP_AND.textrhs=rhs);
    public final CSharp.conditional_and_expression_Chld_return conditional_and_expression_Chld() throws RecognitionException {
        CSharp.conditional_and_expression_Chld_return retval = new CSharp.conditional_and_expression_Chld_return();
        retval.start = input.LT(1);


        Token OP_AND137=null;
        CSharp.inclusive_or_expression_return rhs =null;


        try {
            // CSharp.g:1138:3: ( OP_AND rhs= inclusive_or_expression -> conditionalAndExpressionChld(optr=$OP_AND.textrhs=rhs))
            // CSharp.g:1139:3: OP_AND rhs= inclusive_or_expression
            {
            OP_AND137=(Token)match(input,OP_AND,FOLLOW_OP_AND_in_conditional_and_expression_Chld7879); if (state.failed) return retval;

            pushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression_Chld7883);
            rhs=inclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1140:3: -> conditionalAndExpressionChld(optr=$OP_AND.textrhs=rhs)
              {
                  retval.st = templateLib.getInstanceOf("conditionalAndExpressionChld",new STAttrMap().put("optr", (OP_AND137!=null?OP_AND137.getText():null)).put("rhs", rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conditional_and_expression_Chld"


    public static class conditional_or_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "conditional_or_expression"
    // CSharp.g:1142:1: conditional_or_expression : lhs= conditional_and_expression (rhs+= conditional_or_expression_Chld )* -> conditionalOrExpression(lhs=lhsrhs=$rhs);
    public final CSharp.conditional_or_expression_return conditional_or_expression() throws RecognitionException {
        CSharp.conditional_or_expression_return retval = new CSharp.conditional_or_expression_return();
        retval.start = input.LT(1);


        List list_rhs=null;
        CSharp.conditional_and_expression_return lhs =null;

        RuleReturnScope rhs = null;
        try {
            // CSharp.g:1143:2: (lhs= conditional_and_expression (rhs+= conditional_or_expression_Chld )* -> conditionalOrExpression(lhs=lhsrhs=$rhs))
            // CSharp.g:1144:3: lhs= conditional_and_expression (rhs+= conditional_or_expression_Chld )*
            {
            pushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression7914);
            lhs=conditional_and_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1144:34: (rhs+= conditional_or_expression_Chld )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==OP_OR) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // CSharp.g:1144:35: rhs+= conditional_or_expression_Chld
            	    {
            	    pushFollow(FOLLOW_conditional_or_expression_Chld_in_conditional_or_expression7919);
            	    rhs=conditional_or_expression_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rhs==null) list_rhs=new ArrayList();
            	    list_rhs.add(rhs.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1145:3: -> conditionalOrExpression(lhs=lhsrhs=$rhs)
              {
                  retval.st = templateLib.getInstanceOf("conditionalOrExpression",new STAttrMap().put("lhs", lhs).put("rhs", list_rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conditional_or_expression"


    public static class conditional_or_expression_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "conditional_or_expression_Chld"
    // CSharp.g:1148:1: conditional_or_expression_Chld : OP_OR rhs= conditional_and_expression -> conditionalOrExpressionChld(optr=$OP_OR.textrhs=rhs);
    public final CSharp.conditional_or_expression_Chld_return conditional_or_expression_Chld() throws RecognitionException {
        CSharp.conditional_or_expression_Chld_return retval = new CSharp.conditional_or_expression_Chld_return();
        retval.start = input.LT(1);


        Token OP_OR138=null;
        CSharp.conditional_and_expression_return rhs =null;


        try {
            // CSharp.g:1149:3: ( OP_OR rhs= conditional_and_expression -> conditionalOrExpressionChld(optr=$OP_OR.textrhs=rhs))
            // CSharp.g:1150:3: OP_OR rhs= conditional_and_expression
            {
            OP_OR138=(Token)match(input,OP_OR,FOLLOW_OP_OR_in_conditional_or_expression_Chld7952); if (state.failed) return retval;

            pushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression_Chld7956);
            rhs=conditional_and_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1151:3: -> conditionalOrExpressionChld(optr=$OP_OR.textrhs=rhs)
              {
                  retval.st = templateLib.getInstanceOf("conditionalOrExpressionChld",new STAttrMap().put("optr", (OP_OR138!=null?OP_OR138.getText():null)).put("rhs", rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conditional_or_expression_Chld"


    public static class null_coalescing_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "null_coalescing_expression"
    // CSharp.g:1159:1: null_coalescing_expression : lhs= conditional_or_expression ( OP_COALESCING rhs= null_coalescing_expression )? -> nullCoalescingExpression(lhs=lhsoptr=$OP_COALESCING.textrhs=rhs);
    public final CSharp.null_coalescing_expression_return null_coalescing_expression() throws RecognitionException {
        CSharp.null_coalescing_expression_return retval = new CSharp.null_coalescing_expression_return();
        retval.start = input.LT(1);


        Token OP_COALESCING139=null;
        CSharp.conditional_or_expression_return lhs =null;

        CSharp.null_coalescing_expression_return rhs =null;


        try {
            // CSharp.g:1160:3: (lhs= conditional_or_expression ( OP_COALESCING rhs= null_coalescing_expression )? -> nullCoalescingExpression(lhs=lhsoptr=$OP_COALESCING.textrhs=rhs))
            // CSharp.g:1161:3: lhs= conditional_or_expression ( OP_COALESCING rhs= null_coalescing_expression )?
            {
            pushFollow(FOLLOW_conditional_or_expression_in_null_coalescing_expression7994);
            lhs=conditional_or_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1161:33: ( OP_COALESCING rhs= null_coalescing_expression )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==OP_COALESCING) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // CSharp.g:1161:34: OP_COALESCING rhs= null_coalescing_expression
                    {
                    OP_COALESCING139=(Token)match(input,OP_COALESCING,FOLLOW_OP_COALESCING_in_null_coalescing_expression7997); if (state.failed) return retval;

                    pushFollow(FOLLOW_null_coalescing_expression_in_null_coalescing_expression8001);
                    rhs=null_coalescing_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1162:3: -> nullCoalescingExpression(lhs=lhsoptr=$OP_COALESCING.textrhs=rhs)
              {
                  retval.st = templateLib.getInstanceOf("nullCoalescingExpression",new STAttrMap().put("lhs", lhs).put("optr", (OP_COALESCING139!=null?OP_COALESCING139.getText():null)).put("rhs", rhs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_coalescing_expression"


    public static class conditional_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "conditional_expression"
    // CSharp.g:1172:1: conditional_expression : lhs= null_coalescing_expression ( INTERR exp1= expression COLON exp2= expression )? -> conditionalExpression(lhs=lhsoptr1=\"\"optr2=$COLON.textexpr1=exp1expr2=exp2);
    public final CSharp.conditional_expression_return conditional_expression() throws RecognitionException {
        CSharp.conditional_expression_return retval = new CSharp.conditional_expression_return();
        retval.start = input.LT(1);


        Token COLON140=null;
        CSharp.null_coalescing_expression_return lhs =null;

        CSharp.expression_return exp1 =null;

        CSharp.expression_return exp2 =null;


        try {
            // CSharp.g:1173:3: (lhs= null_coalescing_expression ( INTERR exp1= expression COLON exp2= expression )? -> conditionalExpression(lhs=lhsoptr1=\"\"optr2=$COLON.textexpr1=exp1expr2=exp2))
            // CSharp.g:1174:3: lhs= null_coalescing_expression ( INTERR exp1= expression COLON exp2= expression )?
            {
            pushFollow(FOLLOW_null_coalescing_expression_in_conditional_expression8047);
            lhs=null_coalescing_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1174:34: ( INTERR exp1= expression COLON exp2= expression )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==INTERR) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // CSharp.g:1174:35: INTERR exp1= expression COLON exp2= expression
                    {
                    match(input,INTERR,FOLLOW_INTERR_in_conditional_expression8050); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_in_conditional_expression8054);
                    exp1=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    COLON140=(Token)match(input,COLON,FOLLOW_COLON_in_conditional_expression8056); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_in_conditional_expression8060);
                    exp2=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1175:3: -> conditionalExpression(lhs=lhsoptr1=\"\"optr2=$COLON.textexpr1=exp1expr2=exp2)
              {
                  retval.st = templateLib.getInstanceOf("conditionalExpression",new STAttrMap().put("lhs", lhs).put("optr1", "").put("optr2", (COLON140!=null?COLON140.getText():null)).put("expr1", exp1).put("expr2", exp2));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conditional_expression"


    public static class lambda_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "lambda_expression"
    // CSharp.g:1178:1: lambda_expression : sign= anonymous_function_signature right_arrow bdy= anonymous_function_body -> lambdaExpression(signature=signbody=bdy);
    public final CSharp.lambda_expression_return lambda_expression() throws RecognitionException {
        CSharp.lambda_expression_return retval = new CSharp.lambda_expression_return();
        retval.start = input.LT(1);


        CSharp.anonymous_function_signature_return sign =null;

        CSharp.anonymous_function_body_return bdy =null;


        try {
            // CSharp.g:1179:2: (sign= anonymous_function_signature right_arrow bdy= anonymous_function_body -> lambdaExpression(signature=signbody=bdy))
            // CSharp.g:1180:2: sign= anonymous_function_signature right_arrow bdy= anonymous_function_body
            {
            pushFollow(FOLLOW_anonymous_function_signature_in_lambda_expression8106);
            sign=anonymous_function_signature();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_right_arrow_in_lambda_expression8108);
            right_arrow();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_anonymous_function_body_in_lambda_expression8112);
            bdy=anonymous_function_body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1181:2: -> lambdaExpression(signature=signbody=bdy)
              {
                  retval.st = templateLib.getInstanceOf("lambdaExpression",new STAttrMap().put("signature", sign).put("body", bdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lambda_expression"


    public static class anonymous_method_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_method_expression"
    // CSharp.g:1184:1: anonymous_method_expression : DELEGATE (sign= explicit_anonymous_function_signature )? blk= block -> anonymousMethodExpression(signature=signbody=blk);
    public final CSharp.anonymous_method_expression_return anonymous_method_expression() throws RecognitionException {
        CSharp.anonymous_method_expression_return retval = new CSharp.anonymous_method_expression_return();
        retval.start = input.LT(1);


        CSharp.explicit_anonymous_function_signature_return sign =null;

        CSharp.block_return blk =null;


        try {
            // CSharp.g:1185:2: ( DELEGATE (sign= explicit_anonymous_function_signature )? blk= block -> anonymousMethodExpression(signature=signbody=blk))
            // CSharp.g:1186:2: DELEGATE (sign= explicit_anonymous_function_signature )? blk= block
            {
            match(input,DELEGATE,FOLLOW_DELEGATE_in_anonymous_method_expression8140); if (state.failed) return retval;

            // CSharp.g:1186:11: (sign= explicit_anonymous_function_signature )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==OPEN_PARENS) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // CSharp.g:1186:12: sign= explicit_anonymous_function_signature
                    {
                    pushFollow(FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression8145);
                    sign=explicit_anonymous_function_signature();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_block_in_anonymous_method_expression8151);
            blk=block();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1187:2: -> anonymousMethodExpression(signature=signbody=blk)
              {
                  retval.st = templateLib.getInstanceOf("anonymousMethodExpression",new STAttrMap().put("signature", sign).put("body", blk));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "anonymous_method_expression"


    public static class anonymous_function_signature_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_function_signature"
    // CSharp.g:1196:1: anonymous_function_signature : ( OPEN_PARENS CLOSE_PARENS -> text(value=\"()\")| OPEN_PARENS lst1= explicit_anonymous_function_parameter_list CLOSE_PARENS -> anonymousFunctionSignature(list=lst1)| OPEN_PARENS lst2= implicit_anonymous_function_parameter_list CLOSE_PARENS -> anonymousFunctionSignature(list=lst2)|par= implicit_anonymous_function_parameter -> anonymousFunctionSignature2(parameter=par));
    public final CSharp.anonymous_function_signature_return anonymous_function_signature() throws RecognitionException {
        CSharp.anonymous_function_signature_return retval = new CSharp.anonymous_function_signature_return();
        retval.start = input.LT(1);


        CSharp.explicit_anonymous_function_parameter_list_return lst1 =null;

        CSharp.implicit_anonymous_function_parameter_list_return lst2 =null;

        CSharp.implicit_anonymous_function_parameter_return par =null;


        try {
            // CSharp.g:1197:3: ( OPEN_PARENS CLOSE_PARENS -> text(value=\"()\")| OPEN_PARENS lst1= explicit_anonymous_function_parameter_list CLOSE_PARENS -> anonymousFunctionSignature(list=lst1)| OPEN_PARENS lst2= implicit_anonymous_function_parameter_list CLOSE_PARENS -> anonymousFunctionSignature(list=lst2)|par= implicit_anonymous_function_parameter -> anonymousFunctionSignature2(parameter=par))
            int alt87=4;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==OPEN_PARENS) ) {
                switch ( input.LA(2) ) {
                case CLOSE_PARENS:
                    {
                    alt87=1;
                    }
                    break;
                case BOOL:
                case BYTE:
                case CHAR:
                case DECIMAL:
                case DOUBLE:
                case FLOAT:
                case INT:
                case LONG:
                case OBJECT:
                case OUT:
                case REF:
                case SBYTE:
                case SHORT:
                case STRING:
                case UINT:
                case ULONG:
                case USHORT:
                case VOID:
                    {
                    alt87=2;
                    }
                    break;
                case IDENTIFIER:
                    {
                    int LA87_5 = input.LA(3);

                    if ( (LA87_5==DOT||LA87_5==DOUBLE_COLON||LA87_5==IDENTIFIER||LA87_5==INTERR||LA87_5==LT||LA87_5==OPEN_BRACKET||LA87_5==STAR) ) {
                        alt87=2;
                    }
                    else if ( (LA87_5==CLOSE_PARENS||LA87_5==COMMA) ) {
                        alt87=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 87, 5, input);

                        throw nvae;

                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 1, input);

                    throw nvae;

                }

            }
            else if ( (LA87_0==IDENTIFIER) ) {
                alt87=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;

            }
            switch (alt87) {
                case 1 :
                    // CSharp.g:1198:3: OPEN_PARENS CLOSE_PARENS
                    {
                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_anonymous_function_signature8183); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_anonymous_function_signature8185); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1199:3: -> text(value=\"()\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "()"));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1200:5: OPEN_PARENS lst1= explicit_anonymous_function_parameter_list CLOSE_PARENS
                    {
                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_anonymous_function_signature8211); if (state.failed) return retval;

                    pushFollow(FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature8215);
                    lst1=explicit_anonymous_function_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_anonymous_function_signature8217); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1201:3: -> anonymousFunctionSignature(list=lst1)
                      {
                          retval.st = templateLib.getInstanceOf("anonymousFunctionSignature",new STAttrMap().put("list", lst1));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:1202:5: OPEN_PARENS lst2= implicit_anonymous_function_parameter_list CLOSE_PARENS
                    {
                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_anonymous_function_signature8233); if (state.failed) return retval;

                    pushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature8237);
                    lst2=implicit_anonymous_function_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_anonymous_function_signature8239); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1203:3: -> anonymousFunctionSignature(list=lst2)
                      {
                          retval.st = templateLib.getInstanceOf("anonymousFunctionSignature",new STAttrMap().put("list", lst2));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:1204:5: par= implicit_anonymous_function_parameter
                    {
                    pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_anonymous_function_signature8257);
                    par=implicit_anonymous_function_parameter();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1205:3: -> anonymousFunctionSignature2(parameter=par)
                      {
                          retval.st = templateLib.getInstanceOf("anonymousFunctionSignature2",new STAttrMap().put("parameter", par));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "anonymous_function_signature"


    public static class explicit_anonymous_function_signature_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "explicit_anonymous_function_signature"
    // CSharp.g:1207:1: explicit_anonymous_function_signature : OPEN_PARENS (lst= explicit_anonymous_function_parameter_list )? CLOSE_PARENS -> explicitAnonymousFunctionSignature(list=lst);
    public final CSharp.explicit_anonymous_function_signature_return explicit_anonymous_function_signature() throws RecognitionException {
        CSharp.explicit_anonymous_function_signature_return retval = new CSharp.explicit_anonymous_function_signature_return();
        retval.start = input.LT(1);


        CSharp.explicit_anonymous_function_parameter_list_return lst =null;


        try {
            // CSharp.g:1208:2: ( OPEN_PARENS (lst= explicit_anonymous_function_parameter_list )? CLOSE_PARENS -> explicitAnonymousFunctionSignature(list=lst))
            // CSharp.g:1209:2: OPEN_PARENS (lst= explicit_anonymous_function_parameter_list )? CLOSE_PARENS
            {
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_explicit_anonymous_function_signature8281); if (state.failed) return retval;

            // CSharp.g:1209:14: (lst= explicit_anonymous_function_parameter_list )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==BOOL||LA88_0==BYTE||LA88_0==CHAR||LA88_0==DECIMAL||LA88_0==DOUBLE||LA88_0==FLOAT||LA88_0==IDENTIFIER||LA88_0==INT||LA88_0==LONG||LA88_0==OBJECT||LA88_0==OUT||LA88_0==REF||LA88_0==SBYTE||LA88_0==SHORT||LA88_0==STRING||(LA88_0 >= UINT && LA88_0 <= ULONG)||LA88_0==USHORT||LA88_0==VOID) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // CSharp.g:1209:15: lst= explicit_anonymous_function_parameter_list
                    {
                    pushFollow(FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature8286);
                    lst=explicit_anonymous_function_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_explicit_anonymous_function_signature8290); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1210:2: -> explicitAnonymousFunctionSignature(list=lst)
              {
                  retval.st = templateLib.getInstanceOf("explicitAnonymousFunctionSignature",new STAttrMap().put("list", lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_signature"


    public static class explicit_anonymous_function_parameter_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "explicit_anonymous_function_parameter_list"
    // CSharp.g:1212:1: explicit_anonymous_function_parameter_list : par= explicit_anonymous_function_parameter (chld+= explicit_anonymous_function_parameter_list_Chld )* -> explicitAnonymousFunctionParameterList(firstPar=parlist=$chld);
    public final CSharp.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list() throws RecognitionException {
        CSharp.explicit_anonymous_function_parameter_list_return retval = new CSharp.explicit_anonymous_function_parameter_list_return();
        retval.start = input.LT(1);


        List list_chld=null;
        CSharp.explicit_anonymous_function_parameter_return par =null;

        RuleReturnScope chld = null;
        try {
            // CSharp.g:1213:2: (par= explicit_anonymous_function_parameter (chld+= explicit_anonymous_function_parameter_list_Chld )* -> explicitAnonymousFunctionParameterList(firstPar=parlist=$chld))
            // CSharp.g:1214:2: par= explicit_anonymous_function_parameter (chld+= explicit_anonymous_function_parameter_list_Chld )*
            {
            pushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list8314);
            par=explicit_anonymous_function_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1214:44: (chld+= explicit_anonymous_function_parameter_list_Chld )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==COMMA) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // CSharp.g:1214:45: chld+= explicit_anonymous_function_parameter_list_Chld
            	    {
            	    pushFollow(FOLLOW_explicit_anonymous_function_parameter_list_Chld_in_explicit_anonymous_function_parameter_list8319);
            	    chld=explicit_anonymous_function_parameter_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_chld==null) list_chld=new ArrayList();
            	    list_chld.add(chld.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1215:2: -> explicitAnonymousFunctionParameterList(firstPar=parlist=$chld)
              {
                  retval.st = templateLib.getInstanceOf("explicitAnonymousFunctionParameterList",new STAttrMap().put("firstPar", par).put("list", list_chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_parameter_list"


    public static class explicit_anonymous_function_parameter_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "explicit_anonymous_function_parameter_list_Chld"
    // CSharp.g:1218:1: explicit_anonymous_function_parameter_list_Chld : COMMA par= explicit_anonymous_function_parameter -> explicitAnonymousFunctionParameterListChld(parameter=par);
    public final CSharp.explicit_anonymous_function_parameter_list_Chld_return explicit_anonymous_function_parameter_list_Chld() throws RecognitionException {
        CSharp.explicit_anonymous_function_parameter_list_Chld_return retval = new CSharp.explicit_anonymous_function_parameter_list_Chld_return();
        retval.start = input.LT(1);


        CSharp.explicit_anonymous_function_parameter_return par =null;


        try {
            // CSharp.g:1219:2: ( COMMA par= explicit_anonymous_function_parameter -> explicitAnonymousFunctionParameterListChld(parameter=par))
            // CSharp.g:1220:2: COMMA par= explicit_anonymous_function_parameter
            {
            match(input,COMMA,FOLLOW_COMMA_in_explicit_anonymous_function_parameter_list_Chld8347); if (state.failed) return retval;

            pushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list_Chld8351);
            par=explicit_anonymous_function_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1221:2: -> explicitAnonymousFunctionParameterListChld(parameter=par)
              {
                  retval.st = templateLib.getInstanceOf("explicitAnonymousFunctionParameterListChld",new STAttrMap().put("parameter", par));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_parameter_list_Chld"


    public static class explicit_anonymous_function_parameter_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "explicit_anonymous_function_parameter"
    // CSharp.g:1224:1: explicit_anonymous_function_parameter : (modfr= anonymous_function_parameter_modifier )? t= type IDENTIFIER -> explicitAnonymousFunctionParameter(modifier=modfrtype=tname=$IDENTIFIER.text);
    public final CSharp.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter() throws RecognitionException {
        CSharp.explicit_anonymous_function_parameter_return retval = new CSharp.explicit_anonymous_function_parameter_return();
        retval.start = input.LT(1);


        Token IDENTIFIER141=null;
        CSharp.anonymous_function_parameter_modifier_return modfr =null;

        CSharp.type_return t =null;


        try {
            // CSharp.g:1225:2: ( (modfr= anonymous_function_parameter_modifier )? t= type IDENTIFIER -> explicitAnonymousFunctionParameter(modifier=modfrtype=tname=$IDENTIFIER.text))
            // CSharp.g:1226:2: (modfr= anonymous_function_parameter_modifier )? t= type IDENTIFIER
            {
            // CSharp.g:1226:2: (modfr= anonymous_function_parameter_modifier )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==OUT||LA90_0==REF) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // CSharp.g:1226:3: modfr= anonymous_function_parameter_modifier
                    {
                    pushFollow(FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter8378);
                    modfr=anonymous_function_parameter_modifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_in_explicit_anonymous_function_parameter8384);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            IDENTIFIER141=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_explicit_anonymous_function_parameter8386); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1227:2: -> explicitAnonymousFunctionParameter(modifier=modfrtype=tname=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("explicitAnonymousFunctionParameter",new STAttrMap().put("modifier", modfr).put("type", t).put("name", (IDENTIFIER141!=null?IDENTIFIER141.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_parameter"


    public static class anonymous_function_parameter_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_function_parameter_modifier"
    // CSharp.g:1229:1: anonymous_function_parameter_modifier : ( REF -> text(value=$REF.text)| OUT -> text(value=$OUT.text));
    public final CSharp.anonymous_function_parameter_modifier_return anonymous_function_parameter_modifier() throws RecognitionException {
        CSharp.anonymous_function_parameter_modifier_return retval = new CSharp.anonymous_function_parameter_modifier_return();
        retval.start = input.LT(1);


        Token REF142=null;
        Token OUT143=null;

        try {
            // CSharp.g:1230:2: ( REF -> text(value=$REF.text)| OUT -> text(value=$OUT.text))
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==REF) ) {
                alt91=1;
            }
            else if ( (LA91_0==OUT) ) {
                alt91=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;

            }
            switch (alt91) {
                case 1 :
                    // CSharp.g:1231:2: REF
                    {
                    REF142=(Token)match(input,REF,FOLLOW_REF_in_anonymous_function_parameter_modifier8416); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1231:13: -> text(value=$REF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (REF142!=null?REF142.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1232:4: OUT
                    {
                    OUT143=(Token)match(input,OUT,FOLLOW_OUT_in_anonymous_function_parameter_modifier8436); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1232:13: -> text(value=$OUT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OUT143!=null?OUT143.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "anonymous_function_parameter_modifier"


    public static class implicit_anonymous_function_signature_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "implicit_anonymous_function_signature"
    // CSharp.g:1234:1: implicit_anonymous_function_signature : ( OPEN_PARENS (parLst= implicit_anonymous_function_parameter_list )? CLOSE_PARENS -> implicitAnonymousFunctionSignature(paramList=parLst)|par= implicit_anonymous_function_parameter -> implicitAnonymousFunctionSignature2(param=par));
    public final CSharp.implicit_anonymous_function_signature_return implicit_anonymous_function_signature() throws RecognitionException {
        CSharp.implicit_anonymous_function_signature_return retval = new CSharp.implicit_anonymous_function_signature_return();
        retval.start = input.LT(1);


        CSharp.implicit_anonymous_function_parameter_list_return parLst =null;

        CSharp.implicit_anonymous_function_parameter_return par =null;


        try {
            // CSharp.g:1235:2: ( OPEN_PARENS (parLst= implicit_anonymous_function_parameter_list )? CLOSE_PARENS -> implicitAnonymousFunctionSignature(paramList=parLst)|par= implicit_anonymous_function_parameter -> implicitAnonymousFunctionSignature2(param=par))
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==OPEN_PARENS) ) {
                alt93=1;
            }
            else if ( (LA93_0==IDENTIFIER) ) {
                alt93=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;

            }
            switch (alt93) {
                case 1 :
                    // CSharp.g:1236:2: OPEN_PARENS (parLst= implicit_anonymous_function_parameter_list )? CLOSE_PARENS
                    {
                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_implicit_anonymous_function_signature8462); if (state.failed) return retval;

                    // CSharp.g:1236:14: (parLst= implicit_anonymous_function_parameter_list )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==IDENTIFIER) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // CSharp.g:1236:15: parLst= implicit_anonymous_function_parameter_list
                            {
                            pushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_implicit_anonymous_function_signature8467);
                            parLst=implicit_anonymous_function_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_implicit_anonymous_function_signature8471); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1237:2: -> implicitAnonymousFunctionSignature(paramList=parLst)
                      {
                          retval.st = templateLib.getInstanceOf("implicitAnonymousFunctionSignature",new STAttrMap().put("paramList", parLst));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1238:4: par= implicit_anonymous_function_parameter
                    {
                    pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_signature8487);
                    par=implicit_anonymous_function_parameter();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1239:2: -> implicitAnonymousFunctionSignature2(param=par)
                      {
                          retval.st = templateLib.getInstanceOf("implicitAnonymousFunctionSignature2",new STAttrMap().put("param", par));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_signature"


    public static class implicit_anonymous_function_parameter_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "implicit_anonymous_function_parameter_list"
    // CSharp.g:1241:1: implicit_anonymous_function_parameter_list : fstPar= implicit_anonymous_function_parameter (chld+= implicit_anonymous_function_parameter_list_Chld )* -> implicitAnonymousFunctionParameterList(firstPar=fstParlist=$chld);
    public final CSharp.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list() throws RecognitionException {
        CSharp.implicit_anonymous_function_parameter_list_return retval = new CSharp.implicit_anonymous_function_parameter_list_return();
        retval.start = input.LT(1);


        List list_chld=null;
        CSharp.implicit_anonymous_function_parameter_return fstPar =null;

        RuleReturnScope chld = null;
        try {
            // CSharp.g:1242:2: (fstPar= implicit_anonymous_function_parameter (chld+= implicit_anonymous_function_parameter_list_Chld )* -> implicitAnonymousFunctionParameterList(firstPar=fstParlist=$chld))
            // CSharp.g:1243:2: fstPar= implicit_anonymous_function_parameter (chld+= implicit_anonymous_function_parameter_list_Chld )*
            {
            pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list8511);
            fstPar=implicit_anonymous_function_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1243:47: (chld+= implicit_anonymous_function_parameter_list_Chld )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==COMMA) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // CSharp.g:1243:48: chld+= implicit_anonymous_function_parameter_list_Chld
            	    {
            	    pushFollow(FOLLOW_implicit_anonymous_function_parameter_list_Chld_in_implicit_anonymous_function_parameter_list8516);
            	    chld=implicit_anonymous_function_parameter_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_chld==null) list_chld=new ArrayList();
            	    list_chld.add(chld.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1244:2: -> implicitAnonymousFunctionParameterList(firstPar=fstParlist=$chld)
              {
                  retval.st = templateLib.getInstanceOf("implicitAnonymousFunctionParameterList",new STAttrMap().put("firstPar", fstPar).put("list", list_chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_parameter_list"


    public static class implicit_anonymous_function_parameter_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "implicit_anonymous_function_parameter_list_Chld"
    // CSharp.g:1247:1: implicit_anonymous_function_parameter_list_Chld : COMMA par= implicit_anonymous_function_parameter -> implicitAnonymousFunctionParameterListChld(parameter=par);
    public final CSharp.implicit_anonymous_function_parameter_list_Chld_return implicit_anonymous_function_parameter_list_Chld() throws RecognitionException {
        CSharp.implicit_anonymous_function_parameter_list_Chld_return retval = new CSharp.implicit_anonymous_function_parameter_list_Chld_return();
        retval.start = input.LT(1);


        CSharp.implicit_anonymous_function_parameter_return par =null;


        try {
            // CSharp.g:1248:2: ( COMMA par= implicit_anonymous_function_parameter -> implicitAnonymousFunctionParameterListChld(parameter=par))
            // CSharp.g:1249:2: COMMA par= implicit_anonymous_function_parameter
            {
            match(input,COMMA,FOLLOW_COMMA_in_implicit_anonymous_function_parameter_list_Chld8544); if (state.failed) return retval;

            pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list_Chld8548);
            par=implicit_anonymous_function_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1250:2: -> implicitAnonymousFunctionParameterListChld(parameter=par)
              {
                  retval.st = templateLib.getInstanceOf("implicitAnonymousFunctionParameterListChld",new STAttrMap().put("parameter", par));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_parameter_list_Chld"


    public static class implicit_anonymous_function_parameter_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "implicit_anonymous_function_parameter"
    // CSharp.g:1253:1: implicit_anonymous_function_parameter : IDENTIFIER -> text(value=$IDENTIFIER.text);
    public final CSharp.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter() throws RecognitionException {
        CSharp.implicit_anonymous_function_parameter_return retval = new CSharp.implicit_anonymous_function_parameter_return();
        retval.start = input.LT(1);


        Token IDENTIFIER144=null;

        try {
            // CSharp.g:1254:2: ( IDENTIFIER -> text(value=$IDENTIFIER.text))
            // CSharp.g:1255:2: IDENTIFIER
            {
            IDENTIFIER144=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_implicit_anonymous_function_parameter8572); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1255:17: -> text(value=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IDENTIFIER144!=null?IDENTIFIER144.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_parameter"


    public static class anonymous_function_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_function_body"
    // CSharp.g:1257:1: anonymous_function_body : (expr= expression -> anonymousFunctionBody(body=expr)|blk= block -> anonymousFunctionBody(body=blk));
    public final CSharp.anonymous_function_body_return anonymous_function_body() throws RecognitionException {
        CSharp.anonymous_function_body_return retval = new CSharp.anonymous_function_body_return();
        retval.start = input.LT(1);


        CSharp.expression_return expr =null;

        CSharp.block_return blk =null;


        try {
            // CSharp.g:1258:2: (expr= expression -> anonymousFunctionBody(body=expr)|blk= block -> anonymousFunctionBody(body=blk))
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==AMP||(LA95_0 >= BANG && LA95_0 <= BASE)||LA95_0==BOOL||LA95_0==BYTE||(LA95_0 >= CHAR && LA95_0 <= CHECKED)||LA95_0==DECIMAL||(LA95_0 >= DEFAULT && LA95_0 <= DELEGATE)||LA95_0==DOUBLE||LA95_0==FALSE||LA95_0==FLOAT||LA95_0==IDENTIFIER||(LA95_0 >= INT && LA95_0 <= INTEGER_LITERAL)||LA95_0==LONG||LA95_0==MINUS||LA95_0==NEW||LA95_0==NULL||LA95_0==OBJECT||LA95_0==OPEN_PARENS||LA95_0==OP_DEC||LA95_0==OP_INC||LA95_0==PLUS||LA95_0==REAL_LITERAL||LA95_0==SBYTE||LA95_0==SHORT||LA95_0==SIZEOF||LA95_0==STAR||(LA95_0 >= STRING && LA95_0 <= STRING_LITERAL)||LA95_0==THIS||(LA95_0 >= TILDE && LA95_0 <= TRUE)||LA95_0==TYPEOF||(LA95_0 >= UINT && LA95_0 <= UNCHECKED)||LA95_0==USHORT) ) {
                alt95=1;
            }
            else if ( (LA95_0==OPEN_BRACE) ) {
                alt95=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;

            }
            switch (alt95) {
                case 1 :
                    // CSharp.g:1259:2: expr= expression
                    {
                    pushFollow(FOLLOW_expression_in_anonymous_function_body8599);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1260:2: -> anonymousFunctionBody(body=expr)
                      {
                          retval.st = templateLib.getInstanceOf("anonymousFunctionBody",new STAttrMap().put("body", expr));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1261:4: blk= block
                    {
                    pushFollow(FOLLOW_block_in_anonymous_function_body8615);
                    blk=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1262:2: -> anonymousFunctionBody(body=blk)
                      {
                          retval.st = templateLib.getInstanceOf("anonymousFunctionBody",new STAttrMap().put("body", blk));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "anonymous_function_body"


    public static class query_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "query_expression"
    // CSharp.g:1265:1: query_expression : frmCls= from_clause bdy= query_body -> queryExpression(fromClause=frmClsbody=bdy);
    public final CSharp.query_expression_return query_expression() throws RecognitionException {
        CSharp.query_expression_return retval = new CSharp.query_expression_return();
        retval.start = input.LT(1);


        CSharp.from_clause_return frmCls =null;

        CSharp.query_body_return bdy =null;


        try {
            // CSharp.g:1266:2: (frmCls= from_clause bdy= query_body -> queryExpression(fromClause=frmClsbody=bdy))
            // CSharp.g:1267:2: frmCls= from_clause bdy= query_body
            {
            pushFollow(FOLLOW_from_clause_in_query_expression8641);
            frmCls=from_clause();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_query_body_in_query_expression8645);
            bdy=query_body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1268:2: -> queryExpression(fromClause=frmClsbody=bdy)
              {
                  retval.st = templateLib.getInstanceOf("queryExpression",new STAttrMap().put("fromClause", frmCls).put("body", bdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query_expression"


    public static class from_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "from_clause"
    // CSharp.g:1270:1: from_clause : frmKWd= from_contextual_keyword ( ( type IDENTIFIER IN )=>t= type )? id2= IDENTIFIER IN exp= expression -> fromClause(keyWrd=frmKWdtype=tals=$id2.textexpression=NamingUtil.toClassName($exp.text));
    public final CSharp.from_clause_return from_clause() throws RecognitionException {
        CSharp.from_clause_return retval = new CSharp.from_clause_return();
        retval.start = input.LT(1);


        Token id2=null;
        CSharp.from_contextual_keyword_return frmKWd =null;

        CSharp.type_return t =null;

        CSharp.expression_return exp =null;


        try {
            // CSharp.g:1271:2: (frmKWd= from_contextual_keyword ( ( type IDENTIFIER IN )=>t= type )? id2= IDENTIFIER IN exp= expression -> fromClause(keyWrd=frmKWdtype=tals=$id2.textexpression=NamingUtil.toClassName($exp.text)))
            // CSharp.g:1272:2: frmKWd= from_contextual_keyword ( ( type IDENTIFIER IN )=>t= type )? id2= IDENTIFIER IN exp= expression
            {
            pushFollow(FOLLOW_from_contextual_keyword_in_from_clause8673);
            frmKWd=from_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1272:33: ( ( type IDENTIFIER IN )=>t= type )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==SBYTE) && (synpred9_CSharp())) {
                alt96=1;
            }
            else if ( (LA96_0==BYTE) && (synpred9_CSharp())) {
                alt96=1;
            }
            else if ( (LA96_0==SHORT) && (synpred9_CSharp())) {
                alt96=1;
            }
            else if ( (LA96_0==USHORT) && (synpred9_CSharp())) {
                alt96=1;
            }
            else if ( (LA96_0==INT) && (synpred9_CSharp())) {
                alt96=1;
            }
            else if ( (LA96_0==UINT) && (synpred9_CSharp())) {
                alt96=1;
            }
            else if ( (LA96_0==LONG) && (synpred9_CSharp())) {
                alt96=1;
            }
            else if ( (LA96_0==ULONG) && (synpred9_CSharp())) {
                alt96=1;
            }
            else if ( (LA96_0==CHAR) && (synpred9_CSharp())) {
                alt96=1;
            }
            else if ( (LA96_0==FLOAT) && (synpred9_CSharp())) {
                alt96=1;
            }
            else if ( (LA96_0==DOUBLE) && (synpred9_CSharp())) {
                alt96=1;
            }
            else if ( (LA96_0==DECIMAL) && (synpred9_CSharp())) {
                alt96=1;
            }
            else if ( (LA96_0==BOOL) && (synpred9_CSharp())) {
                alt96=1;
            }
            else if ( (LA96_0==IDENTIFIER) ) {
                int LA96_14 = input.LA(2);

                if ( (LA96_14==DOUBLE_COLON) && (synpred9_CSharp())) {
                    alt96=1;
                }
                else if ( (LA96_14==LT) && (synpred9_CSharp())) {
                    alt96=1;
                }
                else if ( (LA96_14==DOT) && (synpred9_CSharp())) {
                    alt96=1;
                }
                else if ( (LA96_14==INTERR) && (synpred9_CSharp())) {
                    alt96=1;
                }
                else if ( (LA96_14==OPEN_BRACKET) && (synpred9_CSharp())) {
                    alt96=1;
                }
                else if ( (LA96_14==STAR) && (synpred9_CSharp())) {
                    alt96=1;
                }
                else if ( (LA96_14==IDENTIFIER) && (synpred9_CSharp())) {
                    alt96=1;
                }
            }
            else if ( (LA96_0==OBJECT) && (synpred9_CSharp())) {
                alt96=1;
            }
            else if ( (LA96_0==STRING) && (synpred9_CSharp())) {
                alt96=1;
            }
            else if ( (LA96_0==VOID) && (synpred9_CSharp())) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // CSharp.g:1272:34: ( type IDENTIFIER IN )=>t= type
                    {
                    pushFollow(FOLLOW_type_in_from_clause8688);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            id2=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_from_clause8694); if (state.failed) return retval;

            match(input,IN,FOLLOW_IN_in_from_clause8696); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_from_clause8700);
            exp=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1273:2: -> fromClause(keyWrd=frmKWdtype=tals=$id2.textexpression=NamingUtil.toClassName($exp.text))
              {
                  retval.st = templateLib.getInstanceOf("fromClause",new STAttrMap().put("keyWrd", frmKWd).put("type", t).put("als", (id2!=null?id2.getText():null)).put("expression", NamingUtil.toClassName((exp!=null?input.toString(exp.start,exp.stop):null))));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "from_clause"


    public static class query_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "query_body"
    // CSharp.g:1280:1: query_body : (qryBdyCls= query_body_clauses )? slctOrGrpCls= select_or_group_clause ( ( into_contextual_keyword )=>cond= query_continuation )? -> queryBody(bodyClauses=qryBdyClsselectOrGrpCls=slctOrGrpClsquryCond=cond);
    public final CSharp.query_body_return query_body() throws RecognitionException {
        CSharp.query_body_return retval = new CSharp.query_body_return();
        retval.start = input.LT(1);


        CSharp.query_body_clauses_return qryBdyCls =null;

        CSharp.select_or_group_clause_return slctOrGrpCls =null;

        CSharp.query_continuation_return cond =null;


        try {
            // CSharp.g:1281:3: ( (qryBdyCls= query_body_clauses )? slctOrGrpCls= select_or_group_clause ( ( into_contextual_keyword )=>cond= query_continuation )? -> queryBody(bodyClauses=qryBdyClsselectOrGrpCls=slctOrGrpClsquryCond=cond))
            // CSharp.g:1282:3: (qryBdyCls= query_body_clauses )? slctOrGrpCls= select_or_group_clause ( ( into_contextual_keyword )=>cond= query_continuation )?
            {
            // CSharp.g:1282:3: (qryBdyCls= query_body_clauses )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==IDENTIFIER) ) {
                int LA97_1 = input.LA(2);

                if ( (((input.LT(1).getText().equals("join"))||(input.LT(1).getText().equals("orderby"))||(input.LT(1).getText().equals("where"))||(input.LT(1).getText().equals("from"))||(input.LT(1).getText().equals("let")))) ) {
                    alt97=1;
                }
            }
            switch (alt97) {
                case 1 :
                    // CSharp.g:1282:4: qryBdyCls= query_body_clauses
                    {
                    pushFollow(FOLLOW_query_body_clauses_in_query_body8741);
                    qryBdyCls=query_body_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_select_or_group_clause_in_query_body8747);
            slctOrGrpCls=select_or_group_clause();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1282:71: ( ( into_contextual_keyword )=>cond= query_continuation )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==IDENTIFIER) ) {
                int LA98_1 = input.LA(2);

                if ( (((synpred10_CSharp()&&synpred10_CSharp())&&(input.LT(1).getText().equals("into")))) ) {
                    alt98=1;
                }
            }
            switch (alt98) {
                case 1 :
                    // CSharp.g:1282:72: ( into_contextual_keyword )=>cond= query_continuation
                    {
                    pushFollow(FOLLOW_query_continuation_in_query_body8758);
                    cond=query_continuation();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1283:3: -> queryBody(bodyClauses=qryBdyClsselectOrGrpCls=slctOrGrpClsquryCond=cond)
              {
                  retval.st = templateLib.getInstanceOf("queryBody",new STAttrMap().put("bodyClauses", qryBdyCls).put("selectOrGrpCls", slctOrGrpCls).put("quryCond", cond));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query_body"


    public static class query_body_clauses_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "query_body_clauses"
    // CSharp.g:1285:1: query_body_clauses : (lst+= query_body_clause )+ -> queryBodyClauses(list=$lst);
    public final CSharp.query_body_clauses_return query_body_clauses() throws RecognitionException {
        CSharp.query_body_clauses_return retval = new CSharp.query_body_clauses_return();
        retval.start = input.LT(1);


        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharp.g:1286:2: ( (lst+= query_body_clause )+ -> queryBodyClauses(list=$lst))
            // CSharp.g:1287:2: (lst+= query_body_clause )+
            {
            // CSharp.g:1287:2: (lst+= query_body_clause )+
            int cnt99=0;
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==IDENTIFIER) ) {
                    int LA99_1 = input.LA(2);

                    if ( (((input.LT(1).getText().equals("join"))||(input.LT(1).getText().equals("orderby"))||(input.LT(1).getText().equals("where"))||(input.LT(1).getText().equals("from"))||(input.LT(1).getText().equals("let")))) ) {
                        alt99=1;
                    }


                }


                switch (alt99) {
            	case 1 :
            	    // CSharp.g:1287:3: lst+= query_body_clause
            	    {
            	    pushFollow(FOLLOW_query_body_clause_in_query_body_clauses8795);
            	    lst=query_body_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt99 >= 1 ) break loop99;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(99, input);
                        throw eee;
                }
                cnt99++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1288:2: -> queryBodyClauses(list=$lst)
              {
                  retval.st = templateLib.getInstanceOf("queryBodyClauses",new STAttrMap().put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query_body_clauses"


    public static class query_body_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "query_body_clause"
    // CSharp.g:1302:1: query_body_clause : (cls1= from_clause -> queryBodyClause(clause=cls1)|cls2= let_clause -> queryBodyClause(clause=cls2)|cls3= where_clause -> queryBodyClause(clause=cls3)|cls4= combined_join_clause -> queryBodyClause(clause=cls4)|cls5= orderby_clause -> queryBodyClause(clause=cls5));
    public final CSharp.query_body_clause_return query_body_clause() throws RecognitionException {
        CSharp.query_body_clause_return retval = new CSharp.query_body_clause_return();
        retval.start = input.LT(1);


        CSharp.from_clause_return cls1 =null;

        CSharp.let_clause_return cls2 =null;

        CSharp.where_clause_return cls3 =null;

        CSharp.combined_join_clause_return cls4 =null;

        CSharp.orderby_clause_return cls5 =null;


        try {
            // CSharp.g:1303:3: (cls1= from_clause -> queryBodyClause(clause=cls1)|cls2= let_clause -> queryBodyClause(clause=cls2)|cls3= where_clause -> queryBodyClause(clause=cls3)|cls4= combined_join_clause -> queryBodyClause(clause=cls4)|cls5= orderby_clause -> queryBodyClause(clause=cls5))
            int alt100=5;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==IDENTIFIER) ) {
                int LA100_1 = input.LA(2);

                if ( ((input.LT(1).getText().equals("from"))) ) {
                    alt100=1;
                }
                else if ( ((input.LT(1).getText().equals("let"))) ) {
                    alt100=2;
                }
                else if ( ((input.LT(1).getText().equals("where"))) ) {
                    alt100=3;
                }
                else if ( ((input.LT(1).getText().equals("join"))) ) {
                    alt100=4;
                }
                else if ( ((input.LT(1).getText().equals("orderby"))) ) {
                    alt100=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 100, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;

            }
            switch (alt100) {
                case 1 :
                    // CSharp.g:1304:3: cls1= from_clause
                    {
                    pushFollow(FOLLOW_from_clause_in_query_body_clause8828);
                    cls1=from_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1305:3: -> queryBodyClause(clause=cls1)
                      {
                          retval.st = templateLib.getInstanceOf("queryBodyClause",new STAttrMap().put("clause", cls1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1306:5: cls2= let_clause
                    {
                    pushFollow(FOLLOW_let_clause_in_query_body_clause8846);
                    cls2=let_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1307:3: -> queryBodyClause(clause=cls2)
                      {
                          retval.st = templateLib.getInstanceOf("queryBodyClause",new STAttrMap().put("clause", cls2));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:1308:5: cls3= where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_query_body_clause8864);
                    cls3=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1309:3: -> queryBodyClause(clause=cls3)
                      {
                          retval.st = templateLib.getInstanceOf("queryBodyClause",new STAttrMap().put("clause", cls3));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:1310:5: cls4= combined_join_clause
                    {
                    pushFollow(FOLLOW_combined_join_clause_in_query_body_clause8882);
                    cls4=combined_join_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1311:3: -> queryBodyClause(clause=cls4)
                      {
                          retval.st = templateLib.getInstanceOf("queryBodyClause",new STAttrMap().put("clause", cls4));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:1312:5: cls5= orderby_clause
                    {
                    pushFollow(FOLLOW_orderby_clause_in_query_body_clause8900);
                    cls5=orderby_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1313:3: -> queryBodyClause(clause=cls5)
                      {
                          retval.st = templateLib.getInstanceOf("queryBodyClause",new STAttrMap().put("clause", cls5));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query_body_clause"


    public static class let_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "let_clause"
    // CSharp.g:1315:1: let_clause : letkWd= let_contextual_keyword id= IDENTIFIER ASSIGNMENT expr= expression -> letClause(letKeyWrd=letkWdname=$id.textexpression=expr);
    public final CSharp.let_clause_return let_clause() throws RecognitionException {
        CSharp.let_clause_return retval = new CSharp.let_clause_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharp.let_contextual_keyword_return letkWd =null;

        CSharp.expression_return expr =null;


        try {
            // CSharp.g:1316:2: (letkWd= let_contextual_keyword id= IDENTIFIER ASSIGNMENT expr= expression -> letClause(letKeyWrd=letkWdname=$id.textexpression=expr))
            // CSharp.g:1317:2: letkWd= let_contextual_keyword id= IDENTIFIER ASSIGNMENT expr= expression
            {
            pushFollow(FOLLOW_let_contextual_keyword_in_let_clause8926);
            letkWd=let_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_let_clause8930); if (state.failed) return retval;

            match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_let_clause8932); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_let_clause8936);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1318:2: -> letClause(letKeyWrd=letkWdname=$id.textexpression=expr)
              {
                  retval.st = templateLib.getInstanceOf("letClause",new STAttrMap().put("letKeyWrd", letkWd).put("name", (id!=null?id.getText():null)).put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "let_clause"


    public static class where_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "where_clause"
    // CSharp.g:1320:1: where_clause : whrKwd= where_contextual_keyword expr= boolean_expression -> whereClause(whereKeyWrd=whrKwdexpression=expr);
    public final CSharp.where_clause_return where_clause() throws RecognitionException {
        CSharp.where_clause_return retval = new CSharp.where_clause_return();
        retval.start = input.LT(1);


        CSharp.where_contextual_keyword_return whrKwd =null;

        CSharp.boolean_expression_return expr =null;


        try {
            // CSharp.g:1321:2: (whrKwd= where_contextual_keyword expr= boolean_expression -> whereClause(whereKeyWrd=whrKwdexpression=expr))
            // CSharp.g:1322:2: whrKwd= where_contextual_keyword expr= boolean_expression
            {
            pushFollow(FOLLOW_where_contextual_keyword_in_where_clause8968);
            whrKwd=where_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_boolean_expression_in_where_clause8972);
            expr=boolean_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1323:2: -> whereClause(whereKeyWrd=whrKwdexpression=expr)
              {
                  retval.st = templateLib.getInstanceOf("whereClause",new STAttrMap().put("whereKeyWrd", whrKwd).put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "where_clause"


    public static class join_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "join_clause"
    // CSharp.g:1325:1: join_clause : join_contextual_keyword (t= type )? id1= IDENTIFIER IN expr1= expression on_contextual_keyword expr2= expression equals_contextual_keyword expr3= expression -> joinClause(type=tjoinId=$id1.textexpression1=expr1expression2=expr2expression3=expr3);
    public final CSharp.join_clause_return join_clause() throws RecognitionException {
        CSharp.join_clause_return retval = new CSharp.join_clause_return();
        retval.start = input.LT(1);


        Token id1=null;
        CSharp.type_return t =null;

        CSharp.expression_return expr1 =null;

        CSharp.expression_return expr2 =null;

        CSharp.expression_return expr3 =null;


        try {
            // CSharp.g:1326:2: ( join_contextual_keyword (t= type )? id1= IDENTIFIER IN expr1= expression on_contextual_keyword expr2= expression equals_contextual_keyword expr3= expression -> joinClause(type=tjoinId=$id1.textexpression1=expr1expression2=expr2expression3=expr3))
            // CSharp.g:1328:2: join_contextual_keyword (t= type )? id1= IDENTIFIER IN expr1= expression on_contextual_keyword expr2= expression equals_contextual_keyword expr3= expression
            {
            pushFollow(FOLLOW_join_contextual_keyword_in_join_clause8999);
            join_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1328:26: (t= type )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==BOOL||LA101_0==BYTE||LA101_0==CHAR||LA101_0==DECIMAL||LA101_0==DOUBLE||LA101_0==FLOAT||LA101_0==INT||LA101_0==LONG||LA101_0==OBJECT||LA101_0==SBYTE||LA101_0==SHORT||LA101_0==STRING||(LA101_0 >= UINT && LA101_0 <= ULONG)||LA101_0==USHORT||LA101_0==VOID) ) {
                alt101=1;
            }
            else if ( (LA101_0==IDENTIFIER) ) {
                int LA101_2 = input.LA(2);

                if ( (LA101_2==DOT||LA101_2==DOUBLE_COLON||LA101_2==IDENTIFIER||LA101_2==INTERR||LA101_2==LT||LA101_2==OPEN_BRACKET||LA101_2==STAR) ) {
                    alt101=1;
                }
            }
            switch (alt101) {
                case 1 :
                    // CSharp.g:1328:27: t= type
                    {
                    pushFollow(FOLLOW_type_in_join_clause9004);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            id1=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_join_clause9010); if (state.failed) return retval;

            match(input,IN,FOLLOW_IN_in_join_clause9012); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_clause9016);
            expr1=expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_on_contextual_keyword_in_join_clause9018);
            on_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_clause9022);
            expr2=expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_equals_contextual_keyword_in_join_clause9024);
            equals_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_clause9028);
            expr3=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1329:2: -> joinClause(type=tjoinId=$id1.textexpression1=expr1expression2=expr2expression3=expr3)
              {
                  retval.st = templateLib.getInstanceOf("joinClause",new STAttrMap().put("type", t).put("joinId", (id1!=null?id1.getText():null)).put("expression1", expr1).put("expression2", expr2).put("expression3", expr3));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_clause"


    public static class join_into_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "join_into_clause"
    // CSharp.g:1331:1: join_into_clause : (jKwd= join_contextual_keyword t= type )? id1= IDENTIFIER IN expr1= expression onKwd= on_contextual_keyword expr2= expression eqKwd= equals_contextual_keyword expr3= expression into_contextual_keyword id2= IDENTIFIER -> joinIntoClause(joinKeyWrd=$jKwd.texttype=tjoinId=$id1.textexpression1=expr1onKeyWrd=onKwdexpression2=expr2equalsKeyWrd=eqKwdexpression3=expr3intoId=$id2.text);
    public final CSharp.join_into_clause_return join_into_clause() throws RecognitionException {
        CSharp.join_into_clause_return retval = new CSharp.join_into_clause_return();
        retval.start = input.LT(1);


        Token id1=null;
        Token id2=null;
        CSharp.join_contextual_keyword_return jKwd =null;

        CSharp.type_return t =null;

        CSharp.expression_return expr1 =null;

        CSharp.on_contextual_keyword_return onKwd =null;

        CSharp.expression_return expr2 =null;

        CSharp.equals_contextual_keyword_return eqKwd =null;

        CSharp.expression_return expr3 =null;


        try {
            // CSharp.g:1332:2: ( (jKwd= join_contextual_keyword t= type )? id1= IDENTIFIER IN expr1= expression onKwd= on_contextual_keyword expr2= expression eqKwd= equals_contextual_keyword expr3= expression into_contextual_keyword id2= IDENTIFIER -> joinIntoClause(joinKeyWrd=$jKwd.texttype=tjoinId=$id1.textexpression1=expr1onKeyWrd=onKwdexpression2=expr2equalsKeyWrd=eqKwdexpression3=expr3intoId=$id2.text))
            // CSharp.g:1333:2: (jKwd= join_contextual_keyword t= type )? id1= IDENTIFIER IN expr1= expression onKwd= on_contextual_keyword expr2= expression eqKwd= equals_contextual_keyword expr3= expression into_contextual_keyword id2= IDENTIFIER
            {
            // CSharp.g:1333:2: (jKwd= join_contextual_keyword t= type )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==IDENTIFIER) ) {
                int LA102_1 = input.LA(2);

                if ( (LA102_1==BOOL||LA102_1==BYTE||LA102_1==CHAR||LA102_1==DECIMAL||LA102_1==DOUBLE||LA102_1==FLOAT||LA102_1==IDENTIFIER||LA102_1==INT||LA102_1==LONG||LA102_1==OBJECT||LA102_1==SBYTE||LA102_1==SHORT||LA102_1==STRING||(LA102_1 >= UINT && LA102_1 <= ULONG)||LA102_1==USHORT||LA102_1==VOID) ) {
                    alt102=1;
                }
            }
            switch (alt102) {
                case 1 :
                    // CSharp.g:1333:3: jKwd= join_contextual_keyword t= type
                    {
                    pushFollow(FOLLOW_join_contextual_keyword_in_join_into_clause9069);
                    jKwd=join_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_join_into_clause9073);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            id1=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_join_into_clause9079); if (state.failed) return retval;

            match(input,IN,FOLLOW_IN_in_join_into_clause9081); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_into_clause9085);
            expr1=expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_on_contextual_keyword_in_join_into_clause9089);
            onKwd=on_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_into_clause9093);
            expr2=expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_equals_contextual_keyword_in_join_into_clause9097);
            eqKwd=equals_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_into_clause9101);
            expr3=expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_into_contextual_keyword_in_join_into_clause9103);
            into_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            id2=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_join_into_clause9107); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1334:2: -> joinIntoClause(joinKeyWrd=$jKwd.texttype=tjoinId=$id1.textexpression1=expr1onKeyWrd=onKwdexpression2=expr2equalsKeyWrd=eqKwdexpression3=expr3intoId=$id2.text)
              {
                  retval.st = templateLib.getInstanceOf("joinIntoClause",new STAttrMap().put("joinKeyWrd", (jKwd!=null?input.toString(jKwd.start,jKwd.stop):null)).put("type", t).put("joinId", (id1!=null?id1.getText():null)).put("expression1", expr1).put("onKeyWrd", onKwd).put("expression2", expr2).put("equalsKeyWrd", eqKwd).put("expression3", expr3).put("intoId", (id2!=null?id2.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_into_clause"


    public static class combined_join_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "combined_join_clause"
    // CSharp.g:1337:1: combined_join_clause : join_contextual_keyword (t= type )? id1= IDENTIFIER IN expr1= expression on_contextual_keyword expr2= expression equals_contextual_keyword expr3= expression ( into_contextual_keyword id2= IDENTIFIER )? -> combinedJoinClause(type=tjoinId=$id1.textexpression1=CSharpHelper.prefixGetKeyword($expr1.text)expression2=CSharpHelper.prefixGetKeyword($expr2.text)expression3=CSharpHelper.prefixGetKeyword($expr3.text)intoId=$id2.text);
    public final CSharp.combined_join_clause_return combined_join_clause() throws RecognitionException {
        CSharp.combined_join_clause_return retval = new CSharp.combined_join_clause_return();
        retval.start = input.LT(1);


        Token id1=null;
        Token id2=null;
        CSharp.type_return t =null;

        CSharp.expression_return expr1 =null;

        CSharp.expression_return expr2 =null;

        CSharp.expression_return expr3 =null;


        try {
            // CSharp.g:1338:3: ( join_contextual_keyword (t= type )? id1= IDENTIFIER IN expr1= expression on_contextual_keyword expr2= expression equals_contextual_keyword expr3= expression ( into_contextual_keyword id2= IDENTIFIER )? -> combinedJoinClause(type=tjoinId=$id1.textexpression1=CSharpHelper.prefixGetKeyword($expr1.text)expression2=CSharpHelper.prefixGetKeyword($expr2.text)expression3=CSharpHelper.prefixGetKeyword($expr3.text)intoId=$id2.text))
            // CSharp.g:1339:3: join_contextual_keyword (t= type )? id1= IDENTIFIER IN expr1= expression on_contextual_keyword expr2= expression equals_contextual_keyword expr3= expression ( into_contextual_keyword id2= IDENTIFIER )?
            {
            pushFollow(FOLLOW_join_contextual_keyword_in_combined_join_clause9163);
            join_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1339:27: (t= type )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==BOOL||LA103_0==BYTE||LA103_0==CHAR||LA103_0==DECIMAL||LA103_0==DOUBLE||LA103_0==FLOAT||LA103_0==INT||LA103_0==LONG||LA103_0==OBJECT||LA103_0==SBYTE||LA103_0==SHORT||LA103_0==STRING||(LA103_0 >= UINT && LA103_0 <= ULONG)||LA103_0==USHORT||LA103_0==VOID) ) {
                alt103=1;
            }
            else if ( (LA103_0==IDENTIFIER) ) {
                int LA103_2 = input.LA(2);

                if ( (LA103_2==DOT||LA103_2==DOUBLE_COLON||LA103_2==IDENTIFIER||LA103_2==INTERR||LA103_2==LT||LA103_2==OPEN_BRACKET||LA103_2==STAR) ) {
                    alt103=1;
                }
            }
            switch (alt103) {
                case 1 :
                    // CSharp.g:1339:28: t= type
                    {
                    pushFollow(FOLLOW_type_in_combined_join_clause9168);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            id1=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_combined_join_clause9174); if (state.failed) return retval;

            match(input,IN,FOLLOW_IN_in_combined_join_clause9176); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_combined_join_clause9180);
            expr1=expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_on_contextual_keyword_in_combined_join_clause9182);
            on_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_combined_join_clause9186);
            expr2=expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_equals_contextual_keyword_in_combined_join_clause9188);
            equals_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_combined_join_clause9192);
            expr3=expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1339:154: ( into_contextual_keyword id2= IDENTIFIER )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==IDENTIFIER) ) {
                int LA104_1 = input.LA(2);

                if ( (LA104_1==IDENTIFIER) ) {
                    int LA104_2 = input.LA(3);

                    if ( ((input.LT(1).getText().equals("into"))) ) {
                        alt104=1;
                    }
                }
            }
            switch (alt104) {
                case 1 :
                    // CSharp.g:1339:155: into_contextual_keyword id2= IDENTIFIER
                    {
                    pushFollow(FOLLOW_into_contextual_keyword_in_combined_join_clause9195);
                    into_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    id2=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_combined_join_clause9199); if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1340:3: -> combinedJoinClause(type=tjoinId=$id1.textexpression1=CSharpHelper.prefixGetKeyword($expr1.text)expression2=CSharpHelper.prefixGetKeyword($expr2.text)expression3=CSharpHelper.prefixGetKeyword($expr3.text)intoId=$id2.text)
              {
                  retval.st = templateLib.getInstanceOf("combinedJoinClause",new STAttrMap().put("type", t).put("joinId", (id1!=null?id1.getText():null)).put("expression1", CSharpHelper.prefixGetKeyword((expr1!=null?input.toString(expr1.start,expr1.stop):null))).put("expression2", CSharpHelper.prefixGetKeyword((expr2!=null?input.toString(expr2.start,expr2.stop):null))).put("expression3", CSharpHelper.prefixGetKeyword((expr3!=null?input.toString(expr3.start,expr3.stop):null))).put("intoId", (id2!=null?id2.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "combined_join_clause"


    public static class orderby_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "orderby_clause"
    // CSharp.g:1343:1: orderby_clause : orderby_contextual_keyword ods= orderings -> orderbyClause(ordngs=ods);
    public final CSharp.orderby_clause_return orderby_clause() throws RecognitionException {
        CSharp.orderby_clause_return retval = new CSharp.orderby_clause_return();
        retval.start = input.LT(1);


        CSharp.orderings_return ods =null;


        try {
            // CSharp.g:1344:2: ( orderby_contextual_keyword ods= orderings -> orderbyClause(ordngs=ods))
            // CSharp.g:1345:2: orderby_contextual_keyword ods= orderings
            {
            pushFollow(FOLLOW_orderby_contextual_keyword_in_orderby_clause9248);
            orderby_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_orderings_in_orderby_clause9252);
            ods=orderings();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1346:2: -> orderbyClause(ordngs=ods)
              {
                  retval.st = templateLib.getInstanceOf("orderbyClause",new STAttrMap().put("ordngs", ods));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orderby_clause"


    public static class orderings_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "orderings"
    // CSharp.g:1348:1: orderings : fstOrd= ordering (chld+= orderings_Chld )* -> orderings(firstOrdrng=fstOrdlist=$chld);
    public final CSharp.orderings_return orderings() throws RecognitionException {
        CSharp.orderings_return retval = new CSharp.orderings_return();
        retval.start = input.LT(1);


        List list_chld=null;
        CSharp.ordering_return fstOrd =null;

        RuleReturnScope chld = null;
        try {
            // CSharp.g:1349:2: (fstOrd= ordering (chld+= orderings_Chld )* -> orderings(firstOrdrng=fstOrdlist=$chld))
            // CSharp.g:1350:2: fstOrd= ordering (chld+= orderings_Chld )*
            {
            pushFollow(FOLLOW_ordering_in_orderings9276);
            fstOrd=ordering();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1350:18: (chld+= orderings_Chld )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==COMMA) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // CSharp.g:1350:19: chld+= orderings_Chld
            	    {
            	    pushFollow(FOLLOW_orderings_Chld_in_orderings9281);
            	    chld=orderings_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_chld==null) list_chld=new ArrayList();
            	    list_chld.add(chld.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1351:2: -> orderings(firstOrdrng=fstOrdlist=$chld)
              {
                  retval.st = templateLib.getInstanceOf("orderings",new STAttrMap().put("firstOrdrng", fstOrd).put("list", list_chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orderings"


    public static class orderings_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "orderings_Chld"
    // CSharp.g:1354:1: orderings_Chld : COMMA od= ordering -> orderingsChld(ordrng=od);
    public final CSharp.orderings_Chld_return orderings_Chld() throws RecognitionException {
        CSharp.orderings_Chld_return retval = new CSharp.orderings_Chld_return();
        retval.start = input.LT(1);


        CSharp.ordering_return od =null;


        try {
            // CSharp.g:1355:3: ( COMMA od= ordering -> orderingsChld(ordrng=od))
            // CSharp.g:1356:3: COMMA od= ordering
            {
            match(input,COMMA,FOLLOW_COMMA_in_orderings_Chld9311); if (state.failed) return retval;

            pushFollow(FOLLOW_ordering_in_orderings_Chld9316);
            od=ordering();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1357:3: -> orderingsChld(ordrng=od)
              {
                  retval.st = templateLib.getInstanceOf("orderingsChld",new STAttrMap().put("ordrng", od));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orderings_Chld"


    public static class ordering_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "ordering"
    // CSharp.g:1360:1: ordering : expr= expression (orng= ordering_direction )? -> ordering(expression=$expr.st.toString().trim()direction=orng);
    public final CSharp.ordering_return ordering() throws RecognitionException {
        CSharp.ordering_return retval = new CSharp.ordering_return();
        retval.start = input.LT(1);


        CSharp.expression_return expr =null;

        CSharp.ordering_direction_return orng =null;


        try {
            // CSharp.g:1361:2: (expr= expression (orng= ordering_direction )? -> ordering(expression=$expr.st.toString().trim()direction=orng))
            // CSharp.g:1362:2: expr= expression (orng= ordering_direction )?
            {
            pushFollow(FOLLOW_expression_in_ordering9344);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1362:18: (orng= ordering_direction )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==IDENTIFIER) ) {
                int LA106_1 = input.LA(2);

                if ( (LA106_1==COMMA) ) {
                    alt106=1;
                }
                else if ( (LA106_1==IDENTIFIER) ) {
                    int LA106_4 = input.LA(3);

                    if ( (((input.LT(1).getText().equals("descending"))||(input.LT(1).getText().equals("ascending")))) ) {
                        alt106=1;
                    }
                }
            }
            switch (alt106) {
                case 1 :
                    // CSharp.g:1362:19: orng= ordering_direction
                    {
                    pushFollow(FOLLOW_ordering_direction_in_ordering9349);
                    orng=ordering_direction();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1363:2: -> ordering(expression=$expr.st.toString().trim()direction=orng)
              {
                  retval.st = templateLib.getInstanceOf("ordering",new STAttrMap().put("expression", (expr!=null?expr.st:null).toString().trim()).put("direction", orng));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ordering"


    public static class ordering_direction_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "ordering_direction"
    // CSharp.g:1365:1: ordering_direction : ( ascending_contextual_keyword -> orderingDirectionAsc(| descending_contextual_keyword -> orderingDirectionDesc();
    public final CSharp.ordering_direction_return ordering_direction() throws RecognitionException {
        CSharp.ordering_direction_return retval = new CSharp.ordering_direction_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:1366:2: ( ascending_contextual_keyword -> orderingDirectionAsc(| descending_contextual_keyword -> orderingDirectionDesc()
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==IDENTIFIER) ) {
                int LA107_1 = input.LA(2);

                if ( ((input.LT(1).getText().equals("ascending"))) ) {
                    alt107=1;
                }
                else if ( ((input.LT(1).getText().equals("descending"))) ) {
                    alt107=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 107, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }
            switch (alt107) {
                case 1 :
                    // CSharp.g:1367:2: ascending_contextual_keyword
                    {
                    pushFollow(FOLLOW_ascending_contextual_keyword_in_ordering_direction9377);
                    ascending_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1368:2: -> orderingDirectionAsc(
                      {
                          retval.st = templateLib.getInstanceOf("orderingDirectionAsc");
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1369:4: descending_contextual_keyword
                    {
                    pushFollow(FOLLOW_descending_contextual_keyword_in_ordering_direction9388);
                    descending_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1370:2: -> orderingDirectionDesc(
                      {
                          retval.st = templateLib.getInstanceOf("orderingDirectionDesc");
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ordering_direction"


    public static class select_or_group_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "select_or_group_clause"
    // CSharp.g:1372:1: select_or_group_clause : (cls1= select_clause -> selectOrGroupClause(clause=cls1)|cls2= group_clause -> selectOrGroupClause(clause=cls2));
    public final CSharp.select_or_group_clause_return select_or_group_clause() throws RecognitionException {
        CSharp.select_or_group_clause_return retval = new CSharp.select_or_group_clause_return();
        retval.start = input.LT(1);


        CSharp.select_clause_return cls1 =null;

        CSharp.group_clause_return cls2 =null;


        try {
            // CSharp.g:1373:2: (cls1= select_clause -> selectOrGroupClause(clause=cls1)|cls2= group_clause -> selectOrGroupClause(clause=cls2))
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==IDENTIFIER) ) {
                int LA108_1 = input.LA(2);

                if ( ((input.LT(1).getText().equals("select"))) ) {
                    alt108=1;
                }
                else if ( ((input.LT(1).getText().equals("group"))) ) {
                    alt108=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;

            }
            switch (alt108) {
                case 1 :
                    // CSharp.g:1374:2: cls1= select_clause
                    {
                    pushFollow(FOLLOW_select_clause_in_select_or_group_clause9409);
                    cls1=select_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1375:2: -> selectOrGroupClause(clause=cls1)
                      {
                          retval.st = templateLib.getInstanceOf("selectOrGroupClause",new STAttrMap().put("clause", cls1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1376:4: cls2= group_clause
                    {
                    pushFollow(FOLLOW_group_clause_in_select_or_group_clause9425);
                    cls2=group_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1377:2: -> selectOrGroupClause(clause=cls2)
                      {
                          retval.st = templateLib.getInstanceOf("selectOrGroupClause",new STAttrMap().put("clause", cls2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "select_or_group_clause"


    public static class select_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "select_clause"
    // CSharp.g:1380:1: select_clause : slctKwd= select_contextual_keyword expr= expression -> selectClause(keyWrd=slctKwdexpression=CSharpHelper.prefixTempVar($expr.text));
    public final CSharp.select_clause_return select_clause() throws RecognitionException {
        CSharp.select_clause_return retval = new CSharp.select_clause_return();
        retval.start = input.LT(1);


        CSharp.select_contextual_keyword_return slctKwd =null;

        CSharp.expression_return expr =null;


        try {
            // CSharp.g:1381:2: (slctKwd= select_contextual_keyword expr= expression -> selectClause(keyWrd=slctKwdexpression=CSharpHelper.prefixTempVar($expr.text)))
            // CSharp.g:1382:2: slctKwd= select_contextual_keyword expr= expression
            {
            pushFollow(FOLLOW_select_contextual_keyword_in_select_clause9451);
            slctKwd=select_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_select_clause9455);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1383:2: -> selectClause(keyWrd=slctKwdexpression=CSharpHelper.prefixTempVar($expr.text))
              {
                  retval.st = templateLib.getInstanceOf("selectClause",new STAttrMap().put("keyWrd", slctKwd).put("expression", CSharpHelper.prefixTempVar((expr!=null?input.toString(expr.start,expr.stop):null))));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "select_clause"


    public static class group_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "group_clause"
    // CSharp.g:1385:1: group_clause : grpKwd= group_contextual_keyword expr1= expression byKwrd= by_contextual_keyword expr2= expression -> groupClause(groupkeyWrd=grpKwdexpression1=expr1byKeyWrd=byKwrdexpression2=expr2);
    public final CSharp.group_clause_return group_clause() throws RecognitionException {
        CSharp.group_clause_return retval = new CSharp.group_clause_return();
        retval.start = input.LT(1);


        CSharp.group_contextual_keyword_return grpKwd =null;

        CSharp.expression_return expr1 =null;

        CSharp.by_contextual_keyword_return byKwrd =null;

        CSharp.expression_return expr2 =null;


        try {
            // CSharp.g:1386:2: (grpKwd= group_contextual_keyword expr1= expression byKwrd= by_contextual_keyword expr2= expression -> groupClause(groupkeyWrd=grpKwdexpression1=expr1byKeyWrd=byKwrdexpression2=expr2))
            // CSharp.g:1387:2: grpKwd= group_contextual_keyword expr1= expression byKwrd= by_contextual_keyword expr2= expression
            {
            pushFollow(FOLLOW_group_contextual_keyword_in_group_clause9483);
            grpKwd=group_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_group_clause9487);
            expr1=expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_by_contextual_keyword_in_group_clause9491);
            byKwrd=by_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_group_clause9495);
            expr2=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1388:2: -> groupClause(groupkeyWrd=grpKwdexpression1=expr1byKeyWrd=byKwrdexpression2=expr2)
              {
                  retval.st = templateLib.getInstanceOf("groupClause",new STAttrMap().put("groupkeyWrd", grpKwd).put("expression1", expr1).put("byKeyWrd", byKwrd).put("expression2", expr2));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_clause"


    public static class query_continuation_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "query_continuation"
    // CSharp.g:1391:1: query_continuation : intoKwd= into_contextual_keyword IDENTIFIER qBdy= query_body -> queryContinuation(intoKeyWrd=intoKwdname=$IDENTIFIER.textqueryBody=qBdy);
    public final CSharp.query_continuation_return query_continuation() throws RecognitionException {
        CSharp.query_continuation_return retval = new CSharp.query_continuation_return();
        retval.start = input.LT(1);


        Token IDENTIFIER145=null;
        CSharp.into_contextual_keyword_return intoKwd =null;

        CSharp.query_body_return qBdy =null;


        try {
            // CSharp.g:1392:2: (intoKwd= into_contextual_keyword IDENTIFIER qBdy= query_body -> queryContinuation(intoKeyWrd=intoKwdname=$IDENTIFIER.textqueryBody=qBdy))
            // CSharp.g:1393:2: intoKwd= into_contextual_keyword IDENTIFIER qBdy= query_body
            {
            pushFollow(FOLLOW_into_contextual_keyword_in_query_continuation9533);
            intoKwd=into_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            IDENTIFIER145=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_query_continuation9535); if (state.failed) return retval;

            pushFollow(FOLLOW_query_body_in_query_continuation9539);
            qBdy=query_body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1394:2: -> queryContinuation(intoKeyWrd=intoKwdname=$IDENTIFIER.textqueryBody=qBdy)
              {
                  retval.st = templateLib.getInstanceOf("queryContinuation",new STAttrMap().put("intoKeyWrd", intoKwd).put("name", (IDENTIFIER145!=null?IDENTIFIER145.getText():null)).put("queryBody", qBdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query_continuation"


    public static class assignment_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "assignment"
    // CSharp.g:1397:1: assignment : unExpr= unary_expression optr= assignment_operator expr= expression -> assignment(unaryExpr=unExproperator=optrexpression=expr);
    public final CSharp.assignment_return assignment() throws RecognitionException {
        CSharp.assignment_return retval = new CSharp.assignment_return();
        retval.start = input.LT(1);


        CSharp.unary_expression_return unExpr =null;

        CSharp.assignment_operator_return optr =null;

        CSharp.expression_return expr =null;


        try {
            // CSharp.g:1398:2: (unExpr= unary_expression optr= assignment_operator expr= expression -> assignment(unaryExpr=unExproperator=optrexpression=expr))
            // CSharp.g:1399:2: unExpr= unary_expression optr= assignment_operator expr= expression
            {
            pushFollow(FOLLOW_unary_expression_in_assignment9573);
            unExpr=unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_assignment_operator_in_assignment9577);
            optr=assignment_operator();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_assignment9581);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1400:2: -> assignment(unaryExpr=unExproperator=optrexpression=expr)
              {
                  retval.st = templateLib.getInstanceOf("assignment",new STAttrMap().put("unaryExpr", unExpr).put("operator", optr).put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assignment"


    public static class assignment_operator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "assignment_operator"
    // CSharp.g:1402:1: assignment_operator : ( ASSIGNMENT -> text(value=$ASSIGNMENT.text)| OP_ADD_ASSIGNMENT -> text(value=$OP_ADD_ASSIGNMENT.text)| OP_SUB_ASSIGNMENT -> text(value=$OP_SUB_ASSIGNMENT.text)| OP_MULT_ASSIGNMENT -> text(value=$OP_MULT_ASSIGNMENT.text)| OP_DIV_ASSIGNMENT -> text(value=$OP_DIV_ASSIGNMENT.text)| OP_MOD_ASSIGNMENT -> text(value=$OP_MOD_ASSIGNMENT.text)| OP_AND_ASSIGNMENT -> text(value=$OP_AND_ASSIGNMENT.text)| OP_OR_ASSIGNMENT -> text(value=$OP_OR_ASSIGNMENT.text)| OP_XOR_ASSIGNMENT -> text(value=$OP_XOR_ASSIGNMENT.text)| OP_LEFT_SHIFT_ASSIGNMENT -> text(value=$OP_LEFT_SHIFT_ASSIGNMENT.text)|rshftAsgn= right_shift_assignment -> text(value=rshftAsgn));
    public final CSharp.assignment_operator_return assignment_operator() throws RecognitionException {
        CSharp.assignment_operator_return retval = new CSharp.assignment_operator_return();
        retval.start = input.LT(1);


        Token ASSIGNMENT146=null;
        Token OP_ADD_ASSIGNMENT147=null;
        Token OP_SUB_ASSIGNMENT148=null;
        Token OP_MULT_ASSIGNMENT149=null;
        Token OP_DIV_ASSIGNMENT150=null;
        Token OP_MOD_ASSIGNMENT151=null;
        Token OP_AND_ASSIGNMENT152=null;
        Token OP_OR_ASSIGNMENT153=null;
        Token OP_XOR_ASSIGNMENT154=null;
        Token OP_LEFT_SHIFT_ASSIGNMENT155=null;
        CSharp.right_shift_assignment_return rshftAsgn =null;


        try {
            // CSharp.g:1403:2: ( ASSIGNMENT -> text(value=$ASSIGNMENT.text)| OP_ADD_ASSIGNMENT -> text(value=$OP_ADD_ASSIGNMENT.text)| OP_SUB_ASSIGNMENT -> text(value=$OP_SUB_ASSIGNMENT.text)| OP_MULT_ASSIGNMENT -> text(value=$OP_MULT_ASSIGNMENT.text)| OP_DIV_ASSIGNMENT -> text(value=$OP_DIV_ASSIGNMENT.text)| OP_MOD_ASSIGNMENT -> text(value=$OP_MOD_ASSIGNMENT.text)| OP_AND_ASSIGNMENT -> text(value=$OP_AND_ASSIGNMENT.text)| OP_OR_ASSIGNMENT -> text(value=$OP_OR_ASSIGNMENT.text)| OP_XOR_ASSIGNMENT -> text(value=$OP_XOR_ASSIGNMENT.text)| OP_LEFT_SHIFT_ASSIGNMENT -> text(value=$OP_LEFT_SHIFT_ASSIGNMENT.text)|rshftAsgn= right_shift_assignment -> text(value=rshftAsgn))
            int alt109=11;
            switch ( input.LA(1) ) {
            case ASSIGNMENT:
                {
                alt109=1;
                }
                break;
            case OP_ADD_ASSIGNMENT:
                {
                alt109=2;
                }
                break;
            case OP_SUB_ASSIGNMENT:
                {
                alt109=3;
                }
                break;
            case OP_MULT_ASSIGNMENT:
                {
                alt109=4;
                }
                break;
            case OP_DIV_ASSIGNMENT:
                {
                alt109=5;
                }
                break;
            case OP_MOD_ASSIGNMENT:
                {
                alt109=6;
                }
                break;
            case OP_AND_ASSIGNMENT:
                {
                alt109=7;
                }
                break;
            case OP_OR_ASSIGNMENT:
                {
                alt109=8;
                }
                break;
            case OP_XOR_ASSIGNMENT:
                {
                alt109=9;
                }
                break;
            case OP_LEFT_SHIFT_ASSIGNMENT:
                {
                alt109=10;
                }
                break;
            case GT:
                {
                alt109=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;

            }

            switch (alt109) {
                case 1 :
                    // CSharp.g:1404:2: ASSIGNMENT
                    {
                    ASSIGNMENT146=(Token)match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_assignment_operator9611); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1405:2: -> text(value=$ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ASSIGNMENT146!=null?ASSIGNMENT146.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1406:4: OP_ADD_ASSIGNMENT
                    {
                    OP_ADD_ASSIGNMENT147=(Token)match(input,OP_ADD_ASSIGNMENT,FOLLOW_OP_ADD_ASSIGNMENT_in_assignment_operator9625); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1407:2: -> text(value=$OP_ADD_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_ADD_ASSIGNMENT147!=null?OP_ADD_ASSIGNMENT147.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:1408:4: OP_SUB_ASSIGNMENT
                    {
                    OP_SUB_ASSIGNMENT148=(Token)match(input,OP_SUB_ASSIGNMENT,FOLLOW_OP_SUB_ASSIGNMENT_in_assignment_operator9639); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1409:2: -> text(value=$OP_SUB_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_SUB_ASSIGNMENT148!=null?OP_SUB_ASSIGNMENT148.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:1410:4: OP_MULT_ASSIGNMENT
                    {
                    OP_MULT_ASSIGNMENT149=(Token)match(input,OP_MULT_ASSIGNMENT,FOLLOW_OP_MULT_ASSIGNMENT_in_assignment_operator9653); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1411:2: -> text(value=$OP_MULT_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_MULT_ASSIGNMENT149!=null?OP_MULT_ASSIGNMENT149.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:1412:4: OP_DIV_ASSIGNMENT
                    {
                    OP_DIV_ASSIGNMENT150=(Token)match(input,OP_DIV_ASSIGNMENT,FOLLOW_OP_DIV_ASSIGNMENT_in_assignment_operator9667); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1413:2: -> text(value=$OP_DIV_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_DIV_ASSIGNMENT150!=null?OP_DIV_ASSIGNMENT150.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:1414:4: OP_MOD_ASSIGNMENT
                    {
                    OP_MOD_ASSIGNMENT151=(Token)match(input,OP_MOD_ASSIGNMENT,FOLLOW_OP_MOD_ASSIGNMENT_in_assignment_operator9681); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1415:2: -> text(value=$OP_MOD_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_MOD_ASSIGNMENT151!=null?OP_MOD_ASSIGNMENT151.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:1416:4: OP_AND_ASSIGNMENT
                    {
                    OP_AND_ASSIGNMENT152=(Token)match(input,OP_AND_ASSIGNMENT,FOLLOW_OP_AND_ASSIGNMENT_in_assignment_operator9695); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1417:2: -> text(value=$OP_AND_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_AND_ASSIGNMENT152!=null?OP_AND_ASSIGNMENT152.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:1418:4: OP_OR_ASSIGNMENT
                    {
                    OP_OR_ASSIGNMENT153=(Token)match(input,OP_OR_ASSIGNMENT,FOLLOW_OP_OR_ASSIGNMENT_in_assignment_operator9709); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1419:2: -> text(value=$OP_OR_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_OR_ASSIGNMENT153!=null?OP_OR_ASSIGNMENT153.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:1420:4: OP_XOR_ASSIGNMENT
                    {
                    OP_XOR_ASSIGNMENT154=(Token)match(input,OP_XOR_ASSIGNMENT,FOLLOW_OP_XOR_ASSIGNMENT_in_assignment_operator9723); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1421:2: -> text(value=$OP_XOR_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_XOR_ASSIGNMENT154!=null?OP_XOR_ASSIGNMENT154.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharp.g:1422:4: OP_LEFT_SHIFT_ASSIGNMENT
                    {
                    OP_LEFT_SHIFT_ASSIGNMENT155=(Token)match(input,OP_LEFT_SHIFT_ASSIGNMENT,FOLLOW_OP_LEFT_SHIFT_ASSIGNMENT_in_assignment_operator9737); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1423:2: -> text(value=$OP_LEFT_SHIFT_ASSIGNMENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_LEFT_SHIFT_ASSIGNMENT155!=null?OP_LEFT_SHIFT_ASSIGNMENT155.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharp.g:1424:4: rshftAsgn= right_shift_assignment
                    {
                    pushFollow(FOLLOW_right_shift_assignment_in_assignment_operator9753);
                    rshftAsgn=right_shift_assignment();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1425:2: -> text(value=rshftAsgn)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", rshftAsgn));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assignment_operator"


    public static class expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "expression"
    // CSharp.g:1427:1: expression : ( ( assignment )=>asgn= assignment -> expression(assignment=CSharpHelper.processAssignmentStmts($asgn.text))|nonAsgn= non_assignment_expression -> expression(assignment=nonAsgn));
    public final CSharp.expression_return expression() throws RecognitionException {
        CSharp.expression_return retval = new CSharp.expression_return();
        retval.start = input.LT(1);


        CSharp.assignment_return asgn =null;

        CSharp.non_assignment_expression_return nonAsgn =null;


        try {
            // CSharp.g:1428:2: ( ( assignment )=>asgn= assignment -> expression(assignment=CSharpHelper.processAssignmentStmts($asgn.text))|nonAsgn= non_assignment_expression -> expression(assignment=nonAsgn))
            int alt110=2;
            switch ( input.LA(1) ) {
            case OPEN_PARENS:
                {
                int LA110_1 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 1, input);

                    throw nvae;

                }
                }
                break;
            case TRUE:
                {
                int LA110_2 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 2, input);

                    throw nvae;

                }
                }
                break;
            case FALSE:
                {
                int LA110_3 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 3, input);

                    throw nvae;

                }
                }
                break;
            case INTEGER_LITERAL:
                {
                int LA110_4 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 4, input);

                    throw nvae;

                }
                }
                break;
            case REAL_LITERAL:
                {
                int LA110_5 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 5, input);

                    throw nvae;

                }
                }
                break;
            case CHARACTER_LITERAL:
                {
                int LA110_6 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 6, input);

                    throw nvae;

                }
                }
                break;
            case STRING_LITERAL:
                {
                int LA110_7 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 7, input);

                    throw nvae;

                }
                }
                break;
            case NULL:
                {
                int LA110_8 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 8, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA110_9 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 9, input);

                    throw nvae;

                }
                }
                break;
            case BOOL:
                {
                int LA110_10 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 10, input);

                    throw nvae;

                }
                }
                break;
            case BYTE:
                {
                int LA110_11 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 11, input);

                    throw nvae;

                }
                }
                break;
            case CHAR:
                {
                int LA110_12 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 12, input);

                    throw nvae;

                }
                }
                break;
            case DECIMAL:
                {
                int LA110_13 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 13, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE:
                {
                int LA110_14 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 14, input);

                    throw nvae;

                }
                }
                break;
            case FLOAT:
                {
                int LA110_15 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 15, input);

                    throw nvae;

                }
                }
                break;
            case INT:
                {
                int LA110_16 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 16, input);

                    throw nvae;

                }
                }
                break;
            case LONG:
                {
                int LA110_17 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 17, input);

                    throw nvae;

                }
                }
                break;
            case OBJECT:
                {
                int LA110_18 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 18, input);

                    throw nvae;

                }
                }
                break;
            case SBYTE:
                {
                int LA110_19 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 19, input);

                    throw nvae;

                }
                }
                break;
            case SHORT:
                {
                int LA110_20 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 20, input);

                    throw nvae;

                }
                }
                break;
            case STRING:
                {
                int LA110_21 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 21, input);

                    throw nvae;

                }
                }
                break;
            case UINT:
                {
                int LA110_22 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 22, input);

                    throw nvae;

                }
                }
                break;
            case ULONG:
                {
                int LA110_23 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 23, input);

                    throw nvae;

                }
                }
                break;
            case USHORT:
                {
                int LA110_24 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 24, input);

                    throw nvae;

                }
                }
                break;
            case THIS:
                {
                int LA110_25 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 25, input);

                    throw nvae;

                }
                }
                break;
            case BASE:
                {
                int LA110_26 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 26, input);

                    throw nvae;

                }
                }
                break;
            case NEW:
                {
                int LA110_27 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 27, input);

                    throw nvae;

                }
                }
                break;
            case TYPEOF:
                {
                int LA110_28 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 28, input);

                    throw nvae;

                }
                }
                break;
            case CHECKED:
                {
                int LA110_29 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 29, input);

                    throw nvae;

                }
                }
                break;
            case UNCHECKED:
                {
                int LA110_30 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 30, input);

                    throw nvae;

                }
                }
                break;
            case DEFAULT:
                {
                int LA110_31 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 31, input);

                    throw nvae;

                }
                }
                break;
            case DELEGATE:
                {
                int LA110_32 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 32, input);

                    throw nvae;

                }
                }
                break;
            case SIZEOF:
                {
                int LA110_33 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 33, input);

                    throw nvae;

                }
                }
                break;
            case PLUS:
                {
                int LA110_34 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 34, input);

                    throw nvae;

                }
                }
                break;
            case MINUS:
                {
                int LA110_35 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 35, input);

                    throw nvae;

                }
                }
                break;
            case BANG:
                {
                int LA110_36 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 36, input);

                    throw nvae;

                }
                }
                break;
            case TILDE:
                {
                int LA110_37 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 37, input);

                    throw nvae;

                }
                }
                break;
            case OP_INC:
                {
                int LA110_38 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 38, input);

                    throw nvae;

                }
                }
                break;
            case OP_DEC:
                {
                int LA110_39 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 39, input);

                    throw nvae;

                }
                }
                break;
            case STAR:
                {
                int LA110_40 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 40, input);

                    throw nvae;

                }
                }
                break;
            case AMP:
                {
                int LA110_41 = input.LA(2);

                if ( (synpred11_CSharp()) ) {
                    alt110=1;
                }
                else if ( (true) ) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 41, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }

            switch (alt110) {
                case 1 :
                    // CSharp.g:1429:2: ( assignment )=>asgn= assignment
                    {
                    pushFollow(FOLLOW_assignment_in_expression9782);
                    asgn=assignment();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1430:2: -> expression(assignment=CSharpHelper.processAssignmentStmts($asgn.text))
                      {
                          retval.st = templateLib.getInstanceOf("expression",new STAttrMap().put("assignment", CSharpHelper.processAssignmentStmts((asgn!=null?input.toString(asgn.start,asgn.stop):null))));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1431:4: nonAsgn= non_assignment_expression
                    {
                    pushFollow(FOLLOW_non_assignment_expression_in_expression9798);
                    nonAsgn=non_assignment_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1432:2: -> expression(assignment=nonAsgn)
                      {
                          retval.st = templateLib.getInstanceOf("expression",new STAttrMap().put("assignment", nonAsgn));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class non_assignment_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "non_assignment_expression"
    // CSharp.g:1434:1: non_assignment_expression : ( ( ( lambda_expression )=>le= lambda_expression ) -> nonAssignmentExpression(expression=le)| ( ( query_expression )=>qe= query_expression ) -> nonAssignmentExpression(expression=qe)|ce= conditional_expression -> nonAssignmentExpression(expression=ce));
    public final CSharp.non_assignment_expression_return non_assignment_expression() throws RecognitionException {
        CSharp.non_assignment_expression_return retval = new CSharp.non_assignment_expression_return();
        retval.start = input.LT(1);


        CSharp.lambda_expression_return le =null;

        CSharp.query_expression_return qe =null;

        CSharp.conditional_expression_return ce =null;


        try {
            // CSharp.g:1435:2: ( ( ( lambda_expression )=>le= lambda_expression ) -> nonAssignmentExpression(expression=le)| ( ( query_expression )=>qe= query_expression ) -> nonAssignmentExpression(expression=qe)|ce= conditional_expression -> nonAssignmentExpression(expression=ce))
            int alt111=3;
            switch ( input.LA(1) ) {
            case OPEN_PARENS:
                {
                int LA111_1 = input.LA(2);

                if ( (synpred12_CSharp()) ) {
                    alt111=1;
                }
                else if ( (true) ) {
                    alt111=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 111, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA111_2 = input.LA(2);

                if ( (synpred12_CSharp()) ) {
                    alt111=1;
                }
                else if ( (((synpred13_CSharp()&&synpred13_CSharp())&&(input.LT(1).getText().equals("from")))) ) {
                    alt111=2;
                }
                else if ( (true) ) {
                    alt111=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 111, 2, input);

                    throw nvae;

                }
                }
                break;
            case AMP:
            case BANG:
            case BASE:
            case BOOL:
            case BYTE:
            case CHAR:
            case CHARACTER_LITERAL:
            case CHECKED:
            case DECIMAL:
            case DEFAULT:
            case DELEGATE:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case INTEGER_LITERAL:
            case LONG:
            case MINUS:
            case NEW:
            case NULL:
            case OBJECT:
            case OP_DEC:
            case OP_INC:
            case PLUS:
            case REAL_LITERAL:
            case SBYTE:
            case SHORT:
            case SIZEOF:
            case STAR:
            case STRING:
            case STRING_LITERAL:
            case THIS:
            case TILDE:
            case TRUE:
            case TYPEOF:
            case UINT:
            case ULONG:
            case UNCHECKED:
            case USHORT:
                {
                alt111=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }

            switch (alt111) {
                case 1 :
                    // CSharp.g:1436:2: ( ( lambda_expression )=>le= lambda_expression )
                    {
                    // CSharp.g:1436:2: ( ( lambda_expression )=>le= lambda_expression )
                    // CSharp.g:1436:3: ( lambda_expression )=>le= lambda_expression
                    {
                    pushFollow(FOLLOW_lambda_expression_in_non_assignment_expression9828);
                    le=lambda_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1437:2: -> nonAssignmentExpression(expression=le)
                      {
                          retval.st = templateLib.getInstanceOf("nonAssignmentExpression",new STAttrMap().put("expression", le));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1438:4: ( ( query_expression )=>qe= query_expression )
                    {
                    // CSharp.g:1438:4: ( ( query_expression )=>qe= query_expression )
                    // CSharp.g:1438:5: ( query_expression )=>qe= query_expression
                    {
                    pushFollow(FOLLOW_query_expression_in_non_assignment_expression9852);
                    qe=query_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1439:2: -> nonAssignmentExpression(expression=qe)
                      {
                          retval.st = templateLib.getInstanceOf("nonAssignmentExpression",new STAttrMap().put("expression", qe));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:1440:4: ce= conditional_expression
                    {
                    pushFollow(FOLLOW_conditional_expression_in_non_assignment_expression9869);
                    ce=conditional_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1441:2: -> nonAssignmentExpression(expression=ce)
                      {
                          retval.st = templateLib.getInstanceOf("nonAssignmentExpression",new STAttrMap().put("expression", ce));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "non_assignment_expression"


    public static class constant_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constant_expression"
    // CSharp.g:1444:1: constant_expression : expr= expression -> constantExpression(expression=expr);
    public final CSharp.constant_expression_return constant_expression() throws RecognitionException {
        CSharp.constant_expression_return retval = new CSharp.constant_expression_return();
        retval.start = input.LT(1);


        CSharp.expression_return expr =null;


        try {
            // CSharp.g:1445:2: (expr= expression -> constantExpression(expression=expr))
            // CSharp.g:1446:2: expr= expression
            {
            pushFollow(FOLLOW_expression_in_constant_expression9895);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1447:2: -> constantExpression(expression=expr)
              {
                  retval.st = templateLib.getInstanceOf("constantExpression",new STAttrMap().put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constant_expression"


    public static class boolean_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "boolean_expression"
    // CSharp.g:1449:1: boolean_expression : expr= expression -> booleanExpression(boolExpr=expr);
    public final CSharp.boolean_expression_return boolean_expression() throws RecognitionException {
        CSharp.boolean_expression_return retval = new CSharp.boolean_expression_return();
        retval.start = input.LT(1);


        CSharp.expression_return expr =null;


        try {
            // CSharp.g:1450:2: (expr= expression -> booleanExpression(boolExpr=expr))
            // CSharp.g:1451:2: expr= expression
            {
            pushFollow(FOLLOW_expression_in_boolean_expression9919);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1452:2: -> booleanExpression(boolExpr=expr)
              {
                  retval.st = templateLib.getInstanceOf("booleanExpression",new STAttrMap().put("boolExpr", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "boolean_expression"


    public static class statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "statement"
    // CSharp.g:1456:1: statement : ( ( ( labeled_statement )=>lblStmt= labeled_statement ) -> statement(stmt=lblStmt)| ( ( declaration_statement )=>decStmt= declaration_statement ) -> statement(stmt=decStmt)|embdStmt= embedded_statement -> statement(stmt=embdStmt));
    public final CSharp.statement_return statement() throws RecognitionException {
        CSharp.statement_return retval = new CSharp.statement_return();
        retval.start = input.LT(1);


        CSharp.labeled_statement_return lblStmt =null;

        CSharp.declaration_statement_return decStmt =null;

        CSharp.embedded_statement_return embdStmt =null;


        try {
            // CSharp.g:1457:2: ( ( ( labeled_statement )=>lblStmt= labeled_statement ) -> statement(stmt=lblStmt)| ( ( declaration_statement )=>decStmt= declaration_statement ) -> statement(stmt=decStmt)|embdStmt= embedded_statement -> statement(stmt=embdStmt))
            int alt112=3;
            alt112 = dfa112.predict(input);
            switch (alt112) {
                case 1 :
                    // CSharp.g:1458:2: ( ( labeled_statement )=>lblStmt= labeled_statement )
                    {
                    // CSharp.g:1458:2: ( ( labeled_statement )=>lblStmt= labeled_statement )
                    // CSharp.g:1458:3: ( labeled_statement )=>lblStmt= labeled_statement
                    {
                    pushFollow(FOLLOW_labeled_statement_in_statement9952);
                    lblStmt=labeled_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1459:2: -> statement(stmt=lblStmt)
                      {
                          retval.st = templateLib.getInstanceOf("statement",new STAttrMap().put("stmt", lblStmt));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1460:3: ( ( declaration_statement )=>decStmt= declaration_statement )
                    {
                    // CSharp.g:1460:3: ( ( declaration_statement )=>decStmt= declaration_statement )
                    // CSharp.g:1460:5: ( declaration_statement )=>decStmt= declaration_statement
                    {
                    pushFollow(FOLLOW_declaration_statement_in_statement9976);
                    decStmt=declaration_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1461:2: -> statement(stmt=decStmt)
                      {
                          retval.st = templateLib.getInstanceOf("statement",new STAttrMap().put("stmt", decStmt));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:1462:4: embdStmt= embedded_statement
                    {
                    pushFollow(FOLLOW_embedded_statement_in_statement9993);
                    embdStmt=embedded_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1463:2: -> statement(stmt=embdStmt)
                      {
                          retval.st = templateLib.getInstanceOf("statement",new STAttrMap().put("stmt", embdStmt));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class embedded_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "embedded_statement"
    // CSharp.g:1465:1: embedded_statement : (blck= block -> embeddedStatement(stmt=blck)|emptStmt= empty_statement -> embeddedStatement(stmt=emptStmt)|exprStmt= expression_statement -> embeddedStatement(stmt=exprStmt)|selctStmt= selection_statement -> embeddedStatement(stmt=selctStmt)|iterStmt= iteration_statement -> embeddedStatement(stmt=iterStmt)|jmpStmt= jump_statement -> embeddedStatement(stmt=jmpStmt)|tryStmt= try_statement -> embeddedStatement(stmt=tryStmt)|chkdStmt= checked_statement -> embeddedStatement(stmt=chkdStmt)|unChkdStmt= unchecked_statement -> embeddedStatement(stmt=unChkdStmt)|lckStmt= lock_statement -> embeddedStatement(stmt=lckStmt)|usngStmt= using_statement -> embeddedStatement(stmt=usngStmt)|yldStmt= yield_statement -> embeddedStatement(stmt=yldStmt)|embdStmtUnsf= embedded_statement_unsafe -> embeddedStatement(stmt=embdStmtUnsf));
    public final CSharp.embedded_statement_return embedded_statement() throws RecognitionException {
        CSharp.embedded_statement_return retval = new CSharp.embedded_statement_return();
        retval.start = input.LT(1);


        CSharp.block_return blck =null;

        CSharp.empty_statement_return emptStmt =null;

        CSharp.expression_statement_return exprStmt =null;

        CSharp.selection_statement_return selctStmt =null;

        CSharp.iteration_statement_return iterStmt =null;

        CSharp.jump_statement_return jmpStmt =null;

        CSharp.try_statement_return tryStmt =null;

        CSharp.checked_statement_return chkdStmt =null;

        CSharp.unchecked_statement_return unChkdStmt =null;

        CSharp.lock_statement_return lckStmt =null;

        CSharp.using_statement_return usngStmt =null;

        CSharp.yield_statement_return yldStmt =null;

        CSharp.embedded_statement_unsafe_return embdStmtUnsf =null;


        try {
            // CSharp.g:1466:2: (blck= block -> embeddedStatement(stmt=blck)|emptStmt= empty_statement -> embeddedStatement(stmt=emptStmt)|exprStmt= expression_statement -> embeddedStatement(stmt=exprStmt)|selctStmt= selection_statement -> embeddedStatement(stmt=selctStmt)|iterStmt= iteration_statement -> embeddedStatement(stmt=iterStmt)|jmpStmt= jump_statement -> embeddedStatement(stmt=jmpStmt)|tryStmt= try_statement -> embeddedStatement(stmt=tryStmt)|chkdStmt= checked_statement -> embeddedStatement(stmt=chkdStmt)|unChkdStmt= unchecked_statement -> embeddedStatement(stmt=unChkdStmt)|lckStmt= lock_statement -> embeddedStatement(stmt=lckStmt)|usngStmt= using_statement -> embeddedStatement(stmt=usngStmt)|yldStmt= yield_statement -> embeddedStatement(stmt=yldStmt)|embdStmtUnsf= embedded_statement_unsafe -> embeddedStatement(stmt=embdStmtUnsf))
            int alt113=13;
            switch ( input.LA(1) ) {
            case OPEN_BRACE:
                {
                alt113=1;
                }
                break;
            case SEMICOLON:
                {
                alt113=2;
                }
                break;
            case AMP:
            case BANG:
            case BASE:
            case BOOL:
            case BYTE:
            case CHAR:
            case CHARACTER_LITERAL:
            case DECIMAL:
            case DEFAULT:
            case DELEGATE:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case INTEGER_LITERAL:
            case LONG:
            case MINUS:
            case NEW:
            case NULL:
            case OBJECT:
            case OPEN_PARENS:
            case OP_DEC:
            case OP_INC:
            case PLUS:
            case REAL_LITERAL:
            case SBYTE:
            case SHORT:
            case SIZEOF:
            case STAR:
            case STRING:
            case STRING_LITERAL:
            case THIS:
            case TILDE:
            case TRUE:
            case TYPEOF:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt113=3;
                }
                break;
            case IDENTIFIER:
                {
                int LA113_4 = input.LA(2);

                if ( ((LA113_4 >= AMP && LA113_4 <= ASSIGNMENT)||(LA113_4 >= BITWISE_OR && LA113_4 <= BOOL)||(LA113_4 >= BYTE && LA113_4 <= CARET)||LA113_4==CHAR||LA113_4==DECIMAL||LA113_4==DIV||(LA113_4 >= DOT && LA113_4 <= DOUBLE)||LA113_4==DOUBLE_COLON||LA113_4==FLOAT||LA113_4==GT||LA113_4==IDENTIFIER||LA113_4==INT||(LA113_4 >= INTERR && LA113_4 <= IS)||(LA113_4 >= LONG && LA113_4 <= LT)||LA113_4==MINUS||LA113_4==OBJECT||(LA113_4 >= OPEN_BRACKET && LA113_4 <= OPEN_PARENS)||(LA113_4 >= OP_ADD_ASSIGNMENT && LA113_4 <= OP_XOR_ASSIGNMENT)||(LA113_4 >= PERCENT && LA113_4 <= PLUS)||LA113_4==SBYTE||LA113_4==SEMICOLON||LA113_4==SHORT||LA113_4==STAR||LA113_4==STRING||(LA113_4 >= UINT && LA113_4 <= ULONG)||LA113_4==USHORT||LA113_4==VOID) ) {
                    alt113=3;
                }
                else if ( (LA113_4==BREAK||LA113_4==RETURN) ) {
                    alt113=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 4, input);

                    throw nvae;

                }
                }
                break;
            case CHECKED:
                {
                int LA113_5 = input.LA(2);

                if ( (LA113_5==OPEN_PARENS) ) {
                    alt113=3;
                }
                else if ( (LA113_5==OPEN_BRACE) ) {
                    alt113=8;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 5, input);

                    throw nvae;

                }
                }
                break;
            case UNCHECKED:
                {
                int LA113_6 = input.LA(2);

                if ( (LA113_6==OPEN_PARENS) ) {
                    alt113=3;
                }
                else if ( (LA113_6==OPEN_BRACE) ) {
                    alt113=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 6, input);

                    throw nvae;

                }
                }
                break;
            case IF:
            case SWITCH:
                {
                alt113=4;
                }
                break;
            case DO:
            case FOR:
            case FOREACH:
            case WHILE:
                {
                alt113=5;
                }
                break;
            case BREAK:
            case CONTINUE:
            case GOTO:
            case RETURN:
            case THROW:
                {
                alt113=6;
                }
                break;
            case TRY:
                {
                alt113=7;
                }
                break;
            case LOCK:
                {
                alt113=10;
                }
                break;
            case USING:
                {
                alt113=11;
                }
                break;
            case FIXED:
            case UNSAFE:
                {
                alt113=13;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;

            }

            switch (alt113) {
                case 1 :
                    // CSharp.g:1467:2: blck= block
                    {
                    pushFollow(FOLLOW_block_in_embedded_statement10017);
                    blck=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1468:2: -> embeddedStatement(stmt=blck)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", blck));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1469:4: emptStmt= empty_statement
                    {
                    pushFollow(FOLLOW_empty_statement_in_embedded_statement10033);
                    emptStmt=empty_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1470:2: -> embeddedStatement(stmt=emptStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", emptStmt));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:1471:4: exprStmt= expression_statement
                    {
                    pushFollow(FOLLOW_expression_statement_in_embedded_statement10049);
                    exprStmt=expression_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1472:2: -> embeddedStatement(stmt=exprStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", exprStmt));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:1473:4: selctStmt= selection_statement
                    {
                    pushFollow(FOLLOW_selection_statement_in_embedded_statement10065);
                    selctStmt=selection_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1474:2: -> embeddedStatement(stmt=selctStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", selctStmt));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:1475:4: iterStmt= iteration_statement
                    {
                    pushFollow(FOLLOW_iteration_statement_in_embedded_statement10081);
                    iterStmt=iteration_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1476:2: -> embeddedStatement(stmt=iterStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", iterStmt));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:1477:4: jmpStmt= jump_statement
                    {
                    pushFollow(FOLLOW_jump_statement_in_embedded_statement10097);
                    jmpStmt=jump_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1478:2: -> embeddedStatement(stmt=jmpStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", jmpStmt));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:1479:4: tryStmt= try_statement
                    {
                    pushFollow(FOLLOW_try_statement_in_embedded_statement10113);
                    tryStmt=try_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1480:2: -> embeddedStatement(stmt=tryStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", tryStmt));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:1481:4: chkdStmt= checked_statement
                    {
                    pushFollow(FOLLOW_checked_statement_in_embedded_statement10129);
                    chkdStmt=checked_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1482:2: -> embeddedStatement(stmt=chkdStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", chkdStmt));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:1483:4: unChkdStmt= unchecked_statement
                    {
                    pushFollow(FOLLOW_unchecked_statement_in_embedded_statement10145);
                    unChkdStmt=unchecked_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1484:2: -> embeddedStatement(stmt=unChkdStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", unChkdStmt));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharp.g:1485:4: lckStmt= lock_statement
                    {
                    pushFollow(FOLLOW_lock_statement_in_embedded_statement10161);
                    lckStmt=lock_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1486:2: -> embeddedStatement(stmt=lckStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", lckStmt));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharp.g:1487:4: usngStmt= using_statement
                    {
                    pushFollow(FOLLOW_using_statement_in_embedded_statement10177);
                    usngStmt=using_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1488:2: -> embeddedStatement(stmt=usngStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", usngStmt));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharp.g:1489:4: yldStmt= yield_statement
                    {
                    pushFollow(FOLLOW_yield_statement_in_embedded_statement10193);
                    yldStmt=yield_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1490:2: -> embeddedStatement(stmt=yldStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", yldStmt));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharp.g:1491:4: embdStmtUnsf= embedded_statement_unsafe
                    {
                    pushFollow(FOLLOW_embedded_statement_unsafe_in_embedded_statement10209);
                    embdStmtUnsf=embedded_statement_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1492:2: -> embeddedStatement(stmt=embdStmtUnsf)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatement",new STAttrMap().put("stmt", embdStmtUnsf));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "embedded_statement"


    public static class block_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "block"
    // CSharp.g:1495:1: block : OPEN_BRACE (comts= comments )? (lst= statement_list )? CLOSE_BRACE -> block(comments=comtsblockStmtLst=lst);
    public final CSharp.block_return block() throws RecognitionException {
        CSharp.block_return retval = new CSharp.block_return();
        retval.start = input.LT(1);


        CSharp.comments_return comts =null;

        CSharp.statement_list_return lst =null;


        try {
            // CSharp.g:1496:2: ( OPEN_BRACE (comts= comments )? (lst= statement_list )? CLOSE_BRACE -> block(comments=comtsblockStmtLst=lst))
            // CSharp.g:1497:2: OPEN_BRACE (comts= comments )? (lst= statement_list )? CLOSE_BRACE
            {
            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_block10233); if (state.failed) return retval;

            // CSharp.g:1497:13: (comts= comments )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( ((LA114_0 >= SINGLE_LINE_COMMENT && LA114_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // CSharp.g:1497:14: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_block10238);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:1497:31: (lst= statement_list )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==AMP||(LA115_0 >= BANG && LA115_0 <= BASE)||(LA115_0 >= BOOL && LA115_0 <= BYTE)||(LA115_0 >= CHAR && LA115_0 <= CHECKED)||(LA115_0 >= CONST && LA115_0 <= CONTINUE)||LA115_0==DECIMAL||(LA115_0 >= DEFAULT && LA115_0 <= DELEGATE)||LA115_0==DO||LA115_0==DOUBLE||LA115_0==FALSE||(LA115_0 >= FIXED && LA115_0 <= FOREACH)||LA115_0==GOTO||(LA115_0 >= IDENTIFIER && LA115_0 <= IF)||(LA115_0 >= INT && LA115_0 <= INTEGER_LITERAL)||(LA115_0 >= LOCK && LA115_0 <= LONG)||LA115_0==MINUS||LA115_0==NEW||LA115_0==NULL||(LA115_0 >= OBJECT && LA115_0 <= OPEN_BRACE)||LA115_0==OPEN_PARENS||LA115_0==OP_DEC||LA115_0==OP_INC||LA115_0==PLUS||LA115_0==REAL_LITERAL||LA115_0==RETURN||LA115_0==SBYTE||LA115_0==SEMICOLON||LA115_0==SHORT||LA115_0==SIZEOF||LA115_0==STAR||(LA115_0 >= STRING && LA115_0 <= STRING_LITERAL)||LA115_0==SWITCH||(LA115_0 >= THIS && LA115_0 <= TYPEOF)||(LA115_0 >= UINT && LA115_0 <= UNCHECKED)||(LA115_0 >= UNSAFE && LA115_0 <= USING)||LA115_0==VOID||LA115_0==WHILE) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // CSharp.g:1497:32: lst= statement_list
                    {
                    pushFollow(FOLLOW_statement_list_in_block10245);
                    lst=statement_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_block10249); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1498:2: -> block(comments=comtsblockStmtLst=lst)
              {
                  retval.st = templateLib.getInstanceOf("block",new STAttrMap().put("comments", comts).put("blockStmtLst", lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class statement_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "statement_list"
    // CSharp.g:1501:1: statement_list : (stmts+= statement )+ -> statementList(list=$stmts);
    public final CSharp.statement_list_return statement_list() throws RecognitionException {
        CSharp.statement_list_return retval = new CSharp.statement_list_return();
        retval.start = input.LT(1);


        List list_stmts=null;
        RuleReturnScope stmts = null;
        try {
            // CSharp.g:1502:2: ( (stmts+= statement )+ -> statementList(list=$stmts))
            // CSharp.g:1503:2: (stmts+= statement )+
            {
            // CSharp.g:1503:2: (stmts+= statement )+
            int cnt116=0;
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==DEFAULT) ) {
                    int LA116_2 = input.LA(2);

                    if ( (LA116_2==OPEN_PARENS) ) {
                        alt116=1;
                    }


                }
                else if ( (LA116_0==AMP||(LA116_0 >= BANG && LA116_0 <= BASE)||(LA116_0 >= BOOL && LA116_0 <= BYTE)||(LA116_0 >= CHAR && LA116_0 <= CHECKED)||(LA116_0 >= CONST && LA116_0 <= CONTINUE)||LA116_0==DECIMAL||LA116_0==DELEGATE||LA116_0==DO||LA116_0==DOUBLE||LA116_0==FALSE||(LA116_0 >= FIXED && LA116_0 <= FOREACH)||LA116_0==GOTO||(LA116_0 >= IDENTIFIER && LA116_0 <= IF)||(LA116_0 >= INT && LA116_0 <= INTEGER_LITERAL)||(LA116_0 >= LOCK && LA116_0 <= LONG)||LA116_0==MINUS||LA116_0==NEW||LA116_0==NULL||(LA116_0 >= OBJECT && LA116_0 <= OPEN_BRACE)||LA116_0==OPEN_PARENS||LA116_0==OP_DEC||LA116_0==OP_INC||LA116_0==PLUS||LA116_0==REAL_LITERAL||LA116_0==RETURN||LA116_0==SBYTE||LA116_0==SEMICOLON||LA116_0==SHORT||LA116_0==SIZEOF||LA116_0==STAR||(LA116_0 >= STRING && LA116_0 <= STRING_LITERAL)||LA116_0==SWITCH||(LA116_0 >= THIS && LA116_0 <= TYPEOF)||(LA116_0 >= UINT && LA116_0 <= UNCHECKED)||(LA116_0 >= UNSAFE && LA116_0 <= USING)||LA116_0==VOID||LA116_0==WHILE) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // CSharp.g:1503:3: stmts+= statement
            	    {
            	    pushFollow(FOLLOW_statement_in_statement_list10280);
            	    stmts=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_stmts==null) list_stmts=new ArrayList();
            	    list_stmts.add(stmts.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt116 >= 1 ) break loop116;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(116, input);
                        throw eee;
                }
                cnt116++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1504:2: -> statementList(list=$stmts)
              {
                  retval.st = templateLib.getInstanceOf("statementList",new STAttrMap().put("list", list_stmts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement_list"


    public static class empty_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "empty_statement"
    // CSharp.g:1506:1: empty_statement : val= SEMICOLON (comts= comments )? -> emptyStatement(value=$val.textcomments=comts);
    public final CSharp.empty_statement_return empty_statement() throws RecognitionException {
        CSharp.empty_statement_return retval = new CSharp.empty_statement_return();
        retval.start = input.LT(1);


        Token val=null;
        CSharp.comments_return comts =null;


        try {
            // CSharp.g:1507:2: (val= SEMICOLON (comts= comments )? -> emptyStatement(value=$val.textcomments=comts))
            // CSharp.g:1508:2: val= SEMICOLON (comts= comments )?
            {
            val=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_empty_statement10306); if (state.failed) return retval;

            // CSharp.g:1508:16: (comts= comments )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( ((LA117_0 >= SINGLE_LINE_COMMENT && LA117_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // CSharp.g:1508:17: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_empty_statement10311);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1509:2: -> emptyStatement(value=$val.textcomments=comts)
              {
                  retval.st = templateLib.getInstanceOf("emptyStatement",new STAttrMap().put("value", (val!=null?val.getText():null)).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "empty_statement"


    public static class labeled_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "labeled_statement"
    // CSharp.g:1512:1: labeled_statement : id= IDENTIFIER COLON stmt= statement -> labeledStatement(labelName=idlabelBody=stmt);
    public final CSharp.labeled_statement_return labeled_statement() throws RecognitionException {
        CSharp.labeled_statement_return retval = new CSharp.labeled_statement_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharp.statement_return stmt =null;


        try {
            // CSharp.g:1513:2: (id= IDENTIFIER COLON stmt= statement -> labeledStatement(labelName=idlabelBody=stmt))
            // CSharp.g:1514:2: id= IDENTIFIER COLON stmt= statement
            {
            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_labeled_statement10343); if (state.failed) return retval;

            match(input,COLON,FOLLOW_COLON_in_labeled_statement10345); if (state.failed) return retval;

            pushFollow(FOLLOW_statement_in_labeled_statement10349);
            stmt=statement();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1515:2: -> labeledStatement(labelName=idlabelBody=stmt)
              {
                  retval.st = templateLib.getInstanceOf("labeledStatement",new STAttrMap().put("labelName", id).put("labelBody", stmt));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "labeled_statement"


    public static class declaration_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "declaration_statement"
    // CSharp.g:1518:1: declaration_statement : (varDec= local_variable_declaration SEMICOLON (comts1= comments )? -> declarationStatement(variableDecl=$varDec.st.toString().trim()comments=comts1)|constDec= local_constant_declaration SEMICOLON (comts2= comments )? -> declarationStatement(variableDecl=constDeccomments=comts2));
    public final CSharp.declaration_statement_return declaration_statement() throws RecognitionException {
        CSharp.declaration_statement_return retval = new CSharp.declaration_statement_return();
        retval.start = input.LT(1);


        CSharp.local_variable_declaration_return varDec =null;

        CSharp.comments_return comts1 =null;

        CSharp.local_constant_declaration_return constDec =null;

        CSharp.comments_return comts2 =null;


        try {
            // CSharp.g:1519:2: (varDec= local_variable_declaration SEMICOLON (comts1= comments )? -> declarationStatement(variableDecl=$varDec.st.toString().trim()comments=comts1)|constDec= local_constant_declaration SEMICOLON (comts2= comments )? -> declarationStatement(variableDecl=constDeccomments=comts2))
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==BOOL||LA120_0==BYTE||LA120_0==CHAR||LA120_0==DECIMAL||LA120_0==DOUBLE||LA120_0==FLOAT||LA120_0==IDENTIFIER||LA120_0==INT||LA120_0==LONG||LA120_0==OBJECT||LA120_0==SBYTE||LA120_0==SHORT||LA120_0==STRING||(LA120_0 >= UINT && LA120_0 <= ULONG)||LA120_0==USHORT||LA120_0==VOID) ) {
                alt120=1;
            }
            else if ( (LA120_0==CONST) ) {
                alt120=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;

            }
            switch (alt120) {
                case 1 :
                    // CSharp.g:1520:2: varDec= local_variable_declaration SEMICOLON (comts1= comments )?
                    {
                    pushFollow(FOLLOW_local_variable_declaration_in_declaration_statement10379);
                    varDec=local_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_declaration_statement10381); if (state.failed) return retval;

                    // CSharp.g:1520:46: (comts1= comments )?
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( ((LA118_0 >= SINGLE_LINE_COMMENT && LA118_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                        alt118=1;
                    }
                    switch (alt118) {
                        case 1 :
                            // CSharp.g:1520:47: comts1= comments
                            {
                            pushFollow(FOLLOW_comments_in_declaration_statement10386);
                            comts1=comments();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1521:2: -> declarationStatement(variableDecl=$varDec.st.toString().trim()comments=comts1)
                      {
                          retval.st = templateLib.getInstanceOf("declarationStatement",new STAttrMap().put("variableDecl", (varDec!=null?varDec.st:null).toString().trim()).put("comments", comts1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1522:4: constDec= local_constant_declaration SEMICOLON (comts2= comments )?
                    {
                    pushFollow(FOLLOW_local_constant_declaration_in_declaration_statement10408);
                    constDec=local_constant_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_declaration_statement10410); if (state.failed) return retval;

                    // CSharp.g:1522:50: (comts2= comments )?
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( ((LA119_0 >= SINGLE_LINE_COMMENT && LA119_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            // CSharp.g:1522:51: comts2= comments
                            {
                            pushFollow(FOLLOW_comments_in_declaration_statement10415);
                            comts2=comments();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1523:2: -> declarationStatement(variableDecl=constDeccomments=comts2)
                      {
                          retval.st = templateLib.getInstanceOf("declarationStatement",new STAttrMap().put("variableDecl", constDec).put("comments", comts2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "declaration_statement"


    public static class local_variable_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_declaration"
    // CSharp.g:1525:1: local_variable_declaration : typ= local_variable_type decls= local_variable_declarators -> tsqlStatment(value=CSharpHelper.intializeStoreProc($typ.text,$decls.text));
    public final CSharp.local_variable_declaration_return local_variable_declaration() throws RecognitionException {
        CSharp.local_variable_declaration_return retval = new CSharp.local_variable_declaration_return();
        retval.start = input.LT(1);


        CSharp.local_variable_type_return typ =null;

        CSharp.local_variable_declarators_return decls =null;


        try {
            // CSharp.g:1526:2: (typ= local_variable_type decls= local_variable_declarators -> tsqlStatment(value=CSharpHelper.intializeStoreProc($typ.text,$decls.text)))
            // CSharp.g:1527:2: typ= local_variable_type decls= local_variable_declarators
            {
            pushFollow(FOLLOW_local_variable_type_in_local_variable_declaration10445);
            typ=local_variable_type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_local_variable_declarators_in_local_variable_declaration10450);
            decls=local_variable_declarators();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1528:2: -> tsqlStatment(value=CSharpHelper.intializeStoreProc($typ.text,$decls.text))
              {
                  retval.st = templateLib.getInstanceOf("tsqlStatment",new STAttrMap().put("value", CSharpHelper.intializeStoreProc((typ!=null?input.toString(typ.start,typ.stop):null),(decls!=null?input.toString(decls.start,decls.stop):null))));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "local_variable_declaration"


    public static class local_variable_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_type"
    // CSharp.g:1536:1: local_variable_type : t= type -> localVariableType(type=t);
    public final CSharp.local_variable_type_return local_variable_type() throws RecognitionException {
        CSharp.local_variable_type_return retval = new CSharp.local_variable_type_return();
        retval.start = input.LT(1);


        CSharp.type_return t =null;


        try {
            // CSharp.g:1537:2: (t= type -> localVariableType(type=t))
            // CSharp.g:1538:2: t= type
            {
            pushFollow(FOLLOW_type_in_local_variable_type10476);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1539:2: -> localVariableType(type=t)
              {
                  retval.st = templateLib.getInstanceOf("localVariableType",new STAttrMap().put("type", t));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "local_variable_type"


    public static class local_variable_declarators_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_declarators"
    // CSharp.g:1542:1: local_variable_declarators : frstDec= local_variable_declarator (lvdChld+= local_variable_declarators_Chld )* -> localVariableDeclarators(firstDeclaration=frstDecdeclarationChld=$lvdChld);
    public final CSharp.local_variable_declarators_return local_variable_declarators() throws RecognitionException {
        CSharp.local_variable_declarators_return retval = new CSharp.local_variable_declarators_return();
        retval.start = input.LT(1);


        List list_lvdChld=null;
        CSharp.local_variable_declarator_return frstDec =null;

        RuleReturnScope lvdChld = null;
        try {
            // CSharp.g:1543:2: (frstDec= local_variable_declarator (lvdChld+= local_variable_declarators_Chld )* -> localVariableDeclarators(firstDeclaration=frstDecdeclarationChld=$lvdChld))
            // CSharp.g:1544:2: frstDec= local_variable_declarator (lvdChld+= local_variable_declarators_Chld )*
            {
            pushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators10503);
            frstDec=local_variable_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1544:36: (lvdChld+= local_variable_declarators_Chld )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==COMMA) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // CSharp.g:1544:38: lvdChld+= local_variable_declarators_Chld
            	    {
            	    pushFollow(FOLLOW_local_variable_declarators_Chld_in_local_variable_declarators10509);
            	    lvdChld=local_variable_declarators_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lvdChld==null) list_lvdChld=new ArrayList();
            	    list_lvdChld.add(lvdChld.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1545:2: -> localVariableDeclarators(firstDeclaration=frstDecdeclarationChld=$lvdChld)
              {
                  retval.st = templateLib.getInstanceOf("localVariableDeclarators",new STAttrMap().put("firstDeclaration", frstDec).put("declarationChld", list_lvdChld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "local_variable_declarators"


    public static class local_variable_declarators_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_declarators_Chld"
    // CSharp.g:1548:1: local_variable_declarators_Chld : COMMA lvd= local_variable_declarator -> localVariableDeclaratorsChld(localVarDec=lvd);
    public final CSharp.local_variable_declarators_Chld_return local_variable_declarators_Chld() throws RecognitionException {
        CSharp.local_variable_declarators_Chld_return retval = new CSharp.local_variable_declarators_Chld_return();
        retval.start = input.LT(1);


        CSharp.local_variable_declarator_return lvd =null;


        try {
            // CSharp.g:1549:2: ( COMMA lvd= local_variable_declarator -> localVariableDeclaratorsChld(localVarDec=lvd))
            // CSharp.g:1550:2: COMMA lvd= local_variable_declarator
            {
            match(input,COMMA,FOLLOW_COMMA_in_local_variable_declarators_Chld10538); if (state.failed) return retval;

            pushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators_Chld10543);
            lvd=local_variable_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1551:2: -> localVariableDeclaratorsChld(localVarDec=lvd)
              {
                  retval.st = templateLib.getInstanceOf("localVariableDeclaratorsChld",new STAttrMap().put("localVarDec", lvd));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "local_variable_declarators_Chld"


    public static class local_variable_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_declarator"
    // CSharp.g:1559:1: local_variable_declarator : id= IDENTIFIER ( ASSIGNMENT lvInit= local_variable_initializer )? -> localVariableDeclarator(lvdName=$id.textlocalVarInit=lvInit);
    public final CSharp.local_variable_declarator_return local_variable_declarator() throws RecognitionException {
        CSharp.local_variable_declarator_return retval = new CSharp.local_variable_declarator_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharp.local_variable_initializer_return lvInit =null;


        try {
            // CSharp.g:1560:3: (id= IDENTIFIER ( ASSIGNMENT lvInit= local_variable_initializer )? -> localVariableDeclarator(lvdName=$id.textlocalVarInit=lvInit))
            // CSharp.g:1561:4: id= IDENTIFIER ( ASSIGNMENT lvInit= local_variable_initializer )?
            {
            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_local_variable_declarator10572); if (state.failed) return retval;

            // CSharp.g:1561:19: ( ASSIGNMENT lvInit= local_variable_initializer )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==ASSIGNMENT) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // CSharp.g:1561:20: ASSIGNMENT lvInit= local_variable_initializer
                    {
                    match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_local_variable_declarator10576); if (state.failed) return retval;

                    pushFollow(FOLLOW_local_variable_initializer_in_local_variable_declarator10580);
                    lvInit=local_variable_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1562:3: -> localVariableDeclarator(lvdName=$id.textlocalVarInit=lvInit)
              {
                  retval.st = templateLib.getInstanceOf("localVariableDeclarator",new STAttrMap().put("lvdName", (id!=null?id.getText():null)).put("localVarInit", lvInit));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "local_variable_declarator"


    public static class local_variable_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_initializer"
    // CSharp.g:1564:1: local_variable_initializer : (expr= expression -> localVariableInitializer(init=expr)|arrInit= array_initializer -> localVariableInitializer(init=arrInit)|lvInitUnsafe= local_variable_initializer_unsafe -> localVariableInitializer(init=lvInitUnsafe));
    public final CSharp.local_variable_initializer_return local_variable_initializer() throws RecognitionException {
        CSharp.local_variable_initializer_return retval = new CSharp.local_variable_initializer_return();
        retval.start = input.LT(1);


        CSharp.expression_return expr =null;

        CSharp.array_initializer_return arrInit =null;

        CSharp.local_variable_initializer_unsafe_return lvInitUnsafe =null;


        try {
            // CSharp.g:1565:2: (expr= expression -> localVariableInitializer(init=expr)|arrInit= array_initializer -> localVariableInitializer(init=arrInit)|lvInitUnsafe= local_variable_initializer_unsafe -> localVariableInitializer(init=lvInitUnsafe))
            int alt123=3;
            switch ( input.LA(1) ) {
            case AMP:
            case BANG:
            case BASE:
            case BOOL:
            case BYTE:
            case CHAR:
            case CHARACTER_LITERAL:
            case CHECKED:
            case DECIMAL:
            case DEFAULT:
            case DELEGATE:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case IDENTIFIER:
            case INT:
            case INTEGER_LITERAL:
            case LONG:
            case MINUS:
            case NEW:
            case NULL:
            case OBJECT:
            case OPEN_PARENS:
            case OP_DEC:
            case OP_INC:
            case PLUS:
            case REAL_LITERAL:
            case SBYTE:
            case SHORT:
            case SIZEOF:
            case STAR:
            case STRING:
            case STRING_LITERAL:
            case THIS:
            case TILDE:
            case TRUE:
            case TYPEOF:
            case UINT:
            case ULONG:
            case UNCHECKED:
            case USHORT:
                {
                alt123=1;
                }
                break;
            case OPEN_BRACE:
                {
                alt123=2;
                }
                break;
            case STACKALLOC:
                {
                alt123=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;

            }

            switch (alt123) {
                case 1 :
                    // CSharp.g:1566:2: expr= expression
                    {
                    pushFollow(FOLLOW_expression_in_local_variable_initializer10611);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1567:2: -> localVariableInitializer(init=expr)
                      {
                          retval.st = templateLib.getInstanceOf("localVariableInitializer",new STAttrMap().put("init", expr));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1568:4: arrInit= array_initializer
                    {
                    pushFollow(FOLLOW_array_initializer_in_local_variable_initializer10627);
                    arrInit=array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1569:2: -> localVariableInitializer(init=arrInit)
                      {
                          retval.st = templateLib.getInstanceOf("localVariableInitializer",new STAttrMap().put("init", arrInit));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:1570:4: lvInitUnsafe= local_variable_initializer_unsafe
                    {
                    pushFollow(FOLLOW_local_variable_initializer_unsafe_in_local_variable_initializer10643);
                    lvInitUnsafe=local_variable_initializer_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1571:2: -> localVariableInitializer(init=lvInitUnsafe)
                      {
                          retval.st = templateLib.getInstanceOf("localVariableInitializer",new STAttrMap().put("init", lvInitUnsafe));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "local_variable_initializer"


    public static class local_constant_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_constant_declaration"
    // CSharp.g:1573:1: local_constant_declaration : CONST t= type cd= constant_declarators -> localConstantDeclaration(type=tconstDecls=cd);
    public final CSharp.local_constant_declaration_return local_constant_declaration() throws RecognitionException {
        CSharp.local_constant_declaration_return retval = new CSharp.local_constant_declaration_return();
        retval.start = input.LT(1);


        CSharp.type_return t =null;

        CSharp.constant_declarators_return cd =null;


        try {
            // CSharp.g:1574:2: ( CONST t= type cd= constant_declarators -> localConstantDeclaration(type=tconstDecls=cd))
            // CSharp.g:1575:2: CONST t= type cd= constant_declarators
            {
            match(input,CONST,FOLLOW_CONST_in_local_constant_declaration10665); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_local_constant_declaration10669);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_constant_declarators_in_local_constant_declaration10673);
            cd=constant_declarators();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1576:2: -> localConstantDeclaration(type=tconstDecls=cd)
              {
                  retval.st = templateLib.getInstanceOf("localConstantDeclaration",new STAttrMap().put("type", t).put("constDecls", cd));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "local_constant_declaration"


    public static class expression_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "expression_statement"
    // CSharp.g:1578:1: expression_statement : stmt= statement_expression SEMICOLON (comts= comments )? -> expressionStatement(statement=$stmt.st.toString().trim()comments=comts);
    public final CSharp.expression_statement_return expression_statement() throws RecognitionException {
        CSharp.expression_statement_return retval = new CSharp.expression_statement_return();
        retval.start = input.LT(1);


        CSharp.statement_expression_return stmt =null;

        CSharp.comments_return comts =null;


        try {
            // CSharp.g:1579:2: (stmt= statement_expression SEMICOLON (comts= comments )? -> expressionStatement(statement=$stmt.st.toString().trim()comments=comts))
            // CSharp.g:1580:2: stmt= statement_expression SEMICOLON (comts= comments )?
            {
            pushFollow(FOLLOW_statement_expression_in_expression_statement10700);
            stmt=statement_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_expression_statement10702); if (state.failed) return retval;

            // CSharp.g:1580:38: (comts= comments )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( ((LA124_0 >= SINGLE_LINE_COMMENT && LA124_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // CSharp.g:1580:39: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_expression_statement10707);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1581:2: -> expressionStatement(statement=$stmt.st.toString().trim()comments=comts)
              {
                  retval.st = templateLib.getInstanceOf("expressionStatement",new STAttrMap().put("statement", (stmt!=null?stmt.st:null).toString().trim()).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression_statement"


    public static class statement_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "statement_expression"
    // CSharp.g:1596:1: statement_expression : expr= expression -> statementExpression(expression=expr);
    public final CSharp.statement_expression_return statement_expression() throws RecognitionException {
        CSharp.statement_expression_return retval = new CSharp.statement_expression_return();
        retval.start = input.LT(1);


        CSharp.expression_return expr =null;


        try {
            // CSharp.g:1597:3: (expr= expression -> statementExpression(expression=expr))
            // CSharp.g:1598:3: expr= expression
            {
            pushFollow(FOLLOW_expression_in_statement_expression10743);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1599:3: -> statementExpression(expression=expr)
              {
                  retval.st = templateLib.getInstanceOf("statementExpression",new STAttrMap().put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement_expression"


    public static class selection_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "selection_statement"
    // CSharp.g:1607:1: selection_statement : (ifStmt= if_statement -> selectionStatement(stmt=ifStmt)|swStmt= switch_statement -> selectionStatement(stmt=swStmt));
    public final CSharp.selection_statement_return selection_statement() throws RecognitionException {
        CSharp.selection_statement_return retval = new CSharp.selection_statement_return();
        retval.start = input.LT(1);


        CSharp.if_statement_return ifStmt =null;

        CSharp.switch_statement_return swStmt =null;


        try {
            // CSharp.g:1608:2: (ifStmt= if_statement -> selectionStatement(stmt=ifStmt)|swStmt= switch_statement -> selectionStatement(stmt=swStmt))
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==IF) ) {
                alt125=1;
            }
            else if ( (LA125_0==SWITCH) ) {
                alt125=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;

            }
            switch (alt125) {
                case 1 :
                    // CSharp.g:1609:2: ifStmt= if_statement
                    {
                    pushFollow(FOLLOW_if_statement_in_selection_statement10774);
                    ifStmt=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1610:2: -> selectionStatement(stmt=ifStmt)
                      {
                          retval.st = templateLib.getInstanceOf("selectionStatement",new STAttrMap().put("stmt", ifStmt));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1611:3: swStmt= switch_statement
                    {
                    pushFollow(FOLLOW_switch_statement_in_selection_statement10789);
                    swStmt=switch_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1612:2: -> selectionStatement(stmt=swStmt)
                      {
                          retval.st = templateLib.getInstanceOf("selectionStatement",new STAttrMap().put("stmt", swStmt));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selection_statement"


    public static class if_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "if_statement"
    // CSharp.g:1620:1: if_statement : IF OPEN_PARENS cond= boolean_expression CLOSE_PARENS ifBdystmts= embedded_statement ( ( ELSE )=> ELSE elsBdy= embedded_statement )? -> ifStatement(condition=condifBody=ifBdystmtselseBody=elsBdy);
    public final CSharp.if_statement_return if_statement() throws RecognitionException {
        CSharp.if_statement_return retval = new CSharp.if_statement_return();
        retval.start = input.LT(1);


        CSharp.boolean_expression_return cond =null;

        CSharp.embedded_statement_return ifBdystmts =null;

        CSharp.embedded_statement_return elsBdy =null;


        try {
            // CSharp.g:1621:3: ( IF OPEN_PARENS cond= boolean_expression CLOSE_PARENS ifBdystmts= embedded_statement ( ( ELSE )=> ELSE elsBdy= embedded_statement )? -> ifStatement(condition=condifBody=ifBdystmtselseBody=elsBdy))
            // CSharp.g:1622:3: IF OPEN_PARENS cond= boolean_expression CLOSE_PARENS ifBdystmts= embedded_statement ( ( ELSE )=> ELSE elsBdy= embedded_statement )?
            {
            match(input,IF,FOLLOW_IF_in_if_statement10815); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_if_statement10817); if (state.failed) return retval;

            pushFollow(FOLLOW_boolean_expression_in_if_statement10821);
            cond=boolean_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_if_statement10823); if (state.failed) return retval;

            pushFollow(FOLLOW_embedded_statement_in_if_statement10827);
            ifBdystmts=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1622:85: ( ( ELSE )=> ELSE elsBdy= embedded_statement )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==ELSE) ) {
                int LA126_1 = input.LA(2);

                if ( (synpred16_CSharp()) ) {
                    alt126=1;
                }
            }
            switch (alt126) {
                case 1 :
                    // CSharp.g:1622:87: ( ELSE )=> ELSE elsBdy= embedded_statement
                    {
                    match(input,ELSE,FOLLOW_ELSE_in_if_statement10837); if (state.failed) return retval;

                    pushFollow(FOLLOW_embedded_statement_in_if_statement10841);
                    elsBdy=embedded_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1623:3: -> ifStatement(condition=condifBody=ifBdystmtselseBody=elsBdy)
              {
                  retval.st = templateLib.getInstanceOf("ifStatement",new STAttrMap().put("condition", cond).put("ifBody", ifBdystmts).put("elseBody", elsBdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_statement"


    public static class switch_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_statement"
    // CSharp.g:1625:1: switch_statement : SWITCH OPEN_PARENS expr= expression CLOSE_PARENS switchblck= switch_block -> switchstatement(expr=exprswitchblck=switchblck);
    public final CSharp.switch_statement_return switch_statement() throws RecognitionException {
        CSharp.switch_statement_return retval = new CSharp.switch_statement_return();
        retval.start = input.LT(1);


        CSharp.expression_return expr =null;

        CSharp.switch_block_return switchblck =null;


        try {
            // CSharp.g:1626:2: ( SWITCH OPEN_PARENS expr= expression CLOSE_PARENS switchblck= switch_block -> switchstatement(expr=exprswitchblck=switchblck))
            // CSharp.g:1626:4: SWITCH OPEN_PARENS expr= expression CLOSE_PARENS switchblck= switch_block
            {
            match(input,SWITCH,FOLLOW_SWITCH_in_switch_statement10874); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_switch_statement10876); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_switch_statement10880);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_switch_statement10882); if (state.failed) return retval;

            pushFollow(FOLLOW_switch_block_in_switch_statement10886);
            switchblck=switch_block();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1627:2: -> switchstatement(expr=exprswitchblck=switchblck)
              {
                  retval.st = templateLib.getInstanceOf("switchstatement",new STAttrMap().put("expr", expr).put("switchblck", switchblck));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_statement"


    public static class switch_block_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_block"
    // CSharp.g:1629:1: switch_block : OPEN_BRACE (switchsec= switch_sections )? CLOSE_BRACE -> switchblock(switchsec=switchsec);
    public final CSharp.switch_block_return switch_block() throws RecognitionException {
        CSharp.switch_block_return retval = new CSharp.switch_block_return();
        retval.start = input.LT(1);


        CSharp.switch_sections_return switchsec =null;


        try {
            // CSharp.g:1630:2: ( OPEN_BRACE (switchsec= switch_sections )? CLOSE_BRACE -> switchblock(switchsec=switchsec))
            // CSharp.g:1630:4: OPEN_BRACE (switchsec= switch_sections )? CLOSE_BRACE
            {
            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_switch_block10910); if (state.failed) return retval;

            // CSharp.g:1630:24: (switchsec= switch_sections )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==CASE||LA127_0==DEFAULT) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // CSharp.g:1630:24: switchsec= switch_sections
                    {
                    pushFollow(FOLLOW_switch_sections_in_switch_block10914);
                    switchsec=switch_sections();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_switch_block10917); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1631:2: -> switchblock(switchsec=switchsec)
              {
                  retval.st = templateLib.getInstanceOf("switchblock",new STAttrMap().put("switchsec", switchsec));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_block"


    public static class switch_sections_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_sections"
    // CSharp.g:1633:1: switch_sections : switchsect= switch_section (switchsect1= switch_section )* -> switchsections(switchsect=switchsectswitchsect1=switchsect1);
    public final CSharp.switch_sections_return switch_sections() throws RecognitionException {
        CSharp.switch_sections_return retval = new CSharp.switch_sections_return();
        retval.start = input.LT(1);


        CSharp.switch_section_return switchsect =null;

        CSharp.switch_section_return switchsect1 =null;


        try {
            // CSharp.g:1634:2: (switchsect= switch_section (switchsect1= switch_section )* -> switchsections(switchsect=switchsectswitchsect1=switchsect1))
            // CSharp.g:1634:4: switchsect= switch_section (switchsect1= switch_section )*
            {
            pushFollow(FOLLOW_switch_section_in_switch_sections10939);
            switchsect=switch_section();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1634:30: (switchsect1= switch_section )*
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==CASE||LA128_0==DEFAULT) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // CSharp.g:1634:32: switchsect1= switch_section
            	    {
            	    pushFollow(FOLLOW_switch_section_in_switch_sections10945);
            	    switchsect1=switch_section();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1635:2: -> switchsections(switchsect=switchsectswitchsect1=switchsect1)
              {
                  retval.st = templateLib.getInstanceOf("switchsections",new STAttrMap().put("switchsect", switchsect).put("switchsect1", switchsect1));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_sections"


    public static class switch_section_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_section"
    // CSharp.g:1637:1: switch_section : switchlabl= switch_labels statmntlst= statement_list -> switchsection(switchlabl=switchlablstatmntlst=statmntlst);
    public final CSharp.switch_section_return switch_section() throws RecognitionException {
        CSharp.switch_section_return retval = new CSharp.switch_section_return();
        retval.start = input.LT(1);


        CSharp.switch_labels_return switchlabl =null;

        CSharp.statement_list_return statmntlst =null;


        try {
            // CSharp.g:1638:2: (switchlabl= switch_labels statmntlst= statement_list -> switchsection(switchlabl=switchlablstatmntlst=statmntlst))
            // CSharp.g:1638:4: switchlabl= switch_labels statmntlst= statement_list
            {
            pushFollow(FOLLOW_switch_labels_in_switch_section10974);
            switchlabl=switch_labels();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_statement_list_in_switch_section10978);
            statmntlst=statement_list();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1639:2: -> switchsection(switchlabl=switchlablstatmntlst=statmntlst)
              {
                  retval.st = templateLib.getInstanceOf("switchsection",new STAttrMap().put("switchlabl", switchlabl).put("statmntlst", statmntlst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_section"


    public static class switch_labels_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_labels"
    // CSharp.g:1641:1: switch_labels : swtchlabl= switch_label (swtchlabl1= switch_label )* -> switchlabels(swtchlabl=swtchlablswtchlabl1=swtchlabl1);
    public final CSharp.switch_labels_return switch_labels() throws RecognitionException {
        CSharp.switch_labels_return retval = new CSharp.switch_labels_return();
        retval.start = input.LT(1);


        CSharp.switch_label_return swtchlabl =null;

        CSharp.switch_label_return swtchlabl1 =null;


        try {
            // CSharp.g:1642:2: (swtchlabl= switch_label (swtchlabl1= switch_label )* -> switchlabels(swtchlabl=swtchlablswtchlabl1=swtchlabl1))
            // CSharp.g:1642:4: swtchlabl= switch_label (swtchlabl1= switch_label )*
            {
            pushFollow(FOLLOW_switch_label_in_switch_labels11004);
            swtchlabl=switch_label();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1642:27: (swtchlabl1= switch_label )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==DEFAULT) ) {
                    int LA129_2 = input.LA(2);

                    if ( (LA129_2==COLON) ) {
                        alt129=1;
                    }


                }
                else if ( (LA129_0==CASE) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // CSharp.g:1642:29: swtchlabl1= switch_label
            	    {
            	    pushFollow(FOLLOW_switch_label_in_switch_labels11010);
            	    swtchlabl1=switch_label();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1643:2: -> switchlabels(swtchlabl=swtchlablswtchlabl1=swtchlabl1)
              {
                  retval.st = templateLib.getInstanceOf("switchlabels",new STAttrMap().put("swtchlabl", swtchlabl).put("swtchlabl1", swtchlabl1));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_labels"


    public static class switch_label_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_label"
    // CSharp.g:1645:1: switch_label : ( CASE constntexpr= constant_expression COLON -> switchlabel(constntexpr=constntexpr)| DEFAULT COLON );
    public final CSharp.switch_label_return switch_label() throws RecognitionException {
        CSharp.switch_label_return retval = new CSharp.switch_label_return();
        retval.start = input.LT(1);


        CSharp.constant_expression_return constntexpr =null;


        try {
            // CSharp.g:1646:2: ( CASE constntexpr= constant_expression COLON -> switchlabel(constntexpr=constntexpr)| DEFAULT COLON )
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==CASE) ) {
                alt130=1;
            }
            else if ( (LA130_0==DEFAULT) ) {
                alt130=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;

            }
            switch (alt130) {
                case 1 :
                    // CSharp.g:1646:4: CASE constntexpr= constant_expression COLON
                    {
                    match(input,CASE,FOLLOW_CASE_in_switch_label11037); if (state.failed) return retval;

                    pushFollow(FOLLOW_constant_expression_in_switch_label11041);
                    constntexpr=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,COLON,FOLLOW_COLON_in_switch_label11043); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1647:2: -> switchlabel(constntexpr=constntexpr)
                      {
                          retval.st = templateLib.getInstanceOf("switchlabel",new STAttrMap().put("constntexpr", constntexpr));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1648:4: DEFAULT COLON
                    {
                    match(input,DEFAULT,FOLLOW_DEFAULT_in_switch_label11057); if (state.failed) return retval;

                    match(input,COLON,FOLLOW_COLON_in_switch_label11059); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_label"


    public static class iteration_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "iteration_statement"
    // CSharp.g:1650:1: iteration_statement : (whlStmt= while_statement -> iterationStatement(stmt=whlStmt)|doStmt= do_statement -> iterationStatement(stmt=doStmt)|forStmt= for_statement -> iterationStatement(stmt=forStmt)|forEchStmt= foreach_statement -> iterationStatement(stmt=forEchStmt));
    public final CSharp.iteration_statement_return iteration_statement() throws RecognitionException {
        CSharp.iteration_statement_return retval = new CSharp.iteration_statement_return();
        retval.start = input.LT(1);


        CSharp.while_statement_return whlStmt =null;

        CSharp.do_statement_return doStmt =null;

        CSharp.for_statement_return forStmt =null;

        CSharp.foreach_statement_return forEchStmt =null;


        try {
            // CSharp.g:1651:2: (whlStmt= while_statement -> iterationStatement(stmt=whlStmt)|doStmt= do_statement -> iterationStatement(stmt=doStmt)|forStmt= for_statement -> iterationStatement(stmt=forStmt)|forEchStmt= foreach_statement -> iterationStatement(stmt=forEchStmt))
            int alt131=4;
            switch ( input.LA(1) ) {
            case WHILE:
                {
                alt131=1;
                }
                break;
            case DO:
                {
                alt131=2;
                }
                break;
            case FOR:
                {
                alt131=3;
                }
                break;
            case FOREACH:
                {
                alt131=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }

            switch (alt131) {
                case 1 :
                    // CSharp.g:1652:2: whlStmt= while_statement
                    {
                    pushFollow(FOLLOW_while_statement_in_iteration_statement11074);
                    whlStmt=while_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1653:2: -> iterationStatement(stmt=whlStmt)
                      {
                          retval.st = templateLib.getInstanceOf("iterationStatement",new STAttrMap().put("stmt", whlStmt));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1654:4: doStmt= do_statement
                    {
                    pushFollow(FOLLOW_do_statement_in_iteration_statement11090);
                    doStmt=do_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1655:2: -> iterationStatement(stmt=doStmt)
                      {
                          retval.st = templateLib.getInstanceOf("iterationStatement",new STAttrMap().put("stmt", doStmt));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:1656:4: forStmt= for_statement
                    {
                    pushFollow(FOLLOW_for_statement_in_iteration_statement11106);
                    forStmt=for_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1657:2: -> iterationStatement(stmt=forStmt)
                      {
                          retval.st = templateLib.getInstanceOf("iterationStatement",new STAttrMap().put("stmt", forStmt));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:1658:4: forEchStmt= foreach_statement
                    {
                    pushFollow(FOLLOW_foreach_statement_in_iteration_statement11122);
                    forEchStmt=foreach_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1659:2: -> iterationStatement(stmt=forEchStmt)
                      {
                          retval.st = templateLib.getInstanceOf("iterationStatement",new STAttrMap().put("stmt", forEchStmt));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "iteration_statement"


    public static class while_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "while_statement"
    // CSharp.g:1661:1: while_statement : WHILE OPEN_PARENS cond= boolean_expression CLOSE_PARENS bdy= embedded_statement -> whileStatement(condition=condbody=bdy);
    public final CSharp.while_statement_return while_statement() throws RecognitionException {
        CSharp.while_statement_return retval = new CSharp.while_statement_return();
        retval.start = input.LT(1);


        CSharp.boolean_expression_return cond =null;

        CSharp.embedded_statement_return bdy =null;


        try {
            // CSharp.g:1662:2: ( WHILE OPEN_PARENS cond= boolean_expression CLOSE_PARENS bdy= embedded_statement -> whileStatement(condition=condbody=bdy))
            // CSharp.g:1663:2: WHILE OPEN_PARENS cond= boolean_expression CLOSE_PARENS bdy= embedded_statement
            {
            match(input,WHILE,FOLLOW_WHILE_in_while_statement11144); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_while_statement11146); if (state.failed) return retval;

            pushFollow(FOLLOW_boolean_expression_in_while_statement11150);
            cond=boolean_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_while_statement11152); if (state.failed) return retval;

            pushFollow(FOLLOW_embedded_statement_in_while_statement11156);
            bdy=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1664:2: -> whileStatement(condition=condbody=bdy)
              {
                  retval.st = templateLib.getInstanceOf("whileStatement",new STAttrMap().put("condition", cond).put("body", bdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_statement"


    public static class do_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "do_statement"
    // CSharp.g:1666:1: do_statement : DO bdy= embedded_statement WHILE OPEN_PARENS cond= boolean_expression CLOSE_PARENS SEMICOLON (comts= comments )? -> doStatement(doBody=bdycondition=condcomments=comts);
    public final CSharp.do_statement_return do_statement() throws RecognitionException {
        CSharp.do_statement_return retval = new CSharp.do_statement_return();
        retval.start = input.LT(1);


        CSharp.embedded_statement_return bdy =null;

        CSharp.boolean_expression_return cond =null;

        CSharp.comments_return comts =null;


        try {
            // CSharp.g:1667:2: ( DO bdy= embedded_statement WHILE OPEN_PARENS cond= boolean_expression CLOSE_PARENS SEMICOLON (comts= comments )? -> doStatement(doBody=bdycondition=condcomments=comts))
            // CSharp.g:1668:2: DO bdy= embedded_statement WHILE OPEN_PARENS cond= boolean_expression CLOSE_PARENS SEMICOLON (comts= comments )?
            {
            match(input,DO,FOLLOW_DO_in_do_statement11182); if (state.failed) return retval;

            pushFollow(FOLLOW_embedded_statement_in_do_statement11186);
            bdy=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            match(input,WHILE,FOLLOW_WHILE_in_do_statement11188); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_do_statement11190); if (state.failed) return retval;

            pushFollow(FOLLOW_boolean_expression_in_do_statement11194);
            cond=boolean_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_do_statement11196); if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_do_statement11198); if (state.failed) return retval;

            // CSharp.g:1668:93: (comts= comments )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( ((LA132_0 >= SINGLE_LINE_COMMENT && LA132_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // CSharp.g:1668:94: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_do_statement11203);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1669:2: -> doStatement(doBody=bdycondition=condcomments=comts)
              {
                  retval.st = templateLib.getInstanceOf("doStatement",new STAttrMap().put("doBody", bdy).put("condition", cond).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_statement"


    public static class for_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "for_statement"
    // CSharp.g:1671:1: for_statement : FOR OPEN_PARENS (init= for_initializer )? SEMICOLON (cond= for_condition )? SEMICOLON (itr= for_iterator )? CLOSE_PARENS frBdy= embedded_statement -> forStatement(initialization=initcondition=conditerator=itrforBody=frBdy);
    public final CSharp.for_statement_return for_statement() throws RecognitionException {
        CSharp.for_statement_return retval = new CSharp.for_statement_return();
        retval.start = input.LT(1);


        CSharp.for_initializer_return init =null;

        CSharp.for_condition_return cond =null;

        CSharp.for_iterator_return itr =null;

        CSharp.embedded_statement_return frBdy =null;


        try {
            // CSharp.g:1672:2: ( FOR OPEN_PARENS (init= for_initializer )? SEMICOLON (cond= for_condition )? SEMICOLON (itr= for_iterator )? CLOSE_PARENS frBdy= embedded_statement -> forStatement(initialization=initcondition=conditerator=itrforBody=frBdy))
            // CSharp.g:1673:2: FOR OPEN_PARENS (init= for_initializer )? SEMICOLON (cond= for_condition )? SEMICOLON (itr= for_iterator )? CLOSE_PARENS frBdy= embedded_statement
            {
            match(input,FOR,FOLLOW_FOR_in_for_statement11235); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_for_statement11237); if (state.failed) return retval;

            // CSharp.g:1673:18: (init= for_initializer )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==AMP||(LA133_0 >= BANG && LA133_0 <= BASE)||LA133_0==BOOL||LA133_0==BYTE||(LA133_0 >= CHAR && LA133_0 <= CHECKED)||LA133_0==DECIMAL||(LA133_0 >= DEFAULT && LA133_0 <= DELEGATE)||LA133_0==DOUBLE||LA133_0==FALSE||LA133_0==FLOAT||LA133_0==IDENTIFIER||(LA133_0 >= INT && LA133_0 <= INTEGER_LITERAL)||LA133_0==LONG||LA133_0==MINUS||LA133_0==NEW||LA133_0==NULL||LA133_0==OBJECT||LA133_0==OPEN_PARENS||LA133_0==OP_DEC||LA133_0==OP_INC||LA133_0==PLUS||LA133_0==REAL_LITERAL||LA133_0==SBYTE||LA133_0==SHORT||LA133_0==SIZEOF||LA133_0==STAR||(LA133_0 >= STRING && LA133_0 <= STRING_LITERAL)||LA133_0==THIS||(LA133_0 >= TILDE && LA133_0 <= TRUE)||LA133_0==TYPEOF||(LA133_0 >= UINT && LA133_0 <= UNCHECKED)||LA133_0==USHORT||LA133_0==VOID) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // CSharp.g:1673:19: init= for_initializer
                    {
                    pushFollow(FOLLOW_for_initializer_in_for_statement11242);
                    init=for_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_statement11246); if (state.failed) return retval;

            // CSharp.g:1673:52: (cond= for_condition )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==AMP||(LA134_0 >= BANG && LA134_0 <= BASE)||LA134_0==BOOL||LA134_0==BYTE||(LA134_0 >= CHAR && LA134_0 <= CHECKED)||LA134_0==DECIMAL||(LA134_0 >= DEFAULT && LA134_0 <= DELEGATE)||LA134_0==DOUBLE||LA134_0==FALSE||LA134_0==FLOAT||LA134_0==IDENTIFIER||(LA134_0 >= INT && LA134_0 <= INTEGER_LITERAL)||LA134_0==LONG||LA134_0==MINUS||LA134_0==NEW||LA134_0==NULL||LA134_0==OBJECT||LA134_0==OPEN_PARENS||LA134_0==OP_DEC||LA134_0==OP_INC||LA134_0==PLUS||LA134_0==REAL_LITERAL||LA134_0==SBYTE||LA134_0==SHORT||LA134_0==SIZEOF||LA134_0==STAR||(LA134_0 >= STRING && LA134_0 <= STRING_LITERAL)||LA134_0==THIS||(LA134_0 >= TILDE && LA134_0 <= TRUE)||LA134_0==TYPEOF||(LA134_0 >= UINT && LA134_0 <= UNCHECKED)||LA134_0==USHORT) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // CSharp.g:1673:53: cond= for_condition
                    {
                    pushFollow(FOLLOW_for_condition_in_for_statement11251);
                    cond=for_condition();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_statement11255); if (state.failed) return retval;

            // CSharp.g:1673:84: (itr= for_iterator )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==AMP||(LA135_0 >= BANG && LA135_0 <= BASE)||LA135_0==BOOL||LA135_0==BYTE||(LA135_0 >= CHAR && LA135_0 <= CHECKED)||LA135_0==DECIMAL||(LA135_0 >= DEFAULT && LA135_0 <= DELEGATE)||LA135_0==DOUBLE||LA135_0==FALSE||LA135_0==FLOAT||LA135_0==IDENTIFIER||(LA135_0 >= INT && LA135_0 <= INTEGER_LITERAL)||LA135_0==LONG||LA135_0==MINUS||LA135_0==NEW||LA135_0==NULL||LA135_0==OBJECT||LA135_0==OPEN_PARENS||LA135_0==OP_DEC||LA135_0==OP_INC||LA135_0==PLUS||LA135_0==REAL_LITERAL||LA135_0==SBYTE||LA135_0==SHORT||LA135_0==SIZEOF||LA135_0==STAR||(LA135_0 >= STRING && LA135_0 <= STRING_LITERAL)||LA135_0==THIS||(LA135_0 >= TILDE && LA135_0 <= TRUE)||LA135_0==TYPEOF||(LA135_0 >= UINT && LA135_0 <= UNCHECKED)||LA135_0==USHORT) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // CSharp.g:1673:85: itr= for_iterator
                    {
                    pushFollow(FOLLOW_for_iterator_in_for_statement11260);
                    itr=for_iterator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_for_statement11264); if (state.failed) return retval;

            pushFollow(FOLLOW_embedded_statement_in_for_statement11268);
            frBdy=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1674:2: -> forStatement(initialization=initcondition=conditerator=itrforBody=frBdy)
              {
                  retval.st = templateLib.getInstanceOf("forStatement",new STAttrMap().put("initialization", init).put("condition", cond).put("iterator", itr).put("forBody", frBdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_statement"


    public static class for_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "for_initializer"
    // CSharp.g:1676:1: for_initializer : ( ( local_variable_declaration )=>lvd= local_variable_declaration -> forInitializer(init=lvd)|eList= statement_expression_list -> forInitializer(init=eList));
    public final CSharp.for_initializer_return for_initializer() throws RecognitionException {
        CSharp.for_initializer_return retval = new CSharp.for_initializer_return();
        retval.start = input.LT(1);


        CSharp.local_variable_declaration_return lvd =null;

        CSharp.statement_expression_list_return eList =null;


        try {
            // CSharp.g:1677:2: ( ( local_variable_declaration )=>lvd= local_variable_declaration -> forInitializer(init=lvd)|eList= statement_expression_list -> forInitializer(init=eList))
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==SBYTE) ) {
                int LA136_1 = input.LA(2);

                if ( (synpred17_CSharp()) ) {
                    alt136=1;
                }
                else if ( (true) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA136_0==BYTE) ) {
                int LA136_2 = input.LA(2);

                if ( (synpred17_CSharp()) ) {
                    alt136=1;
                }
                else if ( (true) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA136_0==SHORT) ) {
                int LA136_3 = input.LA(2);

                if ( (synpred17_CSharp()) ) {
                    alt136=1;
                }
                else if ( (true) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA136_0==USHORT) ) {
                int LA136_4 = input.LA(2);

                if ( (synpred17_CSharp()) ) {
                    alt136=1;
                }
                else if ( (true) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA136_0==INT) ) {
                int LA136_5 = input.LA(2);

                if ( (synpred17_CSharp()) ) {
                    alt136=1;
                }
                else if ( (true) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA136_0==UINT) ) {
                int LA136_6 = input.LA(2);

                if ( (synpred17_CSharp()) ) {
                    alt136=1;
                }
                else if ( (true) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA136_0==LONG) ) {
                int LA136_7 = input.LA(2);

                if ( (synpred17_CSharp()) ) {
                    alt136=1;
                }
                else if ( (true) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA136_0==ULONG) ) {
                int LA136_8 = input.LA(2);

                if ( (synpred17_CSharp()) ) {
                    alt136=1;
                }
                else if ( (true) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA136_0==CHAR) ) {
                int LA136_9 = input.LA(2);

                if ( (synpred17_CSharp()) ) {
                    alt136=1;
                }
                else if ( (true) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA136_0==FLOAT) ) {
                int LA136_10 = input.LA(2);

                if ( (synpred17_CSharp()) ) {
                    alt136=1;
                }
                else if ( (true) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA136_0==DOUBLE) ) {
                int LA136_11 = input.LA(2);

                if ( (synpred17_CSharp()) ) {
                    alt136=1;
                }
                else if ( (true) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA136_0==DECIMAL) ) {
                int LA136_12 = input.LA(2);

                if ( (synpred17_CSharp()) ) {
                    alt136=1;
                }
                else if ( (true) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA136_0==BOOL) ) {
                int LA136_13 = input.LA(2);

                if ( (synpred17_CSharp()) ) {
                    alt136=1;
                }
                else if ( (true) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 13, input);

                    throw nvae;

                }
            }
            else if ( (LA136_0==IDENTIFIER) ) {
                int LA136_14 = input.LA(2);

                if ( (synpred17_CSharp()) ) {
                    alt136=1;
                }
                else if ( (true) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 14, input);

                    throw nvae;

                }
            }
            else if ( (LA136_0==OBJECT) ) {
                int LA136_15 = input.LA(2);

                if ( (synpred17_CSharp()) ) {
                    alt136=1;
                }
                else if ( (true) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 15, input);

                    throw nvae;

                }
            }
            else if ( (LA136_0==STRING) ) {
                int LA136_16 = input.LA(2);

                if ( (synpred17_CSharp()) ) {
                    alt136=1;
                }
                else if ( (true) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 16, input);

                    throw nvae;

                }
            }
            else if ( (LA136_0==VOID) && (synpred17_CSharp())) {
                alt136=1;
            }
            else if ( (LA136_0==AMP||(LA136_0 >= BANG && LA136_0 <= BASE)||(LA136_0 >= CHARACTER_LITERAL && LA136_0 <= CHECKED)||(LA136_0 >= DEFAULT && LA136_0 <= DELEGATE)||LA136_0==FALSE||LA136_0==INTEGER_LITERAL||LA136_0==MINUS||LA136_0==NEW||LA136_0==NULL||LA136_0==OPEN_PARENS||LA136_0==OP_DEC||LA136_0==OP_INC||LA136_0==PLUS||LA136_0==REAL_LITERAL||LA136_0==SIZEOF||LA136_0==STAR||LA136_0==STRING_LITERAL||LA136_0==THIS||(LA136_0 >= TILDE && LA136_0 <= TRUE)||LA136_0==TYPEOF||LA136_0==UNCHECKED) ) {
                alt136=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;

            }
            switch (alt136) {
                case 1 :
                    // CSharp.g:1678:2: ( local_variable_declaration )=>lvd= local_variable_declaration
                    {
                    pushFollow(FOLLOW_local_variable_declaration_in_for_initializer11310);
                    lvd=local_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1679:2: -> forInitializer(init=lvd)
                      {
                          retval.st = templateLib.getInstanceOf("forInitializer",new STAttrMap().put("init", lvd));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1680:4: eList= statement_expression_list
                    {
                    pushFollow(FOLLOW_statement_expression_list_in_for_initializer11326);
                    eList=statement_expression_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1681:2: -> forInitializer(init=eList)
                      {
                          retval.st = templateLib.getInstanceOf("forInitializer",new STAttrMap().put("init", eList));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_initializer"


    public static class for_condition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "for_condition"
    // CSharp.g:1683:1: for_condition : expr= boolean_expression -> forCondition(expression=expr);
    public final CSharp.for_condition_return for_condition() throws RecognitionException {
        CSharp.for_condition_return retval = new CSharp.for_condition_return();
        retval.start = input.LT(1);


        CSharp.boolean_expression_return expr =null;


        try {
            // CSharp.g:1684:2: (expr= boolean_expression -> forCondition(expression=expr))
            // CSharp.g:1685:2: expr= boolean_expression
            {
            pushFollow(FOLLOW_boolean_expression_in_for_condition11350);
            expr=boolean_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1686:2: -> forCondition(expression=expr)
              {
                  retval.st = templateLib.getInstanceOf("forCondition",new STAttrMap().put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_condition"


    public static class for_iterator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "for_iterator"
    // CSharp.g:1688:1: for_iterator : eL= statement_expression_list -> forIterator(exprList=eL);
    public final CSharp.for_iterator_return for_iterator() throws RecognitionException {
        CSharp.for_iterator_return retval = new CSharp.for_iterator_return();
        retval.start = input.LT(1);


        CSharp.statement_expression_list_return eL =null;


        try {
            // CSharp.g:1689:2: (eL= statement_expression_list -> forIterator(exprList=eL))
            // CSharp.g:1690:2: eL= statement_expression_list
            {
            pushFollow(FOLLOW_statement_expression_list_in_for_iterator11374);
            eL=statement_expression_list();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1691:2: -> forIterator(exprList=eL)
              {
                  retval.st = templateLib.getInstanceOf("forIterator",new STAttrMap().put("exprList", eL));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_iterator"


    public static class statement_expression_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "statement_expression_list"
    // CSharp.g:1693:1: statement_expression_list : fstExpr= statement_expression (lst+= statement_expression_list_Chld )* -> statementExpressionList(firstExpr=fstExprlist=$lst);
    public final CSharp.statement_expression_list_return statement_expression_list() throws RecognitionException {
        CSharp.statement_expression_list_return retval = new CSharp.statement_expression_list_return();
        retval.start = input.LT(1);


        List list_lst=null;
        CSharp.statement_expression_return fstExpr =null;

        RuleReturnScope lst = null;
        try {
            // CSharp.g:1694:2: (fstExpr= statement_expression (lst+= statement_expression_list_Chld )* -> statementExpressionList(firstExpr=fstExprlist=$lst))
            // CSharp.g:1695:2: fstExpr= statement_expression (lst+= statement_expression_list_Chld )*
            {
            pushFollow(FOLLOW_statement_expression_in_statement_expression_list11398);
            fstExpr=statement_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1695:31: (lst+= statement_expression_list_Chld )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==COMMA) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // CSharp.g:1695:32: lst+= statement_expression_list_Chld
            	    {
            	    pushFollow(FOLLOW_statement_expression_list_Chld_in_statement_expression_list11403);
            	    lst=statement_expression_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1696:2: -> statementExpressionList(firstExpr=fstExprlist=$lst)
              {
                  retval.st = templateLib.getInstanceOf("statementExpressionList",new STAttrMap().put("firstExpr", fstExpr).put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement_expression_list"


    public static class statement_expression_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "statement_expression_list_Chld"
    // CSharp.g:1699:1: statement_expression_list_Chld : COMMA expr= statement_expression -> statementExpressionListChld(expression=expr);
    public final CSharp.statement_expression_list_Chld_return statement_expression_list_Chld() throws RecognitionException {
        CSharp.statement_expression_list_Chld_return retval = new CSharp.statement_expression_list_Chld_return();
        retval.start = input.LT(1);


        CSharp.statement_expression_return expr =null;


        try {
            // CSharp.g:1700:2: ( COMMA expr= statement_expression -> statementExpressionListChld(expression=expr))
            // CSharp.g:1701:2: COMMA expr= statement_expression
            {
            match(input,COMMA,FOLLOW_COMMA_in_statement_expression_list_Chld11431); if (state.failed) return retval;

            pushFollow(FOLLOW_statement_expression_in_statement_expression_list_Chld11436);
            expr=statement_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1702:2: -> statementExpressionListChld(expression=expr)
              {
                  retval.st = templateLib.getInstanceOf("statementExpressionListChld",new STAttrMap().put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement_expression_list_Chld"


    public static class foreach_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "foreach_statement"
    // CSharp.g:1705:1: foreach_statement : FOREACH OPEN_PARENS varTyp= local_variable_type var= IDENTIFIER IN expr= expression CLOSE_PARENS frEchBdy= embedded_statement -> foreachStatement(variableType=varTypvariable=$var.textexpression=exprforEachBody=frEchBdy);
    public final CSharp.foreach_statement_return foreach_statement() throws RecognitionException {
        CSharp.foreach_statement_return retval = new CSharp.foreach_statement_return();
        retval.start = input.LT(1);


        Token var=null;
        CSharp.local_variable_type_return varTyp =null;

        CSharp.expression_return expr =null;

        CSharp.embedded_statement_return frEchBdy =null;


        try {
            // CSharp.g:1706:2: ( FOREACH OPEN_PARENS varTyp= local_variable_type var= IDENTIFIER IN expr= expression CLOSE_PARENS frEchBdy= embedded_statement -> foreachStatement(variableType=varTypvariable=$var.textexpression=exprforEachBody=frEchBdy))
            // CSharp.g:1707:2: FOREACH OPEN_PARENS varTyp= local_variable_type var= IDENTIFIER IN expr= expression CLOSE_PARENS frEchBdy= embedded_statement
            {
            match(input,FOREACH,FOLLOW_FOREACH_in_foreach_statement11460); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_foreach_statement11462); if (state.failed) return retval;

            pushFollow(FOLLOW_local_variable_type_in_foreach_statement11466);
            varTyp=local_variable_type();

            state._fsp--;
            if (state.failed) return retval;

            var=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_foreach_statement11470); if (state.failed) return retval;

            match(input,IN,FOLLOW_IN_in_foreach_statement11472); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_foreach_statement11476);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_foreach_statement11478); if (state.failed) return retval;

            pushFollow(FOLLOW_embedded_statement_in_foreach_statement11482);
            frEchBdy=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1708:2: -> foreachStatement(variableType=varTypvariable=$var.textexpression=exprforEachBody=frEchBdy)
              {
                  retval.st = templateLib.getInstanceOf("foreachStatement",new STAttrMap().put("variableType", varTyp).put("variable", (var!=null?var.getText():null)).put("expression", expr).put("forEachBody", frEchBdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_statement"


    public static class jump_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "jump_statement"
    // CSharp.g:1710:1: jump_statement : (brkStmt= break_statement -> jumpStatement(stmt=brkStmt)|contStmt= continue_statement -> jumpStatement(stmt=contStmt)|gotoStmt= goto_statement -> jumpStatement(stmt=gotoStmt)|retStmt= return_statement -> jumpStatement(stmt=retStmt)|thrwStmt= throw_statement -> jumpStatement(stmt=thrwStmt));
    public final CSharp.jump_statement_return jump_statement() throws RecognitionException {
        CSharp.jump_statement_return retval = new CSharp.jump_statement_return();
        retval.start = input.LT(1);


        CSharp.break_statement_return brkStmt =null;

        CSharp.continue_statement_return contStmt =null;

        CSharp.goto_statement_return gotoStmt =null;

        CSharp.return_statement_return retStmt =null;

        CSharp.throw_statement_return thrwStmt =null;


        try {
            // CSharp.g:1711:2: (brkStmt= break_statement -> jumpStatement(stmt=brkStmt)|contStmt= continue_statement -> jumpStatement(stmt=contStmt)|gotoStmt= goto_statement -> jumpStatement(stmt=gotoStmt)|retStmt= return_statement -> jumpStatement(stmt=retStmt)|thrwStmt= throw_statement -> jumpStatement(stmt=thrwStmt))
            int alt138=5;
            switch ( input.LA(1) ) {
            case BREAK:
                {
                alt138=1;
                }
                break;
            case CONTINUE:
                {
                alt138=2;
                }
                break;
            case GOTO:
                {
                alt138=3;
                }
                break;
            case RETURN:
                {
                alt138=4;
                }
                break;
            case THROW:
                {
                alt138=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;

            }

            switch (alt138) {
                case 1 :
                    // CSharp.g:1712:2: brkStmt= break_statement
                    {
                    pushFollow(FOLLOW_break_statement_in_jump_statement11518);
                    brkStmt=break_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1713:2: -> jumpStatement(stmt=brkStmt)
                      {
                          retval.st = templateLib.getInstanceOf("jumpStatement",new STAttrMap().put("stmt", brkStmt));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1714:4: contStmt= continue_statement
                    {
                    pushFollow(FOLLOW_continue_statement_in_jump_statement11534);
                    contStmt=continue_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1715:2: -> jumpStatement(stmt=contStmt)
                      {
                          retval.st = templateLib.getInstanceOf("jumpStatement",new STAttrMap().put("stmt", contStmt));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:1716:4: gotoStmt= goto_statement
                    {
                    pushFollow(FOLLOW_goto_statement_in_jump_statement11550);
                    gotoStmt=goto_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1717:2: -> jumpStatement(stmt=gotoStmt)
                      {
                          retval.st = templateLib.getInstanceOf("jumpStatement",new STAttrMap().put("stmt", gotoStmt));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:1718:4: retStmt= return_statement
                    {
                    pushFollow(FOLLOW_return_statement_in_jump_statement11566);
                    retStmt=return_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1719:2: -> jumpStatement(stmt=retStmt)
                      {
                          retval.st = templateLib.getInstanceOf("jumpStatement",new STAttrMap().put("stmt", retStmt));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:1720:4: thrwStmt= throw_statement
                    {
                    pushFollow(FOLLOW_throw_statement_in_jump_statement11582);
                    thrwStmt=throw_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1721:2: -> jumpStatement(stmt=thrwStmt)
                      {
                          retval.st = templateLib.getInstanceOf("jumpStatement",new STAttrMap().put("stmt", thrwStmt));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "jump_statement"


    public static class break_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "break_statement"
    // CSharp.g:1723:1: break_statement : brk= BREAK SEMICOLON (comts= comments )? -> breakStatement(value=$brk.text+\";\"comments=comts);
    public final CSharp.break_statement_return break_statement() throws RecognitionException {
        CSharp.break_statement_return retval = new CSharp.break_statement_return();
        retval.start = input.LT(1);


        Token brk=null;
        CSharp.comments_return comts =null;


        try {
            // CSharp.g:1724:2: (brk= BREAK SEMICOLON (comts= comments )? -> breakStatement(value=$brk.text+\";\"comments=comts))
            // CSharp.g:1725:2: brk= BREAK SEMICOLON (comts= comments )?
            {
            brk=(Token)match(input,BREAK,FOLLOW_BREAK_in_break_statement11606); if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_break_statement11608); if (state.failed) return retval;

            // CSharp.g:1725:22: (comts= comments )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( ((LA139_0 >= SINGLE_LINE_COMMENT && LA139_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // CSharp.g:1725:23: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_break_statement11613);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1726:2: -> breakStatement(value=$brk.text+\";\"comments=comts)
              {
                  retval.st = templateLib.getInstanceOf("breakStatement",new STAttrMap().put("value", (brk!=null?brk.getText():null)+";").put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_statement"


    public static class continue_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "continue_statement"
    // CSharp.g:1728:1: continue_statement : cont= CONTINUE SEMICOLON (comts= comments )? -> continueStatement(value=$cont.text+\";\"comments=comts);
    public final CSharp.continue_statement_return continue_statement() throws RecognitionException {
        CSharp.continue_statement_return retval = new CSharp.continue_statement_return();
        retval.start = input.LT(1);


        Token cont=null;
        CSharp.comments_return comts =null;


        try {
            // CSharp.g:1729:2: (cont= CONTINUE SEMICOLON (comts= comments )? -> continueStatement(value=$cont.text+\";\"comments=comts))
            // CSharp.g:1730:2: cont= CONTINUE SEMICOLON (comts= comments )?
            {
            cont=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_continue_statement11643); if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_continue_statement11645); if (state.failed) return retval;

            // CSharp.g:1730:26: (comts= comments )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( ((LA140_0 >= SINGLE_LINE_COMMENT && LA140_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // CSharp.g:1730:27: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_continue_statement11650);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1731:2: -> continueStatement(value=$cont.text+\";\"comments=comts)
              {
                  retval.st = templateLib.getInstanceOf("continueStatement",new STAttrMap().put("value", (cont!=null?cont.getText():null)+";").put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "continue_statement"


    public static class goto_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "goto_statement"
    // CSharp.g:1733:1: goto_statement : ( GOTO id= IDENTIFIER SEMICOLON (comts1= comments )? -> simpleGotoStatement(labelName=$id.textcomments=comts1)| GOTO CASE expr= constant_expression SEMICOLON (comts2= comments )? -> gotoCaseStmt(caseExpr=exprcomments=comts2)| GOTO DEFAULT SEMICOLON (comts3= comments )? -> gotoDefaultStmt(comments=comts3));
    public final CSharp.goto_statement_return goto_statement() throws RecognitionException {
        CSharp.goto_statement_return retval = new CSharp.goto_statement_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharp.comments_return comts1 =null;

        CSharp.constant_expression_return expr =null;

        CSharp.comments_return comts2 =null;

        CSharp.comments_return comts3 =null;


        try {
            // CSharp.g:1734:2: ( GOTO id= IDENTIFIER SEMICOLON (comts1= comments )? -> simpleGotoStatement(labelName=$id.textcomments=comts1)| GOTO CASE expr= constant_expression SEMICOLON (comts2= comments )? -> gotoCaseStmt(caseExpr=exprcomments=comts2)| GOTO DEFAULT SEMICOLON (comts3= comments )? -> gotoDefaultStmt(comments=comts3))
            int alt144=3;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==GOTO) ) {
                switch ( input.LA(2) ) {
                case IDENTIFIER:
                    {
                    alt144=1;
                    }
                    break;
                case CASE:
                    {
                    alt144=2;
                    }
                    break;
                case DEFAULT:
                    {
                    alt144=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 144, 1, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;

            }
            switch (alt144) {
                case 1 :
                    // CSharp.g:1735:2: GOTO id= IDENTIFIER SEMICOLON (comts1= comments )?
                    {
                    match(input,GOTO,FOLLOW_GOTO_in_goto_statement11678); if (state.failed) return retval;

                    id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_goto_statement11682); if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_goto_statement11684); if (state.failed) return retval;

                    // CSharp.g:1735:31: (comts1= comments )?
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( ((LA141_0 >= SINGLE_LINE_COMMENT && LA141_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                        alt141=1;
                    }
                    switch (alt141) {
                        case 1 :
                            // CSharp.g:1735:32: comts1= comments
                            {
                            pushFollow(FOLLOW_comments_in_goto_statement11689);
                            comts1=comments();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1736:2: -> simpleGotoStatement(labelName=$id.textcomments=comts1)
                      {
                          retval.st = templateLib.getInstanceOf("simpleGotoStatement",new STAttrMap().put("labelName", (id!=null?id.getText():null)).put("comments", comts1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1737:4: GOTO CASE expr= constant_expression SEMICOLON (comts2= comments )?
                    {
                    match(input,GOTO,FOLLOW_GOTO_in_goto_statement11709); if (state.failed) return retval;

                    match(input,CASE,FOLLOW_CASE_in_goto_statement11711); if (state.failed) return retval;

                    pushFollow(FOLLOW_constant_expression_in_goto_statement11715);
                    expr=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_goto_statement11717); if (state.failed) return retval;

                    // CSharp.g:1737:49: (comts2= comments )?
                    int alt142=2;
                    int LA142_0 = input.LA(1);

                    if ( ((LA142_0 >= SINGLE_LINE_COMMENT && LA142_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                        alt142=1;
                    }
                    switch (alt142) {
                        case 1 :
                            // CSharp.g:1737:50: comts2= comments
                            {
                            pushFollow(FOLLOW_comments_in_goto_statement11722);
                            comts2=comments();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1738:2: -> gotoCaseStmt(caseExpr=exprcomments=comts2)
                      {
                          retval.st = templateLib.getInstanceOf("gotoCaseStmt",new STAttrMap().put("caseExpr", expr).put("comments", comts2));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:1739:4: GOTO DEFAULT SEMICOLON (comts3= comments )?
                    {
                    match(input,GOTO,FOLLOW_GOTO_in_goto_statement11742); if (state.failed) return retval;

                    match(input,DEFAULT,FOLLOW_DEFAULT_in_goto_statement11744); if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_goto_statement11746); if (state.failed) return retval;

                    // CSharp.g:1739:27: (comts3= comments )?
                    int alt143=2;
                    int LA143_0 = input.LA(1);

                    if ( ((LA143_0 >= SINGLE_LINE_COMMENT && LA143_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                        alt143=1;
                    }
                    switch (alt143) {
                        case 1 :
                            // CSharp.g:1739:28: comts3= comments
                            {
                            pushFollow(FOLLOW_comments_in_goto_statement11751);
                            comts3=comments();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1740:2: -> gotoDefaultStmt(comments=comts3)
                      {
                          retval.st = templateLib.getInstanceOf("gotoDefaultStmt",new STAttrMap().put("comments", comts3));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_statement"


    public static class return_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "return_statement"
    // CSharp.g:1742:1: return_statement : RETURN (expr= expression )? SEMICOLON (comts= comments )? -> returnStatement(returnExpr=CSharpHelper.processSingleResultSet($expr.text)comments=comts);
    public final CSharp.return_statement_return return_statement() throws RecognitionException {
        CSharp.return_statement_return retval = new CSharp.return_statement_return();
        retval.start = input.LT(1);


        CSharp.expression_return expr =null;

        CSharp.comments_return comts =null;


        try {
            // CSharp.g:1743:2: ( RETURN (expr= expression )? SEMICOLON (comts= comments )? -> returnStatement(returnExpr=CSharpHelper.processSingleResultSet($expr.text)comments=comts))
            // CSharp.g:1744:2: RETURN (expr= expression )? SEMICOLON (comts= comments )?
            {
            match(input,RETURN,FOLLOW_RETURN_in_return_statement11775); if (state.failed) return retval;

            // CSharp.g:1744:9: (expr= expression )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==AMP||(LA145_0 >= BANG && LA145_0 <= BASE)||LA145_0==BOOL||LA145_0==BYTE||(LA145_0 >= CHAR && LA145_0 <= CHECKED)||LA145_0==DECIMAL||(LA145_0 >= DEFAULT && LA145_0 <= DELEGATE)||LA145_0==DOUBLE||LA145_0==FALSE||LA145_0==FLOAT||LA145_0==IDENTIFIER||(LA145_0 >= INT && LA145_0 <= INTEGER_LITERAL)||LA145_0==LONG||LA145_0==MINUS||LA145_0==NEW||LA145_0==NULL||LA145_0==OBJECT||LA145_0==OPEN_PARENS||LA145_0==OP_DEC||LA145_0==OP_INC||LA145_0==PLUS||LA145_0==REAL_LITERAL||LA145_0==SBYTE||LA145_0==SHORT||LA145_0==SIZEOF||LA145_0==STAR||(LA145_0 >= STRING && LA145_0 <= STRING_LITERAL)||LA145_0==THIS||(LA145_0 >= TILDE && LA145_0 <= TRUE)||LA145_0==TYPEOF||(LA145_0 >= UINT && LA145_0 <= UNCHECKED)||LA145_0==USHORT) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // CSharp.g:1744:10: expr= expression
                    {
                    pushFollow(FOLLOW_expression_in_return_statement11780);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_return_statement11784); if (state.failed) return retval;

            // CSharp.g:1744:38: (comts= comments )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( ((LA146_0 >= SINGLE_LINE_COMMENT && LA146_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // CSharp.g:1744:39: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_return_statement11789);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1745:2: -> returnStatement(returnExpr=CSharpHelper.processSingleResultSet($expr.text)comments=comts)
              {
                  retval.st = templateLib.getInstanceOf("returnStatement",new STAttrMap().put("returnExpr", CSharpHelper.processSingleResultSet((expr!=null?input.toString(expr.start,expr.stop):null))).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_statement"


    public static class throw_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "throw_statement"
    // CSharp.g:1747:1: throw_statement : THROW (expr= expression )? SEMICOLON (comts= comments )? -> throwStatement(throwExpr=$expr.st.toString().trim()comments=comts);
    public final CSharp.throw_statement_return throw_statement() throws RecognitionException {
        CSharp.throw_statement_return retval = new CSharp.throw_statement_return();
        retval.start = input.LT(1);


        CSharp.expression_return expr =null;

        CSharp.comments_return comts =null;


        try {
            // CSharp.g:1748:2: ( THROW (expr= expression )? SEMICOLON (comts= comments )? -> throwStatement(throwExpr=$expr.st.toString().trim()comments=comts))
            // CSharp.g:1749:2: THROW (expr= expression )? SEMICOLON (comts= comments )?
            {
            match(input,THROW,FOLLOW_THROW_in_throw_statement11817); if (state.failed) return retval;

            // CSharp.g:1749:8: (expr= expression )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==AMP||(LA147_0 >= BANG && LA147_0 <= BASE)||LA147_0==BOOL||LA147_0==BYTE||(LA147_0 >= CHAR && LA147_0 <= CHECKED)||LA147_0==DECIMAL||(LA147_0 >= DEFAULT && LA147_0 <= DELEGATE)||LA147_0==DOUBLE||LA147_0==FALSE||LA147_0==FLOAT||LA147_0==IDENTIFIER||(LA147_0 >= INT && LA147_0 <= INTEGER_LITERAL)||LA147_0==LONG||LA147_0==MINUS||LA147_0==NEW||LA147_0==NULL||LA147_0==OBJECT||LA147_0==OPEN_PARENS||LA147_0==OP_DEC||LA147_0==OP_INC||LA147_0==PLUS||LA147_0==REAL_LITERAL||LA147_0==SBYTE||LA147_0==SHORT||LA147_0==SIZEOF||LA147_0==STAR||(LA147_0 >= STRING && LA147_0 <= STRING_LITERAL)||LA147_0==THIS||(LA147_0 >= TILDE && LA147_0 <= TRUE)||LA147_0==TYPEOF||(LA147_0 >= UINT && LA147_0 <= UNCHECKED)||LA147_0==USHORT) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // CSharp.g:1749:9: expr= expression
                    {
                    pushFollow(FOLLOW_expression_in_throw_statement11822);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_throw_statement11826); if (state.failed) return retval;

            // CSharp.g:1749:37: (comts= comments )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( ((LA148_0 >= SINGLE_LINE_COMMENT && LA148_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // CSharp.g:1749:38: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_throw_statement11831);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1750:2: -> throwStatement(throwExpr=$expr.st.toString().trim()comments=comts)
              {
                  retval.st = templateLib.getInstanceOf("throwStatement",new STAttrMap().put("throwExpr", (expr!=null?expr.st:null).toString().trim()).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_statement"


    public static class try_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "try_statement"
    // CSharp.g:1759:1: try_statement : TRY bdy= block (cls= catch_clauses )? (finly= finally_clause )? -> tryStatement(tryBody=bdycatchClas=clsfinallyBlk=finly);
    public final CSharp.try_statement_return try_statement() throws RecognitionException {
        CSharp.try_statement_return retval = new CSharp.try_statement_return();
        retval.start = input.LT(1);


        CSharp.block_return bdy =null;

        CSharp.catch_clauses_return cls =null;

        CSharp.finally_clause_return finly =null;


        try {
            // CSharp.g:1760:3: ( TRY bdy= block (cls= catch_clauses )? (finly= finally_clause )? -> tryStatement(tryBody=bdycatchClas=clsfinallyBlk=finly))
            // CSharp.g:1761:3: TRY bdy= block (cls= catch_clauses )? (finly= finally_clause )?
            {
            match(input,TRY,FOLLOW_TRY_in_try_statement11863); if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_try_statement11867);
            bdy=block();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1761:17: (cls= catch_clauses )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==CATCH) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // CSharp.g:1761:18: cls= catch_clauses
                    {
                    pushFollow(FOLLOW_catch_clauses_in_try_statement11872);
                    cls=catch_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:1761:38: (finly= finally_clause )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==FINALLY) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // CSharp.g:1761:39: finly= finally_clause
                    {
                    pushFollow(FOLLOW_finally_clause_in_try_statement11879);
                    finly=finally_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1762:3: -> tryStatement(tryBody=bdycatchClas=clsfinallyBlk=finly)
              {
                  retval.st = templateLib.getInstanceOf("tryStatement",new STAttrMap().put("tryBody", bdy).put("catchClas", cls).put("finallyBlk", finly));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_statement"


    public static class catch_clauses_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "catch_clauses"
    // CSharp.g:1770:1: catch_clauses : (spCtch= specific_catch_clauses (gnrlCtch= general_catch_clause )? -> catchClauses(specificCatch=spCtchgeneralCatch=gnrlCtch)|ctch= general_catch_clause -> catchClauses2(catchCls=ctch));
    public final CSharp.catch_clauses_return catch_clauses() throws RecognitionException {
        CSharp.catch_clauses_return retval = new CSharp.catch_clauses_return();
        retval.start = input.LT(1);


        CSharp.specific_catch_clauses_return spCtch =null;

        CSharp.general_catch_clause_return gnrlCtch =null;

        CSharp.general_catch_clause_return ctch =null;


        try {
            // CSharp.g:1771:3: (spCtch= specific_catch_clauses (gnrlCtch= general_catch_clause )? -> catchClauses(specificCatch=spCtchgeneralCatch=gnrlCtch)|ctch= general_catch_clause -> catchClauses2(catchCls=ctch))
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==CATCH) ) {
                int LA152_1 = input.LA(2);

                if ( (LA152_1==OPEN_PARENS) ) {
                    alt152=1;
                }
                else if ( (LA152_1==OPEN_BRACE) ) {
                    alt152=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 152, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;

            }
            switch (alt152) {
                case 1 :
                    // CSharp.g:1772:3: spCtch= specific_catch_clauses (gnrlCtch= general_catch_clause )?
                    {
                    pushFollow(FOLLOW_specific_catch_clauses_in_catch_clauses11919);
                    spCtch=specific_catch_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp.g:1772:33: (gnrlCtch= general_catch_clause )?
                    int alt151=2;
                    int LA151_0 = input.LA(1);

                    if ( (LA151_0==CATCH) ) {
                        alt151=1;
                    }
                    switch (alt151) {
                        case 1 :
                            // CSharp.g:1772:34: gnrlCtch= general_catch_clause
                            {
                            pushFollow(FOLLOW_general_catch_clause_in_catch_clauses11924);
                            gnrlCtch=general_catch_clause();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1773:3: -> catchClauses(specificCatch=spCtchgeneralCatch=gnrlCtch)
                      {
                          retval.st = templateLib.getInstanceOf("catchClauses",new STAttrMap().put("specificCatch", spCtch).put("generalCatch", gnrlCtch));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1774:5: ctch= general_catch_clause
                    {
                    pushFollow(FOLLOW_general_catch_clause_in_catch_clauses11948);
                    ctch=general_catch_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1775:3: -> catchClauses2(catchCls=ctch)
                      {
                          retval.st = templateLib.getInstanceOf("catchClauses2",new STAttrMap().put("catchCls", ctch));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_clauses"


    public static class specific_catch_clauses_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "specific_catch_clauses"
    // CSharp.g:1777:1: specific_catch_clauses : (cls+= specific_catch_clause )+ -> specificCatchClauses(clauses=$cls);
    public final CSharp.specific_catch_clauses_return specific_catch_clauses() throws RecognitionException {
        CSharp.specific_catch_clauses_return retval = new CSharp.specific_catch_clauses_return();
        retval.start = input.LT(1);


        List list_cls=null;
        RuleReturnScope cls = null;
        try {
            // CSharp.g:1778:2: ( (cls+= specific_catch_clause )+ -> specificCatchClauses(clauses=$cls))
            // CSharp.g:1779:2: (cls+= specific_catch_clause )+
            {
            // CSharp.g:1779:2: (cls+= specific_catch_clause )+
            int cnt153=0;
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( (LA153_0==CATCH) ) {
                    int LA153_1 = input.LA(2);

                    if ( (LA153_1==OPEN_PARENS) ) {
                        alt153=1;
                    }


                }


                switch (alt153) {
            	case 1 :
            	    // CSharp.g:1779:3: cls+= specific_catch_clause
            	    {
            	    pushFollow(FOLLOW_specific_catch_clause_in_specific_catch_clauses11975);
            	    cls=specific_catch_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_cls==null) list_cls=new ArrayList();
            	    list_cls.add(cls.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt153 >= 1 ) break loop153;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(153, input);
                        throw eee;
                }
                cnt153++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1780:2: -> specificCatchClauses(clauses=$cls)
              {
                  retval.st = templateLib.getInstanceOf("specificCatchClauses",new STAttrMap().put("clauses", list_cls));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "specific_catch_clauses"


    public static class specific_catch_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "specific_catch_clause"
    // CSharp.g:1782:1: specific_catch_clause : CATCH OPEN_PARENS t= class_type (nam= IDENTIFIER )? CLOSE_PARENS blk= block -> specificCatchClause(type=ttypeName=$nam.textbody=blk);
    public final CSharp.specific_catch_clause_return specific_catch_clause() throws RecognitionException {
        CSharp.specific_catch_clause_return retval = new CSharp.specific_catch_clause_return();
        retval.start = input.LT(1);


        Token nam=null;
        CSharp.class_type_return t =null;

        CSharp.block_return blk =null;


        try {
            // CSharp.g:1783:2: ( CATCH OPEN_PARENS t= class_type (nam= IDENTIFIER )? CLOSE_PARENS blk= block -> specificCatchClause(type=ttypeName=$nam.textbody=blk))
            // CSharp.g:1784:2: CATCH OPEN_PARENS t= class_type (nam= IDENTIFIER )? CLOSE_PARENS blk= block
            {
            match(input,CATCH,FOLLOW_CATCH_in_specific_catch_clause11999); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_specific_catch_clause12001); if (state.failed) return retval;

            pushFollow(FOLLOW_class_type_in_specific_catch_clause12005);
            t=class_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1784:33: (nam= IDENTIFIER )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==IDENTIFIER) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // CSharp.g:1784:34: nam= IDENTIFIER
                    {
                    nam=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_specific_catch_clause12010); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_specific_catch_clause12014); if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_specific_catch_clause12018);
            blk=block();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1785:2: -> specificCatchClause(type=ttypeName=$nam.textbody=blk)
              {
                  retval.st = templateLib.getInstanceOf("specificCatchClause",new STAttrMap().put("type", t).put("typeName", (nam!=null?nam.getText():null)).put("body", blk));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "specific_catch_clause"


    public static class general_catch_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "general_catch_clause"
    // CSharp.g:1787:1: general_catch_clause : CATCH blk= block -> generalCatchClause(body=blk);
    public final CSharp.general_catch_clause_return general_catch_clause() throws RecognitionException {
        CSharp.general_catch_clause_return retval = new CSharp.general_catch_clause_return();
        retval.start = input.LT(1);


        CSharp.block_return blk =null;


        try {
            // CSharp.g:1788:2: ( CATCH blk= block -> generalCatchClause(body=blk))
            // CSharp.g:1789:2: CATCH blk= block
            {
            match(input,CATCH,FOLLOW_CATCH_in_general_catch_clause12048); if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_general_catch_clause12052);
            blk=block();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1790:2: -> generalCatchClause(body=blk)
              {
                  retval.st = templateLib.getInstanceOf("generalCatchClause",new STAttrMap().put("body", blk));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "general_catch_clause"


    public static class finally_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "finally_clause"
    // CSharp.g:1792:1: finally_clause : FINALLY blk= block -> finallyClause(body=blk);
    public final CSharp.finally_clause_return finally_clause() throws RecognitionException {
        CSharp.finally_clause_return retval = new CSharp.finally_clause_return();
        retval.start = input.LT(1);


        CSharp.block_return blk =null;


        try {
            // CSharp.g:1793:2: ( FINALLY blk= block -> finallyClause(body=blk))
            // CSharp.g:1794:2: FINALLY blk= block
            {
            match(input,FINALLY,FOLLOW_FINALLY_in_finally_clause12074); if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_finally_clause12078);
            blk=block();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1795:2: -> finallyClause(body=blk)
              {
                  retval.st = templateLib.getInstanceOf("finallyClause",new STAttrMap().put("body", blk));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "finally_clause"


    public static class checked_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "checked_statement"
    // CSharp.g:1797:1: checked_statement : CHECKED blk= block -> checkedStatement(body=blk);
    public final CSharp.checked_statement_return checked_statement() throws RecognitionException {
        CSharp.checked_statement_return retval = new CSharp.checked_statement_return();
        retval.start = input.LT(1);


        CSharp.block_return blk =null;


        try {
            // CSharp.g:1798:2: ( CHECKED blk= block -> checkedStatement(body=blk))
            // CSharp.g:1799:2: CHECKED blk= block
            {
            match(input,CHECKED,FOLLOW_CHECKED_in_checked_statement12100); if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_checked_statement12104);
            blk=block();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1800:2: -> checkedStatement(body=blk)
              {
                  retval.st = templateLib.getInstanceOf("checkedStatement",new STAttrMap().put("body", blk));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "checked_statement"


    public static class unchecked_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unchecked_statement"
    // CSharp.g:1802:1: unchecked_statement : UNCHECKED blk= block -> uncheckedStatement(body=blk);
    public final CSharp.unchecked_statement_return unchecked_statement() throws RecognitionException {
        CSharp.unchecked_statement_return retval = new CSharp.unchecked_statement_return();
        retval.start = input.LT(1);


        CSharp.block_return blk =null;


        try {
            // CSharp.g:1803:2: ( UNCHECKED blk= block -> uncheckedStatement(body=blk))
            // CSharp.g:1804:2: UNCHECKED blk= block
            {
            match(input,UNCHECKED,FOLLOW_UNCHECKED_in_unchecked_statement12126); if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_unchecked_statement12130);
            blk=block();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1805:2: -> uncheckedStatement(body=blk)
              {
                  retval.st = templateLib.getInstanceOf("uncheckedStatement",new STAttrMap().put("body", blk));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unchecked_statement"


    public static class lock_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "lock_statement"
    // CSharp.g:1807:1: lock_statement : LOCK OPEN_PARENS expression CLOSE_PARENS embedded_statement ;
    public final CSharp.lock_statement_return lock_statement() throws RecognitionException {
        CSharp.lock_statement_return retval = new CSharp.lock_statement_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:1808:2: ( LOCK OPEN_PARENS expression CLOSE_PARENS embedded_statement )
            // CSharp.g:1808:4: LOCK OPEN_PARENS expression CLOSE_PARENS embedded_statement
            {
            match(input,LOCK,FOLLOW_LOCK_in_lock_statement12150); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_lock_statement12152); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_lock_statement12154);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_lock_statement12156); if (state.failed) return retval;

            pushFollow(FOLLOW_embedded_statement_in_lock_statement12158);
            embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lock_statement"


    public static class using_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "using_statement"
    // CSharp.g:1810:1: using_statement : kwd= USING OPEN_PARENS raq= resource_acquisition CLOSE_PARENS bdy= embedded_statement -> usingStatement(resourceAcq=CSharpHelper.replaceSqlPart($raq.text)body=bdy);
    public final CSharp.using_statement_return using_statement() throws RecognitionException {
        CSharp.using_statement_return retval = new CSharp.using_statement_return();
        retval.start = input.LT(1);


        Token kwd=null;
        CSharp.resource_acquisition_return raq =null;

        CSharp.embedded_statement_return bdy =null;


        try {
            // CSharp.g:1811:2: (kwd= USING OPEN_PARENS raq= resource_acquisition CLOSE_PARENS bdy= embedded_statement -> usingStatement(resourceAcq=CSharpHelper.replaceSqlPart($raq.text)body=bdy))
            // CSharp.g:1812:2: kwd= USING OPEN_PARENS raq= resource_acquisition CLOSE_PARENS bdy= embedded_statement
            {
            kwd=(Token)match(input,USING,FOLLOW_USING_in_using_statement12173); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_using_statement12175); if (state.failed) return retval;

            pushFollow(FOLLOW_resource_acquisition_in_using_statement12179);
            raq=resource_acquisition();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_using_statement12181); if (state.failed) return retval;

            pushFollow(FOLLOW_embedded_statement_in_using_statement12185);
            bdy=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1813:2: -> usingStatement(resourceAcq=CSharpHelper.replaceSqlPart($raq.text)body=bdy)
              {
                  retval.st = templateLib.getInstanceOf("usingStatement",new STAttrMap().put("resourceAcq", CSharpHelper.replaceSqlPart((raq!=null?input.toString(raq.start,raq.stop):null))).put("body", bdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "using_statement"


    public static class resource_acquisition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "resource_acquisition"
    // CSharp.g:1821:1: resource_acquisition : ( ( local_variable_declaration )=>lvd= local_variable_declaration -> resourceAcquisition(stmt=lvd)|expr= expression -> resourceAcquisition(stmt=expr));
    public final CSharp.resource_acquisition_return resource_acquisition() throws RecognitionException {
        CSharp.resource_acquisition_return retval = new CSharp.resource_acquisition_return();
        retval.start = input.LT(1);


        CSharp.local_variable_declaration_return lvd =null;

        CSharp.expression_return expr =null;


        try {
            // CSharp.g:1822:2: ( ( local_variable_declaration )=>lvd= local_variable_declaration -> resourceAcquisition(stmt=lvd)|expr= expression -> resourceAcquisition(stmt=expr))
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==SBYTE) ) {
                int LA155_1 = input.LA(2);

                if ( (synpred18_CSharp()) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA155_0==BYTE) ) {
                int LA155_2 = input.LA(2);

                if ( (synpred18_CSharp()) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA155_0==SHORT) ) {
                int LA155_3 = input.LA(2);

                if ( (synpred18_CSharp()) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA155_0==USHORT) ) {
                int LA155_4 = input.LA(2);

                if ( (synpred18_CSharp()) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA155_0==INT) ) {
                int LA155_5 = input.LA(2);

                if ( (synpred18_CSharp()) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA155_0==UINT) ) {
                int LA155_6 = input.LA(2);

                if ( (synpred18_CSharp()) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA155_0==LONG) ) {
                int LA155_7 = input.LA(2);

                if ( (synpred18_CSharp()) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA155_0==ULONG) ) {
                int LA155_8 = input.LA(2);

                if ( (synpred18_CSharp()) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA155_0==CHAR) ) {
                int LA155_9 = input.LA(2);

                if ( (synpred18_CSharp()) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA155_0==FLOAT) ) {
                int LA155_10 = input.LA(2);

                if ( (synpred18_CSharp()) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA155_0==DOUBLE) ) {
                int LA155_11 = input.LA(2);

                if ( (synpred18_CSharp()) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA155_0==DECIMAL) ) {
                int LA155_12 = input.LA(2);

                if ( (synpred18_CSharp()) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA155_0==BOOL) ) {
                int LA155_13 = input.LA(2);

                if ( (synpred18_CSharp()) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 13, input);

                    throw nvae;

                }
            }
            else if ( (LA155_0==IDENTIFIER) ) {
                int LA155_14 = input.LA(2);

                if ( (synpred18_CSharp()) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 14, input);

                    throw nvae;

                }
            }
            else if ( (LA155_0==OBJECT) ) {
                int LA155_15 = input.LA(2);

                if ( (synpred18_CSharp()) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 15, input);

                    throw nvae;

                }
            }
            else if ( (LA155_0==STRING) ) {
                int LA155_16 = input.LA(2);

                if ( (synpred18_CSharp()) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 16, input);

                    throw nvae;

                }
            }
            else if ( (LA155_0==VOID) && (synpred18_CSharp())) {
                alt155=1;
            }
            else if ( (LA155_0==AMP||(LA155_0 >= BANG && LA155_0 <= BASE)||(LA155_0 >= CHARACTER_LITERAL && LA155_0 <= CHECKED)||(LA155_0 >= DEFAULT && LA155_0 <= DELEGATE)||LA155_0==FALSE||LA155_0==INTEGER_LITERAL||LA155_0==MINUS||LA155_0==NEW||LA155_0==NULL||LA155_0==OPEN_PARENS||LA155_0==OP_DEC||LA155_0==OP_INC||LA155_0==PLUS||LA155_0==REAL_LITERAL||LA155_0==SIZEOF||LA155_0==STAR||LA155_0==STRING_LITERAL||LA155_0==THIS||(LA155_0 >= TILDE && LA155_0 <= TRUE)||LA155_0==TYPEOF||LA155_0==UNCHECKED) ) {
                alt155=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;

            }
            switch (alt155) {
                case 1 :
                    // CSharp.g:1823:2: ( local_variable_declaration )=>lvd= local_variable_declaration
                    {
                    pushFollow(FOLLOW_local_variable_declaration_in_resource_acquisition12221);
                    lvd=local_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1824:2: -> resourceAcquisition(stmt=lvd)
                      {
                          retval.st = templateLib.getInstanceOf("resourceAcquisition",new STAttrMap().put("stmt", lvd));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1825:4: expr= expression
                    {
                    pushFollow(FOLLOW_expression_in_resource_acquisition12237);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1826:2: -> resourceAcquisition(stmt=expr)
                      {
                          retval.st = templateLib.getInstanceOf("resourceAcquisition",new STAttrMap().put("stmt", expr));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "resource_acquisition"


    public static class yield_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "yield_statement"
    // CSharp.g:1828:1: yield_statement : ( yield_contextual_keyword RETURN expression SEMICOLON | yield_contextual_keyword BREAK SEMICOLON );
    public final CSharp.yield_statement_return yield_statement() throws RecognitionException {
        CSharp.yield_statement_return retval = new CSharp.yield_statement_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:1829:2: ( yield_contextual_keyword RETURN expression SEMICOLON | yield_contextual_keyword BREAK SEMICOLON )
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==IDENTIFIER) ) {
                int LA156_1 = input.LA(2);

                if ( (LA156_1==RETURN) ) {
                    alt156=1;
                }
                else if ( (LA156_1==BREAK) ) {
                    alt156=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;

            }
            switch (alt156) {
                case 1 :
                    // CSharp.g:1829:4: yield_contextual_keyword RETURN expression SEMICOLON
                    {
                    pushFollow(FOLLOW_yield_contextual_keyword_in_yield_statement12257);
                    yield_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,RETURN,FOLLOW_RETURN_in_yield_statement12259); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_in_yield_statement12261);
                    expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_yield_statement12263); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp.g:1830:4: yield_contextual_keyword BREAK SEMICOLON
                    {
                    pushFollow(FOLLOW_yield_contextual_keyword_in_yield_statement12268);
                    yield_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,BREAK,FOLLOW_BREAK_in_yield_statement12270); if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_yield_statement12272); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "yield_statement"


    public static class compilation_unit_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "compilation_unit"
    // CSharp.g:1842:1: compilation_unit : (adtvs= extern_alias_directives )? (imprtStmts= using_directives )? ( ( ( global_attribute_section )=>glbAttSec= global_attribute_section ) )* (nspcmems= namespace_member_declarations )? EOF -> writeCompUnit(alisDRctv=adtvsimports=imprtStmtsgas=glbAttSecnmspMemDec=nspcmems);
    public final CSharp.compilation_unit_return compilation_unit() throws RecognitionException {
        CSharp.compilation_unit_return retval = new CSharp.compilation_unit_return();
        retval.start = input.LT(1);


        CSharp.extern_alias_directives_return adtvs =null;

        CSharp.using_directives_return imprtStmts =null;

        CSharp.global_attribute_section_return glbAttSec =null;

        CSharp.namespace_member_declarations_return nspcmems =null;


        try {
            // CSharp.g:1843:3: ( (adtvs= extern_alias_directives )? (imprtStmts= using_directives )? ( ( ( global_attribute_section )=>glbAttSec= global_attribute_section ) )* (nspcmems= namespace_member_declarations )? EOF -> writeCompUnit(alisDRctv=adtvsimports=imprtStmtsgas=glbAttSecnmspMemDec=nspcmems))
            // CSharp.g:1844:3: (adtvs= extern_alias_directives )? (imprtStmts= using_directives )? ( ( ( global_attribute_section )=>glbAttSec= global_attribute_section ) )* (nspcmems= namespace_member_declarations )? EOF
            {
            // CSharp.g:1844:3: (adtvs= extern_alias_directives )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==EXTERN) ) {
                int LA157_1 = input.LA(2);

                if ( (LA157_1==IDENTIFIER) ) {
                    int LA157_3 = input.LA(3);

                    if ( (LA157_3==IDENTIFIER) ) {
                        int LA157_4 = input.LA(4);

                        if ( (LA157_4==SEMICOLON) ) {
                            alt157=1;
                        }
                    }
                }
            }
            switch (alt157) {
                case 1 :
                    // CSharp.g:1844:4: adtvs= extern_alias_directives
                    {
                    pushFollow(FOLLOW_extern_alias_directives_in_compilation_unit12297);
                    adtvs=extern_alias_directives();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:1844:36: (imprtStmts= using_directives )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==USING) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // CSharp.g:1844:37: imprtStmts= using_directives
                    {
                    pushFollow(FOLLOW_using_directives_in_compilation_unit12304);
                    imprtStmts=using_directives();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:1845:5: ( ( ( global_attribute_section )=>glbAttSec= global_attribute_section ) )*
            loop159:
            do {
                int alt159=2;
                int LA159_0 = input.LA(1);

                if ( (LA159_0==OPEN_BRACKET) ) {
                    int LA159_2 = input.LA(2);

                    if ( (synpred19_CSharp()) ) {
                        alt159=1;
                    }


                }


                switch (alt159) {
            	case 1 :
            	    // CSharp.g:1845:7: ( ( global_attribute_section )=>glbAttSec= global_attribute_section )
            	    {
            	    // CSharp.g:1845:7: ( ( global_attribute_section )=>glbAttSec= global_attribute_section )
            	    // CSharp.g:1845:8: ( global_attribute_section )=>glbAttSec= global_attribute_section
            	    {
            	    pushFollow(FOLLOW_global_attribute_section_in_compilation_unit12323);
            	    glbAttSec=global_attribute_section();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop159;
                }
            } while (true);


            // CSharp.g:1846:5: (nspcmems= namespace_member_declarations )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==ABSTRACT||LA160_0==CLASS||LA160_0==DELEGATE||LA160_0==ENUM||LA160_0==EXTERN||LA160_0==IDENTIFIER||(LA160_0 >= INTERFACE && LA160_0 <= INTERNAL)||(LA160_0 >= NAMESPACE && LA160_0 <= NEW)||LA160_0==OPEN_BRACKET||LA160_0==OVERRIDE||(LA160_0 >= PRIVATE && LA160_0 <= PUBLIC)||LA160_0==READONLY||LA160_0==SEALED||(LA160_0 >= SINGLE_LINE_COMMENT && LA160_0 <= SINGLE_LINE_DOC_COMMENT)||LA160_0==STATIC||LA160_0==STRUCT||LA160_0==UNSAFE||LA160_0==VIRTUAL||LA160_0==VOLATILE) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // CSharp.g:1846:6: nspcmems= namespace_member_declarations
                    {
                    pushFollow(FOLLOW_namespace_member_declarations_in_compilation_unit12336);
                    nspcmems=namespace_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,EOF,FOLLOW_EOF_in_compilation_unit12340); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1847:5: -> writeCompUnit(alisDRctv=adtvsimports=imprtStmtsgas=glbAttSecnmspMemDec=nspcmems)
              {
                  retval.st = templateLib.getInstanceOf("writeCompUnit",new STAttrMap().put("alisDRctv", adtvs).put("imports", imprtStmts).put("gas", glbAttSec).put("nmspMemDec", nspcmems));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compilation_unit"


    public static class namespace_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_declaration"
    // CSharp.g:1849:1: namespace_declaration : NAMESPACE qi= qualified_identifier nmsBdy= namespace_body (dl= SEMICOLON )? (comts= comments )? -> pkgDeclarationandClassBody(packageName=NamingUtil.toLowerCase($qi.text)nameSpaceBody=nmsBdydeleimiter=dlcomments=comtsclassName=getClassName());
    public final CSharp.namespace_declaration_return namespace_declaration() throws RecognitionException {
        CSharp.namespace_declaration_return retval = new CSharp.namespace_declaration_return();
        retval.start = input.LT(1);


        Token dl=null;
        CSharp.qualified_identifier_return qi =null;

        CSharp.namespace_body_return nmsBdy =null;

        CSharp.comments_return comts =null;


        try {
            // CSharp.g:1850:2: ( NAMESPACE qi= qualified_identifier nmsBdy= namespace_body (dl= SEMICOLON )? (comts= comments )? -> pkgDeclarationandClassBody(packageName=NamingUtil.toLowerCase($qi.text)nameSpaceBody=nmsBdydeleimiter=dlcomments=comtsclassName=getClassName()))
            // CSharp.g:1850:4: NAMESPACE qi= qualified_identifier nmsBdy= namespace_body (dl= SEMICOLON )? (comts= comments )?
            {
            match(input,NAMESPACE,FOLLOW_NAMESPACE_in_namespace_declaration12376); if (state.failed) return retval;

            pushFollow(FOLLOW_qualified_identifier_in_namespace_declaration12380);
            qi=qualified_identifier();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_namespace_body_in_namespace_declaration12384);
            nmsBdy=namespace_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1850:60: (dl= SEMICOLON )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==SEMICOLON) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // CSharp.g:1850:61: dl= SEMICOLON
                    {
                    dl=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_namespace_declaration12389); if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:1850:76: (comts= comments )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==SINGLE_LINE_COMMENT) ) {
                alt162=1;
            }
            else if ( (LA162_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // CSharp.g:1850:77: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_namespace_declaration12396);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1851:2: -> pkgDeclarationandClassBody(packageName=NamingUtil.toLowerCase($qi.text)nameSpaceBody=nmsBdydeleimiter=dlcomments=comtsclassName=getClassName())
              {
                  retval.st = templateLib.getInstanceOf("pkgDeclarationandClassBody",new STAttrMap().put("packageName", NamingUtil.toLowerCase((qi!=null?input.toString(qi.start,qi.stop):null))).put("nameSpaceBody", nmsBdy).put("deleimiter", dl).put("comments", comts).put("className", getClassName()));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "namespace_declaration"


    public static class qualified_identifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "qualified_identifier"
    // CSharp.g:1853:1: qualified_identifier : id1= IDENTIFIER (idChldLst+= qualified_identifier_Chld )* -> pkgDeclChld(root=$id1.textchldLst=$idChldLst);
    public final CSharp.qualified_identifier_return qualified_identifier() throws RecognitionException {
        CSharp.qualified_identifier_return retval = new CSharp.qualified_identifier_return();
        retval.start = input.LT(1);


        Token id1=null;
        List list_idChldLst=null;
        RuleReturnScope idChldLst = null;
        try {
            // CSharp.g:1854:2: (id1= IDENTIFIER (idChldLst+= qualified_identifier_Chld )* -> pkgDeclChld(root=$id1.textchldLst=$idChldLst))
            // CSharp.g:1855:2: id1= IDENTIFIER (idChldLst+= qualified_identifier_Chld )*
            {
            id1=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualified_identifier12438); if (state.failed) return retval;

            // CSharp.g:1855:17: (idChldLst+= qualified_identifier_Chld )*
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==DOT) ) {
                    alt163=1;
                }


                switch (alt163) {
            	case 1 :
            	    // CSharp.g:1855:18: idChldLst+= qualified_identifier_Chld
            	    {
            	    pushFollow(FOLLOW_qualified_identifier_Chld_in_qualified_identifier12443);
            	    idChldLst=qualified_identifier_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_idChldLst==null) list_idChldLst=new ArrayList();
            	    list_idChldLst.add(idChldLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1856:2: -> pkgDeclChld(root=$id1.textchldLst=$idChldLst)
              {
                  retval.st = templateLib.getInstanceOf("pkgDeclChld",new STAttrMap().put("root", (id1!=null?id1.getText():null)).put("chldLst", list_idChldLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "qualified_identifier"


    public static class qualified_identifier_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "qualified_identifier_Chld"
    // CSharp.g:1858:1: qualified_identifier_Chld : DOT id= IDENTIFIER -> text(value=\".\"+NamingUtil.toCamelCase($id.text));
    public final CSharp.qualified_identifier_Chld_return qualified_identifier_Chld() throws RecognitionException {
        CSharp.qualified_identifier_Chld_return retval = new CSharp.qualified_identifier_Chld_return();
        retval.start = input.LT(1);


        Token id=null;

        try {
            // CSharp.g:1859:3: ( DOT id= IDENTIFIER -> text(value=\".\"+NamingUtil.toCamelCase($id.text)))
            // CSharp.g:1860:3: DOT id= IDENTIFIER
            {
            match(input,DOT,FOLLOW_DOT_in_qualified_identifier_Chld12471); if (state.failed) return retval;

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualified_identifier_Chld12476); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1861:3: -> text(value=\".\"+NamingUtil.toCamelCase($id.text))
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "."+NamingUtil.toCamelCase((id!=null?id.getText():null))));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "qualified_identifier_Chld"


    public static class namespace_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_body"
    // CSharp.g:1864:1: namespace_body : OPEN_BRACE (alsDct= extern_alias_directives )? (imps= using_directives )? (nspcmems= namespace_member_declarations )? CLOSE_BRACE -> createClassBody(alisDRctv=alsDctimports=impsnmspMemDec=nspcmems);
    public final CSharp.namespace_body_return namespace_body() throws RecognitionException {
        CSharp.namespace_body_return retval = new CSharp.namespace_body_return();
        retval.start = input.LT(1);


        CSharp.extern_alias_directives_return alsDct =null;

        CSharp.using_directives_return imps =null;

        CSharp.namespace_member_declarations_return nspcmems =null;


        try {
            // CSharp.g:1865:2: ( OPEN_BRACE (alsDct= extern_alias_directives )? (imps= using_directives )? (nspcmems= namespace_member_declarations )? CLOSE_BRACE -> createClassBody(alisDRctv=alsDctimports=impsnmspMemDec=nspcmems))
            // CSharp.g:1866:2: OPEN_BRACE (alsDct= extern_alias_directives )? (imps= using_directives )? (nspcmems= namespace_member_declarations )? CLOSE_BRACE
            {
            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_namespace_body12503); if (state.failed) return retval;

            // CSharp.g:1866:13: (alsDct= extern_alias_directives )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==EXTERN) ) {
                int LA164_1 = input.LA(2);

                if ( (LA164_1==IDENTIFIER) ) {
                    int LA164_3 = input.LA(3);

                    if ( (LA164_3==IDENTIFIER) ) {
                        int LA164_4 = input.LA(4);

                        if ( (LA164_4==SEMICOLON) ) {
                            alt164=1;
                        }
                    }
                }
            }
            switch (alt164) {
                case 1 :
                    // CSharp.g:1866:14: alsDct= extern_alias_directives
                    {
                    pushFollow(FOLLOW_extern_alias_directives_in_namespace_body12508);
                    alsDct=extern_alias_directives();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:1866:47: (imps= using_directives )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==USING) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // CSharp.g:1866:48: imps= using_directives
                    {
                    pushFollow(FOLLOW_using_directives_in_namespace_body12515);
                    imps=using_directives();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:1866:72: (nspcmems= namespace_member_declarations )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==ABSTRACT||LA166_0==CLASS||LA166_0==DELEGATE||LA166_0==ENUM||LA166_0==EXTERN||LA166_0==IDENTIFIER||(LA166_0 >= INTERFACE && LA166_0 <= INTERNAL)||(LA166_0 >= NAMESPACE && LA166_0 <= NEW)||LA166_0==OPEN_BRACKET||LA166_0==OVERRIDE||(LA166_0 >= PRIVATE && LA166_0 <= PUBLIC)||LA166_0==READONLY||LA166_0==SEALED||(LA166_0 >= SINGLE_LINE_COMMENT && LA166_0 <= SINGLE_LINE_DOC_COMMENT)||LA166_0==STATIC||LA166_0==STRUCT||LA166_0==UNSAFE||LA166_0==VIRTUAL||LA166_0==VOLATILE) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // CSharp.g:1866:73: nspcmems= namespace_member_declarations
                    {
                    pushFollow(FOLLOW_namespace_member_declarations_in_namespace_body12522);
                    nspcmems=namespace_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_namespace_body12526); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1867:2: -> createClassBody(alisDRctv=alsDctimports=impsnmspMemDec=nspcmems)
              {
                  retval.st = templateLib.getInstanceOf("createClassBody",new STAttrMap().put("alisDRctv", alsDct).put("imports", imps).put("nmspMemDec", nspcmems));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "namespace_body"


    public static class extern_alias_directives_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "extern_alias_directives"
    // CSharp.g:1869:1: extern_alias_directives : (extrnLst+= extern_alias_directive )+ -> lineIterator(list=$extrnLst);
    public final CSharp.extern_alias_directives_return extern_alias_directives() throws RecognitionException {
        CSharp.extern_alias_directives_return retval = new CSharp.extern_alias_directives_return();
        retval.start = input.LT(1);


        List list_extrnLst=null;
        RuleReturnScope extrnLst = null;
        try {
            // CSharp.g:1870:2: ( (extrnLst+= extern_alias_directive )+ -> lineIterator(list=$extrnLst))
            // CSharp.g:1871:2: (extrnLst+= extern_alias_directive )+
            {
            // CSharp.g:1871:2: (extrnLst+= extern_alias_directive )+
            int cnt167=0;
            loop167:
            do {
                int alt167=2;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==EXTERN) ) {
                    int LA167_2 = input.LA(2);

                    if ( (LA167_2==IDENTIFIER) ) {
                        int LA167_3 = input.LA(3);

                        if ( (LA167_3==IDENTIFIER) ) {
                            int LA167_4 = input.LA(4);

                            if ( (LA167_4==SEMICOLON) ) {
                                alt167=1;
                            }


                        }


                    }


                }


                switch (alt167) {
            	case 1 :
            	    // CSharp.g:1871:3: extrnLst+= extern_alias_directive
            	    {
            	    pushFollow(FOLLOW_extern_alias_directive_in_extern_alias_directives12559);
            	    extrnLst=extern_alias_directive();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_extrnLst==null) list_extrnLst=new ArrayList();
            	    list_extrnLst.add(extrnLst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt167 >= 1 ) break loop167;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(167, input);
                        throw eee;
                }
                cnt167++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1872:2: -> lineIterator(list=$extrnLst)
              {
                  retval.st = templateLib.getInstanceOf("lineIterator",new STAttrMap().put("list", list_extrnLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_alias_directives"


    public static class extern_alias_directive_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "extern_alias_directive"
    // CSharp.g:1874:1: extern_alias_directive : EXTERN alias_contextual_keyword IDENTIFIER SEMICOLON -> text(value=\"//TODO Extern alias directive\");
    public final CSharp.extern_alias_directive_return extern_alias_directive() throws RecognitionException {
        CSharp.extern_alias_directive_return retval = new CSharp.extern_alias_directive_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:1875:2: ( EXTERN alias_contextual_keyword IDENTIFIER SEMICOLON -> text(value=\"//TODO Extern alias directive\"))
            // CSharp.g:1876:2: EXTERN alias_contextual_keyword IDENTIFIER SEMICOLON
            {
            match(input,EXTERN,FOLLOW_EXTERN_in_extern_alias_directive12583); if (state.failed) return retval;

            pushFollow(FOLLOW_alias_contextual_keyword_in_extern_alias_directive12585);
            alias_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_extern_alias_directive12587); if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_extern_alias_directive12589); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1877:2: -> text(value=\"//TODO Extern alias directive\")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "//TODO Extern alias directive"));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_alias_directive"


    public static class using_directives_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "using_directives"
    // CSharp.g:1879:1: using_directives : (dirLst+= using_directive )+ -> importStmts(lstImports=$dirLst);
    public final CSharp.using_directives_return using_directives() throws RecognitionException {
        CSharp.using_directives_return retval = new CSharp.using_directives_return();
        retval.start = input.LT(1);


        List list_dirLst=null;
        RuleReturnScope dirLst = null;
        try {
            // CSharp.g:1880:2: ( (dirLst+= using_directive )+ -> importStmts(lstImports=$dirLst))
            // CSharp.g:1881:2: (dirLst+= using_directive )+
            {
            // CSharp.g:1881:2: (dirLst+= using_directive )+
            int cnt168=0;
            loop168:
            do {
                int alt168=2;
                int LA168_0 = input.LA(1);

                if ( (LA168_0==USING) ) {
                    alt168=1;
                }


                switch (alt168) {
            	case 1 :
            	    // CSharp.g:1881:3: dirLst+= using_directive
            	    {
            	    pushFollow(FOLLOW_using_directive_in_using_directives12614);
            	    dirLst=using_directive();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_dirLst==null) list_dirLst=new ArrayList();
            	    list_dirLst.add(dirLst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt168 >= 1 ) break loop168;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(168, input);
                        throw eee;
                }
                cnt168++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1882:2: -> importStmts(lstImports=$dirLst)
              {
                  retval.st = templateLib.getInstanceOf("importStmts",new STAttrMap().put("lstImports", list_dirLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "using_directives"


    public static class using_directive_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "using_directive"
    // CSharp.g:1884:1: using_directive : (usngalsDrctv= using_alias_directive -> text(value=$usngalsDrctv.text)|usngnmsDrctv= using_namespace_directive -> text(value=usngnmsDrctv));
    public final CSharp.using_directive_return using_directive() throws RecognitionException {
        CSharp.using_directive_return retval = new CSharp.using_directive_return();
        retval.start = input.LT(1);


        CSharp.using_alias_directive_return usngalsDrctv =null;

        CSharp.using_namespace_directive_return usngnmsDrctv =null;


        try {
            // CSharp.g:1885:2: (usngalsDrctv= using_alias_directive -> text(value=$usngalsDrctv.text)|usngnmsDrctv= using_namespace_directive -> text(value=usngnmsDrctv))
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==USING) ) {
                int LA169_1 = input.LA(2);

                if ( (LA169_1==IDENTIFIER) ) {
                    int LA169_2 = input.LA(3);

                    if ( (LA169_2==ASSIGNMENT) ) {
                        alt169=1;
                    }
                    else if ( (LA169_2==DOT||LA169_2==DOUBLE_COLON||LA169_2==LT||LA169_2==SEMICOLON) ) {
                        alt169=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 169, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 169, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;

            }
            switch (alt169) {
                case 1 :
                    // CSharp.g:1886:2: usngalsDrctv= using_alias_directive
                    {
                    pushFollow(FOLLOW_using_alias_directive_in_using_directive12640);
                    usngalsDrctv=using_alias_directive();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1886:46: -> text(value=$usngalsDrctv.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (usngalsDrctv!=null?input.toString(usngalsDrctv.start,usngalsDrctv.stop):null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1887:3: usngnmsDrctv= using_namespace_directive
                    {
                    pushFollow(FOLLOW_using_namespace_directive_in_using_directive12663);
                    usngnmsDrctv=using_namespace_directive();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1887:46: -> text(value=usngnmsDrctv)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", usngnmsDrctv));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "using_directive"


    public static class using_alias_directive_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "using_alias_directive"
    // CSharp.g:1889:1: using_alias_directive : USING IDENTIFIER ASSIGNMENT namespace_or_type_name SEMICOLON -> text(value=\"//TODO Using alias directive\");
    public final CSharp.using_alias_directive_return using_alias_directive() throws RecognitionException {
        CSharp.using_alias_directive_return retval = new CSharp.using_alias_directive_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:1890:2: ( USING IDENTIFIER ASSIGNMENT namespace_or_type_name SEMICOLON -> text(value=\"//TODO Using alias directive\"))
            // CSharp.g:1891:2: USING IDENTIFIER ASSIGNMENT namespace_or_type_name SEMICOLON
            {
            match(input,USING,FOLLOW_USING_in_using_alias_directive12688); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_using_alias_directive12690); if (state.failed) return retval;

            match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_using_alias_directive12692); if (state.failed) return retval;

            pushFollow(FOLLOW_namespace_or_type_name_in_using_alias_directive12694);
            namespace_or_type_name();

            state._fsp--;
            if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_using_alias_directive12696); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1892:2: -> text(value=\"//TODO Using alias directive\")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "//TODO Using alias directive"));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "using_alias_directive"


    public static class using_namespace_directive_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "using_namespace_directive"
    // CSharp.g:1894:1: using_namespace_directive : USING pkgName= namespace_name SEMICOLON (comts= comments )? -> importStmt(packName=$pkgName.textcomments=comts);
    public final CSharp.using_namespace_directive_return using_namespace_directive() throws RecognitionException {
        CSharp.using_namespace_directive_return retval = new CSharp.using_namespace_directive_return();
        retval.start = input.LT(1);


        CSharp.namespace_name_return pkgName =null;

        CSharp.comments_return comts =null;


        try {
            // CSharp.g:1895:2: ( USING pkgName= namespace_name SEMICOLON (comts= comments )? -> importStmt(packName=$pkgName.textcomments=comts))
            // CSharp.g:1896:2: USING pkgName= namespace_name SEMICOLON (comts= comments )?
            {
            match(input,USING,FOLLOW_USING_in_using_namespace_directive12718); if (state.failed) return retval;

            pushFollow(FOLLOW_namespace_name_in_using_namespace_directive12722);
            pkgName=namespace_name();

            state._fsp--;
            if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_using_namespace_directive12724); if (state.failed) return retval;

            // CSharp.g:1896:41: (comts= comments )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==SINGLE_LINE_COMMENT) ) {
                alt170=1;
            }
            else if ( (LA170_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // CSharp.g:1896:42: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_using_namespace_directive12729);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1897:2: -> importStmt(packName=$pkgName.textcomments=comts)
              {
                  retval.st = templateLib.getInstanceOf("importStmt",new STAttrMap().put("packName", (pkgName!=null?input.toString(pkgName.start,pkgName.stop):null)).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "using_namespace_directive"


    public static class namespace_member_declarations_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_member_declarations"
    // CSharp.g:1899:1: namespace_member_declarations : (nameSpaceMemLst+= namespace_member_declaration )+ -> writeFormerClass(originalMember=CSharpHelper.filterOriginalMember($nameSpaceMemLst).toString());
    public final CSharp.namespace_member_declarations_return namespace_member_declarations() throws RecognitionException {
        CSharp.namespace_member_declarations_return retval = new CSharp.namespace_member_declarations_return();
        retval.start = input.LT(1);


        List list_nameSpaceMemLst=null;
        RuleReturnScope nameSpaceMemLst = null;
        try {
            // CSharp.g:1900:2: ( (nameSpaceMemLst+= namespace_member_declaration )+ -> writeFormerClass(originalMember=CSharpHelper.filterOriginalMember($nameSpaceMemLst).toString()))
            // CSharp.g:1901:2: (nameSpaceMemLst+= namespace_member_declaration )+
            {
            // CSharp.g:1901:2: (nameSpaceMemLst+= namespace_member_declaration )+
            int cnt171=0;
            loop171:
            do {
                int alt171=2;
                int LA171_0 = input.LA(1);

                if ( (LA171_0==ABSTRACT||LA171_0==CLASS||LA171_0==DELEGATE||LA171_0==ENUM||LA171_0==EXTERN||LA171_0==IDENTIFIER||(LA171_0 >= INTERFACE && LA171_0 <= INTERNAL)||(LA171_0 >= NAMESPACE && LA171_0 <= NEW)||LA171_0==OPEN_BRACKET||LA171_0==OVERRIDE||(LA171_0 >= PRIVATE && LA171_0 <= PUBLIC)||LA171_0==READONLY||LA171_0==SEALED||(LA171_0 >= SINGLE_LINE_COMMENT && LA171_0 <= SINGLE_LINE_DOC_COMMENT)||LA171_0==STATIC||LA171_0==STRUCT||LA171_0==UNSAFE||LA171_0==VIRTUAL||LA171_0==VOLATILE) ) {
                    alt171=1;
                }


                switch (alt171) {
            	case 1 :
            	    // CSharp.g:1901:3: nameSpaceMemLst+= namespace_member_declaration
            	    {
            	    pushFollow(FOLLOW_namespace_member_declaration_in_namespace_member_declarations12760);
            	    nameSpaceMemLst=namespace_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_nameSpaceMemLst==null) list_nameSpaceMemLst=new ArrayList();
            	    list_nameSpaceMemLst.add(nameSpaceMemLst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt171 >= 1 ) break loop171;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(171, input);
                        throw eee;
                }
                cnt171++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1902:2: -> writeFormerClass(originalMember=CSharpHelper.filterOriginalMember($nameSpaceMemLst).toString())
              {
                  retval.st = templateLib.getInstanceOf("writeFormerClass",new STAttrMap().put("originalMember", CSharpHelper.filterOriginalMember(list_nameSpaceMemLst).toString()));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "namespace_member_declarations"


    public static class namespace_member_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_member_declaration"
    // CSharp.g:1904:1: namespace_member_declaration : (nmsDec= namespace_declaration -> text(value=nmsDec)|typeDec= type_declaration -> text(value=typeDec));
    public final CSharp.namespace_member_declaration_return namespace_member_declaration() throws RecognitionException {
        CSharp.namespace_member_declaration_return retval = new CSharp.namespace_member_declaration_return();
        retval.start = input.LT(1);


        CSharp.namespace_declaration_return nmsDec =null;

        CSharp.type_declaration_return typeDec =null;


        try {
            // CSharp.g:1905:2: (nmsDec= namespace_declaration -> text(value=nmsDec)|typeDec= type_declaration -> text(value=typeDec))
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==NAMESPACE) ) {
                alt172=1;
            }
            else if ( (LA172_0==ABSTRACT||LA172_0==CLASS||LA172_0==DELEGATE||LA172_0==ENUM||LA172_0==EXTERN||LA172_0==IDENTIFIER||(LA172_0 >= INTERFACE && LA172_0 <= INTERNAL)||LA172_0==NEW||LA172_0==OPEN_BRACKET||LA172_0==OVERRIDE||(LA172_0 >= PRIVATE && LA172_0 <= PUBLIC)||LA172_0==READONLY||LA172_0==SEALED||(LA172_0 >= SINGLE_LINE_COMMENT && LA172_0 <= SINGLE_LINE_DOC_COMMENT)||LA172_0==STATIC||LA172_0==STRUCT||LA172_0==UNSAFE||LA172_0==VIRTUAL||LA172_0==VOLATILE) ) {
                alt172=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;

            }
            switch (alt172) {
                case 1 :
                    // CSharp.g:1906:2: nmsDec= namespace_declaration
                    {
                    pushFollow(FOLLOW_namespace_declaration_in_namespace_member_declaration12786);
                    nmsDec=namespace_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1906:40: -> text(value=nmsDec)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", nmsDec));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1907:3: typeDec= type_declaration
                    {
                    pushFollow(FOLLOW_type_declaration_in_namespace_member_declaration12809);
                    typeDec=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1907:40: -> text(value=typeDec)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", typeDec));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "namespace_member_declaration"


    public static class type_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_declaration"
    // CSharp.g:1918:1: type_declaration : (at= attributes )? (comts= comments )? (accModfs= all_member_modifiers )? chld= type_declaration_Chld -> typeDeclaration(attributes=atcomments=comtsaccessModifiers=accModfsbodyDefintion=chld);
    public final CSharp.type_declaration_return type_declaration() throws RecognitionException {
        CSharp.type_declaration_return retval = new CSharp.type_declaration_return();
        retval.start = input.LT(1);


        CSharp.attributes_return at =null;

        CSharp.comments_return comts =null;

        CSharp.all_member_modifiers_return accModfs =null;

        CSharp.type_declaration_Chld_return chld =null;


        try {
            // CSharp.g:1919:3: ( (at= attributes )? (comts= comments )? (accModfs= all_member_modifiers )? chld= type_declaration_Chld -> typeDeclaration(attributes=atcomments=comtsaccessModifiers=accModfsbodyDefintion=chld))
            // CSharp.g:1920:3: (at= attributes )? (comts= comments )? (accModfs= all_member_modifiers )? chld= type_declaration_Chld
            {
            // CSharp.g:1920:3: (at= attributes )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==OPEN_BRACKET) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // CSharp.g:1920:4: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_type_declaration12849);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:1920:20: (comts= comments )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( ((LA174_0 >= SINGLE_LINE_COMMENT && LA174_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // CSharp.g:1920:21: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_type_declaration12856);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:1920:38: (accModfs= all_member_modifiers )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==ABSTRACT||LA175_0==EXTERN||LA175_0==IDENTIFIER||LA175_0==INTERNAL||LA175_0==NEW||LA175_0==OVERRIDE||(LA175_0 >= PRIVATE && LA175_0 <= PUBLIC)||LA175_0==READONLY||LA175_0==SEALED||LA175_0==STATIC||LA175_0==UNSAFE||LA175_0==VIRTUAL||LA175_0==VOLATILE) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // CSharp.g:1920:39: accModfs= all_member_modifiers
                    {
                    pushFollow(FOLLOW_all_member_modifiers_in_type_declaration12863);
                    accModfs=all_member_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_declaration_Chld_in_type_declaration12870);
            chld=type_declaration_Chld();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1921:2: -> typeDeclaration(attributes=atcomments=comtsaccessModifiers=accModfsbodyDefintion=chld)
              {
                  retval.st = templateLib.getInstanceOf("typeDeclaration",new STAttrMap().put("attributes", at).put("comments", comts).put("accessModifiers", accModfs).put("bodyDefintion", chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration"


    public static class type_declaration_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_declaration_Chld"
    // CSharp.g:1924:1: type_declaration_Chld : (classDef= class_definition -> typeDeclarationChld(decl=classDef)|structDef= struct_definition -> typeDeclarationChld(decl=structDef)|interfaceDef= interface_definition -> typeDeclarationChld(decl=interfaceDef)|enumDef= enum_definition -> typeDeclarationChld(decl=enumDef)|delegateDef= delegate_definition -> typeDeclarationChld(decl=delegateDef));
    public final CSharp.type_declaration_Chld_return type_declaration_Chld() throws RecognitionException {
        CSharp.type_declaration_Chld_return retval = new CSharp.type_declaration_Chld_return();
        retval.start = input.LT(1);


        CSharp.class_definition_return classDef =null;

        CSharp.struct_definition_return structDef =null;

        CSharp.interface_definition_return interfaceDef =null;

        CSharp.enum_definition_return enumDef =null;

        CSharp.delegate_definition_return delegateDef =null;


        try {
            // CSharp.g:1925:3: (classDef= class_definition -> typeDeclarationChld(decl=classDef)|structDef= struct_definition -> typeDeclarationChld(decl=structDef)|interfaceDef= interface_definition -> typeDeclarationChld(decl=interfaceDef)|enumDef= enum_definition -> typeDeclarationChld(decl=enumDef)|delegateDef= delegate_definition -> typeDeclarationChld(decl=delegateDef))
            int alt176=5;
            switch ( input.LA(1) ) {
            case CLASS:
                {
                alt176=1;
                }
                break;
            case STRUCT:
                {
                alt176=2;
                }
                break;
            case INTERFACE:
                {
                alt176=3;
                }
                break;
            case ENUM:
                {
                alt176=4;
                }
                break;
            case DELEGATE:
                {
                alt176=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;

            }

            switch (alt176) {
                case 1 :
                    // CSharp.g:1926:3: classDef= class_definition
                    {
                    pushFollow(FOLLOW_class_definition_in_type_declaration_Chld12911);
                    classDef=class_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1927:3: -> typeDeclarationChld(decl=classDef)
                      {
                          retval.st = templateLib.getInstanceOf("typeDeclarationChld",new STAttrMap().put("decl", classDef));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1928:4: structDef= struct_definition
                    {
                    pushFollow(FOLLOW_struct_definition_in_type_declaration_Chld12929);
                    structDef=struct_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1929:3: -> typeDeclarationChld(decl=structDef)
                      {
                          retval.st = templateLib.getInstanceOf("typeDeclarationChld",new STAttrMap().put("decl", structDef));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:1930:4: interfaceDef= interface_definition
                    {
                    pushFollow(FOLLOW_interface_definition_in_type_declaration_Chld12947);
                    interfaceDef=interface_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1931:3: -> typeDeclarationChld(decl=interfaceDef)
                      {
                          retval.st = templateLib.getInstanceOf("typeDeclarationChld",new STAttrMap().put("decl", interfaceDef));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:1932:4: enumDef= enum_definition
                    {
                    pushFollow(FOLLOW_enum_definition_in_type_declaration_Chld12965);
                    enumDef=enum_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1933:3: -> typeDeclarationChld(decl=enumDef)
                      {
                          retval.st = templateLib.getInstanceOf("typeDeclarationChld",new STAttrMap().put("decl", enumDef));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:1934:4: delegateDef= delegate_definition
                    {
                    pushFollow(FOLLOW_delegate_definition_in_type_declaration_Chld12983);
                    delegateDef=delegate_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1935:3: -> typeDeclarationChld(decl=delegateDef)
                      {
                          retval.st = templateLib.getInstanceOf("typeDeclarationChld",new STAttrMap().put("decl", delegateDef));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_Chld"


    public static class qualified_alias_member_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "qualified_alias_member"
    // CSharp.g:1939:1: qualified_alias_member : rlNm= IDENTIFIER DOUBLE_COLON alsNam= IDENTIFIER tal= type_argument_list_opt -> qualifiedAliasMember(actName=rlNmaliasName=alsNamargList=tal);
    public final CSharp.qualified_alias_member_return qualified_alias_member() throws RecognitionException {
        CSharp.qualified_alias_member_return retval = new CSharp.qualified_alias_member_return();
        retval.start = input.LT(1);


        Token rlNm=null;
        Token alsNam=null;
        CSharp.type_argument_list_opt_return tal =null;


        try {
            // CSharp.g:1940:2: (rlNm= IDENTIFIER DOUBLE_COLON alsNam= IDENTIFIER tal= type_argument_list_opt -> qualifiedAliasMember(actName=rlNmaliasName=alsNamargList=tal))
            // CSharp.g:1941:2: rlNm= IDENTIFIER DOUBLE_COLON alsNam= IDENTIFIER tal= type_argument_list_opt
            {
            rlNm=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualified_alias_member13012); if (state.failed) return retval;

            match(input,DOUBLE_COLON,FOLLOW_DOUBLE_COLON_in_qualified_alias_member13014); if (state.failed) return retval;

            alsNam=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualified_alias_member13018); if (state.failed) return retval;

            pushFollow(FOLLOW_type_argument_list_opt_in_qualified_alias_member13022);
            tal=type_argument_list_opt();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1942:2: -> qualifiedAliasMember(actName=rlNmaliasName=alsNamargList=tal)
              {
                  retval.st = templateLib.getInstanceOf("qualifiedAliasMember",new STAttrMap().put("actName", rlNm).put("aliasName", alsNam).put("argList", tal));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "qualified_alias_member"


    public static class class_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_declaration"
    // CSharp.g:1947:1: class_declaration : ( attributes )? ( class_modifiers )? ( partial_contextual_keyword )? CLASS IDENTIFIER ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( SEMICOLON )? ;
    public final CSharp.class_declaration_return class_declaration() throws RecognitionException {
        CSharp.class_declaration_return retval = new CSharp.class_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:1948:2: ( ( attributes )? ( class_modifiers )? ( partial_contextual_keyword )? CLASS IDENTIFIER ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( SEMICOLON )? )
            // CSharp.g:1948:4: ( attributes )? ( class_modifiers )? ( partial_contextual_keyword )? CLASS IDENTIFIER ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( SEMICOLON )?
            {
            // CSharp.g:1948:4: ( attributes )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==OPEN_BRACKET) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // CSharp.g:1948:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_class_declaration13053);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:1948:16: ( class_modifiers )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==ABSTRACT||LA178_0==INTERNAL||LA178_0==NEW||(LA178_0 >= PRIVATE && LA178_0 <= PUBLIC)||LA178_0==SEALED||LA178_0==STATIC||LA178_0==UNSAFE) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // CSharp.g:1948:16: class_modifiers
                    {
                    pushFollow(FOLLOW_class_modifiers_in_class_declaration13056);
                    class_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:1948:33: ( partial_contextual_keyword )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==IDENTIFIER) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // CSharp.g:1948:33: partial_contextual_keyword
                    {
                    pushFollow(FOLLOW_partial_contextual_keyword_in_class_declaration13059);
                    partial_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLASS,FOLLOW_CLASS_in_class_declaration13062); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_class_declaration13064); if (state.failed) return retval;

            // CSharp.g:1948:78: ( type_parameter_list )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==LT) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // CSharp.g:1948:78: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_class_declaration13066);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:1949:6: ( class_base )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==COLON) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // CSharp.g:1949:6: class_base
                    {
                    pushFollow(FOLLOW_class_base_in_class_declaration13074);
                    class_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:1949:18: ( type_parameter_constraints_clauses )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==IDENTIFIER) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // CSharp.g:1949:18: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_class_declaration13077);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_class_body_in_class_declaration13080);
            class_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1949:65: ( SEMICOLON )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==SEMICOLON) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // CSharp.g:1949:65: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_class_declaration13082); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_declaration"


    public static class class_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_modifiers"
    // CSharp.g:1951:1: class_modifiers : class_modifier ( class_modifier )* ;
    public final CSharp.class_modifiers_return class_modifiers() throws RecognitionException {
        CSharp.class_modifiers_return retval = new CSharp.class_modifiers_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:1952:2: ( class_modifier ( class_modifier )* )
            // CSharp.g:1952:4: class_modifier ( class_modifier )*
            {
            pushFollow(FOLLOW_class_modifier_in_class_modifiers13094);
            class_modifier();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1952:19: ( class_modifier )*
            loop184:
            do {
                int alt184=2;
                int LA184_0 = input.LA(1);

                if ( (LA184_0==ABSTRACT||LA184_0==INTERNAL||LA184_0==NEW||(LA184_0 >= PRIVATE && LA184_0 <= PUBLIC)||LA184_0==SEALED||LA184_0==STATIC||LA184_0==UNSAFE) ) {
                    alt184=1;
                }


                switch (alt184) {
            	case 1 :
            	    // CSharp.g:1952:21: class_modifier
            	    {
            	    pushFollow(FOLLOW_class_modifier_in_class_modifiers13098);
            	    class_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop184;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_modifiers"


    public static class class_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_modifier"
    // CSharp.g:1954:1: class_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)| ABSTRACT -> text(value=$ABSTRACT.text)| SEALED -> text(value=$SEALED.text)| STATIC -> text(value=$STATIC.text)|cmu= class_modifier_unsafe -> text(value=cmu));
    public final CSharp.class_modifier_return class_modifier() throws RecognitionException {
        CSharp.class_modifier_return retval = new CSharp.class_modifier_return();
        retval.start = input.LT(1);


        Token NEW156=null;
        Token PUBLIC157=null;
        Token PROTECTED158=null;
        Token PRIVATE159=null;
        Token ABSTRACT160=null;
        Token SEALED161=null;
        Token STATIC162=null;
        CSharp.class_modifier_unsafe_return cmu =null;


        try {
            // CSharp.g:1955:2: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)| ABSTRACT -> text(value=$ABSTRACT.text)| SEALED -> text(value=$SEALED.text)| STATIC -> text(value=$STATIC.text)|cmu= class_modifier_unsafe -> text(value=cmu))
            int alt185=9;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt185=1;
                }
                break;
            case PUBLIC:
                {
                alt185=2;
                }
                break;
            case PROTECTED:
                {
                alt185=3;
                }
                break;
            case INTERNAL:
                {
                alt185=4;
                }
                break;
            case PRIVATE:
                {
                alt185=5;
                }
                break;
            case ABSTRACT:
                {
                alt185=6;
                }
                break;
            case SEALED:
                {
                alt185=7;
                }
                break;
            case STATIC:
                {
                alt185=8;
                }
                break;
            case UNSAFE:
                {
                alt185=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;

            }

            switch (alt185) {
                case 1 :
                    // CSharp.g:1956:3: NEW
                    {
                    NEW156=(Token)match(input,NEW,FOLLOW_NEW_in_class_modifier13121); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1956:42: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW156!=null?NEW156.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:1957:5: PUBLIC
                    {
                    PUBLIC157=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_class_modifier13170); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1957:42: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC157!=null?PUBLIC157.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:1958:5: PROTECTED
                    {
                    PROTECTED158=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_class_modifier13214); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1958:42: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED158!=null?PROTECTED158.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:1959:5: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_class_modifier13255); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1959:42: -> text(value=\"private\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "private"));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:1960:5: PRIVATE
                    {
                    PRIVATE159=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_class_modifier13297); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1960:42: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE159!=null?PRIVATE159.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:1961:5: ABSTRACT
                    {
                    ABSTRACT160=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_class_modifier13340); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1961:42: -> text(value=$ABSTRACT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ABSTRACT160!=null?ABSTRACT160.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:1962:5: SEALED
                    {
                    SEALED161=(Token)match(input,SEALED,FOLLOW_SEALED_in_class_modifier13382); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1962:42: -> text(value=$SEALED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEALED161!=null?SEALED161.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:1963:5: STATIC
                    {
                    STATIC162=(Token)match(input,STATIC,FOLLOW_STATIC_in_class_modifier13426); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1963:42: -> text(value=$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STATIC162!=null?STATIC162.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:1964:5: cmu= class_modifier_unsafe
                    {
                    pushFollow(FOLLOW_class_modifier_unsafe_in_class_modifier13472);
                    cmu=class_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1964:42: -> text(value=cmu)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", cmu));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_modifier"


    public static class type_parameter_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameter_list"
    // CSharp.g:1966:1: type_parameter_list : LT lst= type_parameters GT -> typeParameterList(paramList=\"<\"+$lst.st.toString().trim()+\">\");
    public final CSharp.type_parameter_list_return type_parameter_list() throws RecognitionException {
        CSharp.type_parameter_list_return retval = new CSharp.type_parameter_list_return();
        retval.start = input.LT(1);


        CSharp.type_parameters_return lst =null;


        try {
            // CSharp.g:1967:2: ( LT lst= type_parameters GT -> typeParameterList(paramList=\"<\"+$lst.st.toString().trim()+\">\"))
            // CSharp.g:1968:2: LT lst= type_parameters GT
            {
            match(input,LT,FOLLOW_LT_in_type_parameter_list13504); if (state.failed) return retval;

            pushFollow(FOLLOW_type_parameters_in_type_parameter_list13508);
            lst=type_parameters();

            state._fsp--;
            if (state.failed) return retval;

            match(input,GT,FOLLOW_GT_in_type_parameter_list13510); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1969:2: -> typeParameterList(paramList=\"<\"+$lst.st.toString().trim()+\">\")
              {
                  retval.st = templateLib.getInstanceOf("typeParameterList",new STAttrMap().put("paramList", "<"+(lst!=null?lst.st:null).toString().trim()+">"));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_parameter_list"


    public static class type_parameters_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameters"
    // CSharp.g:1971:1: type_parameters : (at= attributes )? tp= type_parameter (chld+= type_parameters_Chld )* -> typeParameters(attr=attype=tpchldList=$chld);
    public final CSharp.type_parameters_return type_parameters() throws RecognitionException {
        CSharp.type_parameters_return retval = new CSharp.type_parameters_return();
        retval.start = input.LT(1);


        List list_chld=null;
        CSharp.attributes_return at =null;

        CSharp.type_parameter_return tp =null;

        RuleReturnScope chld = null;
        try {
            // CSharp.g:1972:2: ( (at= attributes )? tp= type_parameter (chld+= type_parameters_Chld )* -> typeParameters(attr=attype=tpchldList=$chld))
            // CSharp.g:1973:2: (at= attributes )? tp= type_parameter (chld+= type_parameters_Chld )*
            {
            // CSharp.g:1973:2: (at= attributes )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==OPEN_BRACKET) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // CSharp.g:1973:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_type_parameters13535);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_parameter_in_type_parameters13541);
            tp=type_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1973:37: (chld+= type_parameters_Chld )*
            loop187:
            do {
                int alt187=2;
                int LA187_0 = input.LA(1);

                if ( (LA187_0==COMMA) ) {
                    alt187=1;
                }


                switch (alt187) {
            	case 1 :
            	    // CSharp.g:1973:39: chld+= type_parameters_Chld
            	    {
            	    pushFollow(FOLLOW_type_parameters_Chld_in_type_parameters13547);
            	    chld=type_parameters_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_chld==null) list_chld=new ArrayList();
            	    list_chld.add(chld.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop187;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1974:2: -> typeParameters(attr=attype=tpchldList=$chld)
              {
                  retval.st = templateLib.getInstanceOf("typeParameters",new STAttrMap().put("attr", at).put("type", tp).put("chldList", list_chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_parameters"


    public static class type_parameters_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameters_Chld"
    // CSharp.g:1977:1: type_parameters_Chld : COMMA (attr= attributes )? par= type_parameter -> typeParametersChld(attribytes=attrparam=par);
    public final CSharp.type_parameters_Chld_return type_parameters_Chld() throws RecognitionException {
        CSharp.type_parameters_Chld_return retval = new CSharp.type_parameters_Chld_return();
        retval.start = input.LT(1);


        CSharp.attributes_return attr =null;

        CSharp.type_parameter_return par =null;


        try {
            // CSharp.g:1978:2: ( COMMA (attr= attributes )? par= type_parameter -> typeParametersChld(attribytes=attrparam=par))
            // CSharp.g:1979:3: COMMA (attr= attributes )? par= type_parameter
            {
            match(input,COMMA,FOLLOW_COMMA_in_type_parameters_Chld13580); if (state.failed) return retval;

            // CSharp.g:1979:10: (attr= attributes )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==OPEN_BRACKET) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // CSharp.g:1979:11: attr= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_type_parameters_Chld13586);
                    attr=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_parameter_in_type_parameters_Chld13593);
            par=type_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1980:3: -> typeParametersChld(attribytes=attrparam=par)
              {
                  retval.st = templateLib.getInstanceOf("typeParametersChld",new STAttrMap().put("attribytes", attr).put("param", par));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_parameters_Chld"


    public static class type_parameter_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameter"
    // CSharp.g:1983:1: type_parameter : IDENTIFIER -> text(value=CSharpHelper.replaceJavaType($IDENTIFIER.text));
    public final CSharp.type_parameter_return type_parameter() throws RecognitionException {
        CSharp.type_parameter_return retval = new CSharp.type_parameter_return();
        retval.start = input.LT(1);


        Token IDENTIFIER163=null;

        try {
            // CSharp.g:1984:2: ( IDENTIFIER -> text(value=CSharpHelper.replaceJavaType($IDENTIFIER.text)))
            // CSharp.g:1985:2: IDENTIFIER
            {
            IDENTIFIER163=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_type_parameter13624); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1985:19: -> text(value=CSharpHelper.replaceJavaType($IDENTIFIER.text))
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", CSharpHelper.replaceJavaType((IDENTIFIER163!=null?IDENTIFIER163.getText():null))));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_parameter"


    public static class class_base_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_base"
    // CSharp.g:1995:1: class_base : COLON cType= class_type (clsInfChldLst+= classbaseandInterfaceChld )* -> classBase(parentClass=CSharpHelper.prefixInheritanceType($cType.text)classBody=$clsInfChldLst);
    public final CSharp.class_base_return class_base() throws RecognitionException {
        CSharp.class_base_return retval = new CSharp.class_base_return();
        retval.start = input.LT(1);


        List list_clsInfChldLst=null;
        CSharp.class_type_return cType =null;

        RuleReturnScope clsInfChldLst = null;
        try {
            // CSharp.g:1996:3: ( COLON cType= class_type (clsInfChldLst+= classbaseandInterfaceChld )* -> classBase(parentClass=CSharpHelper.prefixInheritanceType($cType.text)classBody=$clsInfChldLst))
            // CSharp.g:1997:3: COLON cType= class_type (clsInfChldLst+= classbaseandInterfaceChld )*
            {
            match(input,COLON,FOLLOW_COLON_in_class_base13656); if (state.failed) return retval;

            pushFollow(FOLLOW_class_type_in_class_base13660);
            cType=class_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:1997:26: (clsInfChldLst+= classbaseandInterfaceChld )*
            loop189:
            do {
                int alt189=2;
                int LA189_0 = input.LA(1);

                if ( (LA189_0==COMMA) ) {
                    alt189=1;
                }


                switch (alt189) {
            	case 1 :
            	    // CSharp.g:1997:27: clsInfChldLst+= classbaseandInterfaceChld
            	    {
            	    pushFollow(FOLLOW_classbaseandInterfaceChld_in_class_base13665);
            	    clsInfChldLst=classbaseandInterfaceChld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_clsInfChldLst==null) list_clsInfChldLst=new ArrayList();
            	    list_clsInfChldLst.add(clsInfChldLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop189;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1998:3: -> classBase(parentClass=CSharpHelper.prefixInheritanceType($cType.text)classBody=$clsInfChldLst)
              {
                  retval.st = templateLib.getInstanceOf("classBase",new STAttrMap().put("parentClass", CSharpHelper.prefixInheritanceType((cType!=null?input.toString(cType.start,cType.stop):null))).put("classBody", list_clsInfChldLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_base"


    public static class interface_type_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_type_list"
    // CSharp.g:2001:1: interface_type_list : iType= interface_type (clsInfChldLst+= classbaseandInterfaceChld )* -> text(value=$iType.text+\" \"+$clsInfChldLst);
    public final CSharp.interface_type_list_return interface_type_list() throws RecognitionException {
        CSharp.interface_type_list_return retval = new CSharp.interface_type_list_return();
        retval.start = input.LT(1);


        List list_clsInfChldLst=null;
        CSharp.interface_type_return iType =null;

        RuleReturnScope clsInfChldLst = null;
        try {
            // CSharp.g:2002:2: (iType= interface_type (clsInfChldLst+= classbaseandInterfaceChld )* -> text(value=$iType.text+\" \"+$clsInfChldLst))
            // CSharp.g:2003:2: iType= interface_type (clsInfChldLst+= classbaseandInterfaceChld )*
            {
            pushFollow(FOLLOW_interface_type_in_interface_type_list13700);
            iType=interface_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:2003:23: (clsInfChldLst+= classbaseandInterfaceChld )*
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0==COMMA) ) {
                    alt190=1;
                }


                switch (alt190) {
            	case 1 :
            	    // CSharp.g:2003:24: clsInfChldLst+= classbaseandInterfaceChld
            	    {
            	    pushFollow(FOLLOW_classbaseandInterfaceChld_in_interface_type_list13705);
            	    clsInfChldLst=classbaseandInterfaceChld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_clsInfChldLst==null) list_clsInfChldLst=new ArrayList();
            	    list_clsInfChldLst.add(clsInfChldLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2004:2: -> text(value=$iType.text+\" \"+$clsInfChldLst)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (iType!=null?input.toString(iType.start,iType.stop):null)+" "+list_clsInfChldLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_type_list"


    public static class classbaseandInterfaceChld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "classbaseandInterfaceChld"
    // CSharp.g:2007:1: classbaseandInterfaceChld : COMMA intFaceName= interface_type -> text(value=\",\"+$intFaceName.text);
    public final CSharp.classbaseandInterfaceChld_return classbaseandInterfaceChld() throws RecognitionException {
        CSharp.classbaseandInterfaceChld_return retval = new CSharp.classbaseandInterfaceChld_return();
        retval.start = input.LT(1);


        CSharp.interface_type_return intFaceName =null;


        try {
            // CSharp.g:2008:3: ( COMMA intFaceName= interface_type -> text(value=\",\"+$intFaceName.text))
            // CSharp.g:2009:3: COMMA intFaceName= interface_type
            {
            match(input,COMMA,FOLLOW_COMMA_in_classbaseandInterfaceChld13731); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_type_in_classbaseandInterfaceChld13736);
            intFaceName=interface_type();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2010:3: -> text(value=\",\"+$intFaceName.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ","+(intFaceName!=null?input.toString(intFaceName.start,intFaceName.stop):null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classbaseandInterfaceChld"


    public static class type_parameter_constraints_clauses_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameter_constraints_clauses"
    // CSharp.g:2013:1: type_parameter_constraints_clauses : (consts+= type_parameter_constraints_clause )+ -> typeParameterConstraintsClauses(constraints=$consts);
    public final CSharp.type_parameter_constraints_clauses_return type_parameter_constraints_clauses() throws RecognitionException {
        CSharp.type_parameter_constraints_clauses_return retval = new CSharp.type_parameter_constraints_clauses_return();
        retval.start = input.LT(1);


        List list_consts=null;
        RuleReturnScope consts = null;
        try {
            // CSharp.g:2014:2: ( (consts+= type_parameter_constraints_clause )+ -> typeParameterConstraintsClauses(constraints=$consts))
            // CSharp.g:2015:2: (consts+= type_parameter_constraints_clause )+
            {
            // CSharp.g:2015:2: (consts+= type_parameter_constraints_clause )+
            int cnt191=0;
            loop191:
            do {
                int alt191=2;
                int LA191_0 = input.LA(1);

                if ( (LA191_0==IDENTIFIER) ) {
                    alt191=1;
                }


                switch (alt191) {
            	case 1 :
            	    // CSharp.g:2015:3: consts+= type_parameter_constraints_clause
            	    {
            	    pushFollow(FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses13766);
            	    consts=type_parameter_constraints_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_consts==null) list_consts=new ArrayList();
            	    list_consts.add(consts.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt191 >= 1 ) break loop191;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(191, input);
                        throw eee;
                }
                cnt191++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2016:2: -> typeParameterConstraintsClauses(constraints=$consts)
              {
                  retval.st = templateLib.getInstanceOf("typeParameterConstraintsClauses",new STAttrMap().put("constraints", list_consts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraints_clauses"


    public static class type_parameter_constraints_clause_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameter_constraints_clause"
    // CSharp.g:2018:1: type_parameter_constraints_clause : whrKwd= where_contextual_keyword tp= type_parameter COLON tpc= type_parameter_constraints -> typeParameterConstraintsClause(whereKwd=whrKwdtypPar=tptypParConst=tpc);
    public final CSharp.type_parameter_constraints_clause_return type_parameter_constraints_clause() throws RecognitionException {
        CSharp.type_parameter_constraints_clause_return retval = new CSharp.type_parameter_constraints_clause_return();
        retval.start = input.LT(1);


        CSharp.where_contextual_keyword_return whrKwd =null;

        CSharp.type_parameter_return tp =null;

        CSharp.type_parameter_constraints_return tpc =null;


        try {
            // CSharp.g:2019:2: (whrKwd= where_contextual_keyword tp= type_parameter COLON tpc= type_parameter_constraints -> typeParameterConstraintsClause(whereKwd=whrKwdtypPar=tptypParConst=tpc))
            // CSharp.g:2020:2: whrKwd= where_contextual_keyword tp= type_parameter COLON tpc= type_parameter_constraints
            {
            pushFollow(FOLLOW_where_contextual_keyword_in_type_parameter_constraints_clause13792);
            whrKwd=where_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_type_parameter_in_type_parameter_constraints_clause13796);
            tp=type_parameter();

            state._fsp--;
            if (state.failed) return retval;

            match(input,COLON,FOLLOW_COLON_in_type_parameter_constraints_clause13798); if (state.failed) return retval;

            pushFollow(FOLLOW_type_parameter_constraints_in_type_parameter_constraints_clause13802);
            tpc=type_parameter_constraints();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2021:2: -> typeParameterConstraintsClause(whereKwd=whrKwdtypPar=tptypParConst=tpc)
              {
                  retval.st = templateLib.getInstanceOf("typeParameterConstraintsClause",new STAttrMap().put("whereKwd", whrKwd).put("typPar", tp).put("typParConst", tpc));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraints_clause"


    public static class type_parameter_constraints_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameter_constraints"
    // CSharp.g:2034:1: type_parameter_constraints : (constr= constructor_constraint -> typeParameterConstraints(constraint=constr)|pc= primary_constraint ( COMMA sc= secondary_constraints )? ( COMMA cc= constructor_constraint )? -> typeParameterConstraints2(primaryConstr=pcsecondaryConstr=scconstrCon=cc));
    public final CSharp.type_parameter_constraints_return type_parameter_constraints() throws RecognitionException {
        CSharp.type_parameter_constraints_return retval = new CSharp.type_parameter_constraints_return();
        retval.start = input.LT(1);


        CSharp.constructor_constraint_return constr =null;

        CSharp.primary_constraint_return pc =null;

        CSharp.secondary_constraints_return sc =null;

        CSharp.constructor_constraint_return cc =null;


        try {
            // CSharp.g:2035:3: (constr= constructor_constraint -> typeParameterConstraints(constraint=constr)|pc= primary_constraint ( COMMA sc= secondary_constraints )? ( COMMA cc= constructor_constraint )? -> typeParameterConstraints2(primaryConstr=pcsecondaryConstr=scconstrCon=cc))
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==NEW) ) {
                alt194=1;
            }
            else if ( (LA194_0==CLASS||LA194_0==IDENTIFIER||LA194_0==OBJECT||LA194_0==STRING||LA194_0==STRUCT) ) {
                alt194=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;

            }
            switch (alt194) {
                case 1 :
                    // CSharp.g:2036:3: constr= constructor_constraint
                    {
                    pushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraints13838);
                    constr=constructor_constraint();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2037:3: -> typeParameterConstraints(constraint=constr)
                      {
                          retval.st = templateLib.getInstanceOf("typeParameterConstraints",new STAttrMap().put("constraint", constr));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2038:5: pc= primary_constraint ( COMMA sc= secondary_constraints )? ( COMMA cc= constructor_constraint )?
                    {
                    pushFollow(FOLLOW_primary_constraint_in_type_parameter_constraints13856);
                    pc=primary_constraint();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp.g:2038:27: ( COMMA sc= secondary_constraints )?
                    int alt192=2;
                    int LA192_0 = input.LA(1);

                    if ( (LA192_0==COMMA) ) {
                        int LA192_1 = input.LA(2);

                        if ( (LA192_1==IDENTIFIER) ) {
                            alt192=1;
                        }
                    }
                    switch (alt192) {
                        case 1 :
                            // CSharp.g:2038:28: COMMA sc= secondary_constraints
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_type_parameter_constraints13859); if (state.failed) return retval;

                            pushFollow(FOLLOW_secondary_constraints_in_type_parameter_constraints13863);
                            sc=secondary_constraints();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp.g:2038:61: ( COMMA cc= constructor_constraint )?
                    int alt193=2;
                    int LA193_0 = input.LA(1);

                    if ( (LA193_0==COMMA) ) {
                        alt193=1;
                    }
                    switch (alt193) {
                        case 1 :
                            // CSharp.g:2038:62: COMMA cc= constructor_constraint
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_type_parameter_constraints13868); if (state.failed) return retval;

                            pushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraints13872);
                            cc=constructor_constraint();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2039:3: -> typeParameterConstraints2(primaryConstr=pcsecondaryConstr=scconstrCon=cc)
                      {
                          retval.st = templateLib.getInstanceOf("typeParameterConstraints2",new STAttrMap().put("primaryConstr", pc).put("secondaryConstr", sc).put("constrCon", cc));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraints"


    public static class primary_constraint_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_constraint"
    // CSharp.g:2041:1: primary_constraint : (clstyp= class_type -> text(value=clstyp)| CLASS -> text(value=$CLASS.text)| STRUCT -> text(value=$STRUCT.text));
    public final CSharp.primary_constraint_return primary_constraint() throws RecognitionException {
        CSharp.primary_constraint_return retval = new CSharp.primary_constraint_return();
        retval.start = input.LT(1);


        Token CLASS164=null;
        Token STRUCT165=null;
        CSharp.class_type_return clstyp =null;


        try {
            // CSharp.g:2042:2: (clstyp= class_type -> text(value=clstyp)| CLASS -> text(value=$CLASS.text)| STRUCT -> text(value=$STRUCT.text))
            int alt195=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case OBJECT:
            case STRING:
                {
                alt195=1;
                }
                break;
            case CLASS:
                {
                alt195=2;
                }
                break;
            case STRUCT:
                {
                alt195=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;

            }

            switch (alt195) {
                case 1 :
                    // CSharp.g:2043:2: clstyp= class_type
                    {
                    pushFollow(FOLLOW_class_type_in_primary_constraint13915);
                    clstyp=class_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2043:25: -> text(value=clstyp)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", clstyp));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2044:4: CLASS
                    {
                    CLASS164=(Token)match(input,CLASS,FOLLOW_CLASS_in_primary_constraint13933); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2044:25: -> text(value=$CLASS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CLASS164!=null?CLASS164.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2045:4: STRUCT
                    {
                    STRUCT165=(Token)match(input,STRUCT,FOLLOW_STRUCT_in_primary_constraint13961); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2045:25: -> text(value=$STRUCT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STRUCT165!=null?STRUCT165.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primary_constraint"


    public static class secondary_constraints_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "secondary_constraints"
    // CSharp.g:2056:1: secondary_constraints : it= interface_type (lst+= secondary_constraints_Chld )* -> secondaryConstraints(firstTyp=itlist=$lst);
    public final CSharp.secondary_constraints_return secondary_constraints() throws RecognitionException {
        CSharp.secondary_constraints_return retval = new CSharp.secondary_constraints_return();
        retval.start = input.LT(1);


        List list_lst=null;
        CSharp.interface_type_return it =null;

        RuleReturnScope lst = null;
        try {
            // CSharp.g:2057:3: (it= interface_type (lst+= secondary_constraints_Chld )* -> secondaryConstraints(firstTyp=itlist=$lst))
            // CSharp.g:2058:3: it= interface_type (lst+= secondary_constraints_Chld )*
            {
            pushFollow(FOLLOW_interface_type_in_secondary_constraints14002);
            it=interface_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:2058:21: (lst+= secondary_constraints_Chld )*
            loop196:
            do {
                int alt196=2;
                int LA196_0 = input.LA(1);

                if ( (LA196_0==COMMA) ) {
                    int LA196_1 = input.LA(2);

                    if ( (LA196_1==IDENTIFIER) ) {
                        alt196=1;
                    }


                }


                switch (alt196) {
            	case 1 :
            	    // CSharp.g:2058:22: lst+= secondary_constraints_Chld
            	    {
            	    pushFollow(FOLLOW_secondary_constraints_Chld_in_secondary_constraints14007);
            	    lst=secondary_constraints_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop196;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2059:3: -> secondaryConstraints(firstTyp=itlist=$lst)
              {
                  retval.st = templateLib.getInstanceOf("secondaryConstraints",new STAttrMap().put("firstTyp", it).put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "secondary_constraints"


    public static class secondary_constraints_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "secondary_constraints_Chld"
    // CSharp.g:2061:1: secondary_constraints_Chld : COMMA it= interface_type -> secondaryConstraintsChld(iType=it);
    public final CSharp.secondary_constraints_Chld_return secondary_constraints_Chld() throws RecognitionException {
        CSharp.secondary_constraints_Chld_return retval = new CSharp.secondary_constraints_Chld_return();
        retval.start = input.LT(1);


        CSharp.interface_type_return it =null;


        try {
            // CSharp.g:2062:3: ( COMMA it= interface_type -> secondaryConstraintsChld(iType=it))
            // CSharp.g:2063:3: COMMA it= interface_type
            {
            match(input,COMMA,FOLLOW_COMMA_in_secondary_constraints_Chld14037); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_type_in_secondary_constraints_Chld14041);
            it=interface_type();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2064:3: -> secondaryConstraintsChld(iType=it)
              {
                  retval.st = templateLib.getInstanceOf("secondaryConstraintsChld",new STAttrMap().put("iType", it));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "secondary_constraints_Chld"


    public static class constructor_constraint_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_constraint"
    // CSharp.g:2067:1: constructor_constraint : NEW OPEN_PARENS CLOSE_PARENS -> text(value=\"new ()\");
    public final CSharp.constructor_constraint_return constructor_constraint() throws RecognitionException {
        CSharp.constructor_constraint_return retval = new CSharp.constructor_constraint_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:2068:2: ( NEW OPEN_PARENS CLOSE_PARENS -> text(value=\"new ()\"))
            // CSharp.g:2069:2: NEW OPEN_PARENS CLOSE_PARENS
            {
            match(input,NEW,FOLLOW_NEW_in_constructor_constraint14070); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_constructor_constraint14072); if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_constructor_constraint14074); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2070:2: -> text(value=\"new ()\")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "new ()"));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_constraint"


    public static class class_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_body"
    // CSharp.g:2072:1: class_body : OPEN_BRACE (clsMemDecs= class_member_declarations )? CLOSE_BRACE -> classBody(classMemdeclarations=clsMemDecsclassName=getClassName());
    public final CSharp.class_body_return class_body() throws RecognitionException {
        CSharp.class_body_return retval = new CSharp.class_body_return();
        retval.start = input.LT(1);


        CSharp.class_member_declarations_return clsMemDecs =null;


        try {
            // CSharp.g:2073:2: ( OPEN_BRACE (clsMemDecs= class_member_declarations )? CLOSE_BRACE -> classBody(classMemdeclarations=clsMemDecsclassName=getClassName()))
            // CSharp.g:2074:2: OPEN_BRACE (clsMemDecs= class_member_declarations )? CLOSE_BRACE
            {
            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_class_body14096); if (state.failed) return retval;

            // CSharp.g:2074:14: (clsMemDecs= class_member_declarations )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==ABSTRACT||LA197_0==BOOL||LA197_0==BYTE||LA197_0==CHAR||LA197_0==CLASS||LA197_0==CONST||LA197_0==DECIMAL||LA197_0==DELEGATE||LA197_0==DOUBLE||(LA197_0 >= ENUM && LA197_0 <= EXTERN)||LA197_0==FLOAT||LA197_0==IDENTIFIER||LA197_0==IMPLICIT||LA197_0==INT||(LA197_0 >= INTERFACE && LA197_0 <= INTERNAL)||LA197_0==LONG||LA197_0==NEW||LA197_0==OBJECT||LA197_0==OPEN_BRACKET||LA197_0==OVERRIDE||(LA197_0 >= PRIVATE && LA197_0 <= PUBLIC)||LA197_0==READONLY||(LA197_0 >= SBYTE && LA197_0 <= SEALED)||(LA197_0 >= SHORT && LA197_0 <= SINGLE_LINE_DOC_COMMENT)||(LA197_0 >= STATIC && LA197_0 <= STRING)||LA197_0==STRUCT||LA197_0==TILDE||(LA197_0 >= UINT && LA197_0 <= ULONG)||(LA197_0 >= UNSAFE && LA197_0 <= USHORT)||(LA197_0 >= VIRTUAL && LA197_0 <= VOLATILE)) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // CSharp.g:2074:15: clsMemDecs= class_member_declarations
                    {
                    pushFollow(FOLLOW_class_member_declarations_in_class_body14102);
                    clsMemDecs=class_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_class_body14107); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2075:2: -> classBody(classMemdeclarations=clsMemDecsclassName=getClassName())
              {
                  retval.st = templateLib.getInstanceOf("classBody",new STAttrMap().put("classMemdeclarations", clsMemDecs).put("className", getClassName()));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_body"


    public static class class_member_declarations_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_member_declarations"
    // CSharp.g:2077:1: class_member_declarations : (clsmemDecLst+= class_member_declaration )+ -> classMemberDeclarations(classMembersList=$clsmemDecLst);
    public final CSharp.class_member_declarations_return class_member_declarations() throws RecognitionException {
        CSharp.class_member_declarations_return retval = new CSharp.class_member_declarations_return();
        retval.start = input.LT(1);


        List list_clsmemDecLst=null;
        RuleReturnScope clsmemDecLst = null;
        try {
            // CSharp.g:2078:2: ( (clsmemDecLst+= class_member_declaration )+ -> classMemberDeclarations(classMembersList=$clsmemDecLst))
            // CSharp.g:2079:2: (clsmemDecLst+= class_member_declaration )+
            {
            // CSharp.g:2079:2: (clsmemDecLst+= class_member_declaration )+
            int cnt198=0;
            loop198:
            do {
                int alt198=2;
                int LA198_0 = input.LA(1);

                if ( (LA198_0==ABSTRACT||LA198_0==BOOL||LA198_0==BYTE||LA198_0==CHAR||LA198_0==CLASS||LA198_0==CONST||LA198_0==DECIMAL||LA198_0==DELEGATE||LA198_0==DOUBLE||(LA198_0 >= ENUM && LA198_0 <= EXTERN)||LA198_0==FLOAT||LA198_0==IDENTIFIER||LA198_0==IMPLICIT||LA198_0==INT||(LA198_0 >= INTERFACE && LA198_0 <= INTERNAL)||LA198_0==LONG||LA198_0==NEW||LA198_0==OBJECT||LA198_0==OPEN_BRACKET||LA198_0==OVERRIDE||(LA198_0 >= PRIVATE && LA198_0 <= PUBLIC)||LA198_0==READONLY||(LA198_0 >= SBYTE && LA198_0 <= SEALED)||(LA198_0 >= SHORT && LA198_0 <= SINGLE_LINE_DOC_COMMENT)||(LA198_0 >= STATIC && LA198_0 <= STRING)||LA198_0==STRUCT||LA198_0==TILDE||(LA198_0 >= UINT && LA198_0 <= ULONG)||(LA198_0 >= UNSAFE && LA198_0 <= USHORT)||(LA198_0 >= VIRTUAL && LA198_0 <= VOLATILE)) ) {
                    alt198=1;
                }


                switch (alt198) {
            	case 1 :
            	    // CSharp.g:2079:3: clsmemDecLst+= class_member_declaration
            	    {
            	    pushFollow(FOLLOW_class_member_declaration_in_class_member_declarations14136);
            	    clsmemDecLst=class_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_clsmemDecLst==null) list_clsmemDecLst=new ArrayList();
            	    list_clsmemDecLst.add(clsmemDecLst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt198 >= 1 ) break loop198;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(198, input);
                        throw eee;
                }
                cnt198++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2080:2: -> classMemberDeclarations(classMembersList=$clsmemDecLst)
              {
                  retval.st = templateLib.getInstanceOf("classMemberDeclarations",new STAttrMap().put("classMembersList", list_clsmemDecLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_member_declarations"


    public static class class_member_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_member_declaration"
    // CSharp.g:2097:1: class_member_declaration : ( (attrs1= attributes )? (acsModfrs1= all_member_modifiers )? cmd= common_member_declaration -> classMemberDeclaration(attributes=attrs1accessModifiers=acsModfrs1comMemDec=cmd)| (attrs2= attributes )? (acsModfrs2= all_member_modifiers )? TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body -> classMemberDeclaration(attributes=attrs2accessModifiers=acsModfrs1));
    public final CSharp.class_member_declaration_return class_member_declaration() throws RecognitionException {
        CSharp.class_member_declaration_return retval = new CSharp.class_member_declaration_return();
        retval.start = input.LT(1);


        CSharp.attributes_return attrs1 =null;

        CSharp.all_member_modifiers_return acsModfrs1 =null;

        CSharp.common_member_declaration_return cmd =null;

        CSharp.attributes_return attrs2 =null;

        CSharp.all_member_modifiers_return acsModfrs2 =null;


        try {
            // CSharp.g:2098:3: ( (attrs1= attributes )? (acsModfrs1= all_member_modifiers )? cmd= common_member_declaration -> classMemberDeclaration(attributes=attrs1accessModifiers=acsModfrs1comMemDec=cmd)| (attrs2= attributes )? (acsModfrs2= all_member_modifiers )? TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body -> classMemberDeclaration(attributes=attrs2accessModifiers=acsModfrs1))
            int alt203=2;
            switch ( input.LA(1) ) {
            case OPEN_BRACKET:
                {
                alt203=1;
                }
                break;
            case NEW:
                {
                alt203=1;
                }
                break;
            case PUBLIC:
                {
                alt203=1;
                }
                break;
            case PROTECTED:
                {
                alt203=1;
                }
                break;
            case INTERNAL:
                {
                alt203=1;
                }
                break;
            case PRIVATE:
                {
                alt203=1;
                }
                break;
            case READONLY:
                {
                alt203=1;
                }
                break;
            case VOLATILE:
                {
                alt203=1;
                }
                break;
            case VIRTUAL:
                {
                alt203=1;
                }
                break;
            case SEALED:
                {
                alt203=1;
                }
                break;
            case OVERRIDE:
                {
                alt203=1;
                }
                break;
            case ABSTRACT:
                {
                alt203=1;
                }
                break;
            case STATIC:
                {
                alt203=1;
                }
                break;
            case UNSAFE:
                {
                alt203=1;
                }
                break;
            case EXTERN:
                {
                alt203=1;
                }
                break;
            case IDENTIFIER:
                {
                int LA203_16 = input.LA(2);

                if ( (!(((input.LT(1).getText().equals("partial"))))) ) {
                    alt203=1;
                }
                else if ( ((input.LT(1).getText().equals("partial"))) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 16, input);

                    throw nvae;

                }
                }
                break;
            case BOOL:
            case BYTE:
            case CHAR:
            case CLASS:
            case CONST:
            case DECIMAL:
            case DELEGATE:
            case DOUBLE:
            case ENUM:
            case EVENT:
            case EXPLICIT:
            case FLOAT:
            case IMPLICIT:
            case INT:
            case INTERFACE:
            case LONG:
            case OBJECT:
            case SBYTE:
            case SHORT:
            case SINGLE_LINE_COMMENT:
            case SINGLE_LINE_DOC_COMMENT:
            case STRING:
            case STRUCT:
            case UINT:
            case ULONG:
            case USHORT:
            case VOID:
                {
                alt203=1;
                }
                break;
            case TILDE:
                {
                alt203=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);

                throw nvae;

            }

            switch (alt203) {
                case 1 :
                    // CSharp.g:2099:3: (attrs1= attributes )? (acsModfrs1= all_member_modifiers )? cmd= common_member_declaration
                    {
                    // CSharp.g:2099:3: (attrs1= attributes )?
                    int alt199=2;
                    int LA199_0 = input.LA(1);

                    if ( (LA199_0==OPEN_BRACKET) ) {
                        alt199=1;
                    }
                    switch (alt199) {
                        case 1 :
                            // CSharp.g:2099:4: attrs1= attributes
                            {
                            pushFollow(FOLLOW_attributes_in_class_member_declaration14167);
                            attrs1=attributes();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp.g:2099:24: (acsModfrs1= all_member_modifiers )?
                    int alt200=2;
                    int LA200_0 = input.LA(1);

                    if ( (LA200_0==ABSTRACT||LA200_0==EXTERN||LA200_0==INTERNAL||LA200_0==NEW||LA200_0==OVERRIDE||(LA200_0 >= PRIVATE && LA200_0 <= PUBLIC)||LA200_0==READONLY||LA200_0==SEALED||LA200_0==STATIC||LA200_0==UNSAFE||LA200_0==VIRTUAL||LA200_0==VOLATILE) ) {
                        alt200=1;
                    }
                    else if ( (LA200_0==IDENTIFIER) ) {
                        int LA200_15 = input.LA(2);

                        if ( ((input.LT(1).getText().equals("partial"))) ) {
                            alt200=1;
                        }
                    }
                    switch (alt200) {
                        case 1 :
                            // CSharp.g:2099:25: acsModfrs1= all_member_modifiers
                            {
                            pushFollow(FOLLOW_all_member_modifiers_in_class_member_declaration14174);
                            acsModfrs1=all_member_modifiers();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_common_member_declaration_in_class_member_declaration14180);
                    cmd=common_member_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2100:2: -> classMemberDeclaration(attributes=attrs1accessModifiers=acsModfrs1comMemDec=cmd)
                      {
                          retval.st = templateLib.getInstanceOf("classMemberDeclaration",new STAttrMap().put("attributes", attrs1).put("accessModifiers", acsModfrs1).put("comMemDec", cmd));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2101:3: (attrs2= attributes )? (acsModfrs2= all_member_modifiers )? TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body
                    {
                    // CSharp.g:2101:3: (attrs2= attributes )?
                    int alt201=2;
                    int LA201_0 = input.LA(1);

                    if ( (LA201_0==OPEN_BRACKET) ) {
                        alt201=1;
                    }
                    switch (alt201) {
                        case 1 :
                            // CSharp.g:2101:4: attrs2= attributes
                            {
                            pushFollow(FOLLOW_attributes_in_class_member_declaration14204);
                            attrs2=attributes();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp.g:2101:24: (acsModfrs2= all_member_modifiers )?
                    int alt202=2;
                    int LA202_0 = input.LA(1);

                    if ( (LA202_0==ABSTRACT||LA202_0==EXTERN||LA202_0==IDENTIFIER||LA202_0==INTERNAL||LA202_0==NEW||LA202_0==OVERRIDE||(LA202_0 >= PRIVATE && LA202_0 <= PUBLIC)||LA202_0==READONLY||LA202_0==SEALED||LA202_0==STATIC||LA202_0==UNSAFE||LA202_0==VIRTUAL||LA202_0==VOLATILE) ) {
                        alt202=1;
                    }
                    switch (alt202) {
                        case 1 :
                            // CSharp.g:2101:25: acsModfrs2= all_member_modifiers
                            {
                            pushFollow(FOLLOW_all_member_modifiers_in_class_member_declaration14211);
                            acsModfrs2=all_member_modifiers();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,TILDE,FOLLOW_TILDE_in_class_member_declaration14215); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_class_member_declaration14217); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_class_member_declaration14219); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_class_member_declaration14221); if (state.failed) return retval;

                    pushFollow(FOLLOW_destructor_body_in_class_member_declaration14223);
                    destructor_body();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2102:3: -> classMemberDeclaration(attributes=attrs2accessModifiers=acsModfrs1)
                      {
                          retval.st = templateLib.getInstanceOf("classMemberDeclaration",new STAttrMap().put("attributes", attrs2).put("accessModifiers", acsModfrs1));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_member_declaration"


    public static class all_member_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "all_member_modifiers"
    // CSharp.g:2106:1: all_member_modifiers : (m+= all_member_modifier )+ -> spaceIterator(list=$m);
    public final CSharp.all_member_modifiers_return all_member_modifiers() throws RecognitionException {
        CSharp.all_member_modifiers_return retval = new CSharp.all_member_modifiers_return();
        retval.start = input.LT(1);


        List list_m=null;
        RuleReturnScope m = null;
        try {
            // CSharp.g:2107:3: ( (m+= all_member_modifier )+ -> spaceIterator(list=$m))
            // CSharp.g:2108:3: (m+= all_member_modifier )+
            {
            // CSharp.g:2108:3: (m+= all_member_modifier )+
            int cnt204=0;
            loop204:
            do {
                int alt204=2;
                int LA204_0 = input.LA(1);

                if ( (LA204_0==IDENTIFIER) ) {
                    int LA204_22 = input.LA(2);

                    if ( ((input.LT(1).getText().equals("partial"))) ) {
                        alt204=1;
                    }


                }
                else if ( (LA204_0==ABSTRACT||LA204_0==EXTERN||LA204_0==INTERNAL||LA204_0==NEW||LA204_0==OVERRIDE||(LA204_0 >= PRIVATE && LA204_0 <= PUBLIC)||LA204_0==READONLY||LA204_0==SEALED||LA204_0==STATIC||LA204_0==UNSAFE||LA204_0==VIRTUAL||LA204_0==VOLATILE) ) {
                    alt204=1;
                }


                switch (alt204) {
            	case 1 :
            	    // CSharp.g:2108:4: m+= all_member_modifier
            	    {
            	    pushFollow(FOLLOW_all_member_modifier_in_all_member_modifiers14257);
            	    m=all_member_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_m==null) list_m=new ArrayList();
            	    list_m.add(m.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt204 >= 1 ) break loop204;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(204, input);
                        throw eee;
                }
                cnt204++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2109:3: -> spaceIterator(list=$m)
              {
                  retval.st = templateLib.getInstanceOf("spaceIterator",new STAttrMap().put("list", list_m));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "all_member_modifiers"


    public static class all_member_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "all_member_modifier"
    // CSharp.g:2111:1: all_member_modifier : ( NEW -> allMemberModifier(value=$NEW.text)| PUBLIC -> allMemberModifier(value=$PUBLIC.text)| PROTECTED -> allMemberModifier(value=$PROTECTED.text)| INTERNAL -> allMemberModifier(value=\"private\")| PRIVATE -> allMemberModifier(value=$PRIVATE.text)|accsMod6= READONLY -> allMemberModifier(value=$accsMod6.text)| VOLATILE -> allMemberModifier(value=$VOLATILE.text)| VIRTUAL -> allMemberModifier(value=$VIRTUAL.text)| SEALED -> allMemberModifier(value=$SEALED.text)| OVERRIDE -> allMemberModifier(value=\"@Override\\n\")| ABSTRACT -> allMemberModifier(value=$ABSTRACT.text)| STATIC -> allMemberModifier(value=$STATIC.text)| UNSAFE -> allMemberModifier(value=$UNSAFE.text)| EXTERN -> allMemberModifier(value=$EXTERN.text)|pck= partial_contextual_keyword -> allMemberModifier(value=pck));
    public final CSharp.all_member_modifier_return all_member_modifier() throws RecognitionException {
        CSharp.all_member_modifier_return retval = new CSharp.all_member_modifier_return();
        retval.start = input.LT(1);


        Token accsMod6=null;
        Token NEW166=null;
        Token PUBLIC167=null;
        Token PROTECTED168=null;
        Token PRIVATE169=null;
        Token VOLATILE170=null;
        Token VIRTUAL171=null;
        Token SEALED172=null;
        Token ABSTRACT173=null;
        Token STATIC174=null;
        Token UNSAFE175=null;
        Token EXTERN176=null;
        CSharp.partial_contextual_keyword_return pck =null;


        try {
            // CSharp.g:2112:3: ( NEW -> allMemberModifier(value=$NEW.text)| PUBLIC -> allMemberModifier(value=$PUBLIC.text)| PROTECTED -> allMemberModifier(value=$PROTECTED.text)| INTERNAL -> allMemberModifier(value=\"private\")| PRIVATE -> allMemberModifier(value=$PRIVATE.text)|accsMod6= READONLY -> allMemberModifier(value=$accsMod6.text)| VOLATILE -> allMemberModifier(value=$VOLATILE.text)| VIRTUAL -> allMemberModifier(value=$VIRTUAL.text)| SEALED -> allMemberModifier(value=$SEALED.text)| OVERRIDE -> allMemberModifier(value=\"@Override\\n\")| ABSTRACT -> allMemberModifier(value=$ABSTRACT.text)| STATIC -> allMemberModifier(value=$STATIC.text)| UNSAFE -> allMemberModifier(value=$UNSAFE.text)| EXTERN -> allMemberModifier(value=$EXTERN.text)|pck= partial_contextual_keyword -> allMemberModifier(value=pck))
            int alt205=15;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt205=1;
                }
                break;
            case PUBLIC:
                {
                alt205=2;
                }
                break;
            case PROTECTED:
                {
                alt205=3;
                }
                break;
            case INTERNAL:
                {
                alt205=4;
                }
                break;
            case PRIVATE:
                {
                alt205=5;
                }
                break;
            case READONLY:
                {
                alt205=6;
                }
                break;
            case VOLATILE:
                {
                alt205=7;
                }
                break;
            case VIRTUAL:
                {
                alt205=8;
                }
                break;
            case SEALED:
                {
                alt205=9;
                }
                break;
            case OVERRIDE:
                {
                alt205=10;
                }
                break;
            case ABSTRACT:
                {
                alt205=11;
                }
                break;
            case STATIC:
                {
                alt205=12;
                }
                break;
            case UNSAFE:
                {
                alt205=13;
                }
                break;
            case EXTERN:
                {
                alt205=14;
                }
                break;
            case IDENTIFIER:
                {
                alt205=15;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 205, 0, input);

                throw nvae;

            }

            switch (alt205) {
                case 1 :
                    // CSharp.g:2113:3: NEW
                    {
                    NEW166=(Token)match(input,NEW,FOLLOW_NEW_in_all_member_modifier14284); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2114:3: -> allMemberModifier(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (NEW166!=null?NEW166.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2115:5: PUBLIC
                    {
                    PUBLIC167=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_all_member_modifier14300); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2116:3: -> allMemberModifier(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (PUBLIC167!=null?PUBLIC167.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2117:5: PROTECTED
                    {
                    PROTECTED168=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_all_member_modifier14316); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2118:3: -> allMemberModifier(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (PROTECTED168!=null?PROTECTED168.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:2119:5: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_all_member_modifier14332); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2120:3: -> allMemberModifier(value=\"private\")
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", "private"));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:2121:4: PRIVATE
                    {
                    PRIVATE169=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_all_member_modifier14347); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2122:3: -> allMemberModifier(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (PRIVATE169!=null?PRIVATE169.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:2123:5: accsMod6= READONLY
                    {
                    accsMod6=(Token)match(input,READONLY,FOLLOW_READONLY_in_all_member_modifier14365); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2124:3: -> allMemberModifier(value=$accsMod6.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (accsMod6!=null?accsMod6.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:2125:5: VOLATILE
                    {
                    VOLATILE170=(Token)match(input,VOLATILE,FOLLOW_VOLATILE_in_all_member_modifier14381); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2126:3: -> allMemberModifier(value=$VOLATILE.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (VOLATILE170!=null?VOLATILE170.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:2127:5: VIRTUAL
                    {
                    VIRTUAL171=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_all_member_modifier14397); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2128:3: -> allMemberModifier(value=$VIRTUAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (VIRTUAL171!=null?VIRTUAL171.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:2129:5: SEALED
                    {
                    SEALED172=(Token)match(input,SEALED,FOLLOW_SEALED_in_all_member_modifier14413); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2130:3: -> allMemberModifier(value=$SEALED.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (SEALED172!=null?SEALED172.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharp.g:2131:4: OVERRIDE
                    {
                    match(input,OVERRIDE,FOLLOW_OVERRIDE_in_all_member_modifier14428); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2132:3: -> allMemberModifier(value=\"@Override\\n\")
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", "@Override\n"));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharp.g:2133:5: ABSTRACT
                    {
                    ABSTRACT173=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_all_member_modifier14444); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2134:3: -> allMemberModifier(value=$ABSTRACT.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (ABSTRACT173!=null?ABSTRACT173.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharp.g:2135:4: STATIC
                    {
                    STATIC174=(Token)match(input,STATIC,FOLLOW_STATIC_in_all_member_modifier14459); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2136:3: -> allMemberModifier(value=$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (STATIC174!=null?STATIC174.getText():null)));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharp.g:2137:5: UNSAFE
                    {
                    UNSAFE175=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_all_member_modifier14475); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2138:3: -> allMemberModifier(value=$UNSAFE.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (UNSAFE175!=null?UNSAFE175.getText():null)));
                      }


                    }

                    }
                    break;
                case 14 :
                    // CSharp.g:2139:5: EXTERN
                    {
                    EXTERN176=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_all_member_modifier14491); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2140:3: -> allMemberModifier(value=$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", (EXTERN176!=null?EXTERN176.getText():null)));
                      }


                    }

                    }
                    break;
                case 15 :
                    // CSharp.g:2141:5: pck= partial_contextual_keyword
                    {
                    pushFollow(FOLLOW_partial_contextual_keyword_in_all_member_modifier14509);
                    pck=partial_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2142:3: -> allMemberModifier(value=pck)
                      {
                          retval.st = templateLib.getInstanceOf("allMemberModifier",new STAttrMap().put("value", pck));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "all_member_modifier"


    protected static class common_member_declaration_scope {
        Object type;
    }
    protected Stack common_member_declaration_stack = new Stack();


    public static class common_member_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "common_member_declaration"
    // CSharp.g:2159:1: common_member_declaration : (coms= comments -> commonMemberDeclaration(arg1=nullarg2=coms)|constDedcl= constant_declaration2 -> commonMemberDeclaration(arg1=nullarg2=constDedcl)|typMemDecl= typed_member_declaration -> commonMemberDeclaration(arg1=nullarg2=typMemDecl)|evntDecl= event_declaration2 -> commonMemberDeclaration(arg1=nullarg2=evntDecl)|convOprtDecl= conversion_operator_declarator oprtrBdy= operator_body -> commonMemberDeclaration(arg1=convOprtDeclarg2=oprtrBdy)|conDec2= constructor_declaration2 -> commonMemberDeclaration(arg1=nullarg2=conDec2)|typVoid= type_void methdDecl= method_declaration2 -> commonMemberDeclaration(arg1=typVoidarg2=methdDecl)|clsDef= class_definition -> commonMemberDeclaration(arg1=nullarg2=clsDef)|strtDef= struct_definition -> commonMemberDeclaration(arg1=nullarg2=strtDef)|infcDecl= interface_definition -> commonMemberDeclaration(arg1=nullarg2=infcDecl)|enumDef= enum_definition -> commonMemberDeclaration(arg1=nullarg2=enumDef)|delgDef= delegate_definition -> commonMemberDeclaration(arg1=nullarg2=delgDef));
    public final CSharp.common_member_declaration_return common_member_declaration() throws RecognitionException {
        common_member_declaration_stack.push(new common_member_declaration_scope());
        CSharp.common_member_declaration_return retval = new CSharp.common_member_declaration_return();
        retval.start = input.LT(1);


        CSharp.comments_return coms =null;

        CSharp.constant_declaration2_return constDedcl =null;

        CSharp.typed_member_declaration_return typMemDecl =null;

        CSharp.event_declaration2_return evntDecl =null;

        CSharp.conversion_operator_declarator_return convOprtDecl =null;

        CSharp.operator_body_return oprtrBdy =null;

        CSharp.constructor_declaration2_return conDec2 =null;

        CSharp.type_void_return typVoid =null;

        CSharp.method_declaration2_return methdDecl =null;

        CSharp.class_definition_return clsDef =null;

        CSharp.struct_definition_return strtDef =null;

        CSharp.interface_definition_return infcDecl =null;

        CSharp.enum_definition_return enumDef =null;

        CSharp.delegate_definition_return delgDef =null;


        try {
            // CSharp.g:2163:3: (coms= comments -> commonMemberDeclaration(arg1=nullarg2=coms)|constDedcl= constant_declaration2 -> commonMemberDeclaration(arg1=nullarg2=constDedcl)|typMemDecl= typed_member_declaration -> commonMemberDeclaration(arg1=nullarg2=typMemDecl)|evntDecl= event_declaration2 -> commonMemberDeclaration(arg1=nullarg2=evntDecl)|convOprtDecl= conversion_operator_declarator oprtrBdy= operator_body -> commonMemberDeclaration(arg1=convOprtDeclarg2=oprtrBdy)|conDec2= constructor_declaration2 -> commonMemberDeclaration(arg1=nullarg2=conDec2)|typVoid= type_void methdDecl= method_declaration2 -> commonMemberDeclaration(arg1=typVoidarg2=methdDecl)|clsDef= class_definition -> commonMemberDeclaration(arg1=nullarg2=clsDef)|strtDef= struct_definition -> commonMemberDeclaration(arg1=nullarg2=strtDef)|infcDecl= interface_definition -> commonMemberDeclaration(arg1=nullarg2=infcDecl)|enumDef= enum_definition -> commonMemberDeclaration(arg1=nullarg2=enumDef)|delgDef= delegate_definition -> commonMemberDeclaration(arg1=nullarg2=delgDef))
            int alt206=12;
            switch ( input.LA(1) ) {
            case SINGLE_LINE_COMMENT:
            case SINGLE_LINE_DOC_COMMENT:
                {
                alt206=1;
                }
                break;
            case CONST:
                {
                alt206=2;
                }
                break;
            case BOOL:
            case BYTE:
            case CHAR:
            case DECIMAL:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case OBJECT:
            case SBYTE:
            case SHORT:
            case STRING:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt206=3;
                }
                break;
            case IDENTIFIER:
                {
                int LA206_4 = input.LA(2);

                if ( (LA206_4==DOT||LA206_4==DOUBLE_COLON||LA206_4==IDENTIFIER||LA206_4==INTERR||LA206_4==LT||LA206_4==OPEN_BRACKET||LA206_4==OPERATOR||LA206_4==STAR||LA206_4==THIS) ) {
                    alt206=3;
                }
                else if ( (LA206_4==OPEN_PARENS) ) {
                    alt206=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 206, 4, input);

                    throw nvae;

                }
                }
                break;
            case VOID:
                {
                int LA206_5 = input.LA(2);

                if ( (LA206_5==STAR) ) {
                    alt206=3;
                }
                else if ( (LA206_5==IDENTIFIER) ) {
                    alt206=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 206, 5, input);

                    throw nvae;

                }
                }
                break;
            case EVENT:
                {
                alt206=4;
                }
                break;
            case EXPLICIT:
            case IMPLICIT:
                {
                alt206=5;
                }
                break;
            case CLASS:
                {
                alt206=8;
                }
                break;
            case STRUCT:
                {
                alt206=9;
                }
                break;
            case INTERFACE:
                {
                alt206=10;
                }
                break;
            case ENUM:
                {
                alt206=11;
                }
                break;
            case DELEGATE:
                {
                alt206=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);

                throw nvae;

            }

            switch (alt206) {
                case 1 :
                    // CSharp.g:2164:3: coms= comments
                    {
                    pushFollow(FOLLOW_comments_in_common_member_declaration14545);
                    coms=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2165:3: -> commonMemberDeclaration(arg1=nullarg2=coms)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", coms));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2166:4: constDedcl= constant_declaration2
                    {
                    pushFollow(FOLLOW_constant_declaration2_in_common_member_declaration14566);
                    constDedcl=constant_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2167:3: -> commonMemberDeclaration(arg1=nullarg2=constDedcl)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", constDedcl));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2168:5: typMemDecl= typed_member_declaration
                    {
                    pushFollow(FOLLOW_typed_member_declaration_in_common_member_declaration14588);
                    typMemDecl=typed_member_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2169:3: -> commonMemberDeclaration(arg1=nullarg2=typMemDecl)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", typMemDecl));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:2170:5: evntDecl= event_declaration2
                    {
                    pushFollow(FOLLOW_event_declaration2_in_common_member_declaration14610);
                    evntDecl=event_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2171:3: -> commonMemberDeclaration(arg1=nullarg2=evntDecl)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", evntDecl));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:2172:5: convOprtDecl= conversion_operator_declarator oprtrBdy= operator_body
                    {
                    pushFollow(FOLLOW_conversion_operator_declarator_in_common_member_declaration14632);
                    convOprtDecl=conversion_operator_declarator();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_operator_body_in_common_member_declaration14636);
                    oprtrBdy=operator_body();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2173:3: -> commonMemberDeclaration(arg1=convOprtDeclarg2=oprtrBdy)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", convOprtDecl).put("arg2", oprtrBdy));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:2174:5: conDec2= constructor_declaration2
                    {
                    pushFollow(FOLLOW_constructor_declaration2_in_common_member_declaration14658);
                    conDec2=constructor_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2175:3: -> commonMemberDeclaration(arg1=nullarg2=conDec2)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", conDec2));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:2176:5: typVoid= type_void methdDecl= method_declaration2
                    {
                    pushFollow(FOLLOW_type_void_in_common_member_declaration14680);
                    typVoid=type_void();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_method_declaration2_in_common_member_declaration14686);
                    methdDecl=method_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2177:3: -> commonMemberDeclaration(arg1=typVoidarg2=methdDecl)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", typVoid).put("arg2", methdDecl));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:2178:5: clsDef= class_definition
                    {
                    pushFollow(FOLLOW_class_definition_in_common_member_declaration14710);
                    clsDef=class_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2179:3: -> commonMemberDeclaration(arg1=nullarg2=clsDef)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", clsDef));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:2180:5: strtDef= struct_definition
                    {
                    pushFollow(FOLLOW_struct_definition_in_common_member_declaration14732);
                    strtDef=struct_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2181:3: -> commonMemberDeclaration(arg1=nullarg2=strtDef)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", strtDef));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharp.g:2182:5: infcDecl= interface_definition
                    {
                    pushFollow(FOLLOW_interface_definition_in_common_member_declaration14754);
                    infcDecl=interface_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2183:3: -> commonMemberDeclaration(arg1=nullarg2=infcDecl)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", infcDecl));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharp.g:2184:5: enumDef= enum_definition
                    {
                    pushFollow(FOLLOW_enum_definition_in_common_member_declaration14776);
                    enumDef=enum_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2185:3: -> commonMemberDeclaration(arg1=nullarg2=enumDef)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", enumDef));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharp.g:2186:5: delgDef= delegate_definition
                    {
                    pushFollow(FOLLOW_delegate_definition_in_common_member_declaration14798);
                    delgDef=delegate_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2187:3: -> commonMemberDeclaration(arg1=nullarg2=delgDef)
                      {
                          retval.st = templateLib.getInstanceOf("commonMemberDeclaration",new STAttrMap().put("arg1", null).put("arg2", delgDef));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            common_member_declaration_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "common_member_declaration"


    public static class typed_member_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "typed_member_declaration"
    // CSharp.g:2191:1: typed_member_declaration : t= type bdy= typed_member_declaration_Chld -> typedMemberDeclaration(type=CSharpHelper.replaceJavaType($t.text)typeDecl=CSharpHelper.processTypedMemberDeclaration($t.text,$bdy.text)body1=CSharpHelper.compareTypeAndBody(CSharpHelper.replaceJavaType($t.text),CSharpHelper.processTypedMemberDeclaration($t.text,$bdy.text))body2=bdy);
    public final CSharp.typed_member_declaration_return typed_member_declaration() throws RecognitionException {
        CSharp.typed_member_declaration_return retval = new CSharp.typed_member_declaration_return();
        retval.start = input.LT(1);


        CSharp.type_return t =null;

        CSharp.typed_member_declaration_Chld_return bdy =null;


        try {
            // CSharp.g:2192:3: (t= type bdy= typed_member_declaration_Chld -> typedMemberDeclaration(type=CSharpHelper.replaceJavaType($t.text)typeDecl=CSharpHelper.processTypedMemberDeclaration($t.text,$bdy.text)body1=CSharpHelper.compareTypeAndBody(CSharpHelper.replaceJavaType($t.text),CSharpHelper.processTypedMemberDeclaration($t.text,$bdy.text))body2=bdy))
            // CSharp.g:2193:3: t= type bdy= typed_member_declaration_Chld
            {
            pushFollow(FOLLOW_type_in_typed_member_declaration14831);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) {((common_member_declaration_scope)common_member_declaration_stack.peek()).type = (t!=null?((Object)t.tree):null);}

            pushFollow(FOLLOW_typed_member_declaration_Chld_in_typed_member_declaration14837);
            bdy=typed_member_declaration_Chld();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2194:3: -> typedMemberDeclaration(type=CSharpHelper.replaceJavaType($t.text)typeDecl=CSharpHelper.processTypedMemberDeclaration($t.text,$bdy.text)body1=CSharpHelper.compareTypeAndBody(CSharpHelper.replaceJavaType($t.text),CSharpHelper.processTypedMemberDeclaration($t.text,$bdy.text))body2=bdy)
              {
                  retval.st = templateLib.getInstanceOf("typedMemberDeclaration",new STAttrMap().put("type", CSharpHelper.replaceJavaType((t!=null?input.toString(t.start,t.stop):null))).put("typeDecl", CSharpHelper.processTypedMemberDeclaration((t!=null?input.toString(t.start,t.stop):null),(bdy!=null?input.toString(bdy.start,bdy.stop):null))).put("body1", CSharpHelper.compareTypeAndBody(CSharpHelper.replaceJavaType((t!=null?input.toString(t.start,t.stop):null)),CSharpHelper.processTypedMemberDeclaration((t!=null?input.toString(t.start,t.stop):null),(bdy!=null?input.toString(bdy.start,bdy.stop):null)))).put("body2", bdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typed_member_declaration"


    public static class typed_member_declaration_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "typed_member_declaration_Chld"
    // CSharp.g:2196:1: typed_member_declaration_Chld : ( ( interface_type DOT THIS )=> interface_type DOT indexerDecl= indexer_declaration2 -> typedMemberDeclarationChld(declaration=indexerDecl)| ( member_name ( type_parameter_list )? OPEN_PARENS )=>methdDec= method_declaration2 -> typedMemberDeclarationChld(declaration=methdDec)| ( member_name OPEN_BRACE )=>propDecl= property_declaration2 -> typedMemberDeclarationChld(declaration=propDecl)|indDecl= indexer_declaration2 -> typedMemberDeclarationChld(declaration=indDecl)|optrDecl= operator_declaration2 -> typedMemberDeclarationChld(declaration=optrDecl)|fldDecl= field_declaration2 -> typedMemberDeclarationChld(declaration=fldDecl));
    public final CSharp.typed_member_declaration_Chld_return typed_member_declaration_Chld() throws RecognitionException {
        CSharp.typed_member_declaration_Chld_return retval = new CSharp.typed_member_declaration_Chld_return();
        retval.start = input.LT(1);


        CSharp.indexer_declaration2_return indexerDecl =null;

        CSharp.method_declaration2_return methdDec =null;

        CSharp.property_declaration2_return propDecl =null;

        CSharp.indexer_declaration2_return indDecl =null;

        CSharp.operator_declaration2_return optrDecl =null;

        CSharp.field_declaration2_return fldDecl =null;


        try {
            // CSharp.g:2197:3: ( ( interface_type DOT THIS )=> interface_type DOT indexerDecl= indexer_declaration2 -> typedMemberDeclarationChld(declaration=indexerDecl)| ( member_name ( type_parameter_list )? OPEN_PARENS )=>methdDec= method_declaration2 -> typedMemberDeclarationChld(declaration=methdDec)| ( member_name OPEN_BRACE )=>propDecl= property_declaration2 -> typedMemberDeclarationChld(declaration=propDecl)|indDecl= indexer_declaration2 -> typedMemberDeclarationChld(declaration=indDecl)|optrDecl= operator_declaration2 -> typedMemberDeclarationChld(declaration=optrDecl)|fldDecl= field_declaration2 -> typedMemberDeclarationChld(declaration=fldDecl))
            int alt207=6;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
                {
                int LA207_1 = input.LA(2);

                if ( (synpred20_CSharp()) ) {
                    alt207=1;
                }
                else if ( (synpred21_CSharp()) ) {
                    alt207=2;
                }
                else if ( (synpred22_CSharp()) ) {
                    alt207=3;
                }
                else if ( (true) ) {
                    alt207=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 207, 1, input);

                    throw nvae;

                }
                }
                break;
            case THIS:
                {
                alt207=4;
                }
                break;
            case OPERATOR:
                {
                alt207=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;

            }

            switch (alt207) {
                case 1 :
                    // CSharp.g:2198:5: ( interface_type DOT THIS )=> interface_type DOT indexerDecl= indexer_declaration2
                    {
                    pushFollow(FOLLOW_interface_type_in_typed_member_declaration_Chld14885);
                    interface_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_typed_member_declaration_Chld14887); if (state.failed) return retval;

                    pushFollow(FOLLOW_indexer_declaration2_in_typed_member_declaration_Chld14891);
                    indexerDecl=indexer_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2199:5: -> typedMemberDeclarationChld(declaration=indexerDecl)
                      {
                          retval.st = templateLib.getInstanceOf("typedMemberDeclarationChld",new STAttrMap().put("declaration", indexerDecl));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2200:7: ( member_name ( type_parameter_list )? OPEN_PARENS )=>methdDec= method_declaration2
                    {
                    pushFollow(FOLLOW_method_declaration2_in_typed_member_declaration_Chld14924);
                    methdDec=method_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2201:5: -> typedMemberDeclarationChld(declaration=methdDec)
                      {
                          retval.st = templateLib.getInstanceOf("typedMemberDeclarationChld",new STAttrMap().put("declaration", methdDec));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2202:7: ( member_name OPEN_BRACE )=>propDecl= property_declaration2
                    {
                    pushFollow(FOLLOW_property_declaration2_in_typed_member_declaration_Chld14954);
                    propDecl=property_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2203:5: -> typedMemberDeclarationChld(declaration=propDecl)
                      {
                          retval.st = templateLib.getInstanceOf("typedMemberDeclarationChld",new STAttrMap().put("declaration", propDecl));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:2204:7: indDecl= indexer_declaration2
                    {
                    pushFollow(FOLLOW_indexer_declaration2_in_typed_member_declaration_Chld14976);
                    indDecl=indexer_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2205:5: -> typedMemberDeclarationChld(declaration=indDecl)
                      {
                          retval.st = templateLib.getInstanceOf("typedMemberDeclarationChld",new STAttrMap().put("declaration", indDecl));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:2206:7: optrDecl= operator_declaration2
                    {
                    pushFollow(FOLLOW_operator_declaration2_in_typed_member_declaration_Chld14998);
                    optrDecl=operator_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2207:5: -> typedMemberDeclarationChld(declaration=optrDecl)
                      {
                          retval.st = templateLib.getInstanceOf("typedMemberDeclarationChld",new STAttrMap().put("declaration", optrDecl));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:2208:7: fldDecl= field_declaration2
                    {
                    pushFollow(FOLLOW_field_declaration2_in_typed_member_declaration_Chld15020);
                    fldDecl=field_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2209:5: -> typedMemberDeclarationChld(declaration=fldDecl)
                      {
                          retval.st = templateLib.getInstanceOf("typedMemberDeclarationChld",new STAttrMap().put("declaration", fldDecl));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typed_member_declaration_Chld"


    public static class constant_declarators_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constant_declarators"
    // CSharp.g:2238:1: constant_declarators : fstDec= constant_declarator (conDecLst+= constant_declarators_Chld )* -> constantDeclarators(firstDecl=fstDeclist=$conDecLst);
    public final CSharp.constant_declarators_return constant_declarators() throws RecognitionException {
        CSharp.constant_declarators_return retval = new CSharp.constant_declarators_return();
        retval.start = input.LT(1);


        List list_conDecLst=null;
        CSharp.constant_declarator_return fstDec =null;

        RuleReturnScope conDecLst = null;
        try {
            // CSharp.g:2239:2: (fstDec= constant_declarator (conDecLst+= constant_declarators_Chld )* -> constantDeclarators(firstDecl=fstDeclist=$conDecLst))
            // CSharp.g:2240:2: fstDec= constant_declarator (conDecLst+= constant_declarators_Chld )*
            {
            pushFollow(FOLLOW_constant_declarator_in_constant_declarators15062);
            fstDec=constant_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:2240:29: (conDecLst+= constant_declarators_Chld )*
            loop208:
            do {
                int alt208=2;
                int LA208_0 = input.LA(1);

                if ( (LA208_0==COMMA) ) {
                    alt208=1;
                }


                switch (alt208) {
            	case 1 :
            	    // CSharp.g:2240:31: conDecLst+= constant_declarators_Chld
            	    {
            	    pushFollow(FOLLOW_constant_declarators_Chld_in_constant_declarators15068);
            	    conDecLst=constant_declarators_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_conDecLst==null) list_conDecLst=new ArrayList();
            	    list_conDecLst.add(conDecLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop208;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2241:2: -> constantDeclarators(firstDecl=fstDeclist=$conDecLst)
              {
                  retval.st = templateLib.getInstanceOf("constantDeclarators",new STAttrMap().put("firstDecl", fstDec).put("list", list_conDecLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constant_declarators"


    public static class constant_declarators_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constant_declarators_Chld"
    // CSharp.g:2243:1: constant_declarators_Chld : COMMA conDec= constant_declarator -> constantDeclaratorsChld(constDecl=conDec);
    public final CSharp.constant_declarators_Chld_return constant_declarators_Chld() throws RecognitionException {
        CSharp.constant_declarators_Chld_return retval = new CSharp.constant_declarators_Chld_return();
        retval.start = input.LT(1);


        CSharp.constant_declarator_return conDec =null;


        try {
            // CSharp.g:2244:3: ( COMMA conDec= constant_declarator -> constantDeclaratorsChld(constDecl=conDec))
            // CSharp.g:2245:3: COMMA conDec= constant_declarator
            {
            match(input,COMMA,FOLLOW_COMMA_in_constant_declarators_Chld15096); if (state.failed) return retval;

            pushFollow(FOLLOW_constant_declarator_in_constant_declarators_Chld15101);
            conDec=constant_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2246:3: -> constantDeclaratorsChld(constDecl=conDec)
              {
                  retval.st = templateLib.getInstanceOf("constantDeclaratorsChld",new STAttrMap().put("constDecl", conDec));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constant_declarators_Chld"


    public static class constant_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constant_declarator"
    // CSharp.g:2249:1: constant_declarator : IDENTIFIER ASSIGNMENT expr= constant_expression -> constantDeclarator(lhs=$IDENTIFIER.textrhs=expr);
    public final CSharp.constant_declarator_return constant_declarator() throws RecognitionException {
        CSharp.constant_declarator_return retval = new CSharp.constant_declarator_return();
        retval.start = input.LT(1);


        Token IDENTIFIER177=null;
        CSharp.constant_expression_return expr =null;


        try {
            // CSharp.g:2250:2: ( IDENTIFIER ASSIGNMENT expr= constant_expression -> constantDeclarator(lhs=$IDENTIFIER.textrhs=expr))
            // CSharp.g:2251:2: IDENTIFIER ASSIGNMENT expr= constant_expression
            {
            IDENTIFIER177=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_constant_declarator15130); if (state.failed) return retval;

            match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_constant_declarator15132); if (state.failed) return retval;

            pushFollow(FOLLOW_constant_expression_in_constant_declarator15136);
            expr=constant_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2252:2: -> constantDeclarator(lhs=$IDENTIFIER.textrhs=expr)
              {
                  retval.st = templateLib.getInstanceOf("constantDeclarator",new STAttrMap().put("lhs", (IDENTIFIER177!=null?IDENTIFIER177.getText():null)).put("rhs", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constant_declarator"


    public static class variable_declarators_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_declarators"
    // CSharp.g:2274:1: variable_declarators : fstDec= variable_declarator (lst+= variable_declarators_Chld )* -> variableDeclarators(firstDecl=fstDeclist=$lst);
    public final CSharp.variable_declarators_return variable_declarators() throws RecognitionException {
        CSharp.variable_declarators_return retval = new CSharp.variable_declarators_return();
        retval.start = input.LT(1);


        List list_lst=null;
        CSharp.variable_declarator_return fstDec =null;

        RuleReturnScope lst = null;
        try {
            // CSharp.g:2275:2: (fstDec= variable_declarator (lst+= variable_declarators_Chld )* -> variableDeclarators(firstDecl=fstDeclist=$lst))
            // CSharp.g:2276:2: fstDec= variable_declarator (lst+= variable_declarators_Chld )*
            {
            pushFollow(FOLLOW_variable_declarator_in_variable_declarators15167);
            fstDec=variable_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:2276:29: (lst+= variable_declarators_Chld )*
            loop209:
            do {
                int alt209=2;
                int LA209_0 = input.LA(1);

                if ( (LA209_0==COMMA) ) {
                    alt209=1;
                }


                switch (alt209) {
            	case 1 :
            	    // CSharp.g:2276:32: lst+= variable_declarators_Chld
            	    {
            	    pushFollow(FOLLOW_variable_declarators_Chld_in_variable_declarators15174);
            	    lst=variable_declarators_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop209;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2277:2: -> variableDeclarators(firstDecl=fstDeclist=$lst)
              {
                  retval.st = templateLib.getInstanceOf("variableDeclarators",new STAttrMap().put("firstDecl", fstDec).put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_declarators"


    public static class variable_declarators_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_declarators_Chld"
    // CSharp.g:2280:1: variable_declarators_Chld : COMMA vd= variable_declarator -> variableDeclaratorsChld(decl=vd);
    public final CSharp.variable_declarators_Chld_return variable_declarators_Chld() throws RecognitionException {
        CSharp.variable_declarators_Chld_return retval = new CSharp.variable_declarators_Chld_return();
        retval.start = input.LT(1);


        CSharp.variable_declarator_return vd =null;


        try {
            // CSharp.g:2281:3: ( COMMA vd= variable_declarator -> variableDeclaratorsChld(decl=vd))
            // CSharp.g:2282:3: COMMA vd= variable_declarator
            {
            match(input,COMMA,FOLLOW_COMMA_in_variable_declarators_Chld15203); if (state.failed) return retval;

            pushFollow(FOLLOW_variable_declarator_in_variable_declarators_Chld15208);
            vd=variable_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2283:3: -> variableDeclaratorsChld(decl=vd)
              {
                  retval.st = templateLib.getInstanceOf("variableDeclaratorsChld",new STAttrMap().put("decl", vd));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_declarators_Chld"


    public static class variable_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_declarator"
    // CSharp.g:2286:1: variable_declarator : ( IDENTIFIER -> variableDeclarator(value=NamingUtil.toCamelCase($IDENTIFIER.text))| IDENTIFIER ASSIGNMENT rside= variable_initializer -> variableDeclarator2(lhs=NamingUtil.toCamelCase($IDENTIFIER.text)rhs=rside));
    public final CSharp.variable_declarator_return variable_declarator() throws RecognitionException {
        CSharp.variable_declarator_return retval = new CSharp.variable_declarator_return();
        retval.start = input.LT(1);


        Token IDENTIFIER178=null;
        Token IDENTIFIER179=null;
        CSharp.variable_initializer_return rside =null;


        try {
            // CSharp.g:2287:2: ( IDENTIFIER -> variableDeclarator(value=NamingUtil.toCamelCase($IDENTIFIER.text))| IDENTIFIER ASSIGNMENT rside= variable_initializer -> variableDeclarator2(lhs=NamingUtil.toCamelCase($IDENTIFIER.text)rhs=rside))
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==IDENTIFIER) ) {
                int LA210_1 = input.LA(2);

                if ( (LA210_1==ASSIGNMENT) ) {
                    alt210=2;
                }
                else if ( (LA210_1==COMMA||LA210_1==SEMICOLON) ) {
                    alt210=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 210, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 0, input);

                throw nvae;

            }
            switch (alt210) {
                case 1 :
                    // CSharp.g:2288:2: IDENTIFIER
                    {
                    IDENTIFIER178=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_variable_declarator15234); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2289:2: -> variableDeclarator(value=NamingUtil.toCamelCase($IDENTIFIER.text))
                      {
                          retval.st = templateLib.getInstanceOf("variableDeclarator",new STAttrMap().put("value", NamingUtil.toCamelCase((IDENTIFIER178!=null?IDENTIFIER178.getText():null))));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2290:4: IDENTIFIER ASSIGNMENT rside= variable_initializer
                    {
                    IDENTIFIER179=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_variable_declarator15248); if (state.failed) return retval;

                    match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_variable_declarator15250); if (state.failed) return retval;

                    pushFollow(FOLLOW_variable_initializer_in_variable_declarator15254);
                    rside=variable_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2291:2: -> variableDeclarator2(lhs=NamingUtil.toCamelCase($IDENTIFIER.text)rhs=rside)
                      {
                          retval.st = templateLib.getInstanceOf("variableDeclarator2",new STAttrMap().put("lhs", NamingUtil.toCamelCase((IDENTIFIER179!=null?IDENTIFIER179.getText():null))).put("rhs", rside));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_declarator"


    public static class variable_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_initializer"
    // CSharp.g:2293:1: variable_initializer : (vi1= expression -> variableInitializer(init=vi1)|vi2= array_initializer -> variableInitializer(init=vi2));
    public final CSharp.variable_initializer_return variable_initializer() throws RecognitionException {
        CSharp.variable_initializer_return retval = new CSharp.variable_initializer_return();
        retval.start = input.LT(1);


        CSharp.expression_return vi1 =null;

        CSharp.array_initializer_return vi2 =null;


        try {
            // CSharp.g:2294:2: (vi1= expression -> variableInitializer(init=vi1)|vi2= array_initializer -> variableInitializer(init=vi2))
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==AMP||(LA211_0 >= BANG && LA211_0 <= BASE)||LA211_0==BOOL||LA211_0==BYTE||(LA211_0 >= CHAR && LA211_0 <= CHECKED)||LA211_0==DECIMAL||(LA211_0 >= DEFAULT && LA211_0 <= DELEGATE)||LA211_0==DOUBLE||LA211_0==FALSE||LA211_0==FLOAT||LA211_0==IDENTIFIER||(LA211_0 >= INT && LA211_0 <= INTEGER_LITERAL)||LA211_0==LONG||LA211_0==MINUS||LA211_0==NEW||LA211_0==NULL||LA211_0==OBJECT||LA211_0==OPEN_PARENS||LA211_0==OP_DEC||LA211_0==OP_INC||LA211_0==PLUS||LA211_0==REAL_LITERAL||LA211_0==SBYTE||LA211_0==SHORT||LA211_0==SIZEOF||LA211_0==STAR||(LA211_0 >= STRING && LA211_0 <= STRING_LITERAL)||LA211_0==THIS||(LA211_0 >= TILDE && LA211_0 <= TRUE)||LA211_0==TYPEOF||(LA211_0 >= UINT && LA211_0 <= UNCHECKED)||LA211_0==USHORT) ) {
                alt211=1;
            }
            else if ( (LA211_0==OPEN_BRACE) ) {
                alt211=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                throw nvae;

            }
            switch (alt211) {
                case 1 :
                    // CSharp.g:2295:2: vi1= expression
                    {
                    pushFollow(FOLLOW_expression_in_variable_initializer15282);
                    vi1=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2296:2: -> variableInitializer(init=vi1)
                      {
                          retval.st = templateLib.getInstanceOf("variableInitializer",new STAttrMap().put("init", vi1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2297:4: vi2= array_initializer
                    {
                    pushFollow(FOLLOW_array_initializer_in_variable_initializer15298);
                    vi2=array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2298:2: -> variableInitializer(init=vi2)
                      {
                          retval.st = templateLib.getInstanceOf("variableInitializer",new STAttrMap().put("init", vi2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_initializer"


    public static class method_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_declaration"
    // CSharp.g:2300:1: method_declaration : mh= method_header mb= method_body -> methodDeclaration(head=mhbody=mb);
    public final CSharp.method_declaration_return method_declaration() throws RecognitionException {
        CSharp.method_declaration_return retval = new CSharp.method_declaration_return();
        retval.start = input.LT(1);


        CSharp.method_header_return mh =null;

        CSharp.method_body_return mb =null;


        try {
            // CSharp.g:2301:2: (mh= method_header mb= method_body -> methodDeclaration(head=mhbody=mb))
            // CSharp.g:2302:2: mh= method_header mb= method_body
            {
            pushFollow(FOLLOW_method_header_in_method_declaration15322);
            mh=method_header();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_method_body_in_method_declaration15326);
            mb=method_body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2303:2: -> methodDeclaration(head=mhbody=mb)
              {
                  retval.st = templateLib.getInstanceOf("methodDeclaration",new STAttrMap().put("head", mh).put("body", mb));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration"


    public static class method_header_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_header"
    // CSharp.g:2305:1: method_header : (at= attributes )? (mm= method_modifiers )? (pck= partial_contextual_keyword )? rt= return_type mn= member_name (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? -> methodHeader(attributes=atmethodModifiers=mmpartialKwd=pckretTyp=CSharpHelper.replaceJavaType($rt.text)memNam=NamingUtil.toCamelCase($mn.text)typParLst=tplformlParLst=fpltypParConCls=tpcc);
    public final CSharp.method_header_return method_header() throws RecognitionException {
        CSharp.method_header_return retval = new CSharp.method_header_return();
        retval.start = input.LT(1);


        CSharp.attributes_return at =null;

        CSharp.method_modifiers_return mm =null;

        CSharp.partial_contextual_keyword_return pck =null;

        CSharp.return_type_return rt =null;

        CSharp.member_name_return mn =null;

        CSharp.type_parameter_list_return tpl =null;

        CSharp.formal_parameter_list_return fpl =null;

        CSharp.type_parameter_constraints_clauses_return tpcc =null;


        try {
            // CSharp.g:2306:2: ( (at= attributes )? (mm= method_modifiers )? (pck= partial_contextual_keyword )? rt= return_type mn= member_name (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? -> methodHeader(attributes=atmethodModifiers=mmpartialKwd=pckretTyp=CSharpHelper.replaceJavaType($rt.text)memNam=NamingUtil.toCamelCase($mn.text)typParLst=tplformlParLst=fpltypParConCls=tpcc))
            // CSharp.g:2307:2: (at= attributes )? (mm= method_modifiers )? (pck= partial_contextual_keyword )? rt= return_type mn= member_name (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )?
            {
            // CSharp.g:2307:2: (at= attributes )?
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==OPEN_BRACKET) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    // CSharp.g:2307:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_method_header15355);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2307:19: (mm= method_modifiers )?
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==ABSTRACT||LA213_0==EXTERN||LA213_0==INTERNAL||LA213_0==NEW||LA213_0==OVERRIDE||(LA213_0 >= PRIVATE && LA213_0 <= PUBLIC)||LA213_0==SEALED||LA213_0==STATIC||LA213_0==UNSAFE||LA213_0==VIRTUAL) ) {
                alt213=1;
            }
            switch (alt213) {
                case 1 :
                    // CSharp.g:2307:20: mm= method_modifiers
                    {
                    pushFollow(FOLLOW_method_modifiers_in_method_header15362);
                    mm=method_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2307:42: (pck= partial_contextual_keyword )?
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==IDENTIFIER) ) {
                int LA214_1 = input.LA(2);

                if ( ((input.LT(1).getText().equals("partial"))) ) {
                    alt214=1;
                }
            }
            switch (alt214) {
                case 1 :
                    // CSharp.g:2307:43: pck= partial_contextual_keyword
                    {
                    pushFollow(FOLLOW_partial_contextual_keyword_in_method_header15369);
                    pck=partial_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_return_type_in_method_header15375);
            rt=return_type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_member_name_in_method_header15379);
            mn=member_name();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:2307:106: (tpl= type_parameter_list )?
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==LT) ) {
                alt215=1;
            }
            switch (alt215) {
                case 1 :
                    // CSharp.g:2307:107: tpl= type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_method_header15384);
                    tpl=type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_method_header15388); if (state.failed) return retval;

            // CSharp.g:2307:145: (fpl= formal_parameter_list )?
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==BOOL||LA216_0==BYTE||LA216_0==CHAR||LA216_0==DECIMAL||LA216_0==DOUBLE||LA216_0==FLOAT||LA216_0==IDENTIFIER||LA216_0==INT||LA216_0==LONG||LA216_0==OBJECT||LA216_0==OPEN_BRACKET||LA216_0==OUT||LA216_0==PARAMS||LA216_0==REF||LA216_0==SBYTE||LA216_0==SHORT||LA216_0==STRING||LA216_0==THIS||(LA216_0 >= UINT && LA216_0 <= ULONG)||LA216_0==USHORT||LA216_0==VOID) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    // CSharp.g:2307:146: fpl= formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_method_header15393);
                    fpl=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_method_header15397); if (state.failed) return retval;

            // CSharp.g:2307:187: (tpcc= type_parameter_constraints_clauses )?
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==IDENTIFIER) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    // CSharp.g:2307:188: tpcc= type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_method_header15402);
                    tpcc=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2308:2: -> methodHeader(attributes=atmethodModifiers=mmpartialKwd=pckretTyp=CSharpHelper.replaceJavaType($rt.text)memNam=NamingUtil.toCamelCase($mn.text)typParLst=tplformlParLst=fpltypParConCls=tpcc)
              {
                  retval.st = templateLib.getInstanceOf("methodHeader",new STAttrMap().put("attributes", at).put("methodModifiers", mm).put("partialKwd", pck).put("retTyp", CSharpHelper.replaceJavaType((rt!=null?input.toString(rt.start,rt.stop):null))).put("memNam", NamingUtil.toCamelCase((mn!=null?input.toString(mn.start,mn.stop):null))).put("typParLst", tpl).put("formlParLst", fpl).put("typParConCls", tpcc));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header"


    public static class method_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_modifiers"
    // CSharp.g:2310:1: method_modifiers : (lst+= method_modifier )+ -> methodModifiers(list=$lst);
    public final CSharp.method_modifiers_return method_modifiers() throws RecognitionException {
        CSharp.method_modifiers_return retval = new CSharp.method_modifiers_return();
        retval.start = input.LT(1);


        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharp.g:2311:2: ( (lst+= method_modifier )+ -> methodModifiers(list=$lst))
            // CSharp.g:2312:2: (lst+= method_modifier )+
            {
            // CSharp.g:2312:2: (lst+= method_modifier )+
            int cnt218=0;
            loop218:
            do {
                int alt218=2;
                int LA218_0 = input.LA(1);

                if ( (LA218_0==ABSTRACT||LA218_0==EXTERN||LA218_0==INTERNAL||LA218_0==NEW||LA218_0==OVERRIDE||(LA218_0 >= PRIVATE && LA218_0 <= PUBLIC)||LA218_0==SEALED||LA218_0==STATIC||LA218_0==UNSAFE||LA218_0==VIRTUAL) ) {
                    alt218=1;
                }


                switch (alt218) {
            	case 1 :
            	    // CSharp.g:2312:3: lst+= method_modifier
            	    {
            	    pushFollow(FOLLOW_method_modifier_in_method_modifiers15457);
            	    lst=method_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt218 >= 1 ) break loop218;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(218, input);
                        throw eee;
                }
                cnt218++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2313:2: -> methodModifiers(list=$lst)
              {
                  retval.st = templateLib.getInstanceOf("methodModifiers",new STAttrMap().put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifiers"


    public static class method_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_modifier"
    // CSharp.g:2315:1: method_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)| STATIC -> text(value=$STATIC.text)| VIRTUAL -> text(value=$VIRTUAL.text)| SEALED -> text(value=$SEALED.text)| OVERRIDE -> text(value=$OVERRIDE.text)| ABSTRACT -> text(value=$ABSTRACT.text)| EXTERN -> text(value=$EXTERN.text)|mmu= method_modifier_unsafe -> text(value=$mmu.text));
    public final CSharp.method_modifier_return method_modifier() throws RecognitionException {
        CSharp.method_modifier_return retval = new CSharp.method_modifier_return();
        retval.start = input.LT(1);


        Token NEW180=null;
        Token PUBLIC181=null;
        Token PROTECTED182=null;
        Token PRIVATE183=null;
        Token STATIC184=null;
        Token VIRTUAL185=null;
        Token SEALED186=null;
        Token OVERRIDE187=null;
        Token ABSTRACT188=null;
        Token EXTERN189=null;
        CSharp.method_modifier_unsafe_return mmu =null;


        try {
            // CSharp.g:2316:2: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)| STATIC -> text(value=$STATIC.text)| VIRTUAL -> text(value=$VIRTUAL.text)| SEALED -> text(value=$SEALED.text)| OVERRIDE -> text(value=$OVERRIDE.text)| ABSTRACT -> text(value=$ABSTRACT.text)| EXTERN -> text(value=$EXTERN.text)|mmu= method_modifier_unsafe -> text(value=$mmu.text))
            int alt219=12;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt219=1;
                }
                break;
            case PUBLIC:
                {
                alt219=2;
                }
                break;
            case PROTECTED:
                {
                alt219=3;
                }
                break;
            case INTERNAL:
                {
                alt219=4;
                }
                break;
            case PRIVATE:
                {
                alt219=5;
                }
                break;
            case STATIC:
                {
                alt219=6;
                }
                break;
            case VIRTUAL:
                {
                alt219=7;
                }
                break;
            case SEALED:
                {
                alt219=8;
                }
                break;
            case OVERRIDE:
                {
                alt219=9;
                }
                break;
            case ABSTRACT:
                {
                alt219=10;
                }
                break;
            case EXTERN:
                {
                alt219=11;
                }
                break;
            case UNSAFE:
                {
                alt219=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;

            }

            switch (alt219) {
                case 1 :
                    // CSharp.g:2317:2: NEW
                    {
                    NEW180=(Token)match(input,NEW,FOLLOW_NEW_in_method_modifier15481); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2317:23: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW180!=null?NEW180.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2318:4: PUBLIC
                    {
                    PUBLIC181=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_method_modifier15511); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2318:23: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC181!=null?PUBLIC181.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2319:4: PROTECTED
                    {
                    PROTECTED182=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_method_modifier15536); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2319:23: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED182!=null?PROTECTED182.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:2320:4: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_method_modifier15558); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2320:23: -> text(value=\"private\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "private"));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:2321:4: PRIVATE
                    {
                    PRIVATE183=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_method_modifier15581); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2321:23: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE183!=null?PRIVATE183.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:2322:4: STATIC
                    {
                    STATIC184=(Token)match(input,STATIC,FOLLOW_STATIC_in_method_modifier15605); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2322:23: -> text(value=$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STATIC184!=null?STATIC184.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:2323:4: VIRTUAL
                    {
                    VIRTUAL185=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_method_modifier15630); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2323:23: -> text(value=$VIRTUAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VIRTUAL185!=null?VIRTUAL185.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:2324:4: SEALED
                    {
                    SEALED186=(Token)match(input,SEALED,FOLLOW_SEALED_in_method_modifier15654); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2324:23: -> text(value=$SEALED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEALED186!=null?SEALED186.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:2325:4: OVERRIDE
                    {
                    OVERRIDE187=(Token)match(input,OVERRIDE,FOLLOW_OVERRIDE_in_method_modifier15679); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2325:23: -> text(value=$OVERRIDE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OVERRIDE187!=null?OVERRIDE187.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharp.g:2326:4: ABSTRACT
                    {
                    ABSTRACT188=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_method_modifier15702); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2326:23: -> text(value=$ABSTRACT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ABSTRACT188!=null?ABSTRACT188.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharp.g:2327:4: EXTERN
                    {
                    EXTERN189=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_method_modifier15725); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2327:23: -> text(value=$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXTERN189!=null?EXTERN189.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharp.g:2328:4: mmu= method_modifier_unsafe
                    {
                    pushFollow(FOLLOW_method_modifier_unsafe_in_method_modifier15752);
                    mmu=method_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2328:35: -> text(value=$mmu.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (mmu!=null?input.toString(mmu.start,mmu.stop):null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class return_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "return_type"
    // CSharp.g:2331:1: return_type : (t= type -> returnType(type=t)| VOID -> text(value=\" void \"));
    public final CSharp.return_type_return return_type() throws RecognitionException {
        CSharp.return_type_return retval = new CSharp.return_type_return();
        retval.start = input.LT(1);


        CSharp.type_return t =null;


        try {
            // CSharp.g:2332:2: (t= type -> returnType(type=t)| VOID -> text(value=\" void \"))
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==BOOL||LA220_0==BYTE||LA220_0==CHAR||LA220_0==DECIMAL||LA220_0==DOUBLE||LA220_0==FLOAT||LA220_0==IDENTIFIER||LA220_0==INT||LA220_0==LONG||LA220_0==OBJECT||LA220_0==SBYTE||LA220_0==SHORT||LA220_0==STRING||(LA220_0 >= UINT && LA220_0 <= ULONG)||LA220_0==USHORT) ) {
                alt220=1;
            }
            else if ( (LA220_0==VOID) ) {
                int LA220_2 = input.LA(2);

                if ( (LA220_2==STAR) ) {
                    alt220=1;
                }
                else if ( (LA220_2==IDENTIFIER) ) {
                    alt220=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 220, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 220, 0, input);

                throw nvae;

            }
            switch (alt220) {
                case 1 :
                    // CSharp.g:2333:2: t= type
                    {
                    pushFollow(FOLLOW_type_in_return_type15781);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2333:15: -> returnType(type=t)
                      {
                          retval.st = templateLib.getInstanceOf("returnType",new STAttrMap().put("type", t));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2334:4: VOID
                    {
                    match(input,VOID,FOLLOW_VOID_in_return_type15800); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2334:15: -> text(value=\" void \")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", " void "));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_type"


    public static class member_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_name"
    // CSharp.g:2343:1: member_name : intFTyp= interface_type -> memberName(type=intFTyp);
    public final CSharp.member_name_return member_name() throws RecognitionException {
        CSharp.member_name_return retval = new CSharp.member_name_return();
        retval.start = input.LT(1);


        CSharp.interface_type_return intFTyp =null;


        try {
            // CSharp.g:2344:3: (intFTyp= interface_type -> memberName(type=intFTyp))
            // CSharp.g:2345:3: intFTyp= interface_type
            {
            pushFollow(FOLLOW_interface_type_in_member_name15835);
            intFTyp=interface_type();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2346:3: -> memberName(type=intFTyp)
              {
                  retval.st = templateLib.getInstanceOf("memberName",new STAttrMap().put("type", intFTyp));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_name"


    public static class method_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_body"
    // CSharp.g:2348:1: method_body : (blk= method_block (comts1= comments )? -> methodBody(body=CSharpHelper.updateRetrunStatment(blk.st.toString())comments=comts1)|scln= SEMICOLON (comts2= comments )? -> methodBody(body=$scln.textcomments=comts2));
    public final CSharp.method_body_return method_body() throws RecognitionException {
        CSharp.method_body_return retval = new CSharp.method_body_return();
        retval.start = input.LT(1);


        Token scln=null;
        CSharp.method_block_return blk =null;

        CSharp.comments_return comts1 =null;

        CSharp.comments_return comts2 =null;


        try {
            // CSharp.g:2349:2: (blk= method_block (comts1= comments )? -> methodBody(body=CSharpHelper.updateRetrunStatment(blk.st.toString())comments=comts1)|scln= SEMICOLON (comts2= comments )? -> methodBody(body=$scln.textcomments=comts2))
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==OPEN_BRACE) ) {
                alt223=1;
            }
            else if ( (LA223_0==SEMICOLON) ) {
                alt223=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);

                throw nvae;

            }
            switch (alt223) {
                case 1 :
                    // CSharp.g:2350:2: blk= method_block (comts1= comments )?
                    {
                    pushFollow(FOLLOW_method_block_in_method_body15861);
                    blk=method_block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp.g:2350:19: (comts1= comments )?
                    int alt221=2;
                    int LA221_0 = input.LA(1);

                    if ( (LA221_0==SINGLE_LINE_COMMENT) ) {
                        alt221=1;
                    }
                    else if ( (LA221_0==SINGLE_LINE_DOC_COMMENT) ) {
                        alt221=1;
                    }
                    switch (alt221) {
                        case 1 :
                            // CSharp.g:2350:20: comts1= comments
                            {
                            pushFollow(FOLLOW_comments_in_method_body15866);
                            comts1=comments();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2351:2: -> methodBody(body=CSharpHelper.updateRetrunStatment(blk.st.toString())comments=comts1)
                      {
                          retval.st = templateLib.getInstanceOf("methodBody",new STAttrMap().put("body", CSharpHelper.updateRetrunStatment(blk.st.toString())).put("comments", comts1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2352:4: scln= SEMICOLON (comts2= comments )?
                    {
                    scln=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_method_body15888); if (state.failed) return retval;

                    // CSharp.g:2352:19: (comts2= comments )?
                    int alt222=2;
                    int LA222_0 = input.LA(1);

                    if ( (LA222_0==SINGLE_LINE_COMMENT) ) {
                        alt222=1;
                    }
                    else if ( (LA222_0==SINGLE_LINE_DOC_COMMENT) ) {
                        alt222=1;
                    }
                    switch (alt222) {
                        case 1 :
                            // CSharp.g:2352:20: comts2= comments
                            {
                            pushFollow(FOLLOW_comments_in_method_body15893);
                            comts2=comments();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2353:2: -> methodBody(body=$scln.textcomments=comts2)
                      {
                          retval.st = templateLib.getInstanceOf("methodBody",new STAttrMap().put("body", (scln!=null?scln.getText():null)).put("comments", comts2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_body"


    public static class method_block_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_block"
    // CSharp.g:2356:2: method_block : OPEN_BRACE (comts= comments )? (lst= statement_list )? CLOSE_BRACE -> methodblock(comments=comtsblockStmtLst=lst);
    public final CSharp.method_block_return method_block() throws RecognitionException {
        CSharp.method_block_return retval = new CSharp.method_block_return();
        retval.start = input.LT(1);


        CSharp.comments_return comts =null;

        CSharp.statement_list_return lst =null;


        try {
            // CSharp.g:2357:3: ( OPEN_BRACE (comts= comments )? (lst= statement_list )? CLOSE_BRACE -> methodblock(comments=comtsblockStmtLst=lst))
            // CSharp.g:2358:3: OPEN_BRACE (comts= comments )? (lst= statement_list )? CLOSE_BRACE
            {
            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_method_block15926); if (state.failed) return retval;

            // CSharp.g:2358:14: (comts= comments )?
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( ((LA224_0 >= SINGLE_LINE_COMMENT && LA224_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt224=1;
            }
            switch (alt224) {
                case 1 :
                    // CSharp.g:2358:15: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_method_block15931);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2358:32: (lst= statement_list )?
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==AMP||(LA225_0 >= BANG && LA225_0 <= BASE)||(LA225_0 >= BOOL && LA225_0 <= BYTE)||(LA225_0 >= CHAR && LA225_0 <= CHECKED)||(LA225_0 >= CONST && LA225_0 <= CONTINUE)||LA225_0==DECIMAL||(LA225_0 >= DEFAULT && LA225_0 <= DELEGATE)||LA225_0==DO||LA225_0==DOUBLE||LA225_0==FALSE||(LA225_0 >= FIXED && LA225_0 <= FOREACH)||LA225_0==GOTO||(LA225_0 >= IDENTIFIER && LA225_0 <= IF)||(LA225_0 >= INT && LA225_0 <= INTEGER_LITERAL)||(LA225_0 >= LOCK && LA225_0 <= LONG)||LA225_0==MINUS||LA225_0==NEW||LA225_0==NULL||(LA225_0 >= OBJECT && LA225_0 <= OPEN_BRACE)||LA225_0==OPEN_PARENS||LA225_0==OP_DEC||LA225_0==OP_INC||LA225_0==PLUS||LA225_0==REAL_LITERAL||LA225_0==RETURN||LA225_0==SBYTE||LA225_0==SEMICOLON||LA225_0==SHORT||LA225_0==SIZEOF||LA225_0==STAR||(LA225_0 >= STRING && LA225_0 <= STRING_LITERAL)||LA225_0==SWITCH||(LA225_0 >= THIS && LA225_0 <= TYPEOF)||(LA225_0 >= UINT && LA225_0 <= UNCHECKED)||(LA225_0 >= UNSAFE && LA225_0 <= USING)||LA225_0==VOID||LA225_0==WHILE) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    // CSharp.g:2358:33: lst= statement_list
                    {
                    pushFollow(FOLLOW_statement_list_in_method_block15938);
                    lst=statement_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_method_block15942); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2359:3: -> methodblock(comments=comtsblockStmtLst=lst)
              {
                  retval.st = templateLib.getInstanceOf("methodblock",new STAttrMap().put("comments", comts).put("blockStmtLst", lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_block"


    public static class formal_parameter_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "formal_parameter_list"
    // CSharp.g:2368:1: formal_parameter_list : ( ( ( attributes )? PARAMS )=>parArr= parameter_array -> formalParameterList(fixedParams=nulllist=parArr)|fp= fixed_parameters (list= formal_parameter_list_Chld )? -> formalParameterList(fixedParams=fplist=parArr));
    public final CSharp.formal_parameter_list_return formal_parameter_list() throws RecognitionException {
        CSharp.formal_parameter_list_return retval = new CSharp.formal_parameter_list_return();
        retval.start = input.LT(1);


        CSharp.parameter_array_return parArr =null;

        CSharp.fixed_parameters_return fp =null;

        CSharp.formal_parameter_list_Chld_return list =null;


        try {
            // CSharp.g:2369:3: ( ( ( attributes )? PARAMS )=>parArr= parameter_array -> formalParameterList(fixedParams=nulllist=parArr)|fp= fixed_parameters (list= formal_parameter_list_Chld )? -> formalParameterList(fixedParams=fplist=parArr))
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==OPEN_BRACKET) ) {
                int LA227_1 = input.LA(2);

                if ( (synpred23_CSharp()) ) {
                    alt227=1;
                }
                else if ( (true) ) {
                    alt227=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 227, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA227_0==PARAMS) && (synpred23_CSharp())) {
                alt227=1;
            }
            else if ( (LA227_0==BOOL||LA227_0==BYTE||LA227_0==CHAR||LA227_0==DECIMAL||LA227_0==DOUBLE||LA227_0==FLOAT||LA227_0==IDENTIFIER||LA227_0==INT||LA227_0==LONG||LA227_0==OBJECT||LA227_0==OUT||LA227_0==REF||LA227_0==SBYTE||LA227_0==SHORT||LA227_0==STRING||LA227_0==THIS||(LA227_0 >= UINT && LA227_0 <= ULONG)||LA227_0==USHORT||LA227_0==VOID) ) {
                alt227=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 0, input);

                throw nvae;

            }
            switch (alt227) {
                case 1 :
                    // CSharp.g:2370:3: ( ( attributes )? PARAMS )=>parArr= parameter_array
                    {
                    pushFollow(FOLLOW_parameter_array_in_formal_parameter_list15985);
                    parArr=parameter_array();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2371:3: -> formalParameterList(fixedParams=nulllist=parArr)
                      {
                          retval.st = templateLib.getInstanceOf("formalParameterList",new STAttrMap().put("fixedParams", null).put("list", parArr));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2372:5: fp= fixed_parameters (list= formal_parameter_list_Chld )?
                    {
                    pushFollow(FOLLOW_fixed_parameters_in_formal_parameter_list16007);
                    fp=fixed_parameters();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp.g:2372:25: (list= formal_parameter_list_Chld )?
                    int alt226=2;
                    int LA226_0 = input.LA(1);

                    if ( (LA226_0==COMMA) ) {
                        alt226=1;
                    }
                    switch (alt226) {
                        case 1 :
                            // CSharp.g:2372:27: list= formal_parameter_list_Chld
                            {
                            pushFollow(FOLLOW_formal_parameter_list_Chld_in_formal_parameter_list16013);
                            list=formal_parameter_list_Chld();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2373:3: -> formalParameterList(fixedParams=fplist=parArr)
                      {
                          retval.st = templateLib.getInstanceOf("formalParameterList",new STAttrMap().put("fixedParams", fp).put("list", parArr));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "formal_parameter_list"


    public static class formal_parameter_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "formal_parameter_list_Chld"
    // CSharp.g:2376:1: formal_parameter_list_Chld : ( COMMA parameter_array )=> COMMA arr= parameter_array -> formalParameterListChld(params=arr);
    public final CSharp.formal_parameter_list_Chld_return formal_parameter_list_Chld() throws RecognitionException {
        CSharp.formal_parameter_list_Chld_return retval = new CSharp.formal_parameter_list_Chld_return();
        retval.start = input.LT(1);


        CSharp.parameter_array_return arr =null;


        try {
            // CSharp.g:2377:3: ( ( COMMA parameter_array )=> COMMA arr= parameter_array -> formalParameterListChld(params=arr))
            // CSharp.g:2378:3: ( COMMA parameter_array )=> COMMA arr= parameter_array
            {
            match(input,COMMA,FOLLOW_COMMA_in_formal_parameter_list_Chld16054); if (state.failed) return retval;

            pushFollow(FOLLOW_parameter_array_in_formal_parameter_list_Chld16058);
            arr=parameter_array();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2379:3: -> formalParameterListChld(params=arr)
              {
                  retval.st = templateLib.getInstanceOf("formalParameterListChld",new STAttrMap().put("params", arr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "formal_parameter_list_Chld"


    public static class fixed_parameters_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_parameters"
    // CSharp.g:2381:1: fixed_parameters : fp= fixed_parameter (fpLst+= fixed_parameters_Chld )* -> fixedParameters(firstParam=fplist=$fpLst);
    public final CSharp.fixed_parameters_return fixed_parameters() throws RecognitionException {
        CSharp.fixed_parameters_return retval = new CSharp.fixed_parameters_return();
        retval.start = input.LT(1);


        List list_fpLst=null;
        CSharp.fixed_parameter_return fp =null;

        RuleReturnScope fpLst = null;
        try {
            // CSharp.g:2382:2: (fp= fixed_parameter (fpLst+= fixed_parameters_Chld )* -> fixedParameters(firstParam=fplist=$fpLst))
            // CSharp.g:2383:2: fp= fixed_parameter (fpLst+= fixed_parameters_Chld )*
            {
            pushFollow(FOLLOW_fixed_parameter_in_fixed_parameters16084);
            fp=fixed_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:2383:21: (fpLst+= fixed_parameters_Chld )*
            loop228:
            do {
                int alt228=2;
                int LA228_0 = input.LA(1);

                if ( (LA228_0==COMMA) ) {
                    alt228=1;
                }


                switch (alt228) {
            	case 1 :
            	    // CSharp.g:2383:23: fpLst+= fixed_parameters_Chld
            	    {
            	    pushFollow(FOLLOW_fixed_parameters_Chld_in_fixed_parameters16090);
            	    fpLst=fixed_parameters_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_fpLst==null) list_fpLst=new ArrayList();
            	    list_fpLst.add(fpLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop228;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2384:2: -> fixedParameters(firstParam=fplist=$fpLst)
              {
                  retval.st = templateLib.getInstanceOf("fixedParameters",new STAttrMap().put("firstParam", fp).put("list", list_fpLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_parameters"


    public static class fixed_parameters_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_parameters_Chld"
    // CSharp.g:2387:1: fixed_parameters_Chld : ( COMMA fixed_parameter )=> COMMA fixParam= fixed_parameter -> fixedParametersChld(param=fixParam);
    public final CSharp.fixed_parameters_Chld_return fixed_parameters_Chld() throws RecognitionException {
        CSharp.fixed_parameters_Chld_return retval = new CSharp.fixed_parameters_Chld_return();
        retval.start = input.LT(1);


        CSharp.fixed_parameter_return fixParam =null;


        try {
            // CSharp.g:2388:2: ( ( COMMA fixed_parameter )=> COMMA fixParam= fixed_parameter -> fixedParametersChld(param=fixParam))
            // CSharp.g:2389:2: ( COMMA fixed_parameter )=> COMMA fixParam= fixed_parameter
            {
            match(input,COMMA,FOLLOW_COMMA_in_fixed_parameters_Chld16127); if (state.failed) return retval;

            pushFollow(FOLLOW_fixed_parameter_in_fixed_parameters_Chld16131);
            fixParam=fixed_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2390:2: -> fixedParametersChld(param=fixParam)
              {
                  retval.st = templateLib.getInstanceOf("fixedParametersChld",new STAttrMap().put("param", fixParam));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_parameters_Chld"


    public static class fixed_parameter_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_parameter"
    // CSharp.g:2398:1: fixed_parameter : ( (at= attributes )? (parModf= parameter_modifier )? t= type parNam= IDENTIFIER (defArg= default_argument )? -> fixedParameter(attributes=atparamModifier=parModfdataType=tparamName=NamingUtil.toCamelCase($parNam.text)defaultArgs=defArg)|arLst= arglist -> fixedParameter2(argumentList=arLst));
    public final CSharp.fixed_parameter_return fixed_parameter() throws RecognitionException {
        CSharp.fixed_parameter_return retval = new CSharp.fixed_parameter_return();
        retval.start = input.LT(1);


        Token parNam=null;
        CSharp.attributes_return at =null;

        CSharp.parameter_modifier_return parModf =null;

        CSharp.type_return t =null;

        CSharp.default_argument_return defArg =null;

        CSharp.arglist_return arLst =null;


        try {
            // CSharp.g:2399:3: ( (at= attributes )? (parModf= parameter_modifier )? t= type parNam= IDENTIFIER (defArg= default_argument )? -> fixedParameter(attributes=atparamModifier=parModfdataType=tparamName=NamingUtil.toCamelCase($parNam.text)defaultArgs=defArg)|arLst= arglist -> fixedParameter2(argumentList=arLst))
            int alt232=2;
            int LA232_0 = input.LA(1);

            if ( (LA232_0==BOOL||LA232_0==BYTE||LA232_0==CHAR||LA232_0==DECIMAL||LA232_0==DOUBLE||LA232_0==FLOAT||LA232_0==INT||LA232_0==LONG||LA232_0==OBJECT||LA232_0==OPEN_BRACKET||LA232_0==OUT||LA232_0==REF||LA232_0==SBYTE||LA232_0==SHORT||LA232_0==STRING||LA232_0==THIS||(LA232_0 >= UINT && LA232_0 <= ULONG)||LA232_0==USHORT||LA232_0==VOID) ) {
                alt232=1;
            }
            else if ( (LA232_0==IDENTIFIER) ) {
                int LA232_2 = input.LA(2);

                if ( (LA232_2==DOT||LA232_2==DOUBLE_COLON||LA232_2==IDENTIFIER||LA232_2==INTERR||LA232_2==LT||LA232_2==OPEN_BRACKET||LA232_2==STAR) ) {
                    alt232=1;
                }
                else if ( (LA232_2==EOF||(LA232_2 >= CLOSE_BRACKET && LA232_2 <= CLOSE_PARENS)||LA232_2==COMMA) ) {
                    alt232=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 232, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;

            }
            switch (alt232) {
                case 1 :
                    // CSharp.g:2400:3: (at= attributes )? (parModf= parameter_modifier )? t= type parNam= IDENTIFIER (defArg= default_argument )?
                    {
                    // CSharp.g:2400:3: (at= attributes )?
                    int alt229=2;
                    int LA229_0 = input.LA(1);

                    if ( (LA229_0==OPEN_BRACKET) ) {
                        alt229=1;
                    }
                    switch (alt229) {
                        case 1 :
                            // CSharp.g:2400:4: at= attributes
                            {
                            pushFollow(FOLLOW_attributes_in_fixed_parameter16160);
                            at=attributes();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp.g:2400:20: (parModf= parameter_modifier )?
                    int alt230=2;
                    int LA230_0 = input.LA(1);

                    if ( (LA230_0==OUT||LA230_0==REF||LA230_0==THIS) ) {
                        alt230=1;
                    }
                    switch (alt230) {
                        case 1 :
                            // CSharp.g:2400:21: parModf= parameter_modifier
                            {
                            pushFollow(FOLLOW_parameter_modifier_in_fixed_parameter16167);
                            parModf=parameter_modifier();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_in_fixed_parameter16173);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    parNam=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_fixed_parameter16177); if (state.failed) return retval;

                    // CSharp.g:2400:75: (defArg= default_argument )?
                    int alt231=2;
                    int LA231_0 = input.LA(1);

                    if ( (LA231_0==ASSIGNMENT) ) {
                        alt231=1;
                    }
                    switch (alt231) {
                        case 1 :
                            // CSharp.g:2400:76: defArg= default_argument
                            {
                            pushFollow(FOLLOW_default_argument_in_fixed_parameter16182);
                            defArg=default_argument();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2401:3: -> fixedParameter(attributes=atparamModifier=parModfdataType=tparamName=NamingUtil.toCamelCase($parNam.text)defaultArgs=defArg)
                      {
                          retval.st = templateLib.getInstanceOf("fixedParameter",new STAttrMap().put("attributes", at).put("paramModifier", parModf).put("dataType", t).put("paramName", NamingUtil.toCamelCase((parNam!=null?parNam.getText():null))).put("defaultArgs", defArg));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2402:5: arLst= arglist
                    {
                    pushFollow(FOLLOW_arglist_in_fixed_parameter16218);
                    arLst=arglist();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2403:3: -> fixedParameter2(argumentList=arLst)
                      {
                          retval.st = templateLib.getInstanceOf("fixedParameter2",new STAttrMap().put("argumentList", arLst));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_parameter"


    public static class default_argument_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "default_argument"
    // CSharp.g:2405:1: default_argument : ASSIGNMENT expr= expression -> defaultArgument(expression=expr);
    public final CSharp.default_argument_return default_argument() throws RecognitionException {
        CSharp.default_argument_return retval = new CSharp.default_argument_return();
        retval.start = input.LT(1);


        CSharp.expression_return expr =null;


        try {
            // CSharp.g:2406:2: ( ASSIGNMENT expr= expression -> defaultArgument(expression=expr))
            // CSharp.g:2407:2: ASSIGNMENT expr= expression
            {
            match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_default_argument16242); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_default_argument16246);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2408:2: -> defaultArgument(expression=expr)
              {
                  retval.st = templateLib.getInstanceOf("defaultArgument",new STAttrMap().put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_argument"


    public static class parameter_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "parameter_modifier"
    // CSharp.g:2410:1: parameter_modifier : ( REF -> text(value=$REF.text)| OUT -> text(value=$OUT.text)| THIS -> text(value=$THIS.text));
    public final CSharp.parameter_modifier_return parameter_modifier() throws RecognitionException {
        CSharp.parameter_modifier_return retval = new CSharp.parameter_modifier_return();
        retval.start = input.LT(1);


        Token REF190=null;
        Token OUT191=null;
        Token THIS192=null;

        try {
            // CSharp.g:2411:2: ( REF -> text(value=$REF.text)| OUT -> text(value=$OUT.text)| THIS -> text(value=$THIS.text))
            int alt233=3;
            switch ( input.LA(1) ) {
            case REF:
                {
                alt233=1;
                }
                break;
            case OUT:
                {
                alt233=2;
                }
                break;
            case THIS:
                {
                alt233=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;

            }

            switch (alt233) {
                case 1 :
                    // CSharp.g:2412:2: REF
                    {
                    REF190=(Token)match(input,REF,FOLLOW_REF_in_parameter_modifier16268); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2412:15: -> text(value=$REF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (REF190!=null?REF190.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2413:4: OUT
                    {
                    OUT191=(Token)match(input,OUT,FOLLOW_OUT_in_parameter_modifier16290); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2413:15: -> text(value=$OUT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OUT191!=null?OUT191.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2414:4: THIS
                    {
                    THIS192=(Token)match(input,THIS,FOLLOW_THIS_in_parameter_modifier16310); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2414:15: -> text(value=$THIS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (THIS192!=null?THIS192.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parameter_modifier"


    public static class parameter_array_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "parameter_array"
    // CSharp.g:2416:1: parameter_array : (atrs= attributes )? par= PARAMS array_type id= IDENTIFIER -> parameterArray(atbts=atrsparam=$par.textidName=NamingUtil.toCamelCase($id.text));
    public final CSharp.parameter_array_return parameter_array() throws RecognitionException {
        CSharp.parameter_array_return retval = new CSharp.parameter_array_return();
        retval.start = input.LT(1);


        Token par=null;
        Token id=null;
        CSharp.attributes_return atrs =null;


        try {
            // CSharp.g:2417:2: ( (atrs= attributes )? par= PARAMS array_type id= IDENTIFIER -> parameterArray(atbts=atrsparam=$par.textidName=NamingUtil.toCamelCase($id.text)))
            // CSharp.g:2418:2: (atrs= attributes )? par= PARAMS array_type id= IDENTIFIER
            {
            // CSharp.g:2418:2: (atrs= attributes )?
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==OPEN_BRACKET) ) {
                alt234=1;
            }
            switch (alt234) {
                case 1 :
                    // CSharp.g:2418:3: atrs= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_parameter_array16340);
                    atrs=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            par=(Token)match(input,PARAMS,FOLLOW_PARAMS_in_parameter_array16346); if (state.failed) return retval;

            pushFollow(FOLLOW_array_type_in_parameter_array16348);
            array_type();

            state._fsp--;
            if (state.failed) return retval;

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_parameter_array16352); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2419:2: -> parameterArray(atbts=atrsparam=$par.textidName=NamingUtil.toCamelCase($id.text))
              {
                  retval.st = templateLib.getInstanceOf("parameterArray",new STAttrMap().put("atbts", atrs).put("param", (par!=null?par.getText():null)).put("idName", NamingUtil.toCamelCase((id!=null?id.getText():null))));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parameter_array"


    public static class property_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "property_declaration"
    // CSharp.g:2421:1: property_declaration : (attr= attributes )? (modfs= property_modifiers )? t= type mname= member_name OPEN_BRACE acDecls= accessor_declarations CLOSE_BRACE -> propertyDeclaration(attributes=attrpropModfs=modfstyp=tmemName=mnameaccessDecls=acDecls);
    public final CSharp.property_declaration_return property_declaration() throws RecognitionException {
        CSharp.property_declaration_return retval = new CSharp.property_declaration_return();
        retval.start = input.LT(1);


        CSharp.attributes_return attr =null;

        CSharp.property_modifiers_return modfs =null;

        CSharp.type_return t =null;

        CSharp.member_name_return mname =null;

        CSharp.accessor_declarations_return acDecls =null;


        try {
            // CSharp.g:2422:2: ( (attr= attributes )? (modfs= property_modifiers )? t= type mname= member_name OPEN_BRACE acDecls= accessor_declarations CLOSE_BRACE -> propertyDeclaration(attributes=attrpropModfs=modfstyp=tmemName=mnameaccessDecls=acDecls))
            // CSharp.g:2423:2: (attr= attributes )? (modfs= property_modifiers )? t= type mname= member_name OPEN_BRACE acDecls= accessor_declarations CLOSE_BRACE
            {
            // CSharp.g:2423:2: (attr= attributes )?
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==OPEN_BRACKET) ) {
                alt235=1;
            }
            switch (alt235) {
                case 1 :
                    // CSharp.g:2423:3: attr= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_property_declaration16385);
                    attr=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2423:21: (modfs= property_modifiers )?
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==ABSTRACT||LA236_0==EXTERN||LA236_0==INTERNAL||LA236_0==NEW||LA236_0==OVERRIDE||(LA236_0 >= PRIVATE && LA236_0 <= PUBLIC)||LA236_0==SEALED||LA236_0==STATIC||LA236_0==UNSAFE||LA236_0==VIRTUAL) ) {
                alt236=1;
            }
            switch (alt236) {
                case 1 :
                    // CSharp.g:2423:22: modfs= property_modifiers
                    {
                    pushFollow(FOLLOW_property_modifiers_in_property_declaration16392);
                    modfs=property_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_in_property_declaration16398);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_member_name_in_property_declaration16402);
            mname=member_name();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_property_declaration16404); if (state.failed) return retval;

            pushFollow(FOLLOW_accessor_declarations_in_property_declaration16408);
            acDecls=accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_property_declaration16410); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2424:2: -> propertyDeclaration(attributes=attrpropModfs=modfstyp=tmemName=mnameaccessDecls=acDecls)
              {
                  retval.st = templateLib.getInstanceOf("propertyDeclaration",new STAttrMap().put("attributes", attr).put("propModfs", modfs).put("typ", t).put("memName", mname).put("accessDecls", acDecls));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_declaration"


    public static class property_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "property_modifiers"
    // CSharp.g:2426:1: property_modifiers : (lst+= property_modifier )+ -> propertyModifiers(list=$lst);
    public final CSharp.property_modifiers_return property_modifiers() throws RecognitionException {
        CSharp.property_modifiers_return retval = new CSharp.property_modifiers_return();
        retval.start = input.LT(1);


        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharp.g:2427:2: ( (lst+= property_modifier )+ -> propertyModifiers(list=$lst))
            // CSharp.g:2428:2: (lst+= property_modifier )+
            {
            // CSharp.g:2428:2: (lst+= property_modifier )+
            int cnt237=0;
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);

                if ( (LA237_0==ABSTRACT||LA237_0==EXTERN||LA237_0==INTERNAL||LA237_0==NEW||LA237_0==OVERRIDE||(LA237_0 >= PRIVATE && LA237_0 <= PUBLIC)||LA237_0==SEALED||LA237_0==STATIC||LA237_0==UNSAFE||LA237_0==VIRTUAL) ) {
                    alt237=1;
                }


                switch (alt237) {
            	case 1 :
            	    // CSharp.g:2428:3: lst+= property_modifier
            	    {
            	    pushFollow(FOLLOW_property_modifier_in_property_modifiers16451);
            	    lst=property_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt237 >= 1 ) break loop237;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(237, input);
                        throw eee;
                }
                cnt237++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2429:2: -> propertyModifiers(list=$lst)
              {
                  retval.st = templateLib.getInstanceOf("propertyModifiers",new STAttrMap().put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_modifiers"


    public static class property_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "property_modifier"
    // CSharp.g:2431:1: property_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)| STATIC -> text(value=$STATIC.text)| VIRTUAL -> text(value=$VIRTUAL.text)| SEALED -> text(value=$SEALED.text)| OVERRIDE -> text(value=\"@Override\\n\")| ABSTRACT -> text(value=$ABSTRACT.text)| EXTERN -> text(value=$EXTERN.text)|pmod= property_modifier_unsafe -> text(value=pmod));
    public final CSharp.property_modifier_return property_modifier() throws RecognitionException {
        CSharp.property_modifier_return retval = new CSharp.property_modifier_return();
        retval.start = input.LT(1);


        Token NEW193=null;
        Token PUBLIC194=null;
        Token PROTECTED195=null;
        Token PRIVATE196=null;
        Token STATIC197=null;
        Token VIRTUAL198=null;
        Token SEALED199=null;
        Token ABSTRACT200=null;
        Token EXTERN201=null;
        CSharp.property_modifier_unsafe_return pmod =null;


        try {
            // CSharp.g:2432:2: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)| STATIC -> text(value=$STATIC.text)| VIRTUAL -> text(value=$VIRTUAL.text)| SEALED -> text(value=$SEALED.text)| OVERRIDE -> text(value=\"@Override\\n\")| ABSTRACT -> text(value=$ABSTRACT.text)| EXTERN -> text(value=$EXTERN.text)|pmod= property_modifier_unsafe -> text(value=pmod))
            int alt238=12;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt238=1;
                }
                break;
            case PUBLIC:
                {
                alt238=2;
                }
                break;
            case PROTECTED:
                {
                alt238=3;
                }
                break;
            case INTERNAL:
                {
                alt238=4;
                }
                break;
            case PRIVATE:
                {
                alt238=5;
                }
                break;
            case STATIC:
                {
                alt238=6;
                }
                break;
            case VIRTUAL:
                {
                alt238=7;
                }
                break;
            case SEALED:
                {
                alt238=8;
                }
                break;
            case OVERRIDE:
                {
                alt238=9;
                }
                break;
            case ABSTRACT:
                {
                alt238=10;
                }
                break;
            case EXTERN:
                {
                alt238=11;
                }
                break;
            case UNSAFE:
                {
                alt238=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 238, 0, input);

                throw nvae;

            }

            switch (alt238) {
                case 1 :
                    // CSharp.g:2433:3: NEW
                    {
                    NEW193=(Token)match(input,NEW,FOLLOW_NEW_in_property_modifier16476); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2433:41: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW193!=null?NEW193.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2434:5: PUBLIC
                    {
                    PUBLIC194=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_property_modifier16524); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2434:41: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC194!=null?PUBLIC194.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2435:5: PROTECTED
                    {
                    PROTECTED195=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_property_modifier16567); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2435:41: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED195!=null?PROTECTED195.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:2436:5: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_property_modifier16607); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2436:41: -> text(value=\"private\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "private"));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:2437:5: PRIVATE
                    {
                    PRIVATE196=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_property_modifier16648); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2437:41: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE196!=null?PRIVATE196.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:2438:5: STATIC
                    {
                    STATIC197=(Token)match(input,STATIC,FOLLOW_STATIC_in_property_modifier16690); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2438:41: -> text(value=$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STATIC197!=null?STATIC197.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:2439:5: VIRTUAL
                    {
                    VIRTUAL198=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_property_modifier16733); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2439:41: -> text(value=$VIRTUAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VIRTUAL198!=null?VIRTUAL198.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:2440:5: SEALED
                    {
                    SEALED199=(Token)match(input,SEALED,FOLLOW_SEALED_in_property_modifier16775); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2440:41: -> text(value=$SEALED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEALED199!=null?SEALED199.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:2441:5: OVERRIDE
                    {
                    match(input,OVERRIDE,FOLLOW_OVERRIDE_in_property_modifier16818); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2441:41: -> text(value=\"@Override\\n\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "@Override\n"));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharp.g:2442:5: ABSTRACT
                    {
                    ABSTRACT200=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_property_modifier16859); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2442:41: -> text(value=$ABSTRACT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ABSTRACT200!=null?ABSTRACT200.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharp.g:2443:5: EXTERN
                    {
                    EXTERN201=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_property_modifier16900); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2443:41: -> text(value=$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXTERN201!=null?EXTERN201.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharp.g:2444:5: pmod= property_modifier_unsafe
                    {
                    pushFollow(FOLLOW_property_modifier_unsafe_in_property_modifier16945);
                    pmod=property_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2444:41: -> text(value=pmod)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", pmod));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_modifier"


    public static class accessor_declarations_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "accessor_declarations"
    // CSharp.g:2452:1: accessor_declarations : ( (attrs1= attributes )? (mods1= accessor_modifier )? gck1= get_contextual_keyword aBdy1= accessor_body (sck1= set_accessor_declaration )? -> accessorDeclarations(attributes=attrs1acsModfs=mods1body=aBdy1ck1=gck1ck2=sck1)| (attrs2= attributes )? (mods2= accessor_modifier )? sck2= set_contextual_keyword aBdy2= accessor_body (gck2= get_accessor_declaration )? -> accessorDeclarations(attributes=attrs2acsModfs=mods2body=aBdy2ck1=sck2ck2=gck2));
    public final CSharp.accessor_declarations_return accessor_declarations() throws RecognitionException {
        CSharp.accessor_declarations_return retval = new CSharp.accessor_declarations_return();
        retval.start = input.LT(1);


        CSharp.attributes_return attrs1 =null;

        CSharp.accessor_modifier_return mods1 =null;

        CSharp.get_contextual_keyword_return gck1 =null;

        CSharp.accessor_body_return aBdy1 =null;

        CSharp.set_accessor_declaration_return sck1 =null;

        CSharp.attributes_return attrs2 =null;

        CSharp.accessor_modifier_return mods2 =null;

        CSharp.set_contextual_keyword_return sck2 =null;

        CSharp.accessor_body_return aBdy2 =null;

        CSharp.get_accessor_declaration_return gck2 =null;


        try {
            // CSharp.g:2453:3: ( (attrs1= attributes )? (mods1= accessor_modifier )? gck1= get_contextual_keyword aBdy1= accessor_body (sck1= set_accessor_declaration )? -> accessorDeclarations(attributes=attrs1acsModfs=mods1body=aBdy1ck1=gck1ck2=sck1)| (attrs2= attributes )? (mods2= accessor_modifier )? sck2= set_contextual_keyword aBdy2= accessor_body (gck2= get_accessor_declaration )? -> accessorDeclarations(attributes=attrs2acsModfs=mods2body=aBdy2ck1=sck2ck2=gck2))
            int alt245=2;
            switch ( input.LA(1) ) {
            case OPEN_BRACKET:
                {
                alt245=1;
                }
                break;
            case PROTECTED:
                {
                alt245=1;
                }
                break;
            case INTERNAL:
                {
                alt245=1;
                }
                break;
            case PRIVATE:
                {
                alt245=1;
                }
                break;
            case IDENTIFIER:
                {
                int LA245_5 = input.LA(2);

                if ( ((input.LT(1).getText().equals("get"))) ) {
                    alt245=1;
                }
                else if ( ((input.LT(1).getText().equals("set"))) ) {
                    alt245=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 245, 5, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);

                throw nvae;

            }

            switch (alt245) {
                case 1 :
                    // CSharp.g:2454:3: (attrs1= attributes )? (mods1= accessor_modifier )? gck1= get_contextual_keyword aBdy1= accessor_body (sck1= set_accessor_declaration )?
                    {
                    // CSharp.g:2454:3: (attrs1= attributes )?
                    int alt239=2;
                    int LA239_0 = input.LA(1);

                    if ( (LA239_0==OPEN_BRACKET) ) {
                        alt239=1;
                    }
                    switch (alt239) {
                        case 1 :
                            // CSharp.g:2454:4: attrs1= attributes
                            {
                            pushFollow(FOLLOW_attributes_in_accessor_declarations16979);
                            attrs1=attributes();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp.g:2454:24: (mods1= accessor_modifier )?
                    int alt240=2;
                    int LA240_0 = input.LA(1);

                    if ( (LA240_0==INTERNAL||(LA240_0 >= PRIVATE && LA240_0 <= PROTECTED)) ) {
                        alt240=1;
                    }
                    switch (alt240) {
                        case 1 :
                            // CSharp.g:2454:25: mods1= accessor_modifier
                            {
                            pushFollow(FOLLOW_accessor_modifier_in_accessor_declarations16986);
                            mods1=accessor_modifier();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_get_contextual_keyword_in_accessor_declarations16993);
                    gck1=get_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_accessor_body_in_accessor_declarations16997);
                    aBdy1=accessor_body();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp.g:2454:100: (sck1= set_accessor_declaration )?
                    int alt241=2;
                    int LA241_0 = input.LA(1);

                    if ( (LA241_0==IDENTIFIER||LA241_0==INTERNAL||LA241_0==OPEN_BRACKET||(LA241_0 >= PRIVATE && LA241_0 <= PROTECTED)) ) {
                        alt241=1;
                    }
                    switch (alt241) {
                        case 1 :
                            // CSharp.g:2454:101: sck1= set_accessor_declaration
                            {
                            pushFollow(FOLLOW_set_accessor_declaration_in_accessor_declarations17002);
                            sck1=set_accessor_declaration();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2455:3: -> accessorDeclarations(attributes=attrs1acsModfs=mods1body=aBdy1ck1=gck1ck2=sck1)
                      {
                          retval.st = templateLib.getInstanceOf("accessorDeclarations",new STAttrMap().put("attributes", attrs1).put("acsModfs", mods1).put("body", aBdy1).put("ck1", gck1).put("ck2", sck1));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2456:4: (attrs2= attributes )? (mods2= accessor_modifier )? sck2= set_contextual_keyword aBdy2= accessor_body (gck2= get_accessor_declaration )?
                    {
                    // CSharp.g:2456:4: (attrs2= attributes )?
                    int alt242=2;
                    int LA242_0 = input.LA(1);

                    if ( (LA242_0==OPEN_BRACKET) ) {
                        alt242=1;
                    }
                    switch (alt242) {
                        case 1 :
                            // CSharp.g:2456:5: attrs2= attributes
                            {
                            pushFollow(FOLLOW_attributes_in_accessor_declarations17039);
                            attrs2=attributes();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp.g:2456:25: (mods2= accessor_modifier )?
                    int alt243=2;
                    int LA243_0 = input.LA(1);

                    if ( (LA243_0==INTERNAL||(LA243_0 >= PRIVATE && LA243_0 <= PROTECTED)) ) {
                        alt243=1;
                    }
                    switch (alt243) {
                        case 1 :
                            // CSharp.g:2456:26: mods2= accessor_modifier
                            {
                            pushFollow(FOLLOW_accessor_modifier_in_accessor_declarations17046);
                            mods2=accessor_modifier();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_set_contextual_keyword_in_accessor_declarations17052);
                    sck2=set_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_accessor_body_in_accessor_declarations17056);
                    aBdy2=accessor_body();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp.g:2456:100: (gck2= get_accessor_declaration )?
                    int alt244=2;
                    int LA244_0 = input.LA(1);

                    if ( (LA244_0==IDENTIFIER||LA244_0==INTERNAL||LA244_0==OPEN_BRACKET||(LA244_0 >= PRIVATE && LA244_0 <= PROTECTED)) ) {
                        alt244=1;
                    }
                    switch (alt244) {
                        case 1 :
                            // CSharp.g:2456:101: gck2= get_accessor_declaration
                            {
                            pushFollow(FOLLOW_get_accessor_declaration_in_accessor_declarations17061);
                            gck2=get_accessor_declaration();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2457:3: -> accessorDeclarations(attributes=attrs2acsModfs=mods2body=aBdy2ck1=sck2ck2=gck2)
                      {
                          retval.st = templateLib.getInstanceOf("accessorDeclarations",new STAttrMap().put("attributes", attrs2).put("acsModfs", mods2).put("body", aBdy2).put("ck1", sck2).put("ck2", gck2));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "accessor_declarations"


    public static class get_accessor_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "get_accessor_declaration"
    // CSharp.g:2459:1: get_accessor_declaration : (at= attributes )? (am= accessor_modifier )? gck= get_contextual_keyword ab= accessor_body -> getAccessorDeclaration(attrs=ataccsModfs=amck=gckbody=ab);
    public final CSharp.get_accessor_declaration_return get_accessor_declaration() throws RecognitionException {
        CSharp.get_accessor_declaration_return retval = new CSharp.get_accessor_declaration_return();
        retval.start = input.LT(1);


        CSharp.attributes_return at =null;

        CSharp.accessor_modifier_return am =null;

        CSharp.get_contextual_keyword_return gck =null;

        CSharp.accessor_body_return ab =null;


        try {
            // CSharp.g:2460:2: ( (at= attributes )? (am= accessor_modifier )? gck= get_contextual_keyword ab= accessor_body -> getAccessorDeclaration(attrs=ataccsModfs=amck=gckbody=ab))
            // CSharp.g:2461:2: (at= attributes )? (am= accessor_modifier )? gck= get_contextual_keyword ab= accessor_body
            {
            // CSharp.g:2461:2: (at= attributes )?
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==OPEN_BRACKET) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    // CSharp.g:2461:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_get_accessor_declaration17108);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2461:19: (am= accessor_modifier )?
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==INTERNAL||(LA247_0 >= PRIVATE && LA247_0 <= PROTECTED)) ) {
                alt247=1;
            }
            switch (alt247) {
                case 1 :
                    // CSharp.g:2461:20: am= accessor_modifier
                    {
                    pushFollow(FOLLOW_accessor_modifier_in_get_accessor_declaration17115);
                    am=accessor_modifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_get_contextual_keyword_in_get_accessor_declaration17121);
            gck=get_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_accessor_body_in_get_accessor_declaration17125);
            ab=accessor_body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2462:2: -> getAccessorDeclaration(attrs=ataccsModfs=amck=gckbody=ab)
              {
                  retval.st = templateLib.getInstanceOf("getAccessorDeclaration",new STAttrMap().put("attrs", at).put("accsModfs", am).put("ck", gck).put("body", ab));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "get_accessor_declaration"


    public static class set_accessor_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "set_accessor_declaration"
    // CSharp.g:2464:1: set_accessor_declaration : (at= attributes )? (am= accessor_modifier )? sck= set_contextual_keyword ab= accessor_body -> setAccessorDeclaration(attrs=ataccsModfs=amck=sckbody=ab);
    public final CSharp.set_accessor_declaration_return set_accessor_declaration() throws RecognitionException {
        CSharp.set_accessor_declaration_return retval = new CSharp.set_accessor_declaration_return();
        retval.start = input.LT(1);


        CSharp.attributes_return at =null;

        CSharp.accessor_modifier_return am =null;

        CSharp.set_contextual_keyword_return sck =null;

        CSharp.accessor_body_return ab =null;


        try {
            // CSharp.g:2465:2: ( (at= attributes )? (am= accessor_modifier )? sck= set_contextual_keyword ab= accessor_body -> setAccessorDeclaration(attrs=ataccsModfs=amck=sckbody=ab))
            // CSharp.g:2466:2: (at= attributes )? (am= accessor_modifier )? sck= set_contextual_keyword ab= accessor_body
            {
            // CSharp.g:2466:2: (at= attributes )?
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==OPEN_BRACKET) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    // CSharp.g:2466:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_set_accessor_declaration17162);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2466:19: (am= accessor_modifier )?
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==INTERNAL||(LA249_0 >= PRIVATE && LA249_0 <= PROTECTED)) ) {
                alt249=1;
            }
            switch (alt249) {
                case 1 :
                    // CSharp.g:2466:20: am= accessor_modifier
                    {
                    pushFollow(FOLLOW_accessor_modifier_in_set_accessor_declaration17169);
                    am=accessor_modifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_set_contextual_keyword_in_set_accessor_declaration17175);
            sck=set_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_accessor_body_in_set_accessor_declaration17179);
            ab=accessor_body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2467:2: -> setAccessorDeclaration(attrs=ataccsModfs=amck=sckbody=ab)
              {
                  retval.st = templateLib.getInstanceOf("setAccessorDeclaration",new STAttrMap().put("attrs", at).put("accsModfs", am).put("ck", sck).put("body", ab));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "set_accessor_declaration"


    public static class accessor_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "accessor_modifier"
    // CSharp.g:2469:1: accessor_modifier : ( PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)| PROTECTED INTERNAL -> text(value=$PROTECTED.text+\" \"+\"private\")| INTERNAL PROTECTED -> text(value=\"private\"+\" \"+$PROTECTED.text));
    public final CSharp.accessor_modifier_return accessor_modifier() throws RecognitionException {
        CSharp.accessor_modifier_return retval = new CSharp.accessor_modifier_return();
        retval.start = input.LT(1);


        Token PROTECTED202=null;
        Token PRIVATE203=null;
        Token PROTECTED204=null;
        Token PROTECTED205=null;

        try {
            // CSharp.g:2470:2: ( PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)| PROTECTED INTERNAL -> text(value=$PROTECTED.text+\" \"+\"private\")| INTERNAL PROTECTED -> text(value=\"private\"+\" \"+$PROTECTED.text))
            int alt250=5;
            switch ( input.LA(1) ) {
            case PROTECTED:
                {
                int LA250_1 = input.LA(2);

                if ( (LA250_1==INTERNAL) ) {
                    alt250=4;
                }
                else if ( (LA250_1==IDENTIFIER) ) {
                    alt250=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 1, input);

                    throw nvae;

                }
                }
                break;
            case INTERNAL:
                {
                int LA250_2 = input.LA(2);

                if ( (LA250_2==PROTECTED) ) {
                    alt250=5;
                }
                else if ( (LA250_2==IDENTIFIER) ) {
                    alt250=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 2, input);

                    throw nvae;

                }
                }
                break;
            case PRIVATE:
                {
                alt250=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 250, 0, input);

                throw nvae;

            }

            switch (alt250) {
                case 1 :
                    // CSharp.g:2471:2: PROTECTED
                    {
                    PROTECTED202=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_accessor_modifier17213); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2471:26: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED202!=null?PROTECTED202.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2472:4: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_accessor_modifier17240); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2472:27: -> text(value=\"private\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "private"));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2473:4: PRIVATE
                    {
                    PRIVATE203=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_accessor_modifier17267); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2473:27: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE203!=null?PRIVATE203.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:2474:4: PROTECTED INTERNAL
                    {
                    PROTECTED204=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_accessor_modifier17295); if (state.failed) return retval;

                    match(input,INTERNAL,FOLLOW_INTERNAL_in_accessor_modifier17297); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2474:27: -> text(value=$PROTECTED.text+\" \"+\"private\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED204!=null?PROTECTED204.getText():null)+" "+"private"));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:2475:4: INTERNAL PROTECTED
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_accessor_modifier17314); if (state.failed) return retval;

                    PROTECTED205=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_accessor_modifier17316); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2475:27: -> text(value=\"private\"+\" \"+$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "private"+" "+(PROTECTED205!=null?PROTECTED205.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "accessor_modifier"


    public static class accessor_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "accessor_body"
    // CSharp.g:2477:1: accessor_body : (blk= block -> accessorBody(body=blk)| SEMICOLON -> text(value=$SEMICOLON.text));
    public final CSharp.accessor_body_return accessor_body() throws RecognitionException {
        CSharp.accessor_body_return retval = new CSharp.accessor_body_return();
        retval.start = input.LT(1);


        Token SEMICOLON206=null;
        CSharp.block_return blk =null;


        try {
            // CSharp.g:2478:2: (blk= block -> accessorBody(body=blk)| SEMICOLON -> text(value=$SEMICOLON.text))
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==OPEN_BRACE) ) {
                alt251=1;
            }
            else if ( (LA251_0==SEMICOLON) ) {
                alt251=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 251, 0, input);

                throw nvae;

            }
            switch (alt251) {
                case 1 :
                    // CSharp.g:2479:2: blk= block
                    {
                    pushFollow(FOLLOW_block_in_accessor_body17343);
                    blk=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2480:2: -> accessorBody(body=blk)
                      {
                          retval.st = templateLib.getInstanceOf("accessorBody",new STAttrMap().put("body", blk));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2481:4: SEMICOLON
                    {
                    SEMICOLON206=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_accessor_body17357); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2482:2: -> text(value=$SEMICOLON.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEMICOLON206!=null?SEMICOLON206.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "accessor_body"


    public static class event_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "event_modifiers"
    // CSharp.g:2505:1: event_modifiers : (lst+= event_modifier )* -> eventModifiers(list=$lst);
    public final CSharp.event_modifiers_return event_modifiers() throws RecognitionException {
        CSharp.event_modifiers_return retval = new CSharp.event_modifiers_return();
        retval.start = input.LT(1);


        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharp.g:2506:2: ( (lst+= event_modifier )* -> eventModifiers(list=$lst))
            // CSharp.g:2507:2: (lst+= event_modifier )*
            {
            // CSharp.g:2507:2: (lst+= event_modifier )*
            loop252:
            do {
                int alt252=2;
                int LA252_0 = input.LA(1);

                if ( (LA252_0==ABSTRACT||LA252_0==EXTERN||LA252_0==INTERNAL||LA252_0==NEW||LA252_0==OVERRIDE||(LA252_0 >= PRIVATE && LA252_0 <= PUBLIC)||LA252_0==SEALED||LA252_0==STATIC||LA252_0==UNSAFE||LA252_0==VIRTUAL) ) {
                    alt252=1;
                }


                switch (alt252) {
            	case 1 :
            	    // CSharp.g:2507:3: lst+= event_modifier
            	    {
            	    pushFollow(FOLLOW_event_modifier_in_event_modifiers17399);
            	    lst=event_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop252;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2508:2: -> eventModifiers(list=$lst)
              {
                  retval.st = templateLib.getInstanceOf("eventModifiers",new STAttrMap().put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "event_modifiers"


    public static class event_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "event_modifier"
    // CSharp.g:2510:1: event_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)| STATIC -> text(value=$STATIC.text)| VIRTUAL -> text(value=$VIRTUAL.text)| SEALED -> text(value=$SEALED.text)| OVERRIDE -> text(value=\"@Override\\n\")| ABSTRACT -> text(value=$ABSTRACT.text)| EXTERN -> text(value=$EXTERN.text)|evntmod= event_modifier_unsafe -> text(value=evntmod));
    public final CSharp.event_modifier_return event_modifier() throws RecognitionException {
        CSharp.event_modifier_return retval = new CSharp.event_modifier_return();
        retval.start = input.LT(1);


        Token NEW207=null;
        Token PUBLIC208=null;
        Token PROTECTED209=null;
        Token PRIVATE210=null;
        Token STATIC211=null;
        Token VIRTUAL212=null;
        Token SEALED213=null;
        Token ABSTRACT214=null;
        Token EXTERN215=null;
        CSharp.event_modifier_unsafe_return evntmod =null;


        try {
            // CSharp.g:2511:2: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)| STATIC -> text(value=$STATIC.text)| VIRTUAL -> text(value=$VIRTUAL.text)| SEALED -> text(value=$SEALED.text)| OVERRIDE -> text(value=\"@Override\\n\")| ABSTRACT -> text(value=$ABSTRACT.text)| EXTERN -> text(value=$EXTERN.text)|evntmod= event_modifier_unsafe -> text(value=evntmod))
            int alt253=12;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt253=1;
                }
                break;
            case PUBLIC:
                {
                alt253=2;
                }
                break;
            case PROTECTED:
                {
                alt253=3;
                }
                break;
            case INTERNAL:
                {
                alt253=4;
                }
                break;
            case PRIVATE:
                {
                alt253=5;
                }
                break;
            case STATIC:
                {
                alt253=6;
                }
                break;
            case VIRTUAL:
                {
                alt253=7;
                }
                break;
            case SEALED:
                {
                alt253=8;
                }
                break;
            case OVERRIDE:
                {
                alt253=9;
                }
                break;
            case ABSTRACT:
                {
                alt253=10;
                }
                break;
            case EXTERN:
                {
                alt253=11;
                }
                break;
            case UNSAFE:
                {
                alt253=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 253, 0, input);

                throw nvae;

            }

            switch (alt253) {
                case 1 :
                    // CSharp.g:2511:4: NEW
                    {
                    NEW207=(Token)match(input,NEW,FOLLOW_NEW_in_event_modifier17421); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2511:39: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW207!=null?NEW207.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2512:6: PUBLIC
                    {
                    PUBLIC208=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_event_modifier17467); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2512:39: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC208!=null?PUBLIC208.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2513:6: PROTECTED
                    {
                    PROTECTED209=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_event_modifier17508); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2513:39: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED209!=null?PROTECTED209.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:2514:6: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_event_modifier17546); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2514:39: -> text(value=\"private\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "private"));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:2515:6: PRIVATE
                    {
                    PRIVATE210=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_event_modifier17585); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2515:39: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE210!=null?PRIVATE210.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:2516:6: STATIC
                    {
                    STATIC211=(Token)match(input,STATIC,FOLLOW_STATIC_in_event_modifier17625); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2516:39: -> text(value=$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STATIC211!=null?STATIC211.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:2517:6: VIRTUAL
                    {
                    VIRTUAL212=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_event_modifier17666); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2517:39: -> text(value=$VIRTUAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VIRTUAL212!=null?VIRTUAL212.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:2518:6: SEALED
                    {
                    SEALED213=(Token)match(input,SEALED,FOLLOW_SEALED_in_event_modifier17706); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2518:39: -> text(value=$SEALED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEALED213!=null?SEALED213.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:2519:6: OVERRIDE
                    {
                    match(input,OVERRIDE,FOLLOW_OVERRIDE_in_event_modifier17747); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2519:39: -> text(value=\"@Override\\n\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "@Override\n"));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharp.g:2520:6: ABSTRACT
                    {
                    ABSTRACT214=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_event_modifier17786); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2520:39: -> text(value=$ABSTRACT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ABSTRACT214!=null?ABSTRACT214.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharp.g:2521:6: EXTERN
                    {
                    EXTERN215=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_event_modifier17825); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2521:39: -> text(value=$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXTERN215!=null?EXTERN215.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharp.g:2522:6: evntmod= event_modifier_unsafe
                    {
                    pushFollow(FOLLOW_event_modifier_unsafe_in_event_modifier17868);
                    evntmod=event_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2522:39: -> text(value=evntmod)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", evntmod));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "event_modifier"


    public static class event_accessor_declarations_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "event_accessor_declarations"
    // CSharp.g:2524:1: event_accessor_declarations : (at= attributes )? chld= event_accessor_declarations_Chld -> eventAccessorDeclarations(attributes=atchild=chld);
    public final CSharp.event_accessor_declarations_return event_accessor_declarations() throws RecognitionException {
        CSharp.event_accessor_declarations_return retval = new CSharp.event_accessor_declarations_return();
        retval.start = input.LT(1);


        CSharp.attributes_return at =null;

        CSharp.event_accessor_declarations_Chld_return chld =null;


        try {
            // CSharp.g:2525:2: ( (at= attributes )? chld= event_accessor_declarations_Chld -> eventAccessorDeclarations(attributes=atchild=chld))
            // CSharp.g:2526:2: (at= attributes )? chld= event_accessor_declarations_Chld
            {
            // CSharp.g:2526:2: (at= attributes )?
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==OPEN_BRACKET) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    // CSharp.g:2526:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_event_accessor_declarations17895);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_event_accessor_declarations_Chld_in_event_accessor_declarations17901);
            chld=event_accessor_declarations_Chld();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2527:2: -> eventAccessorDeclarations(attributes=atchild=chld)
              {
                  retval.st = templateLib.getInstanceOf("eventAccessorDeclarations",new STAttrMap().put("attributes", at).put("child", chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "event_accessor_declarations"


    public static class event_accessor_declarations_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "event_accessor_declarations_Chld"
    // CSharp.g:2530:1: event_accessor_declarations_Chld : (ack= add_contextual_keyword blk1= block rad= remove_accessor_declaration -> eventAccessorDeclarationsChld(kwd=ackbody=blk1acssDecl=rad)|rck= remove_contextual_keyword blk2= block aad= add_accessor_declaration -> eventAccessorDeclarationsChld(kwd=rckbody=blk2acssDecl=aad));
    public final CSharp.event_accessor_declarations_Chld_return event_accessor_declarations_Chld() throws RecognitionException {
        CSharp.event_accessor_declarations_Chld_return retval = new CSharp.event_accessor_declarations_Chld_return();
        retval.start = input.LT(1);


        CSharp.add_contextual_keyword_return ack =null;

        CSharp.block_return blk1 =null;

        CSharp.remove_accessor_declaration_return rad =null;

        CSharp.remove_contextual_keyword_return rck =null;

        CSharp.block_return blk2 =null;

        CSharp.add_accessor_declaration_return aad =null;


        try {
            // CSharp.g:2531:3: (ack= add_contextual_keyword blk1= block rad= remove_accessor_declaration -> eventAccessorDeclarationsChld(kwd=ackbody=blk1acssDecl=rad)|rck= remove_contextual_keyword blk2= block aad= add_accessor_declaration -> eventAccessorDeclarationsChld(kwd=rckbody=blk2acssDecl=aad))
            int alt255=2;
            int LA255_0 = input.LA(1);

            if ( (LA255_0==IDENTIFIER) ) {
                int LA255_1 = input.LA(2);

                if ( ((input.LT(1).getText().equals("add"))) ) {
                    alt255=1;
                }
                else if ( ((input.LT(1).getText().equals("remove"))) ) {
                    alt255=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);

                throw nvae;

            }
            switch (alt255) {
                case 1 :
                    // CSharp.g:2532:2: ack= add_contextual_keyword blk1= block rad= remove_accessor_declaration
                    {
                    pushFollow(FOLLOW_add_contextual_keyword_in_event_accessor_declarations_Chld17930);
                    ack=add_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_block_in_event_accessor_declarations_Chld17934);
                    blk1=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations_Chld17938);
                    rad=remove_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2533:2: -> eventAccessorDeclarationsChld(kwd=ackbody=blk1acssDecl=rad)
                      {
                          retval.st = templateLib.getInstanceOf("eventAccessorDeclarationsChld",new STAttrMap().put("kwd", ack).put("body", blk1).put("acssDecl", rad));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2534:5: rck= remove_contextual_keyword blk2= block aad= add_accessor_declaration
                    {
                    pushFollow(FOLLOW_remove_contextual_keyword_in_event_accessor_declarations_Chld17963);
                    rck=remove_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_block_in_event_accessor_declarations_Chld17967);
                    blk2=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_add_accessor_declaration_in_event_accessor_declarations_Chld17971);
                    aad=add_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2535:3: -> eventAccessorDeclarationsChld(kwd=rckbody=blk2acssDecl=aad)
                      {
                          retval.st = templateLib.getInstanceOf("eventAccessorDeclarationsChld",new STAttrMap().put("kwd", rck).put("body", blk2).put("acssDecl", aad));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "event_accessor_declarations_Chld"


    public static class add_accessor_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "add_accessor_declaration"
    // CSharp.g:2538:1: add_accessor_declaration : (at= attributes )? ack= add_contextual_keyword blk= block -> addAccessorDeclaration(attributes=atkwd=ackbody=blk);
    public final CSharp.add_accessor_declaration_return add_accessor_declaration() throws RecognitionException {
        CSharp.add_accessor_declaration_return retval = new CSharp.add_accessor_declaration_return();
        retval.start = input.LT(1);


        CSharp.attributes_return at =null;

        CSharp.add_contextual_keyword_return ack =null;

        CSharp.block_return blk =null;


        try {
            // CSharp.g:2539:2: ( (at= attributes )? ack= add_contextual_keyword blk= block -> addAccessorDeclaration(attributes=atkwd=ackbody=blk))
            // CSharp.g:2540:2: (at= attributes )? ack= add_contextual_keyword blk= block
            {
            // CSharp.g:2540:2: (at= attributes )?
            int alt256=2;
            int LA256_0 = input.LA(1);

            if ( (LA256_0==OPEN_BRACKET) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    // CSharp.g:2540:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_add_accessor_declaration18009);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_add_contextual_keyword_in_add_accessor_declaration18015);
            ack=add_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_add_accessor_declaration18019);
            blk=block();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2541:2: -> addAccessorDeclaration(attributes=atkwd=ackbody=blk)
              {
                  retval.st = templateLib.getInstanceOf("addAccessorDeclaration",new STAttrMap().put("attributes", at).put("kwd", ack).put("body", blk));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "add_accessor_declaration"


    public static class remove_accessor_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "remove_accessor_declaration"
    // CSharp.g:2543:1: remove_accessor_declaration : (at= attributes )? rck= remove_contextual_keyword blk= block -> removerAccessorDeclaration(attributes=atkwd=rckbody=blk);
    public final CSharp.remove_accessor_declaration_return remove_accessor_declaration() throws RecognitionException {
        CSharp.remove_accessor_declaration_return retval = new CSharp.remove_accessor_declaration_return();
        retval.start = input.LT(1);


        CSharp.attributes_return at =null;

        CSharp.remove_contextual_keyword_return rck =null;

        CSharp.block_return blk =null;


        try {
            // CSharp.g:2544:2: ( (at= attributes )? rck= remove_contextual_keyword blk= block -> removerAccessorDeclaration(attributes=atkwd=rckbody=blk))
            // CSharp.g:2545:2: (at= attributes )? rck= remove_contextual_keyword blk= block
            {
            // CSharp.g:2545:2: (at= attributes )?
            int alt257=2;
            int LA257_0 = input.LA(1);

            if ( (LA257_0==OPEN_BRACKET) ) {
                alt257=1;
            }
            switch (alt257) {
                case 1 :
                    // CSharp.g:2545:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_remove_accessor_declaration18052);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_remove_contextual_keyword_in_remove_accessor_declaration18058);
            rck=remove_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_remove_accessor_declaration18062);
            blk=block();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2546:2: -> removerAccessorDeclaration(attributes=atkwd=rckbody=blk)
              {
                  retval.st = templateLib.getInstanceOf("removerAccessorDeclaration",new STAttrMap().put("attributes", at).put("kwd", rck).put("body", blk));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "remove_accessor_declaration"


    public static class indexer_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "indexer_declaration"
    // CSharp.g:2548:1: indexer_declaration : (at= attributes )? (im= indexer_modifiers )? id= indexer_declarator OPEN_BRACE ad= accessor_declarations CLOSE_BRACE -> indexerDeclaration(attributes=atmodfs=imindexerDecl=idaccsrDecl=ad);
    public final CSharp.indexer_declaration_return indexer_declaration() throws RecognitionException {
        CSharp.indexer_declaration_return retval = new CSharp.indexer_declaration_return();
        retval.start = input.LT(1);


        CSharp.attributes_return at =null;

        CSharp.indexer_modifiers_return im =null;

        CSharp.indexer_declarator_return id =null;

        CSharp.accessor_declarations_return ad =null;


        try {
            // CSharp.g:2549:2: ( (at= attributes )? (im= indexer_modifiers )? id= indexer_declarator OPEN_BRACE ad= accessor_declarations CLOSE_BRACE -> indexerDeclaration(attributes=atmodfs=imindexerDecl=idaccsrDecl=ad))
            // CSharp.g:2550:2: (at= attributes )? (im= indexer_modifiers )? id= indexer_declarator OPEN_BRACE ad= accessor_declarations CLOSE_BRACE
            {
            // CSharp.g:2550:2: (at= attributes )?
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( (LA258_0==OPEN_BRACKET) ) {
                alt258=1;
            }
            switch (alt258) {
                case 1 :
                    // CSharp.g:2550:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_indexer_declaration18095);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2550:19: (im= indexer_modifiers )?
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==ABSTRACT||LA259_0==EXTERN||LA259_0==INTERNAL||LA259_0==NEW||LA259_0==OVERRIDE||(LA259_0 >= PRIVATE && LA259_0 <= PUBLIC)||LA259_0==SEALED||LA259_0==UNSAFE||LA259_0==VIRTUAL) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    // CSharp.g:2550:20: im= indexer_modifiers
                    {
                    pushFollow(FOLLOW_indexer_modifiers_in_indexer_declaration18102);
                    im=indexer_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_indexer_declarator_in_indexer_declaration18108);
            id=indexer_declarator();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_indexer_declaration18110); if (state.failed) return retval;

            pushFollow(FOLLOW_accessor_declarations_in_indexer_declaration18114);
            ad=accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_indexer_declaration18116); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2551:2: -> indexerDeclaration(attributes=atmodfs=imindexerDecl=idaccsrDecl=ad)
              {
                  retval.st = templateLib.getInstanceOf("indexerDeclaration",new STAttrMap().put("attributes", at).put("modfs", im).put("indexerDecl", id).put("accsrDecl", ad));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexer_declaration"


    public static class indexer_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "indexer_modifiers"
    // CSharp.g:2553:1: indexer_modifiers : (lst+= indexer_modifier )+ -> indexerModifiers(list=$lst);
    public final CSharp.indexer_modifiers_return indexer_modifiers() throws RecognitionException {
        CSharp.indexer_modifiers_return retval = new CSharp.indexer_modifiers_return();
        retval.start = input.LT(1);


        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharp.g:2554:2: ( (lst+= indexer_modifier )+ -> indexerModifiers(list=$lst))
            // CSharp.g:2555:2: (lst+= indexer_modifier )+
            {
            // CSharp.g:2555:2: (lst+= indexer_modifier )+
            int cnt260=0;
            loop260:
            do {
                int alt260=2;
                int LA260_0 = input.LA(1);

                if ( (LA260_0==ABSTRACT||LA260_0==EXTERN||LA260_0==INTERNAL||LA260_0==NEW||LA260_0==OVERRIDE||(LA260_0 >= PRIVATE && LA260_0 <= PUBLIC)||LA260_0==SEALED||LA260_0==UNSAFE||LA260_0==VIRTUAL) ) {
                    alt260=1;
                }


                switch (alt260) {
            	case 1 :
            	    // CSharp.g:2555:3: lst+= indexer_modifier
            	    {
            	    pushFollow(FOLLOW_indexer_modifier_in_indexer_modifiers18153);
            	    lst=indexer_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt260 >= 1 ) break loop260;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(260, input);
                        throw eee;
                }
                cnt260++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2556:2: -> indexerModifiers(list=$lst)
              {
                  retval.st = templateLib.getInstanceOf("indexerModifiers",new STAttrMap().put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexer_modifiers"


    public static class indexer_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "indexer_modifier"
    // CSharp.g:2558:1: indexer_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)| VIRTUAL -> text(value=$VIRTUAL.text)| SEALED -> text(value=$SEALED.text)| OVERRIDE -> text(value=\"@Override\\n\")| ABSTRACT -> text(value=$ABSTRACT.text)| EXTERN -> text(value=$EXTERN.text)|indmod= indexer_modifier_unsafe -> text(value=indmod));
    public final CSharp.indexer_modifier_return indexer_modifier() throws RecognitionException {
        CSharp.indexer_modifier_return retval = new CSharp.indexer_modifier_return();
        retval.start = input.LT(1);


        Token NEW216=null;
        Token PUBLIC217=null;
        Token PROTECTED218=null;
        Token PRIVATE219=null;
        Token VIRTUAL220=null;
        Token SEALED221=null;
        Token ABSTRACT222=null;
        Token EXTERN223=null;
        CSharp.indexer_modifier_unsafe_return indmod =null;


        try {
            // CSharp.g:2559:2: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)| VIRTUAL -> text(value=$VIRTUAL.text)| SEALED -> text(value=$SEALED.text)| OVERRIDE -> text(value=\"@Override\\n\")| ABSTRACT -> text(value=$ABSTRACT.text)| EXTERN -> text(value=$EXTERN.text)|indmod= indexer_modifier_unsafe -> text(value=indmod))
            int alt261=11;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt261=1;
                }
                break;
            case PUBLIC:
                {
                alt261=2;
                }
                break;
            case PROTECTED:
                {
                alt261=3;
                }
                break;
            case INTERNAL:
                {
                alt261=4;
                }
                break;
            case PRIVATE:
                {
                alt261=5;
                }
                break;
            case VIRTUAL:
                {
                alt261=6;
                }
                break;
            case SEALED:
                {
                alt261=7;
                }
                break;
            case OVERRIDE:
                {
                alt261=8;
                }
                break;
            case ABSTRACT:
                {
                alt261=9;
                }
                break;
            case EXTERN:
                {
                alt261=10;
                }
                break;
            case UNSAFE:
                {
                alt261=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);

                throw nvae;

            }

            switch (alt261) {
                case 1 :
                    // CSharp.g:2560:2: NEW
                    {
                    NEW216=(Token)match(input,NEW,FOLLOW_NEW_in_indexer_modifier18184); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2560:41: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW216!=null?NEW216.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2561:4: PUBLIC
                    {
                    PUBLIC217=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_indexer_modifier18232); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2561:41: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC217!=null?PUBLIC217.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2562:4: PROTECTED
                    {
                    PROTECTED218=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_indexer_modifier18275); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2562:41: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED218!=null?PROTECTED218.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:2563:4: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_indexer_modifier18315); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2563:41: -> text(value=\"private\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "private"));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:2564:4: PRIVATE
                    {
                    PRIVATE219=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_indexer_modifier18356); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2564:41: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE219!=null?PRIVATE219.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:2565:4: VIRTUAL
                    {
                    VIRTUAL220=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_indexer_modifier18398); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2565:41: -> text(value=$VIRTUAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VIRTUAL220!=null?VIRTUAL220.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:2566:4: SEALED
                    {
                    SEALED221=(Token)match(input,SEALED,FOLLOW_SEALED_in_indexer_modifier18440); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2566:41: -> text(value=$SEALED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEALED221!=null?SEALED221.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:2567:4: OVERRIDE
                    {
                    match(input,OVERRIDE,FOLLOW_OVERRIDE_in_indexer_modifier18483); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2567:41: -> text(value=\"@Override\\n\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "@Override\n"));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:2568:4: ABSTRACT
                    {
                    ABSTRACT222=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_indexer_modifier18524); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2568:41: -> text(value=$ABSTRACT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ABSTRACT222!=null?ABSTRACT222.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharp.g:2569:4: EXTERN
                    {
                    EXTERN223=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_indexer_modifier18565); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2569:41: -> text(value=$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXTERN223!=null?EXTERN223.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharp.g:2570:4: indmod= indexer_modifier_unsafe
                    {
                    pushFollow(FOLLOW_indexer_modifier_unsafe_in_indexer_modifier18610);
                    indmod=indexer_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2570:41: -> text(value=indmod)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", indmod));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexer_modifier"


    public static class indexer_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "indexer_declarator"
    // CSharp.g:2578:1: indexer_declarator : t= type (it= interface_type DOT )? THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET -> indexerDeclarator(type=tintfcTyp=itformlParLst=fpl);
    public final CSharp.indexer_declarator_return indexer_declarator() throws RecognitionException {
        CSharp.indexer_declarator_return retval = new CSharp.indexer_declarator_return();
        retval.start = input.LT(1);


        CSharp.type_return t =null;

        CSharp.interface_type_return it =null;

        CSharp.formal_parameter_list_return fpl =null;


        try {
            // CSharp.g:2579:3: (t= type (it= interface_type DOT )? THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET -> indexerDeclarator(type=tintfcTyp=itformlParLst=fpl))
            // CSharp.g:2580:3: t= type (it= interface_type DOT )? THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET
            {
            pushFollow(FOLLOW_type_in_indexer_declarator18643);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:2580:10: (it= interface_type DOT )?
            int alt262=2;
            int LA262_0 = input.LA(1);

            if ( (LA262_0==IDENTIFIER) ) {
                alt262=1;
            }
            switch (alt262) {
                case 1 :
                    // CSharp.g:2580:11: it= interface_type DOT
                    {
                    pushFollow(FOLLOW_interface_type_in_indexer_declarator18648);
                    it=interface_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_indexer_declarator18650); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,THIS,FOLLOW_THIS_in_indexer_declarator18654); if (state.failed) return retval;

            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_indexer_declarator18656); if (state.failed) return retval;

            pushFollow(FOLLOW_formal_parameter_list_in_indexer_declarator18660);
            fpl=formal_parameter_list();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_indexer_declarator18662); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2581:3: -> indexerDeclarator(type=tintfcTyp=itformlParLst=fpl)
              {
                  retval.st = templateLib.getInstanceOf("indexerDeclarator",new STAttrMap().put("type", t).put("intfcTyp", it).put("formlParLst", fpl));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexer_declarator"


    public static class operator_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_declaration"
    // CSharp.g:2583:1: operator_declaration : (at= attributes )? om= operator_modifiers od= operator_declarator ob= operator_body -> operatorDeclaration(attributes=atoptrModfs=omoptrDecl=odoptrBody=ob);
    public final CSharp.operator_declaration_return operator_declaration() throws RecognitionException {
        CSharp.operator_declaration_return retval = new CSharp.operator_declaration_return();
        retval.start = input.LT(1);


        CSharp.attributes_return at =null;

        CSharp.operator_modifiers_return om =null;

        CSharp.operator_declarator_return od =null;

        CSharp.operator_body_return ob =null;


        try {
            // CSharp.g:2584:2: ( (at= attributes )? om= operator_modifiers od= operator_declarator ob= operator_body -> operatorDeclaration(attributes=atoptrModfs=omoptrDecl=odoptrBody=ob))
            // CSharp.g:2585:2: (at= attributes )? om= operator_modifiers od= operator_declarator ob= operator_body
            {
            // CSharp.g:2585:2: (at= attributes )?
            int alt263=2;
            int LA263_0 = input.LA(1);

            if ( (LA263_0==OPEN_BRACKET) ) {
                alt263=1;
            }
            switch (alt263) {
                case 1 :
                    // CSharp.g:2585:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_operator_declaration18697);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_operator_modifiers_in_operator_declaration18703);
            om=operator_modifiers();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_operator_declarator_in_operator_declaration18707);
            od=operator_declarator();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_operator_body_in_operator_declaration18711);
            ob=operator_body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2586:2: -> operatorDeclaration(attributes=atoptrModfs=omoptrDecl=odoptrBody=ob)
              {
                  retval.st = templateLib.getInstanceOf("operatorDeclaration",new STAttrMap().put("attributes", at).put("optrModfs", om).put("optrDecl", od).put("optrBody", ob));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_declaration"


    public static class operator_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_modifiers"
    // CSharp.g:2588:1: operator_modifiers : (lst+= operator_modifier )+ -> operatorModifiers(list=$lst);
    public final CSharp.operator_modifiers_return operator_modifiers() throws RecognitionException {
        CSharp.operator_modifiers_return retval = new CSharp.operator_modifiers_return();
        retval.start = input.LT(1);


        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharp.g:2589:2: ( (lst+= operator_modifier )+ -> operatorModifiers(list=$lst))
            // CSharp.g:2590:2: (lst+= operator_modifier )+
            {
            // CSharp.g:2590:2: (lst+= operator_modifier )+
            int cnt264=0;
            loop264:
            do {
                int alt264=2;
                int LA264_0 = input.LA(1);

                if ( (LA264_0==EXTERN||LA264_0==PUBLIC||LA264_0==STATIC||LA264_0==UNSAFE) ) {
                    alt264=1;
                }


                switch (alt264) {
            	case 1 :
            	    // CSharp.g:2590:3: lst+= operator_modifier
            	    {
            	    pushFollow(FOLLOW_operator_modifier_in_operator_modifiers18748);
            	    lst=operator_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt264 >= 1 ) break loop264;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(264, input);
                        throw eee;
                }
                cnt264++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2591:2: -> operatorModifiers(list=$lst)
              {
                  retval.st = templateLib.getInstanceOf("operatorModifiers",new STAttrMap().put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_modifiers"


    public static class operator_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_modifier"
    // CSharp.g:2593:1: operator_modifier : ( PUBLIC -> text(value=$PUBLIC.text)| STATIC -> text(value=$STATIC.text)| EXTERN -> text(value=$EXTERN.text)|oprmod= operator_modifier_unsafe -> text(value=oprmod));
    public final CSharp.operator_modifier_return operator_modifier() throws RecognitionException {
        CSharp.operator_modifier_return retval = new CSharp.operator_modifier_return();
        retval.start = input.LT(1);


        Token PUBLIC224=null;
        Token STATIC225=null;
        Token EXTERN226=null;
        CSharp.operator_modifier_unsafe_return oprmod =null;


        try {
            // CSharp.g:2594:3: ( PUBLIC -> text(value=$PUBLIC.text)| STATIC -> text(value=$STATIC.text)| EXTERN -> text(value=$EXTERN.text)|oprmod= operator_modifier_unsafe -> text(value=oprmod))
            int alt265=4;
            switch ( input.LA(1) ) {
            case PUBLIC:
                {
                alt265=1;
                }
                break;
            case STATIC:
                {
                alt265=2;
                }
                break;
            case EXTERN:
                {
                alt265=3;
                }
                break;
            case UNSAFE:
                {
                alt265=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 265, 0, input);

                throw nvae;

            }

            switch (alt265) {
                case 1 :
                    // CSharp.g:2595:3: PUBLIC
                    {
                    PUBLIC224=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_operator_modifier18774); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2595:41: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC224!=null?PUBLIC224.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2596:5: STATIC
                    {
                    STATIC225=(Token)match(input,STATIC,FOLLOW_STATIC_in_operator_modifier18819); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2596:41: -> text(value=$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STATIC225!=null?STATIC225.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2597:5: EXTERN
                    {
                    EXTERN226=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_operator_modifier18862); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2597:41: -> text(value=$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXTERN226!=null?EXTERN226.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:2598:5: oprmod= operator_modifier_unsafe
                    {
                    pushFollow(FOLLOW_operator_modifier_unsafe_in_operator_modifier18907);
                    oprmod=operator_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2598:41: -> text(value=oprmod)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", oprmod));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_modifier"


    public static class operator_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_declarator"
    // CSharp.g:2608:1: operator_declarator : ( ( unary_operator_declarator )=>uod= unary_operator_declarator -> operatorDeclarator(optrDecl=uod)|bod= binary_operator_declarator -> operatorDeclarator(optrDecl=bod)|cod= conversion_operator_declarator -> operatorDeclarator(optrDecl=cod));
    public final CSharp.operator_declarator_return operator_declarator() throws RecognitionException {
        CSharp.operator_declarator_return retval = new CSharp.operator_declarator_return();
        retval.start = input.LT(1);


        CSharp.unary_operator_declarator_return uod =null;

        CSharp.binary_operator_declarator_return bod =null;

        CSharp.conversion_operator_declarator_return cod =null;


        try {
            // CSharp.g:2609:3: ( ( unary_operator_declarator )=>uod= unary_operator_declarator -> operatorDeclarator(optrDecl=uod)|bod= binary_operator_declarator -> operatorDeclarator(optrDecl=bod)|cod= conversion_operator_declarator -> operatorDeclarator(optrDecl=cod))
            int alt266=3;
            switch ( input.LA(1) ) {
            case SBYTE:
                {
                int LA266_1 = input.LA(2);

                if ( (synpred26_CSharp()) ) {
                    alt266=1;
                }
                else if ( (true) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 1, input);

                    throw nvae;

                }
                }
                break;
            case BYTE:
                {
                int LA266_2 = input.LA(2);

                if ( (synpred26_CSharp()) ) {
                    alt266=1;
                }
                else if ( (true) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 2, input);

                    throw nvae;

                }
                }
                break;
            case SHORT:
                {
                int LA266_3 = input.LA(2);

                if ( (synpred26_CSharp()) ) {
                    alt266=1;
                }
                else if ( (true) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 3, input);

                    throw nvae;

                }
                }
                break;
            case USHORT:
                {
                int LA266_4 = input.LA(2);

                if ( (synpred26_CSharp()) ) {
                    alt266=1;
                }
                else if ( (true) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 4, input);

                    throw nvae;

                }
                }
                break;
            case INT:
                {
                int LA266_5 = input.LA(2);

                if ( (synpred26_CSharp()) ) {
                    alt266=1;
                }
                else if ( (true) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 5, input);

                    throw nvae;

                }
                }
                break;
            case UINT:
                {
                int LA266_6 = input.LA(2);

                if ( (synpred26_CSharp()) ) {
                    alt266=1;
                }
                else if ( (true) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 6, input);

                    throw nvae;

                }
                }
                break;
            case LONG:
                {
                int LA266_7 = input.LA(2);

                if ( (synpred26_CSharp()) ) {
                    alt266=1;
                }
                else if ( (true) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 7, input);

                    throw nvae;

                }
                }
                break;
            case ULONG:
                {
                int LA266_8 = input.LA(2);

                if ( (synpred26_CSharp()) ) {
                    alt266=1;
                }
                else if ( (true) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 8, input);

                    throw nvae;

                }
                }
                break;
            case CHAR:
                {
                int LA266_9 = input.LA(2);

                if ( (synpred26_CSharp()) ) {
                    alt266=1;
                }
                else if ( (true) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 9, input);

                    throw nvae;

                }
                }
                break;
            case FLOAT:
                {
                int LA266_10 = input.LA(2);

                if ( (synpred26_CSharp()) ) {
                    alt266=1;
                }
                else if ( (true) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 10, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE:
                {
                int LA266_11 = input.LA(2);

                if ( (synpred26_CSharp()) ) {
                    alt266=1;
                }
                else if ( (true) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 11, input);

                    throw nvae;

                }
                }
                break;
            case DECIMAL:
                {
                int LA266_12 = input.LA(2);

                if ( (synpred26_CSharp()) ) {
                    alt266=1;
                }
                else if ( (true) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 12, input);

                    throw nvae;

                }
                }
                break;
            case BOOL:
                {
                int LA266_13 = input.LA(2);

                if ( (synpred26_CSharp()) ) {
                    alt266=1;
                }
                else if ( (true) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 13, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA266_14 = input.LA(2);

                if ( (synpred26_CSharp()) ) {
                    alt266=1;
                }
                else if ( (true) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 14, input);

                    throw nvae;

                }
                }
                break;
            case OBJECT:
                {
                int LA266_15 = input.LA(2);

                if ( (synpred26_CSharp()) ) {
                    alt266=1;
                }
                else if ( (true) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 15, input);

                    throw nvae;

                }
                }
                break;
            case STRING:
                {
                int LA266_16 = input.LA(2);

                if ( (synpred26_CSharp()) ) {
                    alt266=1;
                }
                else if ( (true) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 16, input);

                    throw nvae;

                }
                }
                break;
            case VOID:
                {
                int LA266_17 = input.LA(2);

                if ( (synpred26_CSharp()) ) {
                    alt266=1;
                }
                else if ( (true) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 17, input);

                    throw nvae;

                }
                }
                break;
            case EXPLICIT:
            case IMPLICIT:
                {
                alt266=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);

                throw nvae;

            }

            switch (alt266) {
                case 1 :
                    // CSharp.g:2610:3: ( unary_operator_declarator )=>uod= unary_operator_declarator
                    {
                    pushFollow(FOLLOW_unary_operator_declarator_in_operator_declarator18946);
                    uod=unary_operator_declarator();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2611:3: -> operatorDeclarator(optrDecl=uod)
                      {
                          retval.st = templateLib.getInstanceOf("operatorDeclarator",new STAttrMap().put("optrDecl", uod));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2612:5: bod= binary_operator_declarator
                    {
                    pushFollow(FOLLOW_binary_operator_declarator_in_operator_declarator18964);
                    bod=binary_operator_declarator();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2613:3: -> operatorDeclarator(optrDecl=bod)
                      {
                          retval.st = templateLib.getInstanceOf("operatorDeclarator",new STAttrMap().put("optrDecl", bod));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2614:5: cod= conversion_operator_declarator
                    {
                    pushFollow(FOLLOW_conversion_operator_declarator_in_operator_declarator18982);
                    cod=conversion_operator_declarator();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2615:3: -> operatorDeclarator(optrDecl=cod)
                      {
                          retval.st = templateLib.getInstanceOf("operatorDeclarator",new STAttrMap().put("optrDecl", cod));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_declarator"


    public static class unary_operator_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unary_operator_declarator"
    // CSharp.g:2617:1: unary_operator_declarator : t= type OPERATOR ouop= overloadable_unary_operator OPEN_PARENS t2= type IDENTIFIER CLOSE_PARENS -> unaryOperatorDeclarator(type=toverldbleUnryOptr=ouopinnerTyp=t2name=$IDENTIFIER.text);
    public final CSharp.unary_operator_declarator_return unary_operator_declarator() throws RecognitionException {
        CSharp.unary_operator_declarator_return retval = new CSharp.unary_operator_declarator_return();
        retval.start = input.LT(1);


        Token IDENTIFIER227=null;
        CSharp.type_return t =null;

        CSharp.overloadable_unary_operator_return ouop =null;

        CSharp.type_return t2 =null;


        try {
            // CSharp.g:2618:2: (t= type OPERATOR ouop= overloadable_unary_operator OPEN_PARENS t2= type IDENTIFIER CLOSE_PARENS -> unaryOperatorDeclarator(type=toverldbleUnryOptr=ouopinnerTyp=t2name=$IDENTIFIER.text))
            // CSharp.g:2619:2: t= type OPERATOR ouop= overloadable_unary_operator OPEN_PARENS t2= type IDENTIFIER CLOSE_PARENS
            {
            pushFollow(FOLLOW_type_in_unary_operator_declarator19008);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPERATOR,FOLLOW_OPERATOR_in_unary_operator_declarator19010); if (state.failed) return retval;

            pushFollow(FOLLOW_overloadable_unary_operator_in_unary_operator_declarator19014);
            ouop=overloadable_unary_operator();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_unary_operator_declarator19016); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_unary_operator_declarator19020);
            t2=type();

            state._fsp--;
            if (state.failed) return retval;

            IDENTIFIER227=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_unary_operator_declarator19022); if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_unary_operator_declarator19024); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2620:2: -> unaryOperatorDeclarator(type=toverldbleUnryOptr=ouopinnerTyp=t2name=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("unaryOperatorDeclarator",new STAttrMap().put("type", t).put("overldbleUnryOptr", ouop).put("innerTyp", t2).put("name", (IDENTIFIER227!=null?IDENTIFIER227.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unary_operator_declarator"


    public static class overloadable_unary_operator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "overloadable_unary_operator"
    // CSharp.g:2622:1: overloadable_unary_operator : ( PLUS -> text(value=$PLUS.text)| MINUS -> text(value=$MINUS.text)| BANG -> text(value=$BANG.text)| TILDE -> text(value=$TILDE.text)| OP_INC -> text(value=$OP_INC.text)| OP_DEC -> text(value=$OP_DEC.text)| TRUE -> text(value=$TRUE.text)| FALSE -> text(value=$FALSE.text));
    public final CSharp.overloadable_unary_operator_return overloadable_unary_operator() throws RecognitionException {
        CSharp.overloadable_unary_operator_return retval = new CSharp.overloadable_unary_operator_return();
        retval.start = input.LT(1);


        Token PLUS228=null;
        Token MINUS229=null;
        Token BANG230=null;
        Token TILDE231=null;
        Token OP_INC232=null;
        Token OP_DEC233=null;
        Token TRUE234=null;
        Token FALSE235=null;

        try {
            // CSharp.g:2623:3: ( PLUS -> text(value=$PLUS.text)| MINUS -> text(value=$MINUS.text)| BANG -> text(value=$BANG.text)| TILDE -> text(value=$TILDE.text)| OP_INC -> text(value=$OP_INC.text)| OP_DEC -> text(value=$OP_DEC.text)| TRUE -> text(value=$TRUE.text)| FALSE -> text(value=$FALSE.text))
            int alt267=8;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt267=1;
                }
                break;
            case MINUS:
                {
                alt267=2;
                }
                break;
            case BANG:
                {
                alt267=3;
                }
                break;
            case TILDE:
                {
                alt267=4;
                }
                break;
            case OP_INC:
                {
                alt267=5;
                }
                break;
            case OP_DEC:
                {
                alt267=6;
                }
                break;
            case TRUE:
                {
                alt267=7;
                }
                break;
            case FALSE:
                {
                alt267=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);

                throw nvae;

            }

            switch (alt267) {
                case 1 :
                    // CSharp.g:2624:3: PLUS
                    {
                    PLUS228=(Token)match(input,PLUS,FOLLOW_PLUS_in_overloadable_unary_operator19060); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2624:19: -> text(value=$PLUS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PLUS228!=null?PLUS228.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2625:5: MINUS
                    {
                    MINUS229=(Token)match(input,MINUS,FOLLOW_MINUS_in_overloadable_unary_operator19085); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2625:19: -> text(value=$MINUS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (MINUS229!=null?MINUS229.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2626:5: BANG
                    {
                    BANG230=(Token)match(input,BANG,FOLLOW_BANG_in_overloadable_unary_operator19107); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2626:19: -> text(value=$BANG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BANG230!=null?BANG230.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:2627:5: TILDE
                    {
                    TILDE231=(Token)match(input,TILDE,FOLLOW_TILDE_in_overloadable_unary_operator19130); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2627:19: -> text(value=$TILDE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TILDE231!=null?TILDE231.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:2628:5: OP_INC
                    {
                    OP_INC232=(Token)match(input,OP_INC,FOLLOW_OP_INC_in_overloadable_unary_operator19152); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2628:19: -> text(value=$OP_INC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_INC232!=null?OP_INC232.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:2629:5: OP_DEC
                    {
                    OP_DEC233=(Token)match(input,OP_DEC,FOLLOW_OP_DEC_in_overloadable_unary_operator19173); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2629:19: -> text(value=$OP_DEC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_DEC233!=null?OP_DEC233.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:2630:5: TRUE
                    {
                    TRUE234=(Token)match(input,TRUE,FOLLOW_TRUE_in_overloadable_unary_operator19194); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2630:19: -> text(value=$TRUE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TRUE234!=null?TRUE234.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:2631:5: FALSE
                    {
                    FALSE235=(Token)match(input,FALSE,FOLLOW_FALSE_in_overloadable_unary_operator19217); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2631:19: -> text(value=$FALSE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FALSE235!=null?FALSE235.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "overloadable_unary_operator"


    public static class binary_operator_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "binary_operator_declarator"
    // CSharp.g:2634:1: binary_operator_declarator : t= type OPERATOR obo= overloadable_binary_operator OPEN_PARENS t2= type id1= IDENTIFIER COMMA t3= type id2= IDENTIFIER CLOSE_PARENS -> binaryOperatorDeclarator(type=tbinryOptr=oboinnerTyp1=t2innerTyp1Nam=$id1.textinnerTyp2=t3innerTyp2Nam=$id2.text);
    public final CSharp.binary_operator_declarator_return binary_operator_declarator() throws RecognitionException {
        CSharp.binary_operator_declarator_return retval = new CSharp.binary_operator_declarator_return();
        retval.start = input.LT(1);


        Token id1=null;
        Token id2=null;
        CSharp.type_return t =null;

        CSharp.overloadable_binary_operator_return obo =null;

        CSharp.type_return t2 =null;

        CSharp.type_return t3 =null;


        try {
            // CSharp.g:2635:2: (t= type OPERATOR obo= overloadable_binary_operator OPEN_PARENS t2= type id1= IDENTIFIER COMMA t3= type id2= IDENTIFIER CLOSE_PARENS -> binaryOperatorDeclarator(type=tbinryOptr=oboinnerTyp1=t2innerTyp1Nam=$id1.textinnerTyp2=t3innerTyp2Nam=$id2.text))
            // CSharp.g:2636:2: t= type OPERATOR obo= overloadable_binary_operator OPEN_PARENS t2= type id1= IDENTIFIER COMMA t3= type id2= IDENTIFIER CLOSE_PARENS
            {
            pushFollow(FOLLOW_type_in_binary_operator_declarator19250);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPERATOR,FOLLOW_OPERATOR_in_binary_operator_declarator19252); if (state.failed) return retval;

            pushFollow(FOLLOW_overloadable_binary_operator_in_binary_operator_declarator19256);
            obo=overloadable_binary_operator();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_binary_operator_declarator19258); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_binary_operator_declarator19262);
            t2=type();

            state._fsp--;
            if (state.failed) return retval;

            id1=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_binary_operator_declarator19266); if (state.failed) return retval;

            match(input,COMMA,FOLLOW_COMMA_in_binary_operator_declarator19268); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_binary_operator_declarator19272);
            t3=type();

            state._fsp--;
            if (state.failed) return retval;

            id2=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_binary_operator_declarator19276); if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_binary_operator_declarator19278); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2637:2: -> binaryOperatorDeclarator(type=tbinryOptr=oboinnerTyp1=t2innerTyp1Nam=$id1.textinnerTyp2=t3innerTyp2Nam=$id2.text)
              {
                  retval.st = templateLib.getInstanceOf("binaryOperatorDeclarator",new STAttrMap().put("type", t).put("binryOptr", obo).put("innerTyp1", t2).put("innerTyp1Nam", (id1!=null?id1.getText():null)).put("innerTyp2", t3).put("innerTyp2Nam", (id2!=null?id2.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "binary_operator_declarator"


    public static class overloadable_binary_operator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "overloadable_binary_operator"
    // CSharp.g:2639:1: overloadable_binary_operator : ( PLUS -> text(value=$PLUS.text)| MINUS -> text(value=$MINUS.text)| STAR -> text(value=$STAR.text)| DIV -> text(value=$DIV.text)| PERCENT -> text(value=$PERCENT.text)| AMP -> text(value=$AMP.text)| BITWISE_OR -> text(value=$BITWISE_OR.text)| CARET -> text(value=$CARET.text)| OP_LEFT_SHIFT -> text(value=$OP_LEFT_SHIFT.text)|rst= right_shift -> text(value=rst)| OP_EQ -> text(value=$OP_EQ.text)| OP_NE -> text(value=$OP_NE.text)| GT -> text(value=$GT.text)| LT -> text(value=$LT.text)| OP_GE -> text(value=$OP_GE.text)| OP_LE -> text(value=$OP_LE.text));
    public final CSharp.overloadable_binary_operator_return overloadable_binary_operator() throws RecognitionException {
        CSharp.overloadable_binary_operator_return retval = new CSharp.overloadable_binary_operator_return();
        retval.start = input.LT(1);


        Token PLUS236=null;
        Token MINUS237=null;
        Token STAR238=null;
        Token DIV239=null;
        Token PERCENT240=null;
        Token AMP241=null;
        Token BITWISE_OR242=null;
        Token CARET243=null;
        Token OP_LEFT_SHIFT244=null;
        Token OP_EQ245=null;
        Token OP_NE246=null;
        Token GT247=null;
        Token LT248=null;
        Token OP_GE249=null;
        Token OP_LE250=null;
        CSharp.right_shift_return rst =null;


        try {
            // CSharp.g:2640:4: ( PLUS -> text(value=$PLUS.text)| MINUS -> text(value=$MINUS.text)| STAR -> text(value=$STAR.text)| DIV -> text(value=$DIV.text)| PERCENT -> text(value=$PERCENT.text)| AMP -> text(value=$AMP.text)| BITWISE_OR -> text(value=$BITWISE_OR.text)| CARET -> text(value=$CARET.text)| OP_LEFT_SHIFT -> text(value=$OP_LEFT_SHIFT.text)|rst= right_shift -> text(value=rst)| OP_EQ -> text(value=$OP_EQ.text)| OP_NE -> text(value=$OP_NE.text)| GT -> text(value=$GT.text)| LT -> text(value=$LT.text)| OP_GE -> text(value=$OP_GE.text)| OP_LE -> text(value=$OP_LE.text))
            int alt268=16;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt268=1;
                }
                break;
            case MINUS:
                {
                alt268=2;
                }
                break;
            case STAR:
                {
                alt268=3;
                }
                break;
            case DIV:
                {
                alt268=4;
                }
                break;
            case PERCENT:
                {
                alt268=5;
                }
                break;
            case AMP:
                {
                alt268=6;
                }
                break;
            case BITWISE_OR:
                {
                alt268=7;
                }
                break;
            case CARET:
                {
                alt268=8;
                }
                break;
            case OP_LEFT_SHIFT:
                {
                alt268=9;
                }
                break;
            case GT:
                {
                int LA268_10 = input.LA(2);

                if ( (LA268_10==GT) ) {
                    alt268=10;
                }
                else if ( (LA268_10==OPEN_PARENS) ) {
                    alt268=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 268, 10, input);

                    throw nvae;

                }
                }
                break;
            case OP_EQ:
                {
                alt268=11;
                }
                break;
            case OP_NE:
                {
                alt268=12;
                }
                break;
            case LT:
                {
                alt268=14;
                }
                break;
            case OP_GE:
                {
                alt268=15;
                }
                break;
            case OP_LE:
                {
                alt268=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 268, 0, input);

                throw nvae;

            }

            switch (alt268) {
                case 1 :
                    // CSharp.g:2641:4: PLUS
                    {
                    PLUS236=(Token)match(input,PLUS,FOLLOW_PLUS_in_overloadable_binary_operator19324); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2641:28: -> text(value=$PLUS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PLUS236!=null?PLUS236.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2642:6: MINUS
                    {
                    MINUS237=(Token)match(input,MINUS,FOLLOW_MINUS_in_overloadable_binary_operator19358); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2642:28: -> text(value=$MINUS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (MINUS237!=null?MINUS237.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2643:6: STAR
                    {
                    STAR238=(Token)match(input,STAR,FOLLOW_STAR_in_overloadable_binary_operator19389); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2643:28: -> text(value=$STAR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STAR238!=null?STAR238.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:2644:6: DIV
                    {
                    DIV239=(Token)match(input,DIV,FOLLOW_DIV_in_overloadable_binary_operator19421); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2644:28: -> text(value=$DIV.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DIV239!=null?DIV239.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:2645:6: PERCENT
                    {
                    PERCENT240=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_overloadable_binary_operator19454); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2645:28: -> text(value=$PERCENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PERCENT240!=null?PERCENT240.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:2646:6: AMP
                    {
                    AMP241=(Token)match(input,AMP,FOLLOW_AMP_in_overloadable_binary_operator19483); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2646:28: -> text(value=$AMP.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (AMP241!=null?AMP241.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:2647:6: BITWISE_OR
                    {
                    BITWISE_OR242=(Token)match(input,BITWISE_OR,FOLLOW_BITWISE_OR_in_overloadable_binary_operator19516); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2647:28: -> text(value=$BITWISE_OR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BITWISE_OR242!=null?BITWISE_OR242.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:2648:6: CARET
                    {
                    CARET243=(Token)match(input,CARET,FOLLOW_CARET_in_overloadable_binary_operator19542); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2648:28: -> text(value=$CARET.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CARET243!=null?CARET243.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:2649:6: OP_LEFT_SHIFT
                    {
                    OP_LEFT_SHIFT244=(Token)match(input,OP_LEFT_SHIFT,FOLLOW_OP_LEFT_SHIFT_in_overloadable_binary_operator19573); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2649:28: -> text(value=$OP_LEFT_SHIFT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_LEFT_SHIFT244!=null?OP_LEFT_SHIFT244.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharp.g:2650:6: rst= right_shift
                    {
                    pushFollow(FOLLOW_right_shift_in_overloadable_binary_operator19598);
                    rst=right_shift();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2650:28: -> text(value=rst)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", rst));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharp.g:2651:6: OP_EQ
                    {
                    OP_EQ245=(Token)match(input,OP_EQ,FOLLOW_OP_EQ_in_overloadable_binary_operator19619); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2651:28: -> text(value=$OP_EQ.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_EQ245!=null?OP_EQ245.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharp.g:2652:6: OP_NE
                    {
                    OP_NE246=(Token)match(input,OP_NE,FOLLOW_OP_NE_in_overloadable_binary_operator19650); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2652:28: -> text(value=$OP_NE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_NE246!=null?OP_NE246.getText():null)));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharp.g:2653:6: GT
                    {
                    GT247=(Token)match(input,GT,FOLLOW_GT_in_overloadable_binary_operator19681); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2653:28: -> text(value=$GT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (GT247!=null?GT247.getText():null)));
                      }


                    }

                    }
                    break;
                case 14 :
                    // CSharp.g:2654:6: LT
                    {
                    LT248=(Token)match(input,LT,FOLLOW_LT_in_overloadable_binary_operator19715); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2654:28: -> text(value=$LT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (LT248!=null?LT248.getText():null)));
                      }


                    }

                    }
                    break;
                case 15 :
                    // CSharp.g:2655:6: OP_GE
                    {
                    OP_GE249=(Token)match(input,OP_GE,FOLLOW_OP_GE_in_overloadable_binary_operator19749); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2655:28: -> text(value=$OP_GE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_GE249!=null?OP_GE249.getText():null)));
                      }


                    }

                    }
                    break;
                case 16 :
                    // CSharp.g:2656:6: OP_LE
                    {
                    OP_LE250=(Token)match(input,OP_LE,FOLLOW_OP_LE_in_overloadable_binary_operator19780); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2656:28: -> text(value=$OP_LE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_LE250!=null?OP_LE250.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "overloadable_binary_operator"


    public static class overloadable_operator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "overloadable_operator"
    // CSharp.g:2661:1: overloadable_operator : ( PLUS -> text(value=$PLUS.text)| MINUS -> text(value=$MINUS.text)| BANG -> text(value=$BANG.text)| TILDE -> text(value=$TILDE.text)| OP_INC -> text(value=$OP_INC.text)| OP_DEC -> text(value=$OP_DEC.text)| TRUE -> text(value=$TRUE.text)| FALSE -> text(value=$FALSE.text)| STAR -> text(value=$STAR.text)| DIV -> text(value=$DIV.text)| PERCENT -> text(value=$PERCENT.text)| AMP -> text(value=$AMP.text)| BITWISE_OR -> text(value=$BITWISE_OR.text)| CARET -> text(value=$CARET.text)| OP_LEFT_SHIFT -> text(value=$OP_LEFT_SHIFT.text)|rst= right_shift -> text(value=rst)| OP_EQ -> text(value=$OP_EQ.text)| OP_NE -> text(value=$OP_NE.text)| GT -> text(value=$GT.text)| LT -> text(value=$LT.text)| OP_GE -> text(value=$OP_GE.text)| OP_LE -> text(value=$OP_LE.text));
    public final CSharp.overloadable_operator_return overloadable_operator() throws RecognitionException {
        CSharp.overloadable_operator_return retval = new CSharp.overloadable_operator_return();
        retval.start = input.LT(1);


        Token PLUS251=null;
        Token MINUS252=null;
        Token BANG253=null;
        Token TILDE254=null;
        Token OP_INC255=null;
        Token OP_DEC256=null;
        Token TRUE257=null;
        Token FALSE258=null;
        Token STAR259=null;
        Token DIV260=null;
        Token PERCENT261=null;
        Token AMP262=null;
        Token BITWISE_OR263=null;
        Token CARET264=null;
        Token OP_LEFT_SHIFT265=null;
        Token OP_EQ266=null;
        Token OP_NE267=null;
        Token GT268=null;
        Token LT269=null;
        Token OP_GE270=null;
        Token OP_LE271=null;
        CSharp.right_shift_return rst =null;


        try {
            // CSharp.g:2662:3: ( PLUS -> text(value=$PLUS.text)| MINUS -> text(value=$MINUS.text)| BANG -> text(value=$BANG.text)| TILDE -> text(value=$TILDE.text)| OP_INC -> text(value=$OP_INC.text)| OP_DEC -> text(value=$OP_DEC.text)| TRUE -> text(value=$TRUE.text)| FALSE -> text(value=$FALSE.text)| STAR -> text(value=$STAR.text)| DIV -> text(value=$DIV.text)| PERCENT -> text(value=$PERCENT.text)| AMP -> text(value=$AMP.text)| BITWISE_OR -> text(value=$BITWISE_OR.text)| CARET -> text(value=$CARET.text)| OP_LEFT_SHIFT -> text(value=$OP_LEFT_SHIFT.text)|rst= right_shift -> text(value=rst)| OP_EQ -> text(value=$OP_EQ.text)| OP_NE -> text(value=$OP_NE.text)| GT -> text(value=$GT.text)| LT -> text(value=$LT.text)| OP_GE -> text(value=$OP_GE.text)| OP_LE -> text(value=$OP_LE.text))
            int alt269=22;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt269=1;
                }
                break;
            case MINUS:
                {
                alt269=2;
                }
                break;
            case BANG:
                {
                alt269=3;
                }
                break;
            case TILDE:
                {
                alt269=4;
                }
                break;
            case OP_INC:
                {
                alt269=5;
                }
                break;
            case OP_DEC:
                {
                alt269=6;
                }
                break;
            case TRUE:
                {
                alt269=7;
                }
                break;
            case FALSE:
                {
                alt269=8;
                }
                break;
            case STAR:
                {
                alt269=9;
                }
                break;
            case DIV:
                {
                alt269=10;
                }
                break;
            case PERCENT:
                {
                alt269=11;
                }
                break;
            case AMP:
                {
                alt269=12;
                }
                break;
            case BITWISE_OR:
                {
                alt269=13;
                }
                break;
            case CARET:
                {
                alt269=14;
                }
                break;
            case OP_LEFT_SHIFT:
                {
                alt269=15;
                }
                break;
            case GT:
                {
                int LA269_16 = input.LA(2);

                if ( (LA269_16==GT) ) {
                    alt269=16;
                }
                else if ( (LA269_16==OPEN_PARENS) ) {
                    alt269=19;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 269, 16, input);

                    throw nvae;

                }
                }
                break;
            case OP_EQ:
                {
                alt269=17;
                }
                break;
            case OP_NE:
                {
                alt269=18;
                }
                break;
            case LT:
                {
                alt269=20;
                }
                break;
            case OP_GE:
                {
                alt269=21;
                }
                break;
            case OP_LE:
                {
                alt269=22;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 269, 0, input);

                throw nvae;

            }

            switch (alt269) {
                case 1 :
                    // CSharp.g:2662:5: PLUS
                    {
                    PLUS251=(Token)match(input,PLUS,FOLLOW_PLUS_in_overloadable_operator19821); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2662:29: -> text(value=$PLUS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PLUS251!=null?PLUS251.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2663:5: MINUS
                    {
                    MINUS252=(Token)match(input,MINUS,FOLLOW_MINUS_in_overloadable_operator19854); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2663:29: -> text(value=$MINUS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (MINUS252!=null?MINUS252.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2664:5: BANG
                    {
                    BANG253=(Token)match(input,BANG,FOLLOW_BANG_in_overloadable_operator19886); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2664:29: -> text(value=$BANG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BANG253!=null?BANG253.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:2665:5: TILDE
                    {
                    TILDE254=(Token)match(input,TILDE,FOLLOW_TILDE_in_overloadable_operator19919); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2665:29: -> text(value=$TILDE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TILDE254!=null?TILDE254.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:2666:5: OP_INC
                    {
                    OP_INC255=(Token)match(input,OP_INC,FOLLOW_OP_INC_in_overloadable_operator19951); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2666:29: -> text(value=$OP_INC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_INC255!=null?OP_INC255.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:2667:5: OP_DEC
                    {
                    OP_DEC256=(Token)match(input,OP_DEC,FOLLOW_OP_DEC_in_overloadable_operator19982); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2667:29: -> text(value=$OP_DEC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_DEC256!=null?OP_DEC256.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:2668:5: TRUE
                    {
                    TRUE257=(Token)match(input,TRUE,FOLLOW_TRUE_in_overloadable_operator20013); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2668:29: -> text(value=$TRUE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TRUE257!=null?TRUE257.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:2669:5: FALSE
                    {
                    FALSE258=(Token)match(input,FALSE,FOLLOW_FALSE_in_overloadable_operator20046); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2669:29: -> text(value=$FALSE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FALSE258!=null?FALSE258.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:2670:5: STAR
                    {
                    STAR259=(Token)match(input,STAR,FOLLOW_STAR_in_overloadable_operator20078); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2670:29: -> text(value=$STAR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STAR259!=null?STAR259.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharp.g:2671:5: DIV
                    {
                    DIV260=(Token)match(input,DIV,FOLLOW_DIV_in_overloadable_operator20111); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2671:29: -> text(value=$DIV.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DIV260!=null?DIV260.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharp.g:2672:5: PERCENT
                    {
                    PERCENT261=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_overloadable_operator20145); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2672:29: -> text(value=$PERCENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PERCENT261!=null?PERCENT261.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharp.g:2673:5: AMP
                    {
                    AMP262=(Token)match(input,AMP,FOLLOW_AMP_in_overloadable_operator20175); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2673:29: -> text(value=$AMP.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (AMP262!=null?AMP262.getText():null)));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharp.g:2674:5: BITWISE_OR
                    {
                    BITWISE_OR263=(Token)match(input,BITWISE_OR,FOLLOW_BITWISE_OR_in_overloadable_operator20209); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2674:29: -> text(value=$BITWISE_OR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BITWISE_OR263!=null?BITWISE_OR263.getText():null)));
                      }


                    }

                    }
                    break;
                case 14 :
                    // CSharp.g:2675:5: CARET
                    {
                    CARET264=(Token)match(input,CARET,FOLLOW_CARET_in_overloadable_operator20236); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2675:29: -> text(value=$CARET.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CARET264!=null?CARET264.getText():null)));
                      }


                    }

                    }
                    break;
                case 15 :
                    // CSharp.g:2676:5: OP_LEFT_SHIFT
                    {
                    OP_LEFT_SHIFT265=(Token)match(input,OP_LEFT_SHIFT,FOLLOW_OP_LEFT_SHIFT_in_overloadable_operator20268); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2676:29: -> text(value=$OP_LEFT_SHIFT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_LEFT_SHIFT265!=null?OP_LEFT_SHIFT265.getText():null)));
                      }


                    }

                    }
                    break;
                case 16 :
                    // CSharp.g:2677:5: rst= right_shift
                    {
                    pushFollow(FOLLOW_right_shift_in_overloadable_operator20294);
                    rst=right_shift();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2677:29: -> text(value=rst)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", rst));
                      }


                    }

                    }
                    break;
                case 17 :
                    // CSharp.g:2678:5: OP_EQ
                    {
                    OP_EQ266=(Token)match(input,OP_EQ,FOLLOW_OP_EQ_in_overloadable_operator20316); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2678:29: -> text(value=$OP_EQ.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_EQ266!=null?OP_EQ266.getText():null)));
                      }


                    }

                    }
                    break;
                case 18 :
                    // CSharp.g:2679:5: OP_NE
                    {
                    OP_NE267=(Token)match(input,OP_NE,FOLLOW_OP_NE_in_overloadable_operator20348); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2679:29: -> text(value=$OP_NE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_NE267!=null?OP_NE267.getText():null)));
                      }


                    }

                    }
                    break;
                case 19 :
                    // CSharp.g:2680:5: GT
                    {
                    GT268=(Token)match(input,GT,FOLLOW_GT_in_overloadable_operator20380); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2680:29: -> text(value=$GT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (GT268!=null?GT268.getText():null)));
                      }


                    }

                    }
                    break;
                case 20 :
                    // CSharp.g:2681:5: LT
                    {
                    LT269=(Token)match(input,LT,FOLLOW_LT_in_overloadable_operator20415); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2681:29: -> text(value=$LT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (LT269!=null?LT269.getText():null)));
                      }


                    }

                    }
                    break;
                case 21 :
                    // CSharp.g:2682:5: OP_GE
                    {
                    OP_GE270=(Token)match(input,OP_GE,FOLLOW_OP_GE_in_overloadable_operator20450); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2682:29: -> text(value=$OP_GE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_GE270!=null?OP_GE270.getText():null)));
                      }


                    }

                    }
                    break;
                case 22 :
                    // CSharp.g:2683:5: OP_LE
                    {
                    OP_LE271=(Token)match(input,OP_LE,FOLLOW_OP_LE_in_overloadable_operator20482); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2683:29: -> text(value=$OP_LE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OP_LE271!=null?OP_LE271.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "overloadable_operator"


    public static class conversion_operator_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "conversion_operator_declarator"
    // CSharp.g:2687:1: conversion_operator_declarator : (kwd1= IMPLICIT OPERATOR t1= type OPEN_PARENS innerTyp1= type innerTyp1Nam= IDENTIFIER CLOSE_PARENS -> conversionOperatorDeclarator(keyWrd=$kwd1.texttype1=t1innerType1=innerTyp1innerTyp1Name=$innerTyp1Nam.text)|kwd2= EXPLICIT OPERATOR t2= type OPEN_PARENS innerTyp2= type innerTyp2Nam= IDENTIFIER CLOSE_PARENS -> conversionOperatorDeclarator(keyWrd=$kwd2.texttype1=t2innerType1=innerTyp2innerTyp1Name=$innerTyp2Nam.text));
    public final CSharp.conversion_operator_declarator_return conversion_operator_declarator() throws RecognitionException {
        CSharp.conversion_operator_declarator_return retval = new CSharp.conversion_operator_declarator_return();
        retval.start = input.LT(1);


        Token kwd1=null;
        Token innerTyp1Nam=null;
        Token kwd2=null;
        Token innerTyp2Nam=null;
        CSharp.type_return t1 =null;

        CSharp.type_return innerTyp1 =null;

        CSharp.type_return t2 =null;

        CSharp.type_return innerTyp2 =null;


        try {
            // CSharp.g:2688:2: (kwd1= IMPLICIT OPERATOR t1= type OPEN_PARENS innerTyp1= type innerTyp1Nam= IDENTIFIER CLOSE_PARENS -> conversionOperatorDeclarator(keyWrd=$kwd1.texttype1=t1innerType1=innerTyp1innerTyp1Name=$innerTyp1Nam.text)|kwd2= EXPLICIT OPERATOR t2= type OPEN_PARENS innerTyp2= type innerTyp2Nam= IDENTIFIER CLOSE_PARENS -> conversionOperatorDeclarator(keyWrd=$kwd2.texttype1=t2innerType1=innerTyp2innerTyp1Name=$innerTyp2Nam.text))
            int alt270=2;
            int LA270_0 = input.LA(1);

            if ( (LA270_0==IMPLICIT) ) {
                alt270=1;
            }
            else if ( (LA270_0==EXPLICIT) ) {
                alt270=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 0, input);

                throw nvae;

            }
            switch (alt270) {
                case 1 :
                    // CSharp.g:2689:2: kwd1= IMPLICIT OPERATOR t1= type OPEN_PARENS innerTyp1= type innerTyp1Nam= IDENTIFIER CLOSE_PARENS
                    {
                    kwd1=(Token)match(input,IMPLICIT,FOLLOW_IMPLICIT_in_conversion_operator_declarator20526); if (state.failed) return retval;

                    match(input,OPERATOR,FOLLOW_OPERATOR_in_conversion_operator_declarator20528); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_conversion_operator_declarator20532);
                    t1=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_conversion_operator_declarator20534); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_conversion_operator_declarator20538);
                    innerTyp1=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    innerTyp1Nam=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_conversion_operator_declarator20542); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_conversion_operator_declarator20544); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2690:2: -> conversionOperatorDeclarator(keyWrd=$kwd1.texttype1=t1innerType1=innerTyp1innerTyp1Name=$innerTyp1Nam.text)
                      {
                          retval.st = templateLib.getInstanceOf("conversionOperatorDeclarator",new STAttrMap().put("keyWrd", (kwd1!=null?kwd1.getText():null)).put("type1", t1).put("innerType1", innerTyp1).put("innerTyp1Name", (innerTyp1Nam!=null?innerTyp1Nam.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2691:4: kwd2= EXPLICIT OPERATOR t2= type OPEN_PARENS innerTyp2= type innerTyp2Nam= IDENTIFIER CLOSE_PARENS
                    {
                    kwd2=(Token)match(input,EXPLICIT,FOLLOW_EXPLICIT_in_conversion_operator_declarator20572); if (state.failed) return retval;

                    match(input,OPERATOR,FOLLOW_OPERATOR_in_conversion_operator_declarator20574); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_conversion_operator_declarator20578);
                    t2=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_conversion_operator_declarator20580); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_conversion_operator_declarator20584);
                    innerTyp2=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    innerTyp2Nam=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_conversion_operator_declarator20588); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_conversion_operator_declarator20590); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2692:2: -> conversionOperatorDeclarator(keyWrd=$kwd2.texttype1=t2innerType1=innerTyp2innerTyp1Name=$innerTyp2Nam.text)
                      {
                          retval.st = templateLib.getInstanceOf("conversionOperatorDeclarator",new STAttrMap().put("keyWrd", (kwd2!=null?kwd2.getText():null)).put("type1", t2).put("innerType1", innerTyp2).put("innerTyp1Name", (innerTyp2Nam!=null?innerTyp2Nam.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conversion_operator_declarator"


    public static class operator_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_body"
    // CSharp.g:2694:1: operator_body : (blk= block -> text(value=blk)| SEMICOLON -> text(value=$SEMICOLON.text));
    public final CSharp.operator_body_return operator_body() throws RecognitionException {
        CSharp.operator_body_return retval = new CSharp.operator_body_return();
        retval.start = input.LT(1);


        Token SEMICOLON272=null;
        CSharp.block_return blk =null;


        try {
            // CSharp.g:2695:4: (blk= block -> text(value=blk)| SEMICOLON -> text(value=$SEMICOLON.text))
            int alt271=2;
            int LA271_0 = input.LA(1);

            if ( (LA271_0==OPEN_BRACE) ) {
                alt271=1;
            }
            else if ( (LA271_0==SEMICOLON) ) {
                alt271=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);

                throw nvae;

            }
            switch (alt271) {
                case 1 :
                    // CSharp.g:2696:4: blk= block
                    {
                    pushFollow(FOLLOW_block_in_operator_body20630);
                    blk=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2696:20: -> text(value=blk)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", blk));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2697:6: SEMICOLON
                    {
                    SEMICOLON272=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_operator_body20651); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2697:20: -> text(value=$SEMICOLON.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEMICOLON272!=null?SEMICOLON272.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_body"


    public static class constructor_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_declaration"
    // CSharp.g:2700:1: constructor_declaration : (at= attributes )? (cm= constructor_modifiers )? cd= constructor_declarator cb= constructor_body -> constructorDeclaration(attributes=atmodfs=cmdecl=cdbody=cb);
    public final CSharp.constructor_declaration_return constructor_declaration() throws RecognitionException {
        CSharp.constructor_declaration_return retval = new CSharp.constructor_declaration_return();
        retval.start = input.LT(1);


        CSharp.attributes_return at =null;

        CSharp.constructor_modifiers_return cm =null;

        CSharp.constructor_declarator_return cd =null;

        CSharp.constructor_body_return cb =null;


        try {
            // CSharp.g:2701:2: ( (at= attributes )? (cm= constructor_modifiers )? cd= constructor_declarator cb= constructor_body -> constructorDeclaration(attributes=atmodfs=cmdecl=cdbody=cb))
            // CSharp.g:2702:2: (at= attributes )? (cm= constructor_modifiers )? cd= constructor_declarator cb= constructor_body
            {
            // CSharp.g:2702:2: (at= attributes )?
            int alt272=2;
            int LA272_0 = input.LA(1);

            if ( (LA272_0==OPEN_BRACKET) ) {
                alt272=1;
            }
            switch (alt272) {
                case 1 :
                    // CSharp.g:2702:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_constructor_declaration20682);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2702:19: (cm= constructor_modifiers )?
            int alt273=2;
            int LA273_0 = input.LA(1);

            if ( (LA273_0==EXTERN||LA273_0==INTERNAL||(LA273_0 >= PRIVATE && LA273_0 <= PUBLIC)||LA273_0==UNSAFE) ) {
                alt273=1;
            }
            switch (alt273) {
                case 1 :
                    // CSharp.g:2702:20: cm= constructor_modifiers
                    {
                    pushFollow(FOLLOW_constructor_modifiers_in_constructor_declaration20689);
                    cm=constructor_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_constructor_declarator_in_constructor_declaration20695);
            cd=constructor_declarator();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_constructor_body_in_constructor_declaration20699);
            cb=constructor_body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2703:2: -> constructorDeclaration(attributes=atmodfs=cmdecl=cdbody=cb)
              {
                  retval.st = templateLib.getInstanceOf("constructorDeclaration",new STAttrMap().put("attributes", at).put("modfs", cm).put("decl", cd).put("body", cb));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_declaration"


    public static class constructor_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_modifiers"
    // CSharp.g:2705:1: constructor_modifiers : (lst+= constructor_modifier )+ -> constructorModifiers(list=$lst);
    public final CSharp.constructor_modifiers_return constructor_modifiers() throws RecognitionException {
        CSharp.constructor_modifiers_return retval = new CSharp.constructor_modifiers_return();
        retval.start = input.LT(1);


        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharp.g:2706:2: ( (lst+= constructor_modifier )+ -> constructorModifiers(list=$lst))
            // CSharp.g:2707:2: (lst+= constructor_modifier )+
            {
            // CSharp.g:2707:2: (lst+= constructor_modifier )+
            int cnt274=0;
            loop274:
            do {
                int alt274=2;
                int LA274_0 = input.LA(1);

                if ( (LA274_0==EXTERN||LA274_0==INTERNAL||(LA274_0 >= PRIVATE && LA274_0 <= PUBLIC)||LA274_0==UNSAFE) ) {
                    alt274=1;
                }


                switch (alt274) {
            	case 1 :
            	    // CSharp.g:2707:3: lst+= constructor_modifier
            	    {
            	    pushFollow(FOLLOW_constructor_modifier_in_constructor_modifiers20736);
            	    lst=constructor_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt274 >= 1 ) break loop274;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(274, input);
                        throw eee;
                }
                cnt274++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2708:2: -> constructorModifiers(list=$lst)
              {
                  retval.st = templateLib.getInstanceOf("constructorModifiers",new STAttrMap().put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_modifiers"


    public static class constructor_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_modifier"
    // CSharp.g:2710:1: constructor_modifier : ( PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)| EXTERN -> text(value=$EXTERN.text)|consmd= constructor_modifier_unsafe -> text(value=consmd));
    public final CSharp.constructor_modifier_return constructor_modifier() throws RecognitionException {
        CSharp.constructor_modifier_return retval = new CSharp.constructor_modifier_return();
        retval.start = input.LT(1);


        Token PUBLIC273=null;
        Token PROTECTED274=null;
        Token PRIVATE275=null;
        Token EXTERN276=null;
        CSharp.constructor_modifier_unsafe_return consmd =null;


        try {
            // CSharp.g:2711:3: ( PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)| EXTERN -> text(value=$EXTERN.text)|consmd= constructor_modifier_unsafe -> text(value=consmd))
            int alt275=6;
            switch ( input.LA(1) ) {
            case PUBLIC:
                {
                alt275=1;
                }
                break;
            case PROTECTED:
                {
                alt275=2;
                }
                break;
            case INTERNAL:
                {
                alt275=3;
                }
                break;
            case PRIVATE:
                {
                alt275=4;
                }
                break;
            case EXTERN:
                {
                alt275=5;
                }
                break;
            case UNSAFE:
                {
                alt275=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 275, 0, input);

                throw nvae;

            }

            switch (alt275) {
                case 1 :
                    // CSharp.g:2712:3: PUBLIC
                    {
                    PUBLIC273=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_constructor_modifier20762); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2712:45: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC273!=null?PUBLIC273.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2713:5: PROTECTED
                    {
                    PROTECTED274=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_constructor_modifier20811); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2713:45: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED274!=null?PROTECTED274.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2714:5: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_constructor_modifier20855); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2714:45: -> text(value=\"private\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "private"));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:2715:5: PRIVATE
                    {
                    PRIVATE275=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_constructor_modifier20900); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2715:45: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE275!=null?PRIVATE275.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:2716:5: EXTERN
                    {
                    EXTERN276=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_constructor_modifier20946); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2716:45: -> text(value=$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXTERN276!=null?EXTERN276.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:2717:5: consmd= constructor_modifier_unsafe
                    {
                    pushFollow(FOLLOW_constructor_modifier_unsafe_in_constructor_modifier20995);
                    consmd=constructor_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2717:45: -> text(value=consmd)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", consmd));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_modifier"


    public static class constructor_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_declarator"
    // CSharp.g:2719:1: constructor_declarator : IDENTIFIER OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (ci= constructor_initializer )? -> constructorDeclarator(declNam=$IDENTIFIER.textformlParLst=fplconstrInit=ci);
    public final CSharp.constructor_declarator_return constructor_declarator() throws RecognitionException {
        CSharp.constructor_declarator_return retval = new CSharp.constructor_declarator_return();
        retval.start = input.LT(1);


        Token IDENTIFIER277=null;
        CSharp.formal_parameter_list_return fpl =null;

        CSharp.constructor_initializer_return ci =null;


        try {
            // CSharp.g:2720:2: ( IDENTIFIER OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (ci= constructor_initializer )? -> constructorDeclarator(declNam=$IDENTIFIER.textformlParLst=fplconstrInit=ci))
            // CSharp.g:2721:2: IDENTIFIER OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (ci= constructor_initializer )?
            {
            IDENTIFIER277=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_constructor_declarator21022); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_constructor_declarator21024); if (state.failed) return retval;

            // CSharp.g:2721:25: (fpl= formal_parameter_list )?
            int alt276=2;
            int LA276_0 = input.LA(1);

            if ( (LA276_0==BOOL||LA276_0==BYTE||LA276_0==CHAR||LA276_0==DECIMAL||LA276_0==DOUBLE||LA276_0==FLOAT||LA276_0==IDENTIFIER||LA276_0==INT||LA276_0==LONG||LA276_0==OBJECT||LA276_0==OPEN_BRACKET||LA276_0==OUT||LA276_0==PARAMS||LA276_0==REF||LA276_0==SBYTE||LA276_0==SHORT||LA276_0==STRING||LA276_0==THIS||(LA276_0 >= UINT && LA276_0 <= ULONG)||LA276_0==USHORT||LA276_0==VOID) ) {
                alt276=1;
            }
            switch (alt276) {
                case 1 :
                    // CSharp.g:2721:26: fpl= formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_constructor_declarator21029);
                    fpl=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_constructor_declarator21033); if (state.failed) return retval;

            // CSharp.g:2721:67: (ci= constructor_initializer )?
            int alt277=2;
            int LA277_0 = input.LA(1);

            if ( (LA277_0==COLON) ) {
                alt277=1;
            }
            switch (alt277) {
                case 1 :
                    // CSharp.g:2721:68: ci= constructor_initializer
                    {
                    pushFollow(FOLLOW_constructor_initializer_in_constructor_declarator21038);
                    ci=constructor_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2722:2: -> constructorDeclarator(declNam=$IDENTIFIER.textformlParLst=fplconstrInit=ci)
              {
                  retval.st = templateLib.getInstanceOf("constructorDeclarator",new STAttrMap().put("declNam", (IDENTIFIER277!=null?IDENTIFIER277.getText():null)).put("formlParLst", fpl).put("constrInit", ci));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_declarator"


    public static class constructor_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_initializer"
    // CSharp.g:2724:1: constructor_initializer : ( COLON BASE OPEN_PARENS (al= argument_list )? CLOSE_PARENS -> constructorInitializer(kwd=$BASE.textargList=al)| COLON THIS OPEN_PARENS ( argument_list )? CLOSE_PARENS -> constructorInitializer(kwd=$THIS.textargList=al));
    public final CSharp.constructor_initializer_return constructor_initializer() throws RecognitionException {
        CSharp.constructor_initializer_return retval = new CSharp.constructor_initializer_return();
        retval.start = input.LT(1);


        Token BASE278=null;
        Token THIS279=null;
        CSharp.argument_list_return al =null;


        try {
            // CSharp.g:2725:2: ( COLON BASE OPEN_PARENS (al= argument_list )? CLOSE_PARENS -> constructorInitializer(kwd=$BASE.textargList=al)| COLON THIS OPEN_PARENS ( argument_list )? CLOSE_PARENS -> constructorInitializer(kwd=$THIS.textargList=al))
            int alt280=2;
            int LA280_0 = input.LA(1);

            if ( (LA280_0==COLON) ) {
                int LA280_1 = input.LA(2);

                if ( (LA280_1==BASE) ) {
                    alt280=1;
                }
                else if ( (LA280_1==THIS) ) {
                    alt280=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 280, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 280, 0, input);

                throw nvae;

            }
            switch (alt280) {
                case 1 :
                    // CSharp.g:2726:2: COLON BASE OPEN_PARENS (al= argument_list )? CLOSE_PARENS
                    {
                    match(input,COLON,FOLLOW_COLON_in_constructor_initializer21070); if (state.failed) return retval;

                    BASE278=(Token)match(input,BASE,FOLLOW_BASE_in_constructor_initializer21072); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_constructor_initializer21074); if (state.failed) return retval;

                    // CSharp.g:2726:25: (al= argument_list )?
                    int alt278=2;
                    int LA278_0 = input.LA(1);

                    if ( (LA278_0==AMP||(LA278_0 >= BANG && LA278_0 <= BASE)||LA278_0==BOOL||LA278_0==BYTE||(LA278_0 >= CHAR && LA278_0 <= CHECKED)||LA278_0==DECIMAL||(LA278_0 >= DEFAULT && LA278_0 <= DELEGATE)||LA278_0==DOUBLE||LA278_0==FALSE||LA278_0==FLOAT||LA278_0==IDENTIFIER||(LA278_0 >= INT && LA278_0 <= INTEGER_LITERAL)||LA278_0==LONG||LA278_0==MINUS||LA278_0==NEW||LA278_0==NULL||LA278_0==OBJECT||LA278_0==OPEN_PARENS||LA278_0==OP_DEC||LA278_0==OP_INC||LA278_0==OUT||LA278_0==PLUS||(LA278_0 >= REAL_LITERAL && LA278_0 <= REF)||LA278_0==SBYTE||LA278_0==SHORT||LA278_0==SIZEOF||LA278_0==STAR||(LA278_0 >= STRING && LA278_0 <= STRING_LITERAL)||LA278_0==THIS||(LA278_0 >= TILDE && LA278_0 <= TRUE)||LA278_0==TYPEOF||(LA278_0 >= UINT && LA278_0 <= UNCHECKED)||LA278_0==USHORT) ) {
                        alt278=1;
                    }
                    switch (alt278) {
                        case 1 :
                            // CSharp.g:2726:26: al= argument_list
                            {
                            pushFollow(FOLLOW_argument_list_in_constructor_initializer21079);
                            al=argument_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_constructor_initializer21083); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2727:2: -> constructorInitializer(kwd=$BASE.textargList=al)
                      {
                          retval.st = templateLib.getInstanceOf("constructorInitializer",new STAttrMap().put("kwd", (BASE278!=null?BASE278.getText():null)).put("argList", al));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2728:4: COLON THIS OPEN_PARENS ( argument_list )? CLOSE_PARENS
                    {
                    match(input,COLON,FOLLOW_COLON_in_constructor_initializer21101); if (state.failed) return retval;

                    THIS279=(Token)match(input,THIS,FOLLOW_THIS_in_constructor_initializer21103); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_constructor_initializer21105); if (state.failed) return retval;

                    // CSharp.g:2728:27: ( argument_list )?
                    int alt279=2;
                    int LA279_0 = input.LA(1);

                    if ( (LA279_0==AMP||(LA279_0 >= BANG && LA279_0 <= BASE)||LA279_0==BOOL||LA279_0==BYTE||(LA279_0 >= CHAR && LA279_0 <= CHECKED)||LA279_0==DECIMAL||(LA279_0 >= DEFAULT && LA279_0 <= DELEGATE)||LA279_0==DOUBLE||LA279_0==FALSE||LA279_0==FLOAT||LA279_0==IDENTIFIER||(LA279_0 >= INT && LA279_0 <= INTEGER_LITERAL)||LA279_0==LONG||LA279_0==MINUS||LA279_0==NEW||LA279_0==NULL||LA279_0==OBJECT||LA279_0==OPEN_PARENS||LA279_0==OP_DEC||LA279_0==OP_INC||LA279_0==OUT||LA279_0==PLUS||(LA279_0 >= REAL_LITERAL && LA279_0 <= REF)||LA279_0==SBYTE||LA279_0==SHORT||LA279_0==SIZEOF||LA279_0==STAR||(LA279_0 >= STRING && LA279_0 <= STRING_LITERAL)||LA279_0==THIS||(LA279_0 >= TILDE && LA279_0 <= TRUE)||LA279_0==TYPEOF||(LA279_0 >= UINT && LA279_0 <= UNCHECKED)||LA279_0==USHORT) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            // CSharp.g:2728:27: argument_list
                            {
                            pushFollow(FOLLOW_argument_list_in_constructor_initializer21107);
                            argument_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_constructor_initializer21110); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2729:2: -> constructorInitializer(kwd=$THIS.textargList=al)
                      {
                          retval.st = templateLib.getInstanceOf("constructorInitializer",new STAttrMap().put("kwd", (THIS279!=null?THIS279.getText():null)).put("argList", al));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_initializer"


    public static class constructor_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_body"
    // CSharp.g:2731:1: constructor_body : (blk= block -> text(value=blk)| SEMICOLON -> text(value=$SEMICOLON.text));
    public final CSharp.constructor_body_return constructor_body() throws RecognitionException {
        CSharp.constructor_body_return retval = new CSharp.constructor_body_return();
        retval.start = input.LT(1);


        Token SEMICOLON280=null;
        CSharp.block_return blk =null;


        try {
            // CSharp.g:2732:3: (blk= block -> text(value=blk)| SEMICOLON -> text(value=$SEMICOLON.text))
            int alt281=2;
            int LA281_0 = input.LA(1);

            if ( (LA281_0==OPEN_BRACE) ) {
                alt281=1;
            }
            else if ( (LA281_0==SEMICOLON) ) {
                alt281=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 281, 0, input);

                throw nvae;

            }
            switch (alt281) {
                case 1 :
                    // CSharp.g:2733:3: blk= block
                    {
                    pushFollow(FOLLOW_block_in_constructor_body21140);
                    blk=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2733:22: -> text(value=blk)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", blk));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2734:5: SEMICOLON
                    {
                    SEMICOLON280=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_constructor_body21163); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2734:22: -> text(value=$SEMICOLON.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEMICOLON280!=null?SEMICOLON280.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_body"


    public static class static_constructor_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "static_constructor_declaration"
    // CSharp.g:2737:1: static_constructor_declaration : (at= attributes )? scm= static_constructor_modifiers IDENTIFIER OPEN_PARENS CLOSE_PARENS scb= static_constructor_body -> staticConstructorDeclaration(attributes=atmodfs=scmconNam=$IDENTIFIER.textconBody=scb);
    public final CSharp.static_constructor_declaration_return static_constructor_declaration() throws RecognitionException {
        CSharp.static_constructor_declaration_return retval = new CSharp.static_constructor_declaration_return();
        retval.start = input.LT(1);


        Token IDENTIFIER281=null;
        CSharp.attributes_return at =null;

        CSharp.static_constructor_modifiers_return scm =null;

        CSharp.static_constructor_body_return scb =null;


        try {
            // CSharp.g:2738:2: ( (at= attributes )? scm= static_constructor_modifiers IDENTIFIER OPEN_PARENS CLOSE_PARENS scb= static_constructor_body -> staticConstructorDeclaration(attributes=atmodfs=scmconNam=$IDENTIFIER.textconBody=scb))
            // CSharp.g:2739:2: (at= attributes )? scm= static_constructor_modifiers IDENTIFIER OPEN_PARENS CLOSE_PARENS scb= static_constructor_body
            {
            // CSharp.g:2739:2: (at= attributes )?
            int alt282=2;
            int LA282_0 = input.LA(1);

            if ( (LA282_0==OPEN_BRACKET) ) {
                alt282=1;
            }
            switch (alt282) {
                case 1 :
                    // CSharp.g:2739:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_static_constructor_declaration21196);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_static_constructor_modifiers_in_static_constructor_declaration21202);
            scm=static_constructor_modifiers();

            state._fsp--;
            if (state.failed) return retval;

            IDENTIFIER281=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_static_constructor_declaration21204); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_static_constructor_declaration21206); if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_static_constructor_declaration21208); if (state.failed) return retval;

            pushFollow(FOLLOW_static_constructor_body_in_static_constructor_declaration21212);
            scb=static_constructor_body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2740:2: -> staticConstructorDeclaration(attributes=atmodfs=scmconNam=$IDENTIFIER.textconBody=scb)
              {
                  retval.st = templateLib.getInstanceOf("staticConstructorDeclaration",new STAttrMap().put("attributes", at).put("modfs", scm).put("conNam", (IDENTIFIER281!=null?IDENTIFIER281.getText():null)).put("conBody", scb));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_constructor_declaration"


    public static class static_constructor_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "static_constructor_modifiers"
    // CSharp.g:2749:1: static_constructor_modifiers : modfs= static_constructor_modifiers_unsafe -> staticConstructorModifiers(modifiers=modfs);
    public final CSharp.static_constructor_modifiers_return static_constructor_modifiers() throws RecognitionException {
        CSharp.static_constructor_modifiers_return retval = new CSharp.static_constructor_modifiers_return();
        retval.start = input.LT(1);


        CSharp.static_constructor_modifiers_unsafe_return modfs =null;


        try {
            // CSharp.g:2750:3: (modfs= static_constructor_modifiers_unsafe -> staticConstructorModifiers(modifiers=modfs))
            // CSharp.g:2751:3: modfs= static_constructor_modifiers_unsafe
            {
            pushFollow(FOLLOW_static_constructor_modifiers_unsafe_in_static_constructor_modifiers21252);
            modfs=static_constructor_modifiers_unsafe();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2752:3: -> staticConstructorModifiers(modifiers=modfs)
              {
                  retval.st = templateLib.getInstanceOf("staticConstructorModifiers",new STAttrMap().put("modifiers", modfs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_constructor_modifiers"


    public static class static_constructor_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "static_constructor_body"
    // CSharp.g:2754:1: static_constructor_body : (blk= block -> text(value=blk)| SEMICOLON -> text(value=$SEMICOLON.text));
    public final CSharp.static_constructor_body_return static_constructor_body() throws RecognitionException {
        CSharp.static_constructor_body_return retval = new CSharp.static_constructor_body_return();
        retval.start = input.LT(1);


        Token SEMICOLON282=null;
        CSharp.block_return blk =null;


        try {
            // CSharp.g:2755:4: (blk= block -> text(value=blk)| SEMICOLON -> text(value=$SEMICOLON.text))
            int alt283=2;
            int LA283_0 = input.LA(1);

            if ( (LA283_0==OPEN_BRACE) ) {
                alt283=1;
            }
            else if ( (LA283_0==SEMICOLON) ) {
                alt283=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);

                throw nvae;

            }
            switch (alt283) {
                case 1 :
                    // CSharp.g:2756:4: blk= block
                    {
                    pushFollow(FOLLOW_block_in_static_constructor_body21282);
                    blk=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2756:23: -> text(value=blk)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", blk));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2757:6: SEMICOLON
                    {
                    SEMICOLON282=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_static_constructor_body21306); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2757:23: -> text(value=$SEMICOLON.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEMICOLON282!=null?SEMICOLON282.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_constructor_body"


    public static class destructor_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "destructor_declaration"
    // CSharp.g:2766:1: destructor_declaration : ddu= destructor_declaration_unsafe -> destructorDeclaration(decl=ddu);
    public final CSharp.destructor_declaration_return destructor_declaration() throws RecognitionException {
        CSharp.destructor_declaration_return retval = new CSharp.destructor_declaration_return();
        retval.start = input.LT(1);


        CSharp.destructor_declaration_unsafe_return ddu =null;


        try {
            // CSharp.g:2767:2: (ddu= destructor_declaration_unsafe -> destructorDeclaration(decl=ddu))
            // CSharp.g:2768:2: ddu= destructor_declaration_unsafe
            {
            pushFollow(FOLLOW_destructor_declaration_unsafe_in_destructor_declaration21341);
            ddu=destructor_declaration_unsafe();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2769:2: -> destructorDeclaration(decl=ddu)
              {
                  retval.st = templateLib.getInstanceOf("destructorDeclaration",new STAttrMap().put("decl", ddu));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "destructor_declaration"


    public static class destructor_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "destructor_body"
    // CSharp.g:2771:1: destructor_body : (blk= block -> text(value=blk)| SEMICOLON -> text(value=$SEMICOLON.text));
    public final CSharp.destructor_body_return destructor_body() throws RecognitionException {
        CSharp.destructor_body_return retval = new CSharp.destructor_body_return();
        retval.start = input.LT(1);


        Token SEMICOLON283=null;
        CSharp.block_return blk =null;


        try {
            // CSharp.g:2772:3: (blk= block -> text(value=blk)| SEMICOLON -> text(value=$SEMICOLON.text))
            int alt284=2;
            int LA284_0 = input.LA(1);

            if ( (LA284_0==OPEN_BRACE) ) {
                alt284=1;
            }
            else if ( (LA284_0==SEMICOLON) ) {
                alt284=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 284, 0, input);

                throw nvae;

            }
            switch (alt284) {
                case 1 :
                    // CSharp.g:2773:3: blk= block
                    {
                    pushFollow(FOLLOW_block_in_destructor_body21367);
                    blk=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2773:22: -> text(value=blk)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", blk));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2774:5: SEMICOLON
                    {
                    SEMICOLON283=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_destructor_body21390); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2774:22: -> text(value=$SEMICOLON.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEMICOLON283!=null?SEMICOLON283.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "destructor_body"


    public static class body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "body"
    // CSharp.g:2778:1: body : (bdy= block -> body(value=bdy)|empStmt= SEMICOLON -> body(value=$empStmt.text));
    public final CSharp.body_return body() throws RecognitionException {
        CSharp.body_return retval = new CSharp.body_return();
        retval.start = input.LT(1);


        Token empStmt=null;
        CSharp.block_return bdy =null;


        try {
            // CSharp.g:2779:3: (bdy= block -> body(value=bdy)|empStmt= SEMICOLON -> body(value=$empStmt.text))
            int alt285=2;
            int LA285_0 = input.LA(1);

            if ( (LA285_0==OPEN_BRACE) ) {
                alt285=1;
            }
            else if ( (LA285_0==SEMICOLON) ) {
                alt285=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 285, 0, input);

                throw nvae;

            }
            switch (alt285) {
                case 1 :
                    // CSharp.g:2780:3: bdy= block
                    {
                    pushFollow(FOLLOW_block_in_body21424);
                    bdy=block();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2781:3: -> body(value=bdy)
                      {
                          retval.st = templateLib.getInstanceOf("body",new STAttrMap().put("value", bdy));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2782:5: empStmt= SEMICOLON
                    {
                    empStmt=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_body21442); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2783:3: -> body(value=$empStmt.text)
                      {
                          retval.st = templateLib.getInstanceOf("body",new STAttrMap().put("value", (empStmt!=null?empStmt.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "body"


    public static class struct_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_declaration"
    // CSharp.g:2787:1: struct_declaration : ( attributes )? ( struct_modifiers )? ( partial_contextual_keyword )? STRUCT IDENTIFIER ( type_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( SEMICOLON )? ;
    public final CSharp.struct_declaration_return struct_declaration() throws RecognitionException {
        CSharp.struct_declaration_return retval = new CSharp.struct_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:2788:2: ( ( attributes )? ( struct_modifiers )? ( partial_contextual_keyword )? STRUCT IDENTIFIER ( type_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( SEMICOLON )? )
            // CSharp.g:2789:2: ( attributes )? ( struct_modifiers )? ( partial_contextual_keyword )? STRUCT IDENTIFIER ( type_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( SEMICOLON )?
            {
            // CSharp.g:2789:2: ( attributes )?
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==OPEN_BRACKET) ) {
                alt286=1;
            }
            switch (alt286) {
                case 1 :
                    // CSharp.g:2789:2: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_struct_declaration21468);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2789:14: ( struct_modifiers )?
            int alt287=2;
            int LA287_0 = input.LA(1);

            if ( (LA287_0==INTERNAL||LA287_0==NEW||(LA287_0 >= PRIVATE && LA287_0 <= PUBLIC)||LA287_0==UNSAFE) ) {
                alt287=1;
            }
            switch (alt287) {
                case 1 :
                    // CSharp.g:2789:14: struct_modifiers
                    {
                    pushFollow(FOLLOW_struct_modifiers_in_struct_declaration21471);
                    struct_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2789:32: ( partial_contextual_keyword )?
            int alt288=2;
            int LA288_0 = input.LA(1);

            if ( (LA288_0==IDENTIFIER) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    // CSharp.g:2789:32: partial_contextual_keyword
                    {
                    pushFollow(FOLLOW_partial_contextual_keyword_in_struct_declaration21474);
                    partial_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,STRUCT,FOLLOW_STRUCT_in_struct_declaration21477); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_struct_declaration21479); if (state.failed) return retval;

            // CSharp.g:2789:78: ( type_parameter_list )?
            int alt289=2;
            int LA289_0 = input.LA(1);

            if ( (LA289_0==LT) ) {
                alt289=1;
            }
            switch (alt289) {
                case 1 :
                    // CSharp.g:2789:78: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_struct_declaration21481);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2789:99: ( struct_interfaces )?
            int alt290=2;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==COLON) ) {
                alt290=1;
            }
            switch (alt290) {
                case 1 :
                    // CSharp.g:2789:99: struct_interfaces
                    {
                    pushFollow(FOLLOW_struct_interfaces_in_struct_declaration21484);
                    struct_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2789:118: ( type_parameter_constraints_clauses )?
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==IDENTIFIER) ) {
                alt291=1;
            }
            switch (alt291) {
                case 1 :
                    // CSharp.g:2789:118: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_struct_declaration21487);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_struct_body_in_struct_declaration21490);
            struct_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:2789:166: ( SEMICOLON )?
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==SEMICOLON) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    // CSharp.g:2789:166: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_struct_declaration21492); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_declaration"


    public static class struct_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_modifiers"
    // CSharp.g:2791:1: struct_modifiers : (lst+= struct_modifier )+ -> structModifiers(list=$lst);
    public final CSharp.struct_modifiers_return struct_modifiers() throws RecognitionException {
        CSharp.struct_modifiers_return retval = new CSharp.struct_modifiers_return();
        retval.start = input.LT(1);


        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharp.g:2792:2: ( (lst+= struct_modifier )+ -> structModifiers(list=$lst))
            // CSharp.g:2793:2: (lst+= struct_modifier )+
            {
            // CSharp.g:2793:2: (lst+= struct_modifier )+
            int cnt293=0;
            loop293:
            do {
                int alt293=2;
                int LA293_0 = input.LA(1);

                if ( (LA293_0==INTERNAL||LA293_0==NEW||(LA293_0 >= PRIVATE && LA293_0 <= PUBLIC)||LA293_0==UNSAFE) ) {
                    alt293=1;
                }


                switch (alt293) {
            	case 1 :
            	    // CSharp.g:2793:3: lst+= struct_modifier
            	    {
            	    pushFollow(FOLLOW_struct_modifier_in_struct_modifiers21509);
            	    lst=struct_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt293 >= 1 ) break loop293;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(293, input);
                        throw eee;
                }
                cnt293++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2794:2: -> structModifiers(list=$lst)
              {
                  retval.st = templateLib.getInstanceOf("structModifiers",new STAttrMap().put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_modifiers"


    public static class struct_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_modifier"
    // CSharp.g:2796:1: struct_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)|strmod= struct_modifier_unsafe -> text(value=strmod));
    public final CSharp.struct_modifier_return struct_modifier() throws RecognitionException {
        CSharp.struct_modifier_return retval = new CSharp.struct_modifier_return();
        retval.start = input.LT(1);


        Token NEW284=null;
        Token PUBLIC285=null;
        Token PROTECTED286=null;
        Token PRIVATE287=null;
        CSharp.struct_modifier_unsafe_return strmod =null;


        try {
            // CSharp.g:2797:3: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)|strmod= struct_modifier_unsafe -> text(value=strmod))
            int alt294=6;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt294=1;
                }
                break;
            case PUBLIC:
                {
                alt294=2;
                }
                break;
            case PROTECTED:
                {
                alt294=3;
                }
                break;
            case INTERNAL:
                {
                alt294=4;
                }
                break;
            case PRIVATE:
                {
                alt294=5;
                }
                break;
            case UNSAFE:
                {
                alt294=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 294, 0, input);

                throw nvae;

            }

            switch (alt294) {
                case 1 :
                    // CSharp.g:2798:3: NEW
                    {
                    NEW284=(Token)match(input,NEW,FOLLOW_NEW_in_struct_modifier21535); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2798:40: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW284!=null?NEW284.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2799:5: PUBLIC
                    {
                    PUBLIC285=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_struct_modifier21582); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2799:40: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC285!=null?PUBLIC285.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2800:5: PROTECTED
                    {
                    PROTECTED286=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_struct_modifier21624); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2800:40: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED286!=null?PROTECTED286.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:2801:5: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_struct_modifier21663); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2801:40: -> text(value=\"private\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "private"));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:2802:5: PRIVATE
                    {
                    PRIVATE287=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_struct_modifier21703); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2802:40: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE287!=null?PRIVATE287.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:2803:5: strmod= struct_modifier_unsafe
                    {
                    pushFollow(FOLLOW_struct_modifier_unsafe_in_struct_modifier21746);
                    strmod=struct_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2803:40: -> text(value=strmod)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", strmod));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_modifier"


    public static class struct_interfaces_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_interfaces"
    // CSharp.g:2806:1: struct_interfaces : COLON interface_type_list ;
    public final CSharp.struct_interfaces_return struct_interfaces() throws RecognitionException {
        CSharp.struct_interfaces_return retval = new CSharp.struct_interfaces_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:2807:2: ( COLON interface_type_list )
            // CSharp.g:2808:2: COLON interface_type_list
            {
            match(input,COLON,FOLLOW_COLON_in_struct_interfaces21774); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_type_list_in_struct_interfaces21776);
            interface_type_list();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_interfaces"


    public static class struct_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_body"
    // CSharp.g:2810:1: struct_body : OPEN_BRACE ( struct_member_declarations )? CLOSE_BRACE ;
    public final CSharp.struct_body_return struct_body() throws RecognitionException {
        CSharp.struct_body_return retval = new CSharp.struct_body_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:2811:2: ( OPEN_BRACE ( struct_member_declarations )? CLOSE_BRACE )
            // CSharp.g:2812:3: OPEN_BRACE ( struct_member_declarations )? CLOSE_BRACE
            {
            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_struct_body21789); if (state.failed) return retval;

            // CSharp.g:2812:14: ( struct_member_declarations )?
            int alt295=2;
            int LA295_0 = input.LA(1);

            if ( (LA295_0==ABSTRACT||LA295_0==BOOL||LA295_0==BYTE||LA295_0==CHAR||LA295_0==CLASS||LA295_0==CONST||LA295_0==DECIMAL||LA295_0==DELEGATE||LA295_0==DOUBLE||(LA295_0 >= ENUM && LA295_0 <= EXTERN)||(LA295_0 >= FIXED && LA295_0 <= FLOAT)||LA295_0==IDENTIFIER||LA295_0==IMPLICIT||LA295_0==INT||(LA295_0 >= INTERFACE && LA295_0 <= INTERNAL)||LA295_0==LONG||LA295_0==NEW||LA295_0==OBJECT||LA295_0==OPEN_BRACKET||LA295_0==OVERRIDE||(LA295_0 >= PRIVATE && LA295_0 <= PUBLIC)||LA295_0==READONLY||(LA295_0 >= SBYTE && LA295_0 <= SEALED)||(LA295_0 >= SHORT && LA295_0 <= SINGLE_LINE_DOC_COMMENT)||(LA295_0 >= STATIC && LA295_0 <= STRING)||LA295_0==STRUCT||(LA295_0 >= UINT && LA295_0 <= ULONG)||(LA295_0 >= UNSAFE && LA295_0 <= USHORT)||(LA295_0 >= VIRTUAL && LA295_0 <= VOLATILE)) ) {
                alt295=1;
            }
            switch (alt295) {
                case 1 :
                    // CSharp.g:2812:14: struct_member_declarations
                    {
                    pushFollow(FOLLOW_struct_member_declarations_in_struct_body21791);
                    struct_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_struct_body21794); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_body"


    public static class struct_member_declarations_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_member_declarations"
    // CSharp.g:2814:1: struct_member_declarations : struct_member_declaration ( struct_member_declaration )* ;
    public final CSharp.struct_member_declarations_return struct_member_declarations() throws RecognitionException {
        CSharp.struct_member_declarations_return retval = new CSharp.struct_member_declarations_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:2815:2: ( struct_member_declaration ( struct_member_declaration )* )
            // CSharp.g:2816:2: struct_member_declaration ( struct_member_declaration )*
            {
            pushFollow(FOLLOW_struct_member_declaration_in_struct_member_declarations21807);
            struct_member_declaration();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:2816:28: ( struct_member_declaration )*
            loop296:
            do {
                int alt296=2;
                int LA296_0 = input.LA(1);

                if ( (LA296_0==ABSTRACT||LA296_0==BOOL||LA296_0==BYTE||LA296_0==CHAR||LA296_0==CLASS||LA296_0==CONST||LA296_0==DECIMAL||LA296_0==DELEGATE||LA296_0==DOUBLE||(LA296_0 >= ENUM && LA296_0 <= EXTERN)||(LA296_0 >= FIXED && LA296_0 <= FLOAT)||LA296_0==IDENTIFIER||LA296_0==IMPLICIT||LA296_0==INT||(LA296_0 >= INTERFACE && LA296_0 <= INTERNAL)||LA296_0==LONG||LA296_0==NEW||LA296_0==OBJECT||LA296_0==OPEN_BRACKET||LA296_0==OVERRIDE||(LA296_0 >= PRIVATE && LA296_0 <= PUBLIC)||LA296_0==READONLY||(LA296_0 >= SBYTE && LA296_0 <= SEALED)||(LA296_0 >= SHORT && LA296_0 <= SINGLE_LINE_DOC_COMMENT)||(LA296_0 >= STATIC && LA296_0 <= STRING)||LA296_0==STRUCT||(LA296_0 >= UINT && LA296_0 <= ULONG)||(LA296_0 >= UNSAFE && LA296_0 <= USHORT)||(LA296_0 >= VIRTUAL && LA296_0 <= VOLATILE)) ) {
                    alt296=1;
                }


                switch (alt296) {
            	case 1 :
            	    // CSharp.g:2816:30: struct_member_declaration
            	    {
            	    pushFollow(FOLLOW_struct_member_declaration_in_struct_member_declarations21811);
            	    struct_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop296;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_member_declarations"


    public static class struct_member_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_member_declaration"
    // CSharp.g:2833:1: struct_member_declaration : ( attributes )? ( all_member_modifiers )? ( common_member_declaration | FIXED buffer_element_type fixed_size_buffer_declarators SEMICOLON ) ;
    public final CSharp.struct_member_declaration_return struct_member_declaration() throws RecognitionException {
        CSharp.struct_member_declaration_return retval = new CSharp.struct_member_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:2834:2: ( ( attributes )? ( all_member_modifiers )? ( common_member_declaration | FIXED buffer_element_type fixed_size_buffer_declarators SEMICOLON ) )
            // CSharp.g:2834:4: ( attributes )? ( all_member_modifiers )? ( common_member_declaration | FIXED buffer_element_type fixed_size_buffer_declarators SEMICOLON )
            {
            // CSharp.g:2834:4: ( attributes )?
            int alt297=2;
            int LA297_0 = input.LA(1);

            if ( (LA297_0==OPEN_BRACKET) ) {
                alt297=1;
            }
            switch (alt297) {
                case 1 :
                    // CSharp.g:2834:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_struct_member_declaration21827);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2834:16: ( all_member_modifiers )?
            int alt298=2;
            int LA298_0 = input.LA(1);

            if ( (LA298_0==ABSTRACT||LA298_0==EXTERN||LA298_0==INTERNAL||LA298_0==NEW||LA298_0==OVERRIDE||(LA298_0 >= PRIVATE && LA298_0 <= PUBLIC)||LA298_0==READONLY||LA298_0==SEALED||LA298_0==STATIC||LA298_0==UNSAFE||LA298_0==VIRTUAL||LA298_0==VOLATILE) ) {
                alt298=1;
            }
            else if ( (LA298_0==IDENTIFIER) ) {
                int LA298_15 = input.LA(2);

                if ( ((input.LT(1).getText().equals("partial"))) ) {
                    alt298=1;
                }
            }
            switch (alt298) {
                case 1 :
                    // CSharp.g:2834:16: all_member_modifiers
                    {
                    pushFollow(FOLLOW_all_member_modifiers_in_struct_member_declaration21830);
                    all_member_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2835:3: ( common_member_declaration | FIXED buffer_element_type fixed_size_buffer_declarators SEMICOLON )
            int alt299=2;
            int LA299_0 = input.LA(1);

            if ( (LA299_0==BOOL||LA299_0==BYTE||LA299_0==CHAR||LA299_0==CLASS||LA299_0==CONST||LA299_0==DECIMAL||LA299_0==DELEGATE||LA299_0==DOUBLE||(LA299_0 >= ENUM && LA299_0 <= EXPLICIT)||LA299_0==FLOAT||LA299_0==IDENTIFIER||LA299_0==IMPLICIT||LA299_0==INT||LA299_0==INTERFACE||LA299_0==LONG||LA299_0==OBJECT||LA299_0==SBYTE||(LA299_0 >= SHORT && LA299_0 <= SINGLE_LINE_DOC_COMMENT)||LA299_0==STRING||LA299_0==STRUCT||(LA299_0 >= UINT && LA299_0 <= ULONG)||LA299_0==USHORT||LA299_0==VOID) ) {
                alt299=1;
            }
            else if ( (LA299_0==FIXED) ) {
                alt299=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 299, 0, input);

                throw nvae;

            }
            switch (alt299) {
                case 1 :
                    // CSharp.g:2835:5: common_member_declaration
                    {
                    pushFollow(FOLLOW_common_member_declaration_in_struct_member_declaration21837);
                    common_member_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp.g:2836:5: FIXED buffer_element_type fixed_size_buffer_declarators SEMICOLON
                    {
                    match(input,FIXED,FOLLOW_FIXED_in_struct_member_declaration21843); if (state.failed) return retval;

                    pushFollow(FOLLOW_buffer_element_type_in_struct_member_declaration21845);
                    buffer_element_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_fixed_size_buffer_declarators_in_struct_member_declaration21847);
                    fixed_size_buffer_declarators();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_struct_member_declaration21849); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_member_declaration"


    public static class array_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "array_type"
    // CSharp.g:2846:1: array_type : bTyp= base_type (chld+= array_type_Chld )+ -> arrayType(type=bTypchldLst=$chld);
    public final CSharp.array_type_return array_type() throws RecognitionException {
        CSharp.array_type_return retval = new CSharp.array_type_return();
        retval.start = input.LT(1);


        List list_chld=null;
        CSharp.base_type_return bTyp =null;

        RuleReturnScope chld = null;
        try {
            // CSharp.g:2847:2: (bTyp= base_type (chld+= array_type_Chld )+ -> arrayType(type=bTypchldLst=$chld))
            // CSharp.g:2848:2: bTyp= base_type (chld+= array_type_Chld )+
            {
            pushFollow(FOLLOW_base_type_in_array_type21873);
            bTyp=base_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:2848:17: (chld+= array_type_Chld )+
            int cnt300=0;
            loop300:
            do {
                int alt300=2;
                int LA300_0 = input.LA(1);

                if ( (LA300_0==OPEN_BRACKET) ) {
                    int LA300_2 = input.LA(2);

                    if ( (LA300_2==CLOSE_BRACKET||LA300_2==COMMA) ) {
                        alt300=1;
                    }


                }
                else if ( (LA300_0==INTERR||LA300_0==STAR) ) {
                    alt300=1;
                }


                switch (alt300) {
            	case 1 :
            	    // CSharp.g:2848:18: chld+= array_type_Chld
            	    {
            	    pushFollow(FOLLOW_array_type_Chld_in_array_type21878);
            	    chld=array_type_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_chld==null) list_chld=new ArrayList();
            	    list_chld.add(chld.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt300 >= 1 ) break loop300;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(300, input);
                        throw eee;
                }
                cnt300++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2849:2: -> arrayType(type=bTypchldLst=$chld)
              {
                  retval.st = templateLib.getInstanceOf("arrayType",new STAttrMap().put("type", bTyp).put("chldLst", list_chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_type"


    public static class array_type_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "array_type_Chld"
    // CSharp.g:2852:1: array_type_Chld : ( (st+= STAR )* rs= rank_specifier -> arrayTypeChld(symbolLst=$strnkSpcr=rs)| (intr+= INTERR )* rns= rank_specifier -> arrayTypeChld(symbolLst=\"?\"rnkSpcr=rns));
    public final CSharp.array_type_Chld_return array_type_Chld() throws RecognitionException {
        CSharp.array_type_Chld_return retval = new CSharp.array_type_Chld_return();
        retval.start = input.LT(1);


        Token st=null;
        Token intr=null;
        List list_st=null;
        List list_intr=null;
        CSharp.rank_specifier_return rs =null;

        CSharp.rank_specifier_return rns =null;


        try {
            // CSharp.g:2853:2: ( (st+= STAR )* rs= rank_specifier -> arrayTypeChld(symbolLst=$strnkSpcr=rs)| (intr+= INTERR )* rns= rank_specifier -> arrayTypeChld(symbolLst=\"?\"rnkSpcr=rns))
            int alt303=2;
            alt303 = dfa303.predict(input);
            switch (alt303) {
                case 1 :
                    // CSharp.g:2854:2: (st+= STAR )* rs= rank_specifier
                    {
                    // CSharp.g:2854:2: (st+= STAR )*
                    loop301:
                    do {
                        int alt301=2;
                        int LA301_0 = input.LA(1);

                        if ( (LA301_0==STAR) ) {
                            alt301=1;
                        }


                        switch (alt301) {
                    	case 1 :
                    	    // CSharp.g:2854:3: st+= STAR
                    	    {
                    	    st=(Token)match(input,STAR,FOLLOW_STAR_in_array_type_Chld21908); if (state.failed) return retval;
                    	    if (list_st==null) list_st=new ArrayList();
                    	    list_st.add(st);


                    	    }
                    	    break;

                    	default :
                    	    break loop301;
                        }
                    } while (true);


                    pushFollow(FOLLOW_rank_specifier_in_array_type_Chld21914);
                    rs=rank_specifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2855:2: -> arrayTypeChld(symbolLst=$strnkSpcr=rs)
                      {
                          retval.st = templateLib.getInstanceOf("arrayTypeChld",new STAttrMap().put("symbolLst", list_st).put("rnkSpcr", rs));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2856:4: (intr+= INTERR )* rns= rank_specifier
                    {
                    // CSharp.g:2856:4: (intr+= INTERR )*
                    loop302:
                    do {
                        int alt302=2;
                        int LA302_0 = input.LA(1);

                        if ( (LA302_0==INTERR) ) {
                            alt302=1;
                        }


                        switch (alt302) {
                    	case 1 :
                    	    // CSharp.g:2856:5: intr+= INTERR
                    	    {
                    	    intr=(Token)match(input,INTERR,FOLLOW_INTERR_in_array_type_Chld21935); if (state.failed) return retval;
                    	    if (list_intr==null) list_intr=new ArrayList();
                    	    list_intr.add(intr);


                    	    }
                    	    break;

                    	default :
                    	    break loop302;
                        }
                    } while (true);


                    pushFollow(FOLLOW_rank_specifier_in_array_type_Chld21941);
                    rns=rank_specifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2857:2: -> arrayTypeChld(symbolLst=\"?\"rnkSpcr=rns)
                      {
                          retval.st = templateLib.getInstanceOf("arrayTypeChld",new STAttrMap().put("symbolLst", "?").put("rnkSpcr", rns));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_type_Chld"


    public static class non_array_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "non_array_type"
    // CSharp.g:2865:1: non_array_type : typ1= base_type (chld1+= non_array_type_Chld )* -> nonArrayType(type=typ1rankSpcr=$chld1);
    public final CSharp.non_array_type_return non_array_type() throws RecognitionException {
        CSharp.non_array_type_return retval = new CSharp.non_array_type_return();
        retval.start = input.LT(1);


        List list_chld1=null;
        CSharp.base_type_return typ1 =null;

        RuleReturnScope chld1 = null;
        try {
            // CSharp.g:2866:2: (typ1= base_type (chld1+= non_array_type_Chld )* -> nonArrayType(type=typ1rankSpcr=$chld1))
            // CSharp.g:2867:2: typ1= base_type (chld1+= non_array_type_Chld )*
            {
            pushFollow(FOLLOW_base_type_in_non_array_type21973);
            typ1=base_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:2867:17: (chld1+= non_array_type_Chld )*
            loop304:
            do {
                int alt304=2;
                int LA304_0 = input.LA(1);

                if ( (LA304_0==OPEN_BRACKET) ) {
                    int LA304_1 = input.LA(2);

                    if ( (LA304_1==CLOSE_BRACKET||LA304_1==COMMA) ) {
                        alt304=1;
                    }


                }
                else if ( (LA304_0==INTERR||LA304_0==STAR) ) {
                    alt304=1;
                }


                switch (alt304) {
            	case 1 :
            	    // CSharp.g:2867:18: chld1+= non_array_type_Chld
            	    {
            	    pushFollow(FOLLOW_non_array_type_Chld_in_non_array_type21978);
            	    chld1=non_array_type_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_chld1==null) list_chld1=new ArrayList();
            	    list_chld1.add(chld1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop304;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2868:2: -> nonArrayType(type=typ1rankSpcr=$chld1)
              {
                  retval.st = templateLib.getInstanceOf("nonArrayType",new STAttrMap().put("type", typ1).put("rankSpcr", list_chld1));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "non_array_type"


    public static class non_array_type_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "non_array_type_Chld"
    // CSharp.g:2871:1: non_array_type_Chld : (rs= rank_specifier -> nonArrayTypeChld(chld=rs)| INTERR -> nonArrayTypeChld(chld=\"\")| STAR -> nonArrayTypeChld(chld=$STAR.text));
    public final CSharp.non_array_type_Chld_return non_array_type_Chld() throws RecognitionException {
        CSharp.non_array_type_Chld_return retval = new CSharp.non_array_type_Chld_return();
        retval.start = input.LT(1);


        Token STAR288=null;
        CSharp.rank_specifier_return rs =null;


        try {
            // CSharp.g:2872:2: (rs= rank_specifier -> nonArrayTypeChld(chld=rs)| INTERR -> nonArrayTypeChld(chld=\"\")| STAR -> nonArrayTypeChld(chld=$STAR.text))
            int alt305=3;
            switch ( input.LA(1) ) {
            case OPEN_BRACKET:
                {
                alt305=1;
                }
                break;
            case INTERR:
                {
                alt305=2;
                }
                break;
            case STAR:
                {
                alt305=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 305, 0, input);

                throw nvae;

            }

            switch (alt305) {
                case 1 :
                    // CSharp.g:2873:2: rs= rank_specifier
                    {
                    pushFollow(FOLLOW_rank_specifier_in_non_array_type_Chld22009);
                    rs=rank_specifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2874:2: -> nonArrayTypeChld(chld=rs)
                      {
                          retval.st = templateLib.getInstanceOf("nonArrayTypeChld",new STAttrMap().put("chld", rs));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2875:3: INTERR
                    {
                    match(input,INTERR,FOLLOW_INTERR_in_non_array_type_Chld22022); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2876:2: -> nonArrayTypeChld(chld=\"\")
                      {
                          retval.st = templateLib.getInstanceOf("nonArrayTypeChld",new STAttrMap().put("chld", ""));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2877:3: STAR
                    {
                    STAR288=(Token)match(input,STAR,FOLLOW_STAR_in_non_array_type_Chld22035); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2878:2: -> nonArrayTypeChld(chld=$STAR.text)
                      {
                          retval.st = templateLib.getInstanceOf("nonArrayTypeChld",new STAttrMap().put("chld", (STAR288!=null?STAR288.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "non_array_type_Chld"


    public static class rank_specifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "rank_specifiers"
    // CSharp.g:2886:1: rank_specifiers : (rnkspLst+= rank_specifier )+ -> lineIterator(value=$rnkspLst);
    public final CSharp.rank_specifiers_return rank_specifiers() throws RecognitionException {
        CSharp.rank_specifiers_return retval = new CSharp.rank_specifiers_return();
        retval.start = input.LT(1);


        List list_rnkspLst=null;
        RuleReturnScope rnkspLst = null;
        try {
            // CSharp.g:2887:3: ( (rnkspLst+= rank_specifier )+ -> lineIterator(value=$rnkspLst))
            // CSharp.g:2888:3: (rnkspLst+= rank_specifier )+
            {
            // CSharp.g:2888:3: (rnkspLst+= rank_specifier )+
            int cnt306=0;
            loop306:
            do {
                int alt306=2;
                int LA306_0 = input.LA(1);

                if ( (LA306_0==OPEN_BRACKET) ) {
                    int LA306_2 = input.LA(2);

                    if ( (LA306_2==CLOSE_BRACKET||LA306_2==COMMA) ) {
                        alt306=1;
                    }


                }


                switch (alt306) {
            	case 1 :
            	    // CSharp.g:2888:4: rnkspLst+= rank_specifier
            	    {
            	    pushFollow(FOLLOW_rank_specifier_in_rank_specifiers22066);
            	    rnkspLst=rank_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_rnkspLst==null) list_rnkspLst=new ArrayList();
            	    list_rnkspLst.add(rnkspLst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt306 >= 1 ) break loop306;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(306, input);
                        throw eee;
                }
                cnt306++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2889:3: -> lineIterator(value=$rnkspLst)
              {
                  retval.st = templateLib.getInstanceOf("lineIterator",new STAttrMap().put("value", list_rnkspLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_specifiers"


    public static class rank_specifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "rank_specifier"
    // CSharp.g:2893:1: rank_specifier : OPEN_BRACKET (sep= dim_separators )? CLOSE_BRACKET -> rankSpecifier(separatorLst=sep);
    public final CSharp.rank_specifier_return rank_specifier() throws RecognitionException {
        CSharp.rank_specifier_return retval = new CSharp.rank_specifier_return();
        retval.start = input.LT(1);


        CSharp.dim_separators_return sep =null;


        try {
            // CSharp.g:2894:2: ( OPEN_BRACKET (sep= dim_separators )? CLOSE_BRACKET -> rankSpecifier(separatorLst=sep))
            // CSharp.g:2895:2: OPEN_BRACKET (sep= dim_separators )? CLOSE_BRACKET
            {
            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_rank_specifier22095); if (state.failed) return retval;

            // CSharp.g:2895:15: (sep= dim_separators )?
            int alt307=2;
            int LA307_0 = input.LA(1);

            if ( (LA307_0==COMMA) ) {
                alt307=1;
            }
            switch (alt307) {
                case 1 :
                    // CSharp.g:2895:16: sep= dim_separators
                    {
                    pushFollow(FOLLOW_dim_separators_in_rank_specifier22100);
                    sep=dim_separators();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_rank_specifier22104); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2896:2: -> rankSpecifier(separatorLst=sep)
              {
                  retval.st = templateLib.getInstanceOf("rankSpecifier",new STAttrMap().put("separatorLst", sep));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_specifier"


    public static class dim_separators_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "dim_separators"
    // CSharp.g:2898:1: dim_separators : COMMA (lst+= dim_separators_Chld )* -> dimSeparators(list=$lst);
    public final CSharp.dim_separators_return dim_separators() throws RecognitionException {
        CSharp.dim_separators_return retval = new CSharp.dim_separators_return();
        retval.start = input.LT(1);


        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharp.g:2899:2: ( COMMA (lst+= dim_separators_Chld )* -> dimSeparators(list=$lst))
            // CSharp.g:2900:2: COMMA (lst+= dim_separators_Chld )*
            {
            match(input,COMMA,FOLLOW_COMMA_in_dim_separators22126); if (state.failed) return retval;

            // CSharp.g:2900:8: (lst+= dim_separators_Chld )*
            loop308:
            do {
                int alt308=2;
                int LA308_0 = input.LA(1);

                if ( (LA308_0==COMMA) ) {
                    alt308=1;
                }


                switch (alt308) {
            	case 1 :
            	    // CSharp.g:2900:9: lst+= dim_separators_Chld
            	    {
            	    pushFollow(FOLLOW_dim_separators_Chld_in_dim_separators22131);
            	    lst=dim_separators_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop308;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2901:2: -> dimSeparators(list=$lst)
              {
                  retval.st = templateLib.getInstanceOf("dimSeparators",new STAttrMap().put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dim_separators"


    public static class dim_separators_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "dim_separators_Chld"
    // CSharp.g:2904:1: dim_separators_Chld : COMMA -> text(value=$COMMA.text);
    public final CSharp.dim_separators_Chld_return dim_separators_Chld() throws RecognitionException {
        CSharp.dim_separators_Chld_return retval = new CSharp.dim_separators_Chld_return();
        retval.start = input.LT(1);


        Token COMMA289=null;

        try {
            // CSharp.g:2905:2: ( COMMA -> text(value=$COMMA.text))
            // CSharp.g:2906:3: COMMA
            {
            COMMA289=(Token)match(input,COMMA,FOLLOW_COMMA_in_dim_separators_Chld22156); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2907:3: -> text(value=$COMMA.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (COMMA289!=null?COMMA289.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dim_separators_Chld"


    public static class array_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "array_initializer"
    // CSharp.g:2916:1: array_initializer : ( OPEN_BRACE CLOSE_BRACE -> text(value=\"[]\")| OPEN_BRACE vil= variable_initializer_list ( COMMA )? CLOSE_BRACE -> arrayInitializer(varInitList=vil));
    public final CSharp.array_initializer_return array_initializer() throws RecognitionException {
        CSharp.array_initializer_return retval = new CSharp.array_initializer_return();
        retval.start = input.LT(1);


        CSharp.variable_initializer_list_return vil =null;


        try {
            // CSharp.g:2917:3: ( OPEN_BRACE CLOSE_BRACE -> text(value=\"[]\")| OPEN_BRACE vil= variable_initializer_list ( COMMA )? CLOSE_BRACE -> arrayInitializer(varInitList=vil))
            int alt310=2;
            int LA310_0 = input.LA(1);

            if ( (LA310_0==OPEN_BRACE) ) {
                int LA310_1 = input.LA(2);

                if ( (LA310_1==CLOSE_BRACE) ) {
                    alt310=1;
                }
                else if ( (LA310_1==AMP||(LA310_1 >= BANG && LA310_1 <= BASE)||LA310_1==BOOL||LA310_1==BYTE||(LA310_1 >= CHAR && LA310_1 <= CHECKED)||LA310_1==DECIMAL||(LA310_1 >= DEFAULT && LA310_1 <= DELEGATE)||LA310_1==DOUBLE||LA310_1==FALSE||LA310_1==FLOAT||LA310_1==IDENTIFIER||(LA310_1 >= INT && LA310_1 <= INTEGER_LITERAL)||LA310_1==LONG||LA310_1==MINUS||LA310_1==NEW||LA310_1==NULL||(LA310_1 >= OBJECT && LA310_1 <= OPEN_BRACE)||LA310_1==OPEN_PARENS||LA310_1==OP_DEC||LA310_1==OP_INC||LA310_1==PLUS||LA310_1==REAL_LITERAL||LA310_1==SBYTE||LA310_1==SHORT||LA310_1==SIZEOF||LA310_1==STAR||(LA310_1 >= STRING && LA310_1 <= STRING_LITERAL)||LA310_1==THIS||(LA310_1 >= TILDE && LA310_1 <= TRUE)||LA310_1==TYPEOF||(LA310_1 >= UINT && LA310_1 <= UNCHECKED)||LA310_1==USHORT) ) {
                    alt310=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 310, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 310, 0, input);

                throw nvae;

            }
            switch (alt310) {
                case 1 :
                    // CSharp.g:2918:3: OPEN_BRACE CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_array_initializer22188); if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_array_initializer22190); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2919:3: -> text(value=\"[]\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "[]"));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2920:5: OPEN_BRACE vil= variable_initializer_list ( COMMA )? CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_array_initializer22206); if (state.failed) return retval;

                    pushFollow(FOLLOW_variable_initializer_list_in_array_initializer22210);
                    vil=variable_initializer_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp.g:2920:46: ( COMMA )?
                    int alt309=2;
                    int LA309_0 = input.LA(1);

                    if ( (LA309_0==COMMA) ) {
                        alt309=1;
                    }
                    switch (alt309) {
                        case 1 :
                            // CSharp.g:2920:46: COMMA
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_array_initializer22212); if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_array_initializer22215); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2921:3: -> arrayInitializer(varInitList=vil)
                      {
                          retval.st = templateLib.getInstanceOf("arrayInitializer",new STAttrMap().put("varInitList", vil));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_initializer"


    public static class variable_initializer_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_initializer_list"
    // CSharp.g:2923:1: variable_initializer_list : vini= variable_initializer (varLst+= variable_initializer_list_Chld )* -> variableInitializerList(varIni=vinilist=$varLst);
    public final CSharp.variable_initializer_list_return variable_initializer_list() throws RecognitionException {
        CSharp.variable_initializer_list_return retval = new CSharp.variable_initializer_list_return();
        retval.start = input.LT(1);


        List list_varLst=null;
        CSharp.variable_initializer_return vini =null;

        RuleReturnScope varLst = null;
        try {
            // CSharp.g:2924:2: (vini= variable_initializer (varLst+= variable_initializer_list_Chld )* -> variableInitializerList(varIni=vinilist=$varLst))
            // CSharp.g:2925:2: vini= variable_initializer (varLst+= variable_initializer_list_Chld )*
            {
            pushFollow(FOLLOW_variable_initializer_in_variable_initializer_list22241);
            vini=variable_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:2925:28: (varLst+= variable_initializer_list_Chld )*
            loop311:
            do {
                int alt311=2;
                int LA311_0 = input.LA(1);

                if ( (LA311_0==COMMA) ) {
                    int LA311_1 = input.LA(2);

                    if ( (LA311_1==AMP||(LA311_1 >= BANG && LA311_1 <= BASE)||LA311_1==BOOL||LA311_1==BYTE||(LA311_1 >= CHAR && LA311_1 <= CHECKED)||LA311_1==DECIMAL||(LA311_1 >= DEFAULT && LA311_1 <= DELEGATE)||LA311_1==DOUBLE||LA311_1==FALSE||LA311_1==FLOAT||LA311_1==IDENTIFIER||(LA311_1 >= INT && LA311_1 <= INTEGER_LITERAL)||LA311_1==LONG||LA311_1==MINUS||LA311_1==NEW||LA311_1==NULL||(LA311_1 >= OBJECT && LA311_1 <= OPEN_BRACE)||LA311_1==OPEN_PARENS||LA311_1==OP_DEC||LA311_1==OP_INC||LA311_1==PLUS||LA311_1==REAL_LITERAL||LA311_1==SBYTE||LA311_1==SHORT||LA311_1==SIZEOF||LA311_1==STAR||(LA311_1 >= STRING && LA311_1 <= STRING_LITERAL)||LA311_1==THIS||(LA311_1 >= TILDE && LA311_1 <= TRUE)||LA311_1==TYPEOF||(LA311_1 >= UINT && LA311_1 <= UNCHECKED)||LA311_1==USHORT) ) {
                        alt311=1;
                    }


                }


                switch (alt311) {
            	case 1 :
            	    // CSharp.g:2925:29: varLst+= variable_initializer_list_Chld
            	    {
            	    pushFollow(FOLLOW_variable_initializer_list_Chld_in_variable_initializer_list22246);
            	    varLst=variable_initializer_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_varLst==null) list_varLst=new ArrayList();
            	    list_varLst.add(varLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop311;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2926:2: -> variableInitializerList(varIni=vinilist=$varLst)
              {
                  retval.st = templateLib.getInstanceOf("variableInitializerList",new STAttrMap().put("varIni", vini).put("list", list_varLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_initializer_list"


    public static class variable_initializer_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_initializer_list_Chld"
    // CSharp.g:2929:1: variable_initializer_list_Chld : COMMA vrinit= variable_initializer -> variableInitializerListChld(init=vrinit);
    public final CSharp.variable_initializer_list_Chld_return variable_initializer_list_Chld() throws RecognitionException {
        CSharp.variable_initializer_list_Chld_return retval = new CSharp.variable_initializer_list_Chld_return();
        retval.start = input.LT(1);


        CSharp.variable_initializer_return vrinit =null;


        try {
            // CSharp.g:2930:2: ( COMMA vrinit= variable_initializer -> variableInitializerListChld(init=vrinit))
            // CSharp.g:2931:2: COMMA vrinit= variable_initializer
            {
            match(input,COMMA,FOLLOW_COMMA_in_variable_initializer_list_Chld22274); if (state.failed) return retval;

            pushFollow(FOLLOW_variable_initializer_in_variable_initializer_list_Chld22279);
            vrinit=variable_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2932:2: -> variableInitializerListChld(init=vrinit)
              {
                  retval.st = templateLib.getInstanceOf("variableInitializerListChld",new STAttrMap().put("init", vrinit));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_initializer_list_Chld"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_declaration"
    // CSharp.g:2935:1: interface_declaration : (at= attributes )? (im= interface_modifiers )? (pck= partial_contextual_keyword )? INTERFACE iName= IDENTIFIER (vtpl= variant_type_parameter_list )? (ib= interface_base )? (tpcc= type_parameter_constraints_clauses )? ibdy= interface_body (dlMtr= SEMICOLON )? -> interfaceDeclaration(attributes=atintFcModfs=impartialKwd=pckinterfaceName=\" interface \"+$iName.textvarTypParLst=vtplintfcBas=ibtypParConstCls=tpccintfcBody=ibdydelimiter=$dlMtr.text);
    public final CSharp.interface_declaration_return interface_declaration() throws RecognitionException {
        CSharp.interface_declaration_return retval = new CSharp.interface_declaration_return();
        retval.start = input.LT(1);


        Token iName=null;
        Token dlMtr=null;
        CSharp.attributes_return at =null;

        CSharp.interface_modifiers_return im =null;

        CSharp.partial_contextual_keyword_return pck =null;

        CSharp.variant_type_parameter_list_return vtpl =null;

        CSharp.interface_base_return ib =null;

        CSharp.type_parameter_constraints_clauses_return tpcc =null;

        CSharp.interface_body_return ibdy =null;


        try {
            // CSharp.g:2936:2: ( (at= attributes )? (im= interface_modifiers )? (pck= partial_contextual_keyword )? INTERFACE iName= IDENTIFIER (vtpl= variant_type_parameter_list )? (ib= interface_base )? (tpcc= type_parameter_constraints_clauses )? ibdy= interface_body (dlMtr= SEMICOLON )? -> interfaceDeclaration(attributes=atintFcModfs=impartialKwd=pckinterfaceName=\" interface \"+$iName.textvarTypParLst=vtplintfcBas=ibtypParConstCls=tpccintfcBody=ibdydelimiter=$dlMtr.text))
            // CSharp.g:2937:2: (at= attributes )? (im= interface_modifiers )? (pck= partial_contextual_keyword )? INTERFACE iName= IDENTIFIER (vtpl= variant_type_parameter_list )? (ib= interface_base )? (tpcc= type_parameter_constraints_clauses )? ibdy= interface_body (dlMtr= SEMICOLON )?
            {
            // CSharp.g:2937:2: (at= attributes )?
            int alt312=2;
            int LA312_0 = input.LA(1);

            if ( (LA312_0==OPEN_BRACKET) ) {
                alt312=1;
            }
            switch (alt312) {
                case 1 :
                    // CSharp.g:2937:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_declaration22305);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2937:19: (im= interface_modifiers )?
            int alt313=2;
            int LA313_0 = input.LA(1);

            if ( (LA313_0==INTERNAL||LA313_0==NEW||(LA313_0 >= PRIVATE && LA313_0 <= PUBLIC)||LA313_0==UNSAFE) ) {
                alt313=1;
            }
            switch (alt313) {
                case 1 :
                    // CSharp.g:2937:20: im= interface_modifiers
                    {
                    pushFollow(FOLLOW_interface_modifiers_in_interface_declaration22312);
                    im=interface_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2937:45: (pck= partial_contextual_keyword )?
            int alt314=2;
            int LA314_0 = input.LA(1);

            if ( (LA314_0==IDENTIFIER) ) {
                alt314=1;
            }
            switch (alt314) {
                case 1 :
                    // CSharp.g:2937:46: pck= partial_contextual_keyword
                    {
                    pushFollow(FOLLOW_partial_contextual_keyword_in_interface_declaration22319);
                    pck=partial_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,INTERFACE,FOLLOW_INTERFACE_in_interface_declaration22323); if (state.failed) return retval;

            iName=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_declaration22327); if (state.failed) return retval;

            // CSharp.g:2937:106: (vtpl= variant_type_parameter_list )?
            int alt315=2;
            int LA315_0 = input.LA(1);

            if ( (LA315_0==LT) ) {
                alt315=1;
            }
            switch (alt315) {
                case 1 :
                    // CSharp.g:2937:107: vtpl= variant_type_parameter_list
                    {
                    pushFollow(FOLLOW_variant_type_parameter_list_in_interface_declaration22332);
                    vtpl=variant_type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2937:142: (ib= interface_base )?
            int alt316=2;
            int LA316_0 = input.LA(1);

            if ( (LA316_0==COLON) ) {
                alt316=1;
            }
            switch (alt316) {
                case 1 :
                    // CSharp.g:2937:143: ib= interface_base
                    {
                    pushFollow(FOLLOW_interface_base_in_interface_declaration22339);
                    ib=interface_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2937:163: (tpcc= type_parameter_constraints_clauses )?
            int alt317=2;
            int LA317_0 = input.LA(1);

            if ( (LA317_0==IDENTIFIER) ) {
                alt317=1;
            }
            switch (alt317) {
                case 1 :
                    // CSharp.g:2937:164: tpcc= type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_declaration22346);
                    tpcc=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_interface_body_in_interface_declaration22352);
            ibdy=interface_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:2937:226: (dlMtr= SEMICOLON )?
            int alt318=2;
            int LA318_0 = input.LA(1);

            if ( (LA318_0==SEMICOLON) ) {
                alt318=1;
            }
            switch (alt318) {
                case 1 :
                    // CSharp.g:2937:227: dlMtr= SEMICOLON
                    {
                    dlMtr=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_declaration22357); if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2938:2: -> interfaceDeclaration(attributes=atintFcModfs=impartialKwd=pckinterfaceName=\" interface \"+$iName.textvarTypParLst=vtplintfcBas=ibtypParConstCls=tpccintfcBody=ibdydelimiter=$dlMtr.text)
              {
                  retval.st = templateLib.getInstanceOf("interfaceDeclaration",new STAttrMap().put("attributes", at).put("intFcModfs", im).put("partialKwd", pck).put("interfaceName", " interface "+(iName!=null?iName.getText():null)).put("varTypParLst", vtpl).put("intfcBas", ib).put("typParConstCls", tpcc).put("intfcBody", ibdy).put("delimiter", (dlMtr!=null?dlMtr.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class interface_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_modifiers"
    // CSharp.g:2940:1: interface_modifiers : (im+= interface_modifier )+ -> interfaceModifiers(list=$im);
    public final CSharp.interface_modifiers_return interface_modifiers() throws RecognitionException {
        CSharp.interface_modifiers_return retval = new CSharp.interface_modifiers_return();
        retval.start = input.LT(1);


        List list_im=null;
        RuleReturnScope im = null;
        try {
            // CSharp.g:2941:2: ( (im+= interface_modifier )+ -> interfaceModifiers(list=$im))
            // CSharp.g:2942:2: (im+= interface_modifier )+
            {
            // CSharp.g:2942:2: (im+= interface_modifier )+
            int cnt319=0;
            loop319:
            do {
                int alt319=2;
                int LA319_0 = input.LA(1);

                if ( (LA319_0==INTERNAL||LA319_0==NEW||(LA319_0 >= PRIVATE && LA319_0 <= PUBLIC)||LA319_0==UNSAFE) ) {
                    alt319=1;
                }


                switch (alt319) {
            	case 1 :
            	    // CSharp.g:2942:3: im+= interface_modifier
            	    {
            	    pushFollow(FOLLOW_interface_modifier_in_interface_modifiers22416);
            	    im=interface_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_im==null) list_im=new ArrayList();
            	    list_im.add(im.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt319 >= 1 ) break loop319;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(319, input);
                        throw eee;
                }
                cnt319++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2943:2: -> interfaceModifiers(list=$im)
              {
                  retval.st = templateLib.getInstanceOf("interfaceModifiers",new STAttrMap().put("list", list_im));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_modifiers"


    public static class interface_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_modifier"
    // CSharp.g:2945:1: interface_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)|intrmod= interface_modifier_unsafe -> text(value=intrmod));
    public final CSharp.interface_modifier_return interface_modifier() throws RecognitionException {
        CSharp.interface_modifier_return retval = new CSharp.interface_modifier_return();
        retval.start = input.LT(1);


        Token NEW290=null;
        Token PUBLIC291=null;
        Token PROTECTED292=null;
        Token PRIVATE293=null;
        CSharp.interface_modifier_unsafe_return intrmod =null;


        try {
            // CSharp.g:2946:3: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)|intrmod= interface_modifier_unsafe -> text(value=intrmod))
            int alt320=6;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt320=1;
                }
                break;
            case PUBLIC:
                {
                alt320=2;
                }
                break;
            case PROTECTED:
                {
                alt320=3;
                }
                break;
            case INTERNAL:
                {
                alt320=4;
                }
                break;
            case PRIVATE:
                {
                alt320=5;
                }
                break;
            case UNSAFE:
                {
                alt320=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 320, 0, input);

                throw nvae;

            }

            switch (alt320) {
                case 1 :
                    // CSharp.g:2947:3: NEW
                    {
                    NEW290=(Token)match(input,NEW,FOLLOW_NEW_in_interface_modifier22442); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2947:43: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW290!=null?NEW290.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2948:5: PUBLIC
                    {
                    PUBLIC291=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_interface_modifier22492); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2948:43: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC291!=null?PUBLIC291.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:2949:5: PROTECTED
                    {
                    PROTECTED292=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_interface_modifier22537); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2949:43: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED292!=null?PROTECTED292.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:2950:5: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_interface_modifier22579); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2950:43: -> text(value=\"private\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "private"));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:2951:5: PRIVATE
                    {
                    PRIVATE293=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_interface_modifier22622); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2951:43: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE293!=null?PRIVATE293.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:2952:5: intrmod= interface_modifier_unsafe
                    {
                    pushFollow(FOLLOW_interface_modifier_unsafe_in_interface_modifier22668);
                    intrmod=interface_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2952:43: -> text(value=intrmod)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", intrmod));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_modifier"


    public static class variant_type_parameter_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variant_type_parameter_list"
    // CSharp.g:2955:1: variant_type_parameter_list : LT vtp= variant_type_parameters GT -> variantTypeParameterList(params=vtp);
    public final CSharp.variant_type_parameter_list_return variant_type_parameter_list() throws RecognitionException {
        CSharp.variant_type_parameter_list_return retval = new CSharp.variant_type_parameter_list_return();
        retval.start = input.LT(1);


        CSharp.variant_type_parameters_return vtp =null;


        try {
            // CSharp.g:2956:2: ( LT vtp= variant_type_parameters GT -> variantTypeParameterList(params=vtp))
            // CSharp.g:2957:2: LT vtp= variant_type_parameters GT
            {
            match(input,LT,FOLLOW_LT_in_variant_type_parameter_list22695); if (state.failed) return retval;

            pushFollow(FOLLOW_variant_type_parameters_in_variant_type_parameter_list22699);
            vtp=variant_type_parameters();

            state._fsp--;
            if (state.failed) return retval;

            match(input,GT,FOLLOW_GT_in_variant_type_parameter_list22701); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2958:2: -> variantTypeParameterList(params=vtp)
              {
                  retval.st = templateLib.getInstanceOf("variantTypeParameterList",new STAttrMap().put("params", vtp));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variant_type_parameter_list"


    public static class variant_type_parameters_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variant_type_parameters"
    // CSharp.g:2960:1: variant_type_parameters : ( attributes )? ( variance_annotation )? type_parameter ( COMMA ( attributes )? ( variance_annotation )? type_parameter )* ;
    public final CSharp.variant_type_parameters_return variant_type_parameters() throws RecognitionException {
        CSharp.variant_type_parameters_return retval = new CSharp.variant_type_parameters_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:2961:2: ( ( attributes )? ( variance_annotation )? type_parameter ( COMMA ( attributes )? ( variance_annotation )? type_parameter )* )
            // CSharp.g:2962:2: ( attributes )? ( variance_annotation )? type_parameter ( COMMA ( attributes )? ( variance_annotation )? type_parameter )*
            {
            // CSharp.g:2962:2: ( attributes )?
            int alt321=2;
            int LA321_0 = input.LA(1);

            if ( (LA321_0==OPEN_BRACKET) ) {
                alt321=1;
            }
            switch (alt321) {
                case 1 :
                    // CSharp.g:2962:2: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_variant_type_parameters22723);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2962:14: ( variance_annotation )?
            int alt322=2;
            int LA322_0 = input.LA(1);

            if ( (LA322_0==IN||LA322_0==OUT) ) {
                alt322=1;
            }
            switch (alt322) {
                case 1 :
                    // CSharp.g:2962:14: variance_annotation
                    {
                    pushFollow(FOLLOW_variance_annotation_in_variant_type_parameters22726);
                    variance_annotation();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_parameter_in_variant_type_parameters22729);
            type_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:2962:50: ( COMMA ( attributes )? ( variance_annotation )? type_parameter )*
            loop325:
            do {
                int alt325=2;
                int LA325_0 = input.LA(1);

                if ( (LA325_0==COMMA) ) {
                    alt325=1;
                }


                switch (alt325) {
            	case 1 :
            	    // CSharp.g:2962:52: COMMA ( attributes )? ( variance_annotation )? type_parameter
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_variant_type_parameters22733); if (state.failed) return retval;

            	    // CSharp.g:2962:59: ( attributes )?
            	    int alt323=2;
            	    int LA323_0 = input.LA(1);

            	    if ( (LA323_0==OPEN_BRACKET) ) {
            	        alt323=1;
            	    }
            	    switch (alt323) {
            	        case 1 :
            	            // CSharp.g:2962:59: attributes
            	            {
            	            pushFollow(FOLLOW_attributes_in_variant_type_parameters22736);
            	            attributes();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            }
            	            break;

            	    }


            	    // CSharp.g:2962:72: ( variance_annotation )?
            	    int alt324=2;
            	    int LA324_0 = input.LA(1);

            	    if ( (LA324_0==IN||LA324_0==OUT) ) {
            	        alt324=1;
            	    }
            	    switch (alt324) {
            	        case 1 :
            	            // CSharp.g:2962:72: variance_annotation
            	            {
            	            pushFollow(FOLLOW_variance_annotation_in_variant_type_parameters22740);
            	            variance_annotation();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_type_parameter_in_variant_type_parameters22744);
            	    type_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop325;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variant_type_parameters"


    public static class variance_annotation_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variance_annotation"
    // CSharp.g:2964:1: variance_annotation : ( IN -> text(value=$IN.text)| OUT -> text(value=$OUT.text));
    public final CSharp.variance_annotation_return variance_annotation() throws RecognitionException {
        CSharp.variance_annotation_return retval = new CSharp.variance_annotation_return();
        retval.start = input.LT(1);


        Token IN294=null;
        Token OUT295=null;

        try {
            // CSharp.g:2965:3: ( IN -> text(value=$IN.text)| OUT -> text(value=$OUT.text))
            int alt326=2;
            int LA326_0 = input.LA(1);

            if ( (LA326_0==IN) ) {
                alt326=1;
            }
            else if ( (LA326_0==OUT) ) {
                alt326=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 326, 0, input);

                throw nvae;

            }
            switch (alt326) {
                case 1 :
                    // CSharp.g:2966:3: IN
                    {
                    IN294=(Token)match(input,IN,FOLLOW_IN_in_variance_annotation22762); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2966:15: -> text(value=$IN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IN294!=null?IN294.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:2967:5: OUT
                    {
                    OUT295=(Token)match(input,OUT,FOLLOW_OUT_in_variance_annotation22785); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 2967:15: -> text(value=$OUT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OUT295!=null?OUT295.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variance_annotation"


    public static class interface_base_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_base"
    // CSharp.g:2970:1: interface_base : COLON itl= interface_type_list -> interfaceBase(intfcTypLst=itl);
    public final CSharp.interface_base_return interface_base() throws RecognitionException {
        CSharp.interface_base_return retval = new CSharp.interface_base_return();
        retval.start = input.LT(1);


        CSharp.interface_type_list_return itl =null;


        try {
            // CSharp.g:2971:2: ( COLON itl= interface_type_list -> interfaceBase(intfcTypLst=itl))
            // CSharp.g:2972:2: COLON itl= interface_type_list
            {
            match(input,COLON,FOLLOW_COLON_in_interface_base22814); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_type_list_in_interface_base22818);
            itl=interface_type_list();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2973:2: -> interfaceBase(intfcTypLst=itl)
              {
                  retval.st = templateLib.getInstanceOf("interfaceBase",new STAttrMap().put("intfcTypLst", itl));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_base"


    public static class interface_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_body"
    // CSharp.g:2975:1: interface_body : OPEN_BRACE (imd= interface_member_declarations )? CLOSE_BRACE -> interfaceBody(members=imd);
    public final CSharp.interface_body_return interface_body() throws RecognitionException {
        CSharp.interface_body_return retval = new CSharp.interface_body_return();
        retval.start = input.LT(1);


        CSharp.interface_member_declarations_return imd =null;


        try {
            // CSharp.g:2976:2: ( OPEN_BRACE (imd= interface_member_declarations )? CLOSE_BRACE -> interfaceBody(members=imd))
            // CSharp.g:2977:2: OPEN_BRACE (imd= interface_member_declarations )? CLOSE_BRACE
            {
            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_body22840); if (state.failed) return retval;

            // CSharp.g:2977:13: (imd= interface_member_declarations )?
            int alt327=2;
            int LA327_0 = input.LA(1);

            if ( (LA327_0==BOOL||LA327_0==BYTE||LA327_0==CHAR||LA327_0==DECIMAL||LA327_0==DOUBLE||LA327_0==EVENT||LA327_0==FLOAT||LA327_0==IDENTIFIER||LA327_0==INT||LA327_0==LONG||LA327_0==NEW||LA327_0==OBJECT||LA327_0==OPEN_BRACKET||LA327_0==SBYTE||(LA327_0 >= SHORT && LA327_0 <= SINGLE_LINE_DOC_COMMENT)||LA327_0==STRING||(LA327_0 >= UINT && LA327_0 <= ULONG)||LA327_0==USHORT||LA327_0==VOID) ) {
                alt327=1;
            }
            switch (alt327) {
                case 1 :
                    // CSharp.g:2977:14: imd= interface_member_declarations
                    {
                    pushFollow(FOLLOW_interface_member_declarations_in_interface_body22845);
                    imd=interface_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_body22849); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2978:2: -> interfaceBody(members=imd)
              {
                  retval.st = templateLib.getInstanceOf("interfaceBody",new STAttrMap().put("members", imd));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_body"


    public static class interface_member_declarations_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_member_declarations"
    // CSharp.g:2980:1: interface_member_declarations : (lst+= interface_member_declaration )+ -> interfaceMemberDeclarations(list=$lst);
    public final CSharp.interface_member_declarations_return interface_member_declarations() throws RecognitionException {
        CSharp.interface_member_declarations_return retval = new CSharp.interface_member_declarations_return();
        retval.start = input.LT(1);


        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharp.g:2981:2: ( (lst+= interface_member_declaration )+ -> interfaceMemberDeclarations(list=$lst))
            // CSharp.g:2982:2: (lst+= interface_member_declaration )+
            {
            // CSharp.g:2982:2: (lst+= interface_member_declaration )+
            int cnt328=0;
            loop328:
            do {
                int alt328=2;
                int LA328_0 = input.LA(1);

                if ( (LA328_0==BOOL||LA328_0==BYTE||LA328_0==CHAR||LA328_0==DECIMAL||LA328_0==DOUBLE||LA328_0==EVENT||LA328_0==FLOAT||LA328_0==IDENTIFIER||LA328_0==INT||LA328_0==LONG||LA328_0==NEW||LA328_0==OBJECT||LA328_0==OPEN_BRACKET||LA328_0==SBYTE||(LA328_0 >= SHORT && LA328_0 <= SINGLE_LINE_DOC_COMMENT)||LA328_0==STRING||(LA328_0 >= UINT && LA328_0 <= ULONG)||LA328_0==USHORT||LA328_0==VOID) ) {
                    alt328=1;
                }


                switch (alt328) {
            	case 1 :
            	    // CSharp.g:2982:3: lst+= interface_member_declaration
            	    {
            	    pushFollow(FOLLOW_interface_member_declaration_in_interface_member_declarations22874);
            	    lst=interface_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_lst==null) list_lst=new ArrayList();
            	    list_lst.add(lst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt328 >= 1 ) break loop328;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(328, input);
                        throw eee;
                }
                cnt328++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2983:2: -> interfaceMemberDeclarations(list=$lst)
              {
                  retval.st = templateLib.getInstanceOf("interfaceMemberDeclarations",new STAttrMap().put("list", list_lst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_member_declarations"


    public static class interface_member_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_member_declaration"
    // CSharp.g:2993:1: interface_member_declaration : (com= comments )? (at= attributes )? (com1= comments )? (n= NEW )? chld= interface_member_declaration_Chld -> interfaceMemberDeclaration(com=comattributes=atcom1=com1newKwd=$n.textchild=chld);
    public final CSharp.interface_member_declaration_return interface_member_declaration() throws RecognitionException {
        CSharp.interface_member_declaration_return retval = new CSharp.interface_member_declaration_return();
        retval.start = input.LT(1);


        Token n=null;
        CSharp.comments_return com =null;

        CSharp.attributes_return at =null;

        CSharp.comments_return com1 =null;

        CSharp.interface_member_declaration_Chld_return chld =null;


        try {
            // CSharp.g:2994:3: ( (com= comments )? (at= attributes )? (com1= comments )? (n= NEW )? chld= interface_member_declaration_Chld -> interfaceMemberDeclaration(com=comattributes=atcom1=com1newKwd=$n.textchild=chld))
            // CSharp.g:2995:3: (com= comments )? (at= attributes )? (com1= comments )? (n= NEW )? chld= interface_member_declaration_Chld
            {
            // CSharp.g:2995:3: (com= comments )?
            int alt329=2;
            int LA329_0 = input.LA(1);

            if ( (LA329_0==SINGLE_LINE_COMMENT) ) {
                alt329=1;
            }
            else if ( (LA329_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt329=1;
            }
            switch (alt329) {
                case 1 :
                    // CSharp.g:2995:4: com= comments
                    {
                    pushFollow(FOLLOW_comments_in_interface_member_declaration22906);
                    com=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2995:19: (at= attributes )?
            int alt330=2;
            int LA330_0 = input.LA(1);

            if ( (LA330_0==OPEN_BRACKET) ) {
                alt330=1;
            }
            switch (alt330) {
                case 1 :
                    // CSharp.g:2995:20: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_member_declaration22913);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2995:36: (com1= comments )?
            int alt331=2;
            int LA331_0 = input.LA(1);

            if ( ((LA331_0 >= SINGLE_LINE_COMMENT && LA331_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt331=1;
            }
            switch (alt331) {
                case 1 :
                    // CSharp.g:2995:37: com1= comments
                    {
                    pushFollow(FOLLOW_comments_in_interface_member_declaration22920);
                    com1=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:2995:53: (n= NEW )?
            int alt332=2;
            int LA332_0 = input.LA(1);

            if ( (LA332_0==NEW) ) {
                alt332=1;
            }
            switch (alt332) {
                case 1 :
                    // CSharp.g:2995:54: n= NEW
                    {
                    n=(Token)match(input,NEW,FOLLOW_NEW_in_interface_member_declaration22927); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_interface_member_declaration_Chld_in_interface_member_declaration22933);
            chld=interface_member_declaration_Chld();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2996:3: -> interfaceMemberDeclaration(com=comattributes=atcom1=com1newKwd=$n.textchild=chld)
              {
                  retval.st = templateLib.getInstanceOf("interfaceMemberDeclaration",new STAttrMap().put("com", com).put("attributes", at).put("com1", com1).put("newKwd", (n!=null?n.getText():null)).put("child", chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_member_declaration"


    public static class interface_member_declaration_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_member_declaration_Chld"
    // CSharp.g:2998:1: interface_member_declaration_Chld : (t= type subChld= interface_member_declaration_sub_Chld -> interfaceMemberDeclarationChld(type=CSharpHelper.replaceJavaType($t.text)subChild=subChld)| VOID IDENTIFIER (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON -> interfaceMemberDeclarationChld2(memNam=NamingUtil.toCamelCase($IDENTIFIER.text)typParLst=tplformlParLst=fpltypParConstCls=tpcc)| EVENT t= type IDENTIFIER SEMICOLON -> interfaceMemberDeclarationChld3(type=tevntName=$IDENTIFIER.text));
    public final CSharp.interface_member_declaration_Chld_return interface_member_declaration_Chld() throws RecognitionException {
        CSharp.interface_member_declaration_Chld_return retval = new CSharp.interface_member_declaration_Chld_return();
        retval.start = input.LT(1);


        Token IDENTIFIER296=null;
        Token IDENTIFIER297=null;
        CSharp.type_return t =null;

        CSharp.interface_member_declaration_sub_Chld_return subChld =null;

        CSharp.type_parameter_list_return tpl =null;

        CSharp.formal_parameter_list_return fpl =null;

        CSharp.type_parameter_constraints_clauses_return tpcc =null;


        try {
            // CSharp.g:2999:3: (t= type subChld= interface_member_declaration_sub_Chld -> interfaceMemberDeclarationChld(type=CSharpHelper.replaceJavaType($t.text)subChild=subChld)| VOID IDENTIFIER (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON -> interfaceMemberDeclarationChld2(memNam=NamingUtil.toCamelCase($IDENTIFIER.text)typParLst=tplformlParLst=fpltypParConstCls=tpcc)| EVENT t= type IDENTIFIER SEMICOLON -> interfaceMemberDeclarationChld3(type=tevntName=$IDENTIFIER.text))
            int alt336=3;
            switch ( input.LA(1) ) {
            case BOOL:
            case BYTE:
            case CHAR:
            case DECIMAL:
            case DOUBLE:
            case FLOAT:
            case IDENTIFIER:
            case INT:
            case LONG:
            case OBJECT:
            case SBYTE:
            case SHORT:
            case STRING:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt336=1;
                }
                break;
            case VOID:
                {
                int LA336_2 = input.LA(2);

                if ( (LA336_2==STAR) ) {
                    alt336=1;
                }
                else if ( (LA336_2==IDENTIFIER) ) {
                    alt336=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 2, input);

                    throw nvae;

                }
                }
                break;
            case EVENT:
                {
                alt336=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 336, 0, input);

                throw nvae;

            }

            switch (alt336) {
                case 1 :
                    // CSharp.g:3000:3: t= type subChld= interface_member_declaration_sub_Chld
                    {
                    pushFollow(FOLLOW_type_in_interface_member_declaration_Chld22976);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_interface_member_declaration_sub_Chld_in_interface_member_declaration_Chld22981);
                    subChld=interface_member_declaration_sub_Chld();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3001:3: -> interfaceMemberDeclarationChld(type=CSharpHelper.replaceJavaType($t.text)subChild=subChld)
                      {
                          retval.st = templateLib.getInstanceOf("interfaceMemberDeclarationChld",new STAttrMap().put("type", CSharpHelper.replaceJavaType((t!=null?input.toString(t.start,t.stop):null))).put("subChild", subChld));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:3002:5: VOID IDENTIFIER (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON
                    {
                    match(input,VOID,FOLLOW_VOID_in_interface_member_declaration_Chld23001); if (state.failed) return retval;

                    IDENTIFIER296=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_member_declaration_Chld23003); if (state.failed) return retval;

                    // CSharp.g:3002:21: (tpl= type_parameter_list )?
                    int alt333=2;
                    int LA333_0 = input.LA(1);

                    if ( (LA333_0==LT) ) {
                        alt333=1;
                    }
                    switch (alt333) {
                        case 1 :
                            // CSharp.g:3002:22: tpl= type_parameter_list
                            {
                            pushFollow(FOLLOW_type_parameter_list_in_interface_member_declaration_Chld23008);
                            tpl=type_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_interface_member_declaration_Chld23012); if (state.failed) return retval;

                    // CSharp.g:3002:60: (fpl= formal_parameter_list )?
                    int alt334=2;
                    int LA334_0 = input.LA(1);

                    if ( (LA334_0==BOOL||LA334_0==BYTE||LA334_0==CHAR||LA334_0==DECIMAL||LA334_0==DOUBLE||LA334_0==FLOAT||LA334_0==IDENTIFIER||LA334_0==INT||LA334_0==LONG||LA334_0==OBJECT||LA334_0==OPEN_BRACKET||LA334_0==OUT||LA334_0==PARAMS||LA334_0==REF||LA334_0==SBYTE||LA334_0==SHORT||LA334_0==STRING||LA334_0==THIS||(LA334_0 >= UINT && LA334_0 <= ULONG)||LA334_0==USHORT||LA334_0==VOID) ) {
                        alt334=1;
                    }
                    switch (alt334) {
                        case 1 :
                            // CSharp.g:3002:61: fpl= formal_parameter_list
                            {
                            pushFollow(FOLLOW_formal_parameter_list_in_interface_member_declaration_Chld23017);
                            fpl=formal_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_interface_member_declaration_Chld23021); if (state.failed) return retval;

                    // CSharp.g:3002:102: (tpcc= type_parameter_constraints_clauses )?
                    int alt335=2;
                    int LA335_0 = input.LA(1);

                    if ( (LA335_0==IDENTIFIER) ) {
                        alt335=1;
                    }
                    switch (alt335) {
                        case 1 :
                            // CSharp.g:3002:103: tpcc= type_parameter_constraints_clauses
                            {
                            pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_member_declaration_Chld23026);
                            tpcc=type_parameter_constraints_clauses();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_member_declaration_Chld23030); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3003:3: -> interfaceMemberDeclarationChld2(memNam=NamingUtil.toCamelCase($IDENTIFIER.text)typParLst=tplformlParLst=fpltypParConstCls=tpcc)
                      {
                          retval.st = templateLib.getInstanceOf("interfaceMemberDeclarationChld2",new STAttrMap().put("memNam", NamingUtil.toCamelCase((IDENTIFIER296!=null?IDENTIFIER296.getText():null))).put("typParLst", tpl).put("formlParLst", fpl).put("typParConstCls", tpcc));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:3004:5: EVENT t= type IDENTIFIER SEMICOLON
                    {
                    match(input,EVENT,FOLLOW_EVENT_in_interface_member_declaration_Chld23058); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_interface_member_declaration_Chld23062);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    IDENTIFIER297=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_member_declaration_Chld23064); if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_member_declaration_Chld23066); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3005:3: -> interfaceMemberDeclarationChld3(type=tevntName=$IDENTIFIER.text)
                      {
                          retval.st = templateLib.getInstanceOf("interfaceMemberDeclarationChld3",new STAttrMap().put("type", t).put("evntName", (IDENTIFIER297!=null?IDENTIFIER297.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_member_declaration_Chld"


    public static class interface_member_declaration_sub_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_member_declaration_sub_Chld"
    // CSharp.g:3008:1: interface_member_declaration_sub_Chld : ( IDENTIFIER (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON -> interfaceMemberDeclarationSubChld(memName=NamingUtil.toCamelCase($IDENTIFIER.text)typParLst=tplformlParLst=fpltypParConstrCls=tpcc)| IDENTIFIER OPEN_BRACE ia= interface_accessors CLOSE_BRACE -> interfaceMemberDeclarationSubChld2(memName=NamingUtil.toCamelCase($IDENTIFIER.text)accrs=ia)| THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE iacr= interface_accessors CLOSE_BRACE -> interfaceMemberDeclarationSubChld3(formlParLst=fplintfcAccrs=iacr));
    public final CSharp.interface_member_declaration_sub_Chld_return interface_member_declaration_sub_Chld() throws RecognitionException {
        CSharp.interface_member_declaration_sub_Chld_return retval = new CSharp.interface_member_declaration_sub_Chld_return();
        retval.start = input.LT(1);


        Token IDENTIFIER298=null;
        Token IDENTIFIER299=null;
        CSharp.type_parameter_list_return tpl =null;

        CSharp.formal_parameter_list_return fpl =null;

        CSharp.type_parameter_constraints_clauses_return tpcc =null;

        CSharp.interface_accessors_return ia =null;

        CSharp.interface_accessors_return iacr =null;


        try {
            // CSharp.g:3009:3: ( IDENTIFIER (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON -> interfaceMemberDeclarationSubChld(memName=NamingUtil.toCamelCase($IDENTIFIER.text)typParLst=tplformlParLst=fpltypParConstrCls=tpcc)| IDENTIFIER OPEN_BRACE ia= interface_accessors CLOSE_BRACE -> interfaceMemberDeclarationSubChld2(memName=NamingUtil.toCamelCase($IDENTIFIER.text)accrs=ia)| THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE iacr= interface_accessors CLOSE_BRACE -> interfaceMemberDeclarationSubChld3(formlParLst=fplintfcAccrs=iacr))
            int alt340=3;
            int LA340_0 = input.LA(1);

            if ( (LA340_0==IDENTIFIER) ) {
                int LA340_1 = input.LA(2);

                if ( (LA340_1==OPEN_BRACE) ) {
                    alt340=2;
                }
                else if ( (LA340_1==LT||LA340_1==OPEN_PARENS) ) {
                    alt340=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 340, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA340_0==THIS) ) {
                alt340=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 340, 0, input);

                throw nvae;

            }
            switch (alt340) {
                case 1 :
                    // CSharp.g:3010:3: IDENTIFIER (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON
                    {
                    IDENTIFIER298=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_member_declaration_sub_Chld23098); if (state.failed) return retval;

                    // CSharp.g:3010:14: (tpl= type_parameter_list )?
                    int alt337=2;
                    int LA337_0 = input.LA(1);

                    if ( (LA337_0==LT) ) {
                        alt337=1;
                    }
                    switch (alt337) {
                        case 1 :
                            // CSharp.g:3010:15: tpl= type_parameter_list
                            {
                            pushFollow(FOLLOW_type_parameter_list_in_interface_member_declaration_sub_Chld23103);
                            tpl=type_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_interface_member_declaration_sub_Chld23107); if (state.failed) return retval;

                    // CSharp.g:3010:53: (fpl= formal_parameter_list )?
                    int alt338=2;
                    int LA338_0 = input.LA(1);

                    if ( (LA338_0==BOOL||LA338_0==BYTE||LA338_0==CHAR||LA338_0==DECIMAL||LA338_0==DOUBLE||LA338_0==FLOAT||LA338_0==IDENTIFIER||LA338_0==INT||LA338_0==LONG||LA338_0==OBJECT||LA338_0==OPEN_BRACKET||LA338_0==OUT||LA338_0==PARAMS||LA338_0==REF||LA338_0==SBYTE||LA338_0==SHORT||LA338_0==STRING||LA338_0==THIS||(LA338_0 >= UINT && LA338_0 <= ULONG)||LA338_0==USHORT||LA338_0==VOID) ) {
                        alt338=1;
                    }
                    switch (alt338) {
                        case 1 :
                            // CSharp.g:3010:54: fpl= formal_parameter_list
                            {
                            pushFollow(FOLLOW_formal_parameter_list_in_interface_member_declaration_sub_Chld23112);
                            fpl=formal_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_interface_member_declaration_sub_Chld23116); if (state.failed) return retval;

                    // CSharp.g:3010:95: (tpcc= type_parameter_constraints_clauses )?
                    int alt339=2;
                    int LA339_0 = input.LA(1);

                    if ( (LA339_0==IDENTIFIER) ) {
                        alt339=1;
                    }
                    switch (alt339) {
                        case 1 :
                            // CSharp.g:3010:96: tpcc= type_parameter_constraints_clauses
                            {
                            pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_member_declaration_sub_Chld23121);
                            tpcc=type_parameter_constraints_clauses();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_member_declaration_sub_Chld23125); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3011:3: -> interfaceMemberDeclarationSubChld(memName=NamingUtil.toCamelCase($IDENTIFIER.text)typParLst=tplformlParLst=fpltypParConstrCls=tpcc)
                      {
                          retval.st = templateLib.getInstanceOf("interfaceMemberDeclarationSubChld",new STAttrMap().put("memName", NamingUtil.toCamelCase((IDENTIFIER298!=null?IDENTIFIER298.getText():null))).put("typParLst", tpl).put("formlParLst", fpl).put("typParConstrCls", tpcc));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:3012:5: IDENTIFIER OPEN_BRACE ia= interface_accessors CLOSE_BRACE
                    {
                    IDENTIFIER299=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_member_declaration_sub_Chld23153); if (state.failed) return retval;

                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_member_declaration_sub_Chld23155); if (state.failed) return retval;

                    pushFollow(FOLLOW_interface_accessors_in_interface_member_declaration_sub_Chld23159);
                    ia=interface_accessors();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_member_declaration_sub_Chld23161); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3013:3: -> interfaceMemberDeclarationSubChld2(memName=NamingUtil.toCamelCase($IDENTIFIER.text)accrs=ia)
                      {
                          retval.st = templateLib.getInstanceOf("interfaceMemberDeclarationSubChld2",new STAttrMap().put("memName", NamingUtil.toCamelCase((IDENTIFIER299!=null?IDENTIFIER299.getText():null))).put("accrs", ia));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:3014:5: THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE iacr= interface_accessors CLOSE_BRACE
                    {
                    match(input,THIS,FOLLOW_THIS_in_interface_member_declaration_sub_Chld23181); if (state.failed) return retval;

                    match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_interface_member_declaration_sub_Chld23183); if (state.failed) return retval;

                    pushFollow(FOLLOW_formal_parameter_list_in_interface_member_declaration_sub_Chld23187);
                    fpl=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_interface_member_declaration_sub_Chld23189); if (state.failed) return retval;

                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_member_declaration_sub_Chld23191); if (state.failed) return retval;

                    pushFollow(FOLLOW_interface_accessors_in_interface_member_declaration_sub_Chld23195);
                    iacr=interface_accessors();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_member_declaration_sub_Chld23197); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3015:3: -> interfaceMemberDeclarationSubChld3(formlParLst=fplintfcAccrs=iacr)
                      {
                          retval.st = templateLib.getInstanceOf("interfaceMemberDeclarationSubChld3",new STAttrMap().put("formlParLst", fpl).put("intfcAccrs", iacr));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_member_declaration_sub_Chld"


    public static class interface_method_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_method_declaration"
    // CSharp.g:3017:1: interface_method_declaration : (at= attributes )? (n= NEW )? t= return_type IDENTIFIER (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON -> interfaceMethodDeclaration(attributes=atnewKwd=$n.texttype=tmethdNam=$IDENTIFIER.texttypParLst=tplfprmlParLst=fpltypParConstCls=tpcc);
    public final CSharp.interface_method_declaration_return interface_method_declaration() throws RecognitionException {
        CSharp.interface_method_declaration_return retval = new CSharp.interface_method_declaration_return();
        retval.start = input.LT(1);


        Token n=null;
        Token IDENTIFIER300=null;
        CSharp.attributes_return at =null;

        CSharp.return_type_return t =null;

        CSharp.type_parameter_list_return tpl =null;

        CSharp.formal_parameter_list_return fpl =null;

        CSharp.type_parameter_constraints_clauses_return tpcc =null;


        try {
            // CSharp.g:3018:2: ( (at= attributes )? (n= NEW )? t= return_type IDENTIFIER (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON -> interfaceMethodDeclaration(attributes=atnewKwd=$n.texttype=tmethdNam=$IDENTIFIER.texttypParLst=tplfprmlParLst=fpltypParConstCls=tpcc))
            // CSharp.g:3019:2: (at= attributes )? (n= NEW )? t= return_type IDENTIFIER (tpl= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON
            {
            // CSharp.g:3019:2: (at= attributes )?
            int alt341=2;
            int LA341_0 = input.LA(1);

            if ( (LA341_0==OPEN_BRACKET) ) {
                alt341=1;
            }
            switch (alt341) {
                case 1 :
                    // CSharp.g:3019:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_method_declaration23228);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3019:19: (n= NEW )?
            int alt342=2;
            int LA342_0 = input.LA(1);

            if ( (LA342_0==NEW) ) {
                alt342=1;
            }
            switch (alt342) {
                case 1 :
                    // CSharp.g:3019:20: n= NEW
                    {
                    n=(Token)match(input,NEW,FOLLOW_NEW_in_interface_method_declaration23235); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_return_type_in_interface_method_declaration23241);
            t=return_type();

            state._fsp--;
            if (state.failed) return retval;

            IDENTIFIER300=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_method_declaration23243); if (state.failed) return retval;

            // CSharp.g:3019:53: (tpl= type_parameter_list )?
            int alt343=2;
            int LA343_0 = input.LA(1);

            if ( (LA343_0==LT) ) {
                alt343=1;
            }
            switch (alt343) {
                case 1 :
                    // CSharp.g:3019:54: tpl= type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_interface_method_declaration23248);
                    tpl=type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_interface_method_declaration23252); if (state.failed) return retval;

            // CSharp.g:3019:92: (fpl= formal_parameter_list )?
            int alt344=2;
            int LA344_0 = input.LA(1);

            if ( (LA344_0==BOOL||LA344_0==BYTE||LA344_0==CHAR||LA344_0==DECIMAL||LA344_0==DOUBLE||LA344_0==FLOAT||LA344_0==IDENTIFIER||LA344_0==INT||LA344_0==LONG||LA344_0==OBJECT||LA344_0==OPEN_BRACKET||LA344_0==OUT||LA344_0==PARAMS||LA344_0==REF||LA344_0==SBYTE||LA344_0==SHORT||LA344_0==STRING||LA344_0==THIS||(LA344_0 >= UINT && LA344_0 <= ULONG)||LA344_0==USHORT||LA344_0==VOID) ) {
                alt344=1;
            }
            switch (alt344) {
                case 1 :
                    // CSharp.g:3019:93: fpl= formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_interface_method_declaration23257);
                    fpl=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_interface_method_declaration23261); if (state.failed) return retval;

            // CSharp.g:3019:134: (tpcc= type_parameter_constraints_clauses )?
            int alt345=2;
            int LA345_0 = input.LA(1);

            if ( (LA345_0==IDENTIFIER) ) {
                alt345=1;
            }
            switch (alt345) {
                case 1 :
                    // CSharp.g:3019:135: tpcc= type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration23266);
                    tpcc=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_method_declaration23270); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3020:2: -> interfaceMethodDeclaration(attributes=atnewKwd=$n.texttype=tmethdNam=$IDENTIFIER.texttypParLst=tplfprmlParLst=fpltypParConstCls=tpcc)
              {
                  retval.st = templateLib.getInstanceOf("interfaceMethodDeclaration",new STAttrMap().put("attributes", at).put("newKwd", (n!=null?n.getText():null)).put("type", t).put("methdNam", (IDENTIFIER300!=null?IDENTIFIER300.getText():null)).put("typParLst", tpl).put("fprmlParLst", fpl).put("typParConstCls", tpcc));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_method_declaration"


    public static class interface_property_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_property_declaration"
    // CSharp.g:3022:1: interface_property_declaration : (at= attributes )? (n= NEW )? t= type IDENTIFIER OPEN_BRACE ia= interface_accessors CLOSE_BRACE -> interfacePropertyDeclaration(attributes=atnewKwd=$n.texttype=tpropName=$IDENTIFIER.textintfcAccrs=ia);
    public final CSharp.interface_property_declaration_return interface_property_declaration() throws RecognitionException {
        CSharp.interface_property_declaration_return retval = new CSharp.interface_property_declaration_return();
        retval.start = input.LT(1);


        Token n=null;
        Token IDENTIFIER301=null;
        CSharp.attributes_return at =null;

        CSharp.type_return t =null;

        CSharp.interface_accessors_return ia =null;


        try {
            // CSharp.g:3023:2: ( (at= attributes )? (n= NEW )? t= type IDENTIFIER OPEN_BRACE ia= interface_accessors CLOSE_BRACE -> interfacePropertyDeclaration(attributes=atnewKwd=$n.texttype=tpropName=$IDENTIFIER.textintfcAccrs=ia))
            // CSharp.g:3024:2: (at= attributes )? (n= NEW )? t= type IDENTIFIER OPEN_BRACE ia= interface_accessors CLOSE_BRACE
            {
            // CSharp.g:3024:2: (at= attributes )?
            int alt346=2;
            int LA346_0 = input.LA(1);

            if ( (LA346_0==OPEN_BRACKET) ) {
                alt346=1;
            }
            switch (alt346) {
                case 1 :
                    // CSharp.g:3024:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_property_declaration23319);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3024:19: (n= NEW )?
            int alt347=2;
            int LA347_0 = input.LA(1);

            if ( (LA347_0==NEW) ) {
                alt347=1;
            }
            switch (alt347) {
                case 1 :
                    // CSharp.g:3024:20: n= NEW
                    {
                    n=(Token)match(input,NEW,FOLLOW_NEW_in_interface_property_declaration23326); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_in_interface_property_declaration23332);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            IDENTIFIER301=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_property_declaration23334); if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_property_declaration23336); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_accessors_in_interface_property_declaration23340);
            ia=interface_accessors();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_property_declaration23342); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3025:2: -> interfacePropertyDeclaration(attributes=atnewKwd=$n.texttype=tpropName=$IDENTIFIER.textintfcAccrs=ia)
              {
                  retval.st = templateLib.getInstanceOf("interfacePropertyDeclaration",new STAttrMap().put("attributes", at).put("newKwd", (n!=null?n.getText():null)).put("type", t).put("propName", (IDENTIFIER301!=null?IDENTIFIER301.getText():null)).put("intfcAccrs", ia));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_property_declaration"


    public static class interface_accessors_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_accessors"
    // CSharp.g:3035:1: interface_accessors : (at= attributes )? ( get_contextual_keyword SEMICOLON ( ( attributes )? set_contextual_keyword SEMICOLON )? | set_contextual_keyword SEMICOLON ( ( attributes )? get_contextual_keyword SEMICOLON )? ) -> interfaceAccessors(attributes=at);
    public final CSharp.interface_accessors_return interface_accessors() throws RecognitionException {
        CSharp.interface_accessors_return retval = new CSharp.interface_accessors_return();
        retval.start = input.LT(1);


        CSharp.attributes_return at =null;


        try {
            // CSharp.g:3036:3: ( (at= attributes )? ( get_contextual_keyword SEMICOLON ( ( attributes )? set_contextual_keyword SEMICOLON )? | set_contextual_keyword SEMICOLON ( ( attributes )? get_contextual_keyword SEMICOLON )? ) -> interfaceAccessors(attributes=at))
            // CSharp.g:3037:3: (at= attributes )? ( get_contextual_keyword SEMICOLON ( ( attributes )? set_contextual_keyword SEMICOLON )? | set_contextual_keyword SEMICOLON ( ( attributes )? get_contextual_keyword SEMICOLON )? )
            {
            // CSharp.g:3037:3: (at= attributes )?
            int alt348=2;
            int LA348_0 = input.LA(1);

            if ( (LA348_0==OPEN_BRACKET) ) {
                alt348=1;
            }
            switch (alt348) {
                case 1 :
                    // CSharp.g:3037:4: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_accessors23387);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3038:5: ( get_contextual_keyword SEMICOLON ( ( attributes )? set_contextual_keyword SEMICOLON )? | set_contextual_keyword SEMICOLON ( ( attributes )? get_contextual_keyword SEMICOLON )? )
            int alt353=2;
            int LA353_0 = input.LA(1);

            if ( (LA353_0==IDENTIFIER) ) {
                int LA353_1 = input.LA(2);

                if ( (LA353_1==SEMICOLON) ) {
                    int LA353_2 = input.LA(3);

                    if ( ((input.LT(1).getText().equals("get"))) ) {
                        alt353=1;
                    }
                    else if ( ((input.LT(1).getText().equals("set"))) ) {
                        alt353=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 353, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 353, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 353, 0, input);

                throw nvae;

            }
            switch (alt353) {
                case 1 :
                    // CSharp.g:3038:7: get_contextual_keyword SEMICOLON ( ( attributes )? set_contextual_keyword SEMICOLON )?
                    {
                    pushFollow(FOLLOW_get_contextual_keyword_in_interface_accessors23397);
                    get_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_accessors23399); if (state.failed) return retval;

                    // CSharp.g:3038:40: ( ( attributes )? set_contextual_keyword SEMICOLON )?
                    int alt350=2;
                    int LA350_0 = input.LA(1);

                    if ( (LA350_0==IDENTIFIER||LA350_0==OPEN_BRACKET) ) {
                        alt350=1;
                    }
                    switch (alt350) {
                        case 1 :
                            // CSharp.g:3038:41: ( attributes )? set_contextual_keyword SEMICOLON
                            {
                            // CSharp.g:3038:41: ( attributes )?
                            int alt349=2;
                            int LA349_0 = input.LA(1);

                            if ( (LA349_0==OPEN_BRACKET) ) {
                                alt349=1;
                            }
                            switch (alt349) {
                                case 1 :
                                    // CSharp.g:3038:41: attributes
                                    {
                                    pushFollow(FOLLOW_attributes_in_interface_accessors23402);
                                    attributes();

                                    state._fsp--;
                                    if (state.failed) return retval;

                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_set_contextual_keyword_in_interface_accessors23405);
                            set_contextual_keyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_accessors23407); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CSharp.g:3039:7: set_contextual_keyword SEMICOLON ( ( attributes )? get_contextual_keyword SEMICOLON )?
                    {
                    pushFollow(FOLLOW_set_contextual_keyword_in_interface_accessors23417);
                    set_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_accessors23419); if (state.failed) return retval;

                    // CSharp.g:3039:40: ( ( attributes )? get_contextual_keyword SEMICOLON )?
                    int alt352=2;
                    int LA352_0 = input.LA(1);

                    if ( (LA352_0==IDENTIFIER||LA352_0==OPEN_BRACKET) ) {
                        alt352=1;
                    }
                    switch (alt352) {
                        case 1 :
                            // CSharp.g:3039:41: ( attributes )? get_contextual_keyword SEMICOLON
                            {
                            // CSharp.g:3039:41: ( attributes )?
                            int alt351=2;
                            int LA351_0 = input.LA(1);

                            if ( (LA351_0==OPEN_BRACKET) ) {
                                alt351=1;
                            }
                            switch (alt351) {
                                case 1 :
                                    // CSharp.g:3039:41: attributes
                                    {
                                    pushFollow(FOLLOW_attributes_in_interface_accessors23422);
                                    attributes();

                                    state._fsp--;
                                    if (state.failed) return retval;

                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_get_contextual_keyword_in_interface_accessors23425);
                            get_contextual_keyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_accessors23427); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3041:3: -> interfaceAccessors(attributes=at)
              {
                  retval.st = templateLib.getInstanceOf("interfaceAccessors",new STAttrMap().put("attributes", at));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_accessors"


    public static class interface_event_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_event_declaration"
    // CSharp.g:3043:1: interface_event_declaration : (at= attributes )? (n= NEW )? EVENT t= type IDENTIFIER SEMICOLON -> interfaceEventDeclaration(attributes=atnewKwd=$n.texttype=tevntName=$IDENTIFIER.text);
    public final CSharp.interface_event_declaration_return interface_event_declaration() throws RecognitionException {
        CSharp.interface_event_declaration_return retval = new CSharp.interface_event_declaration_return();
        retval.start = input.LT(1);


        Token n=null;
        Token IDENTIFIER302=null;
        CSharp.attributes_return at =null;

        CSharp.type_return t =null;


        try {
            // CSharp.g:3044:2: ( (at= attributes )? (n= NEW )? EVENT t= type IDENTIFIER SEMICOLON -> interfaceEventDeclaration(attributes=atnewKwd=$n.texttype=tevntName=$IDENTIFIER.text))
            // CSharp.g:3045:2: (at= attributes )? (n= NEW )? EVENT t= type IDENTIFIER SEMICOLON
            {
            // CSharp.g:3045:2: (at= attributes )?
            int alt354=2;
            int LA354_0 = input.LA(1);

            if ( (LA354_0==OPEN_BRACKET) ) {
                alt354=1;
            }
            switch (alt354) {
                case 1 :
                    // CSharp.g:3045:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_event_declaration23464);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3045:19: (n= NEW )?
            int alt355=2;
            int LA355_0 = input.LA(1);

            if ( (LA355_0==NEW) ) {
                alt355=1;
            }
            switch (alt355) {
                case 1 :
                    // CSharp.g:3045:20: n= NEW
                    {
                    n=(Token)match(input,NEW,FOLLOW_NEW_in_interface_event_declaration23471); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,EVENT,FOLLOW_EVENT_in_interface_event_declaration23475); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_interface_event_declaration23479);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            IDENTIFIER302=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_event_declaration23481); if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_event_declaration23483); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3046:2: -> interfaceEventDeclaration(attributes=atnewKwd=$n.texttype=tevntName=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("interfaceEventDeclaration",new STAttrMap().put("attributes", at).put("newKwd", (n!=null?n.getText():null)).put("type", t).put("evntName", (IDENTIFIER302!=null?IDENTIFIER302.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_event_declaration"


    public static class interface_indexer_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_indexer_declaration"
    // CSharp.g:3048:1: interface_indexer_declaration : (at= attributes )? (n= NEW )? t= type THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE ia= interface_accessors CLOSE_BRACE -> interfaceIndexerDeclaration(attributes=atnewKwd=$n.texttype=tformlParLst=fplaccs=ia);
    public final CSharp.interface_indexer_declaration_return interface_indexer_declaration() throws RecognitionException {
        CSharp.interface_indexer_declaration_return retval = new CSharp.interface_indexer_declaration_return();
        retval.start = input.LT(1);


        Token n=null;
        CSharp.attributes_return at =null;

        CSharp.type_return t =null;

        CSharp.formal_parameter_list_return fpl =null;

        CSharp.interface_accessors_return ia =null;


        try {
            // CSharp.g:3049:2: ( (at= attributes )? (n= NEW )? t= type THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE ia= interface_accessors CLOSE_BRACE -> interfaceIndexerDeclaration(attributes=atnewKwd=$n.texttype=tformlParLst=fplaccs=ia))
            // CSharp.g:3050:2: (at= attributes )? (n= NEW )? t= type THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE ia= interface_accessors CLOSE_BRACE
            {
            // CSharp.g:3050:2: (at= attributes )?
            int alt356=2;
            int LA356_0 = input.LA(1);

            if ( (LA356_0==OPEN_BRACKET) ) {
                alt356=1;
            }
            switch (alt356) {
                case 1 :
                    // CSharp.g:3050:3: at= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_indexer_declaration23520);
                    at=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3050:19: (n= NEW )?
            int alt357=2;
            int LA357_0 = input.LA(1);

            if ( (LA357_0==NEW) ) {
                alt357=1;
            }
            switch (alt357) {
                case 1 :
                    // CSharp.g:3050:20: n= NEW
                    {
                    n=(Token)match(input,NEW,FOLLOW_NEW_in_interface_indexer_declaration23527); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_in_interface_indexer_declaration23533);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,THIS,FOLLOW_THIS_in_interface_indexer_declaration23535); if (state.failed) return retval;

            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_interface_indexer_declaration23537); if (state.failed) return retval;

            pushFollow(FOLLOW_formal_parameter_list_in_interface_indexer_declaration23541);
            fpl=formal_parameter_list();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_interface_indexer_declaration23543); if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_indexer_declaration23545); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_accessors_in_interface_indexer_declaration23549);
            ia=interface_accessors();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_indexer_declaration23551); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3051:2: -> interfaceIndexerDeclaration(attributes=atnewKwd=$n.texttype=tformlParLst=fplaccs=ia)
              {
                  retval.st = templateLib.getInstanceOf("interfaceIndexerDeclaration",new STAttrMap().put("attributes", at).put("newKwd", (n!=null?n.getText():null)).put("type", t).put("formlParLst", fpl).put("accs", ia));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_indexer_declaration"


    public static class enum_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_declaration"
    // CSharp.g:3056:1: enum_declaration : (attr= attributes )? (enummod= enum_modifiers )? ENUM IDENTIFIER (enumbase= enum_base )? enumbody= enum_body ( SEMICOLON )? -> enumdeclaration(attr=attrenummod=enummodenumbase=enumbaseenumbody=enumbody);
    public final CSharp.enum_declaration_return enum_declaration() throws RecognitionException {
        CSharp.enum_declaration_return retval = new CSharp.enum_declaration_return();
        retval.start = input.LT(1);


        CSharp.attributes_return attr =null;

        CSharp.enum_modifiers_return enummod =null;

        CSharp.enum_base_return enumbase =null;

        CSharp.enum_body_return enumbody =null;


        try {
            // CSharp.g:3057:2: ( (attr= attributes )? (enummod= enum_modifiers )? ENUM IDENTIFIER (enumbase= enum_base )? enumbody= enum_body ( SEMICOLON )? -> enumdeclaration(attr=attrenummod=enummodenumbase=enumbaseenumbody=enumbody))
            // CSharp.g:3057:4: (attr= attributes )? (enummod= enum_modifiers )? ENUM IDENTIFIER (enumbase= enum_base )? enumbody= enum_body ( SEMICOLON )?
            {
            // CSharp.g:3057:8: (attr= attributes )?
            int alt358=2;
            int LA358_0 = input.LA(1);

            if ( (LA358_0==OPEN_BRACKET) ) {
                alt358=1;
            }
            switch (alt358) {
                case 1 :
                    // CSharp.g:3057:8: attr= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_enum_declaration23592);
                    attr=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3057:28: (enummod= enum_modifiers )?
            int alt359=2;
            int LA359_0 = input.LA(1);

            if ( (LA359_0==INTERNAL||LA359_0==NEW||(LA359_0 >= PRIVATE && LA359_0 <= PUBLIC)) ) {
                alt359=1;
            }
            switch (alt359) {
                case 1 :
                    // CSharp.g:3057:28: enummod= enum_modifiers
                    {
                    pushFollow(FOLLOW_enum_modifiers_in_enum_declaration23597);
                    enummod=enum_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,ENUM,FOLLOW_ENUM_in_enum_declaration23600); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enum_declaration23602); if (state.failed) return retval;

            // CSharp.g:3057:69: (enumbase= enum_base )?
            int alt360=2;
            int LA360_0 = input.LA(1);

            if ( (LA360_0==COLON) ) {
                alt360=1;
            }
            switch (alt360) {
                case 1 :
                    // CSharp.g:3057:69: enumbase= enum_base
                    {
                    pushFollow(FOLLOW_enum_base_in_enum_declaration23606);
                    enumbase=enum_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_enum_body_in_enum_declaration23611);
            enumbody=enum_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:3057:100: ( SEMICOLON )?
            int alt361=2;
            int LA361_0 = input.LA(1);

            if ( (LA361_0==SEMICOLON) ) {
                alt361=1;
            }
            switch (alt361) {
                case 1 :
                    // CSharp.g:3057:100: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_enum_declaration23613); if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3058:2: -> enumdeclaration(attr=attrenummod=enummodenumbase=enumbaseenumbody=enumbody)
              {
                  retval.st = templateLib.getInstanceOf("enumdeclaration",new STAttrMap().put("attr", attr).put("enummod", enummod).put("enumbase", enumbase).put("enumbody", enumbody));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_declaration"


    public static class enum_base_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_base"
    // CSharp.g:3060:1: enum_base : COLON inttype= integral_type -> enumbase(inttype=inttype);
    public final CSharp.enum_base_return enum_base() throws RecognitionException {
        CSharp.enum_base_return retval = new CSharp.enum_base_return();
        retval.start = input.LT(1);


        CSharp.integral_type_return inttype =null;


        try {
            // CSharp.g:3061:2: ( COLON inttype= integral_type -> enumbase(inttype=inttype))
            // CSharp.g:3061:4: COLON inttype= integral_type
            {
            match(input,COLON,FOLLOW_COLON_in_enum_base23646); if (state.failed) return retval;

            pushFollow(FOLLOW_integral_type_in_enum_base23650);
            inttype=integral_type();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3062:2: -> enumbase(inttype=inttype)
              {
                  retval.st = templateLib.getInstanceOf("enumbase",new STAttrMap().put("inttype", inttype));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_base"


    public static class enum_body_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_body"
    // CSharp.g:3070:1: enum_body : ( OPEN_BRACE CLOSE_BRACE | OPEN_BRACE enumdec= enum_member_declarations ( COMMA )? CLOSE_BRACE -> enumbody(enumdec=enumdec));
    public final CSharp.enum_body_return enum_body() throws RecognitionException {
        CSharp.enum_body_return retval = new CSharp.enum_body_return();
        retval.start = input.LT(1);


        CSharp.enum_member_declarations_return enumdec =null;


        try {
            // CSharp.g:3071:3: ( OPEN_BRACE CLOSE_BRACE | OPEN_BRACE enumdec= enum_member_declarations ( COMMA )? CLOSE_BRACE -> enumbody(enumdec=enumdec))
            int alt363=2;
            int LA363_0 = input.LA(1);

            if ( (LA363_0==OPEN_BRACE) ) {
                int LA363_1 = input.LA(2);

                if ( (LA363_1==CLOSE_BRACE) ) {
                    alt363=1;
                }
                else if ( (LA363_1==IDENTIFIER||LA363_1==OPEN_BRACKET) ) {
                    alt363=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 363, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 363, 0, input);

                throw nvae;

            }
            switch (alt363) {
                case 1 :
                    // CSharp.g:3071:5: OPEN_BRACE CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_enum_body23673); if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_enum_body23675); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp.g:3072:5: OPEN_BRACE enumdec= enum_member_declarations ( COMMA )? CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_enum_body23681); if (state.failed) return retval;

                    pushFollow(FOLLOW_enum_member_declarations_in_enum_body23685);
                    enumdec=enum_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp.g:3072:49: ( COMMA )?
                    int alt362=2;
                    int LA362_0 = input.LA(1);

                    if ( (LA362_0==COMMA) ) {
                        alt362=1;
                    }
                    switch (alt362) {
                        case 1 :
                            // CSharp.g:3072:49: COMMA
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_enum_body23687); if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_enum_body23690); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3073:3: -> enumbody(enumdec=enumdec)
                      {
                          retval.st = templateLib.getInstanceOf("enumbody",new STAttrMap().put("enumdec", enumdec));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_body"


    public static class enum_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_modifiers"
    // CSharp.g:3075:1: enum_modifiers : (enummodifier= enum_modifier )+ -> enummodifiers(enummodifier=enummodifier);
    public final CSharp.enum_modifiers_return enum_modifiers() throws RecognitionException {
        CSharp.enum_modifiers_return retval = new CSharp.enum_modifiers_return();
        retval.start = input.LT(1);


        CSharp.enum_modifier_return enummodifier =null;


        try {
            // CSharp.g:3076:2: ( (enummodifier= enum_modifier )+ -> enummodifiers(enummodifier=enummodifier))
            // CSharp.g:3076:4: (enummodifier= enum_modifier )+
            {
            // CSharp.g:3076:4: (enummodifier= enum_modifier )+
            int cnt364=0;
            loop364:
            do {
                int alt364=2;
                int LA364_0 = input.LA(1);

                if ( (LA364_0==INTERNAL||LA364_0==NEW||(LA364_0 >= PRIVATE && LA364_0 <= PUBLIC)) ) {
                    alt364=1;
                }


                switch (alt364) {
            	case 1 :
            	    // CSharp.g:3076:5: enummodifier= enum_modifier
            	    {
            	    pushFollow(FOLLOW_enum_modifier_in_enum_modifiers23715);
            	    enummodifier=enum_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt364 >= 1 ) break loop364;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(364, input);
                        throw eee;
                }
                cnt364++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3077:2: -> enummodifiers(enummodifier=enummodifier)
              {
                  retval.st = templateLib.getInstanceOf("enummodifiers",new STAttrMap().put("enummodifier", enummodifier));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_modifiers"


    public static class enum_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_modifier"
    // CSharp.g:3079:1: enum_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text));
    public final CSharp.enum_modifier_return enum_modifier() throws RecognitionException {
        CSharp.enum_modifier_return retval = new CSharp.enum_modifier_return();
        retval.start = input.LT(1);


        Token NEW303=null;
        Token PUBLIC304=null;
        Token PROTECTED305=null;
        Token PRIVATE306=null;

        try {
            // CSharp.g:3080:3: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text))
            int alt365=5;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt365=1;
                }
                break;
            case PUBLIC:
                {
                alt365=2;
                }
                break;
            case PROTECTED:
                {
                alt365=3;
                }
                break;
            case INTERNAL:
                {
                alt365=4;
                }
                break;
            case PRIVATE:
                {
                alt365=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 365, 0, input);

                throw nvae;

            }

            switch (alt365) {
                case 1 :
                    // CSharp.g:3081:3: NEW
                    {
                    NEW303=(Token)match(input,NEW,FOLLOW_NEW_in_enum_modifier23741); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3081:21: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW303!=null?NEW303.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:3082:5: PUBLIC
                    {
                    PUBLIC304=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_enum_modifier23769); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3082:21: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC304!=null?PUBLIC304.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:3083:5: PROTECTED
                    {
                    PROTECTED305=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_enum_modifier23792); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3083:21: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED305!=null?PROTECTED305.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:3084:5: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_enum_modifier23812); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3084:21: -> text(value=\"private\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "private"));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:3085:5: PRIVATE
                    {
                    PRIVATE306=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_enum_modifier23833); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3085:21: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE306!=null?PRIVATE306.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_modifier"


    public static class enum_member_declarations_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_member_declarations"
    // CSharp.g:3088:1: enum_member_declarations : enumemdec= enum_member_declaration ( COMMA enumemdec1= enum_member_declaration )* -> enummemberdeclarations(enumemdec=enumemdecenumemdec1=enumemdec1);
    public final CSharp.enum_member_declarations_return enum_member_declarations() throws RecognitionException {
        CSharp.enum_member_declarations_return retval = new CSharp.enum_member_declarations_return();
        retval.start = input.LT(1);


        CSharp.enum_member_declaration_return enumemdec =null;

        CSharp.enum_member_declaration_return enumemdec1 =null;


        try {
            // CSharp.g:3089:2: (enumemdec= enum_member_declaration ( COMMA enumemdec1= enum_member_declaration )* -> enummemberdeclarations(enumemdec=enumemdecenumemdec1=enumemdec1))
            // CSharp.g:3089:4: enumemdec= enum_member_declaration ( COMMA enumemdec1= enum_member_declaration )*
            {
            pushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations23864);
            enumemdec=enum_member_declaration();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:3089:38: ( COMMA enumemdec1= enum_member_declaration )*
            loop366:
            do {
                int alt366=2;
                int LA366_0 = input.LA(1);

                if ( (LA366_0==COMMA) ) {
                    int LA366_1 = input.LA(2);

                    if ( (LA366_1==IDENTIFIER||LA366_1==OPEN_BRACKET) ) {
                        alt366=1;
                    }


                }


                switch (alt366) {
            	case 1 :
            	    // CSharp.g:3089:40: COMMA enumemdec1= enum_member_declaration
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_enum_member_declarations23868); if (state.failed) return retval;

            	    pushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations23873);
            	    enumemdec1=enum_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop366;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3090:2: -> enummemberdeclarations(enumemdec=enumemdecenumemdec1=enumemdec1)
              {
                  retval.st = templateLib.getInstanceOf("enummemberdeclarations",new STAttrMap().put("enumemdec", enumemdec).put("enumemdec1", enumemdec1));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_member_declarations"


    public static class enum_member_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_member_declaration"
    // CSharp.g:3098:1: enum_member_declaration : (attrib= attributes )? IDENTIFIER ( ASSIGNMENT constexpres= constant_expression )? -> enummemberdeclaration(attrib=attribconstexpres=constexpres);
    public final CSharp.enum_member_declaration_return enum_member_declaration() throws RecognitionException {
        CSharp.enum_member_declaration_return retval = new CSharp.enum_member_declaration_return();
        retval.start = input.LT(1);


        CSharp.attributes_return attrib =null;

        CSharp.constant_expression_return constexpres =null;


        try {
            // CSharp.g:3099:3: ( (attrib= attributes )? IDENTIFIER ( ASSIGNMENT constexpres= constant_expression )? -> enummemberdeclaration(attrib=attribconstexpres=constexpres))
            // CSharp.g:3099:5: (attrib= attributes )? IDENTIFIER ( ASSIGNMENT constexpres= constant_expression )?
            {
            // CSharp.g:3099:11: (attrib= attributes )?
            int alt367=2;
            int LA367_0 = input.LA(1);

            if ( (LA367_0==OPEN_BRACKET) ) {
                alt367=1;
            }
            switch (alt367) {
                case 1 :
                    // CSharp.g:3099:11: attrib= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_enum_member_declaration23905);
                    attrib=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enum_member_declaration23908); if (state.failed) return retval;

            // CSharp.g:3099:35: ( ASSIGNMENT constexpres= constant_expression )?
            int alt368=2;
            int LA368_0 = input.LA(1);

            if ( (LA368_0==ASSIGNMENT) ) {
                alt368=1;
            }
            switch (alt368) {
                case 1 :
                    // CSharp.g:3099:36: ASSIGNMENT constexpres= constant_expression
                    {
                    match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_enum_member_declaration23911); if (state.failed) return retval;

                    pushFollow(FOLLOW_constant_expression_in_enum_member_declaration23915);
                    constexpres=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3100:3: -> enummemberdeclaration(attrib=attribconstexpres=constexpres)
              {
                  retval.st = templateLib.getInstanceOf("enummemberdeclaration",new STAttrMap().put("attrib", attrib).put("constexpres", constexpres));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_member_declaration"


    public static class delegate_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_declaration"
    // CSharp.g:3104:1: delegate_declaration : ( attributes )? ( delegate_modifiers )? DELEGATE return_type IDENTIFIER ( variant_type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON ;
    public final CSharp.delegate_declaration_return delegate_declaration() throws RecognitionException {
        CSharp.delegate_declaration_return retval = new CSharp.delegate_declaration_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3105:2: ( ( attributes )? ( delegate_modifiers )? DELEGATE return_type IDENTIFIER ( variant_type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON )
            // CSharp.g:3105:4: ( attributes )? ( delegate_modifiers )? DELEGATE return_type IDENTIFIER ( variant_type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON
            {
            // CSharp.g:3105:4: ( attributes )?
            int alt369=2;
            int LA369_0 = input.LA(1);

            if ( (LA369_0==OPEN_BRACKET) ) {
                alt369=1;
            }
            switch (alt369) {
                case 1 :
                    // CSharp.g:3105:4: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_delegate_declaration23945);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3105:16: ( delegate_modifiers )?
            int alt370=2;
            int LA370_0 = input.LA(1);

            if ( (LA370_0==INTERNAL||LA370_0==NEW||(LA370_0 >= PRIVATE && LA370_0 <= PUBLIC)||LA370_0==UNSAFE) ) {
                alt370=1;
            }
            switch (alt370) {
                case 1 :
                    // CSharp.g:3105:16: delegate_modifiers
                    {
                    pushFollow(FOLLOW_delegate_modifiers_in_delegate_declaration23948);
                    delegate_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,DELEGATE,FOLLOW_DELEGATE_in_delegate_declaration23951); if (state.failed) return retval;

            pushFollow(FOLLOW_return_type_in_delegate_declaration23953);
            return_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_delegate_declaration23955); if (state.failed) return retval;

            // CSharp.g:3105:68: ( variant_type_parameter_list )?
            int alt371=2;
            int LA371_0 = input.LA(1);

            if ( (LA371_0==LT) ) {
                alt371=1;
            }
            switch (alt371) {
                case 1 :
                    // CSharp.g:3105:68: variant_type_parameter_list
                    {
                    pushFollow(FOLLOW_variant_type_parameter_list_in_delegate_declaration23957);
                    variant_type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_delegate_declaration23966); if (state.failed) return retval;

            // CSharp.g:3106:18: ( formal_parameter_list )?
            int alt372=2;
            int LA372_0 = input.LA(1);

            if ( (LA372_0==BOOL||LA372_0==BYTE||LA372_0==CHAR||LA372_0==DECIMAL||LA372_0==DOUBLE||LA372_0==FLOAT||LA372_0==IDENTIFIER||LA372_0==INT||LA372_0==LONG||LA372_0==OBJECT||LA372_0==OPEN_BRACKET||LA372_0==OUT||LA372_0==PARAMS||LA372_0==REF||LA372_0==SBYTE||LA372_0==SHORT||LA372_0==STRING||LA372_0==THIS||(LA372_0 >= UINT && LA372_0 <= ULONG)||LA372_0==USHORT||LA372_0==VOID) ) {
                alt372=1;
            }
            switch (alt372) {
                case 1 :
                    // CSharp.g:3106:18: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_delegate_declaration23968);
                    formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_delegate_declaration23971); if (state.failed) return retval;

            // CSharp.g:3106:54: ( type_parameter_constraints_clauses )?
            int alt373=2;
            int LA373_0 = input.LA(1);

            if ( (LA373_0==IDENTIFIER) ) {
                alt373=1;
            }
            switch (alt373) {
                case 1 :
                    // CSharp.g:3106:54: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration23973);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_delegate_declaration23976); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delegate_declaration"


    public static class delegate_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_modifiers"
    // CSharp.g:3108:1: delegate_modifiers : delegate_modifier ( delegate_modifier )* ;
    public final CSharp.delegate_modifiers_return delegate_modifiers() throws RecognitionException {
        CSharp.delegate_modifiers_return retval = new CSharp.delegate_modifiers_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3109:2: ( delegate_modifier ( delegate_modifier )* )
            // CSharp.g:3110:2: delegate_modifier ( delegate_modifier )*
            {
            pushFollow(FOLLOW_delegate_modifier_in_delegate_modifiers23989);
            delegate_modifier();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:3110:20: ( delegate_modifier )*
            loop374:
            do {
                int alt374=2;
                int LA374_0 = input.LA(1);

                if ( (LA374_0==INTERNAL||LA374_0==NEW||(LA374_0 >= PRIVATE && LA374_0 <= PUBLIC)||LA374_0==UNSAFE) ) {
                    alt374=1;
                }


                switch (alt374) {
            	case 1 :
            	    // CSharp.g:3110:22: delegate_modifier
            	    {
            	    pushFollow(FOLLOW_delegate_modifier_in_delegate_modifiers23993);
            	    delegate_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop374;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delegate_modifiers"


    public static class delegate_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_modifier"
    // CSharp.g:3112:1: delegate_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)|delmd= delegate_modifier_unsafe -> text(value=delmd));
    public final CSharp.delegate_modifier_return delegate_modifier() throws RecognitionException {
        CSharp.delegate_modifier_return retval = new CSharp.delegate_modifier_return();
        retval.start = input.LT(1);


        Token NEW307=null;
        Token PUBLIC308=null;
        Token PROTECTED309=null;
        Token PRIVATE310=null;
        CSharp.delegate_modifier_unsafe_return delmd =null;


        try {
            // CSharp.g:3113:3: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)|delmd= delegate_modifier_unsafe -> text(value=delmd))
            int alt375=6;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt375=1;
                }
                break;
            case PUBLIC:
                {
                alt375=2;
                }
                break;
            case PROTECTED:
                {
                alt375=3;
                }
                break;
            case INTERNAL:
                {
                alt375=4;
                }
                break;
            case PRIVATE:
                {
                alt375=5;
                }
                break;
            case UNSAFE:
                {
                alt375=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 375, 0, input);

                throw nvae;

            }

            switch (alt375) {
                case 1 :
                    // CSharp.g:3114:3: NEW
                    {
                    NEW307=(Token)match(input,NEW,FOLLOW_NEW_in_delegate_modifier24011); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3114:42: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW307!=null?NEW307.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:3115:5: PUBLIC
                    {
                    PUBLIC308=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_delegate_modifier24060); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3115:42: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC308!=null?PUBLIC308.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:3116:5: PROTECTED
                    {
                    PROTECTED309=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_delegate_modifier24104); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3116:42: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED309!=null?PROTECTED309.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:3117:5: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_delegate_modifier24145); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3117:42: -> text(value=\"private\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "private"));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:3118:5: PRIVATE
                    {
                    PRIVATE310=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_delegate_modifier24187); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3118:42: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE310!=null?PRIVATE310.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:3119:5: delmd= delegate_modifier_unsafe
                    {
                    pushFollow(FOLLOW_delegate_modifier_unsafe_in_delegate_modifier24232);
                    delmd=delegate_modifier_unsafe();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3119:42: -> text(value=delmd)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", delmd));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delegate_modifier"


    public static class global_attributes_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "global_attributes"
    // CSharp.g:3126:1: global_attributes : attrs= global_attribute_sections -> globalAttributes(attributes=attrs);
    public final CSharp.global_attributes_return global_attributes() throws RecognitionException {
        CSharp.global_attributes_return retval = new CSharp.global_attributes_return();
        retval.start = input.LT(1);


        CSharp.global_attribute_sections_return attrs =null;


        try {
            // CSharp.g:3127:2: (attrs= global_attribute_sections -> globalAttributes(attributes=attrs))
            // CSharp.g:3128:2: attrs= global_attribute_sections
            {
            pushFollow(FOLLOW_global_attribute_sections_in_global_attributes24267);
            attrs=global_attribute_sections();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3129:2: -> globalAttributes(attributes=attrs)
              {
                  retval.st = templateLib.getInstanceOf("globalAttributes",new STAttrMap().put("attributes", attrs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "global_attributes"


    public static class global_attribute_sections_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "global_attribute_sections"
    // CSharp.g:3131:1: global_attribute_sections : (secs+= global_attribute_section )+ -> globalAttributeSections(sections=$secs);
    public final CSharp.global_attribute_sections_return global_attribute_sections() throws RecognitionException {
        CSharp.global_attribute_sections_return retval = new CSharp.global_attribute_sections_return();
        retval.start = input.LT(1);


        List list_secs=null;
        RuleReturnScope secs = null;
        try {
            // CSharp.g:3132:2: ( (secs+= global_attribute_section )+ -> globalAttributeSections(sections=$secs))
            // CSharp.g:3133:2: (secs+= global_attribute_section )+
            {
            // CSharp.g:3133:2: (secs+= global_attribute_section )+
            int cnt376=0;
            loop376:
            do {
                int alt376=2;
                int LA376_0 = input.LA(1);

                if ( (LA376_0==OPEN_BRACKET) ) {
                    alt376=1;
                }


                switch (alt376) {
            	case 1 :
            	    // CSharp.g:3133:3: secs+= global_attribute_section
            	    {
            	    pushFollow(FOLLOW_global_attribute_section_in_global_attribute_sections24292);
            	    secs=global_attribute_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_secs==null) list_secs=new ArrayList();
            	    list_secs.add(secs.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt376 >= 1 ) break loop376;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(376, input);
                        throw eee;
                }
                cnt376++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3134:2: -> globalAttributeSections(sections=$secs)
              {
                  retval.st = templateLib.getInstanceOf("globalAttributeSections",new STAttrMap().put("sections", list_secs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "global_attribute_sections"


    public static class global_attribute_section_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "global_attribute_section"
    // CSharp.g:3142:1: global_attribute_section : OPEN_BRACKET global_attribute_target_specifier attribute_list ( COMMA )? CLOSE_BRACKET ;
    public final CSharp.global_attribute_section_return global_attribute_section() throws RecognitionException {
        CSharp.global_attribute_section_return retval = new CSharp.global_attribute_section_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3143:3: ( OPEN_BRACKET global_attribute_target_specifier attribute_list ( COMMA )? CLOSE_BRACKET )
            // CSharp.g:3144:3: OPEN_BRACKET global_attribute_target_specifier attribute_list ( COMMA )? CLOSE_BRACKET
            {
            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_global_attribute_section24320); if (state.failed) return retval;

            pushFollow(FOLLOW_global_attribute_target_specifier_in_global_attribute_section24322);
            global_attribute_target_specifier();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_attribute_list_in_global_attribute_section24324);
            attribute_list();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:3144:65: ( COMMA )?
            int alt377=2;
            int LA377_0 = input.LA(1);

            if ( (LA377_0==COMMA) ) {
                alt377=1;
            }
            switch (alt377) {
                case 1 :
                    // CSharp.g:3144:65: COMMA
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_global_attribute_section24326); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_global_attribute_section24329); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "global_attribute_section"


    public static class global_attribute_target_specifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "global_attribute_target_specifier"
    // CSharp.g:3146:1: global_attribute_target_specifier : global_attribute_target COLON ;
    public final CSharp.global_attribute_target_specifier_return global_attribute_target_specifier() throws RecognitionException {
        CSharp.global_attribute_target_specifier_return retval = new CSharp.global_attribute_target_specifier_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3147:2: ( global_attribute_target COLON )
            // CSharp.g:3147:4: global_attribute_target COLON
            {
            pushFollow(FOLLOW_global_attribute_target_in_global_attribute_target_specifier24341);
            global_attribute_target();

            state._fsp--;
            if (state.failed) return retval;

            match(input,COLON,FOLLOW_COLON_in_global_attribute_target_specifier24343); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "global_attribute_target_specifier"


    public static class global_attribute_target_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "global_attribute_target"
    // CSharp.g:3149:1: global_attribute_target : (kyd= keyword -> text(value=kyd)| IDENTIFIER -> text(value=$IDENTIFIER.text));
    public final CSharp.global_attribute_target_return global_attribute_target() throws RecognitionException {
        CSharp.global_attribute_target_return retval = new CSharp.global_attribute_target_return();
        retval.start = input.LT(1);


        Token IDENTIFIER311=null;
        CSharp.keyword_return kyd =null;


        try {
            // CSharp.g:3150:3: (kyd= keyword -> text(value=kyd)| IDENTIFIER -> text(value=$IDENTIFIER.text))
            int alt378=2;
            int LA378_0 = input.LA(1);

            if ( (LA378_0==ABSTRACT||LA378_0==AS||LA378_0==BASE||(LA378_0 >= BOOL && LA378_0 <= BYTE)||(LA378_0 >= CASE && LA378_0 <= CHAR)||(LA378_0 >= CHECKED && LA378_0 <= CLASS)||(LA378_0 >= CONST && LA378_0 <= CONTINUE)||LA378_0==DECIMAL||(LA378_0 >= DEFAULT && LA378_0 <= DELEGATE)||LA378_0==DO||LA378_0==DOUBLE||LA378_0==ELSE||(LA378_0 >= ENUM && LA378_0 <= EXTERN)||(LA378_0 >= FALSE && LA378_0 <= FOREACH)||LA378_0==GOTO||(LA378_0 >= IF && LA378_0 <= INT)||(LA378_0 >= INTERFACE && LA378_0 <= INTERNAL)||LA378_0==IS||(LA378_0 >= LOCK && LA378_0 <= LONG)||(LA378_0 >= NAMESPACE && LA378_0 <= NEW)||LA378_0==NULL||LA378_0==OBJECT||LA378_0==OPERATOR||(LA378_0 >= OUT && LA378_0 <= PARAMS)||(LA378_0 >= PRIVATE && LA378_0 <= PUBLIC)||LA378_0==READONLY||(LA378_0 >= REF && LA378_0 <= RETURN)||(LA378_0 >= SBYTE && LA378_0 <= SEALED)||LA378_0==SHORT||(LA378_0 >= SIZEOF && LA378_0 <= STACKALLOC)||(LA378_0 >= STATIC && LA378_0 <= STRING)||(LA378_0 >= STRUCT && LA378_0 <= SWITCH)||(LA378_0 >= THIS && LA378_0 <= THROW)||(LA378_0 >= TRUE && LA378_0 <= TYPEOF)||(LA378_0 >= UINT && LA378_0 <= UNCHECKED)||(LA378_0 >= UNSAFE && LA378_0 <= USING)||(LA378_0 >= VIRTUAL && LA378_0 <= VOLATILE)||LA378_0==WHILE) ) {
                alt378=1;
            }
            else if ( (LA378_0==IDENTIFIER) ) {
                alt378=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 378, 0, input);

                throw nvae;

            }
            switch (alt378) {
                case 1 :
                    // CSharp.g:3151:3: kyd= keyword
                    {
                    pushFollow(FOLLOW_keyword_in_global_attribute_target24360);
                    kyd=keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3151:23: -> text(value=kyd)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", kyd));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:3152:5: IDENTIFIER
                    {
                    IDENTIFIER311=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_global_attribute_target24382); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3152:23: -> text(value=$IDENTIFIER.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IDENTIFIER311!=null?IDENTIFIER311.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "global_attribute_target"


    public static class attributes_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attributes"
    // CSharp.g:3161:1: attributes : attSec= attribute_sections -> attributes(value=attSec);
    public final CSharp.attributes_return attributes() throws RecognitionException {
        CSharp.attributes_return retval = new CSharp.attributes_return();
        retval.start = input.LT(1);


        CSharp.attribute_sections_return attSec =null;


        try {
            // CSharp.g:3162:2: (attSec= attribute_sections -> attributes(value=attSec))
            // CSharp.g:3163:2: attSec= attribute_sections
            {
            pushFollow(FOLLOW_attribute_sections_in_attributes24416);
            attSec=attribute_sections();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3163:35: -> attributes(value=attSec)
              {
                  retval.st = templateLib.getInstanceOf("attributes",new STAttrMap().put("value", attSec));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attributes"


    public static class attribute_sections_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_sections"
    // CSharp.g:3165:1: attribute_sections : (attSecLst+= attribute_section )+ -> lineIterator(list=$attSecLst);
    public final CSharp.attribute_sections_return attribute_sections() throws RecognitionException {
        CSharp.attribute_sections_return retval = new CSharp.attribute_sections_return();
        retval.start = input.LT(1);


        List list_attSecLst=null;
        RuleReturnScope attSecLst = null;
        try {
            // CSharp.g:3166:2: ( (attSecLst+= attribute_section )+ -> lineIterator(list=$attSecLst))
            // CSharp.g:3167:2: (attSecLst+= attribute_section )+
            {
            // CSharp.g:3167:2: (attSecLst+= attribute_section )+
            int cnt379=0;
            loop379:
            do {
                int alt379=2;
                int LA379_0 = input.LA(1);

                if ( (LA379_0==OPEN_BRACKET) ) {
                    alt379=1;
                }


                switch (alt379) {
            	case 1 :
            	    // CSharp.g:3167:3: attSecLst+= attribute_section
            	    {
            	    pushFollow(FOLLOW_attribute_section_in_attribute_sections24447);
            	    attSecLst=attribute_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_attSecLst==null) list_attSecLst=new ArrayList();
            	    list_attSecLst.add(attSecLst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt379 >= 1 ) break loop379;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(379, input);
                        throw eee;
                }
                cnt379++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3168:2: -> lineIterator(list=$attSecLst)
              {
                  retval.st = templateLib.getInstanceOf("lineIterator",new STAttrMap().put("list", list_attSecLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_sections"


    public static class attribute_section_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_section"
    // CSharp.g:3176:1: attribute_section : OPEN_BRACKET (attTarSpec= attribute_target_specifier )? attLst= attribute_list (septr= COMMA )? CLOSE_BRACKET -> attributeSection(attributeTargetSpecifier=attTarSpecattributeList=attLstsepartr=$septr.text);
    public final CSharp.attribute_section_return attribute_section() throws RecognitionException {
        CSharp.attribute_section_return retval = new CSharp.attribute_section_return();
        retval.start = input.LT(1);


        Token septr=null;
        CSharp.attribute_target_specifier_return attTarSpec =null;

        CSharp.attribute_list_return attLst =null;


        try {
            // CSharp.g:3177:3: ( OPEN_BRACKET (attTarSpec= attribute_target_specifier )? attLst= attribute_list (septr= COMMA )? CLOSE_BRACKET -> attributeSection(attributeTargetSpecifier=attTarSpecattributeList=attLstsepartr=$septr.text))
            // CSharp.g:3178:3: OPEN_BRACKET (attTarSpec= attribute_target_specifier )? attLst= attribute_list (septr= COMMA )? CLOSE_BRACKET
            {
            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_attribute_section24475); if (state.failed) return retval;

            // CSharp.g:3178:16: (attTarSpec= attribute_target_specifier )?
            int alt380=2;
            int LA380_0 = input.LA(1);

            if ( (LA380_0==ABSTRACT||LA380_0==AS||LA380_0==BASE||(LA380_0 >= BOOL && LA380_0 <= BYTE)||(LA380_0 >= CASE && LA380_0 <= CHAR)||(LA380_0 >= CHECKED && LA380_0 <= CLASS)||(LA380_0 >= CONST && LA380_0 <= CONTINUE)||LA380_0==DECIMAL||(LA380_0 >= DEFAULT && LA380_0 <= DELEGATE)||LA380_0==DO||LA380_0==DOUBLE||LA380_0==ELSE||(LA380_0 >= ENUM && LA380_0 <= EXTERN)||(LA380_0 >= FALSE && LA380_0 <= FOREACH)||LA380_0==GOTO||(LA380_0 >= IF && LA380_0 <= INT)||(LA380_0 >= INTERFACE && LA380_0 <= INTERNAL)||LA380_0==IS||(LA380_0 >= LOCK && LA380_0 <= LONG)||(LA380_0 >= NAMESPACE && LA380_0 <= NEW)||LA380_0==NULL||LA380_0==OBJECT||LA380_0==OPERATOR||(LA380_0 >= OUT && LA380_0 <= PARAMS)||(LA380_0 >= PRIVATE && LA380_0 <= PUBLIC)||LA380_0==READONLY||(LA380_0 >= REF && LA380_0 <= RETURN)||(LA380_0 >= SBYTE && LA380_0 <= SEALED)||LA380_0==SHORT||(LA380_0 >= SIZEOF && LA380_0 <= STACKALLOC)||(LA380_0 >= STATIC && LA380_0 <= STRING)||(LA380_0 >= STRUCT && LA380_0 <= SWITCH)||(LA380_0 >= THIS && LA380_0 <= THROW)||(LA380_0 >= TRUE && LA380_0 <= TYPEOF)||(LA380_0 >= UINT && LA380_0 <= UNCHECKED)||(LA380_0 >= UNSAFE && LA380_0 <= USING)||(LA380_0 >= VIRTUAL && LA380_0 <= VOLATILE)||LA380_0==WHILE) ) {
                alt380=1;
            }
            else if ( (LA380_0==IDENTIFIER) ) {
                int LA380_2 = input.LA(2);

                if ( (LA380_2==COLON) ) {
                    alt380=1;
                }
            }
            switch (alt380) {
                case 1 :
                    // CSharp.g:3178:17: attTarSpec= attribute_target_specifier
                    {
                    pushFollow(FOLLOW_attribute_target_specifier_in_attribute_section24480);
                    attTarSpec=attribute_target_specifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_attribute_list_in_attribute_section24486);
            attLst=attribute_list();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:3178:79: (septr= COMMA )?
            int alt381=2;
            int LA381_0 = input.LA(1);

            if ( (LA381_0==COMMA) ) {
                alt381=1;
            }
            switch (alt381) {
                case 1 :
                    // CSharp.g:3178:80: septr= COMMA
                    {
                    septr=(Token)match(input,COMMA,FOLLOW_COMMA_in_attribute_section24491); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_attribute_section24495); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3179:3: -> attributeSection(attributeTargetSpecifier=attTarSpecattributeList=attLstsepartr=$septr.text)
              {
                  retval.st = templateLib.getInstanceOf("attributeSection",new STAttrMap().put("attributeTargetSpecifier", attTarSpec).put("attributeList", attLst).put("separtr", (septr!=null?septr.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_section"


    public static class attribute_target_specifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_target_specifier"
    // CSharp.g:3181:1: attribute_target_specifier : attTar= attribute_target COLON -> text(value=$attTar.text+\" : \");
    public final CSharp.attribute_target_specifier_return attribute_target_specifier() throws RecognitionException {
        CSharp.attribute_target_specifier_return retval = new CSharp.attribute_target_specifier_return();
        retval.start = input.LT(1);


        CSharp.attribute_target_return attTar =null;


        try {
            // CSharp.g:3182:2: (attTar= attribute_target COLON -> text(value=$attTar.text+\" : \"))
            // CSharp.g:3183:2: attTar= attribute_target COLON
            {
            pushFollow(FOLLOW_attribute_target_in_attribute_target_specifier24529);
            attTar=attribute_target();

            state._fsp--;
            if (state.failed) return retval;

            match(input,COLON,FOLLOW_COLON_in_attribute_target_specifier24531); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3184:2: -> text(value=$attTar.text+\" : \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (attTar!=null?input.toString(attTar.start,attTar.stop):null)+" : "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_target_specifier"


    public static class attribute_target_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_target"
    // CSharp.g:3186:1: attribute_target : (keyWrd= keyword -> text(value=$keyWrd.text)|id= IDENTIFIER -> text(value=$id.text));
    public final CSharp.attribute_target_return attribute_target() throws RecognitionException {
        CSharp.attribute_target_return retval = new CSharp.attribute_target_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharp.keyword_return keyWrd =null;


        try {
            // CSharp.g:3187:3: (keyWrd= keyword -> text(value=$keyWrd.text)|id= IDENTIFIER -> text(value=$id.text))
            int alt382=2;
            int LA382_0 = input.LA(1);

            if ( (LA382_0==ABSTRACT||LA382_0==AS||LA382_0==BASE||(LA382_0 >= BOOL && LA382_0 <= BYTE)||(LA382_0 >= CASE && LA382_0 <= CHAR)||(LA382_0 >= CHECKED && LA382_0 <= CLASS)||(LA382_0 >= CONST && LA382_0 <= CONTINUE)||LA382_0==DECIMAL||(LA382_0 >= DEFAULT && LA382_0 <= DELEGATE)||LA382_0==DO||LA382_0==DOUBLE||LA382_0==ELSE||(LA382_0 >= ENUM && LA382_0 <= EXTERN)||(LA382_0 >= FALSE && LA382_0 <= FOREACH)||LA382_0==GOTO||(LA382_0 >= IF && LA382_0 <= INT)||(LA382_0 >= INTERFACE && LA382_0 <= INTERNAL)||LA382_0==IS||(LA382_0 >= LOCK && LA382_0 <= LONG)||(LA382_0 >= NAMESPACE && LA382_0 <= NEW)||LA382_0==NULL||LA382_0==OBJECT||LA382_0==OPERATOR||(LA382_0 >= OUT && LA382_0 <= PARAMS)||(LA382_0 >= PRIVATE && LA382_0 <= PUBLIC)||LA382_0==READONLY||(LA382_0 >= REF && LA382_0 <= RETURN)||(LA382_0 >= SBYTE && LA382_0 <= SEALED)||LA382_0==SHORT||(LA382_0 >= SIZEOF && LA382_0 <= STACKALLOC)||(LA382_0 >= STATIC && LA382_0 <= STRING)||(LA382_0 >= STRUCT && LA382_0 <= SWITCH)||(LA382_0 >= THIS && LA382_0 <= THROW)||(LA382_0 >= TRUE && LA382_0 <= TYPEOF)||(LA382_0 >= UINT && LA382_0 <= UNCHECKED)||(LA382_0 >= UNSAFE && LA382_0 <= USING)||(LA382_0 >= VIRTUAL && LA382_0 <= VOLATILE)||LA382_0==WHILE) ) {
                alt382=1;
            }
            else if ( (LA382_0==IDENTIFIER) ) {
                alt382=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 382, 0, input);

                throw nvae;

            }
            switch (alt382) {
                case 1 :
                    // CSharp.g:3187:5: keyWrd= keyword
                    {
                    pushFollow(FOLLOW_keyword_in_attribute_target24554);
                    keyWrd=keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3187:25: -> text(value=$keyWrd.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (keyWrd!=null?input.toString(keyWrd.start,keyWrd.stop):null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:3188:5: id= IDENTIFIER
                    {
                    id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_attribute_target24575); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3188:25: -> text(value=$id.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (id!=null?id.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_target"


    public static class attribute_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_list"
    // CSharp.g:3201:1: attribute_list : fstAtt= attribute (attrLst+= attribute_list_Chld )* -> attributeList(firstAttribute=fstAttattributeList=$attrLst);
    public final CSharp.attribute_list_return attribute_list() throws RecognitionException {
        CSharp.attribute_list_return retval = new CSharp.attribute_list_return();
        retval.start = input.LT(1);


        List list_attrLst=null;
        CSharp.attribute_return fstAtt =null;

        RuleReturnScope attrLst = null;
        try {
            // CSharp.g:3202:2: (fstAtt= attribute (attrLst+= attribute_list_Chld )* -> attributeList(firstAttribute=fstAttattributeList=$attrLst))
            // CSharp.g:3203:2: fstAtt= attribute (attrLst+= attribute_list_Chld )*
            {
            pushFollow(FOLLOW_attribute_in_attribute_list24607);
            fstAtt=attribute();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:3203:19: (attrLst+= attribute_list_Chld )*
            loop383:
            do {
                int alt383=2;
                int LA383_0 = input.LA(1);

                if ( (LA383_0==COMMA) ) {
                    int LA383_1 = input.LA(2);

                    if ( (LA383_1==IDENTIFIER) ) {
                        alt383=1;
                    }


                }


                switch (alt383) {
            	case 1 :
            	    // CSharp.g:3203:20: attrLst+= attribute_list_Chld
            	    {
            	    pushFollow(FOLLOW_attribute_list_Chld_in_attribute_list24612);
            	    attrLst=attribute_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_attrLst==null) list_attrLst=new ArrayList();
            	    list_attrLst.add(attrLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop383;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3204:2: -> attributeList(firstAttribute=fstAttattributeList=$attrLst)
              {
                  retval.st = templateLib.getInstanceOf("attributeList",new STAttrMap().put("firstAttribute", fstAtt).put("attributeList", list_attrLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_list"


    public static class attribute_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_list_Chld"
    // CSharp.g:3207:1: attribute_list_Chld : COMMA atr= attribute -> text(value=\",\"+$atr.text);
    public final CSharp.attribute_list_Chld_return attribute_list_Chld() throws RecognitionException {
        CSharp.attribute_list_Chld_return retval = new CSharp.attribute_list_Chld_return();
        retval.start = input.LT(1);


        CSharp.attribute_return atr =null;


        try {
            // CSharp.g:3208:2: ( COMMA atr= attribute -> text(value=\",\"+$atr.text))
            // CSharp.g:3209:2: COMMA atr= attribute
            {
            match(input,COMMA,FOLLOW_COMMA_in_attribute_list_Chld24640); if (state.failed) return retval;

            pushFollow(FOLLOW_attribute_in_attribute_list_Chld24644);
            atr=attribute();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3210:2: -> text(value=\",\"+$atr.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ","+(atr!=null?input.toString(atr.start,atr.stop):null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_list_Chld"


    public static class attribute_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute"
    // CSharp.g:3213:1: attribute : attNam= attribute_name (attArgs= attribute_arguments )? -> attribute(attributeName=attNamattributeArgs=attArgs);
    public final CSharp.attribute_return attribute() throws RecognitionException {
        CSharp.attribute_return retval = new CSharp.attribute_return();
        retval.start = input.LT(1);


        CSharp.attribute_name_return attNam =null;

        CSharp.attribute_arguments_return attArgs =null;


        try {
            // CSharp.g:3214:2: (attNam= attribute_name (attArgs= attribute_arguments )? -> attribute(attributeName=attNamattributeArgs=attArgs))
            // CSharp.g:3215:2: attNam= attribute_name (attArgs= attribute_arguments )?
            {
            pushFollow(FOLLOW_attribute_name_in_attribute24670);
            attNam=attribute_name();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:3215:24: (attArgs= attribute_arguments )?
            int alt384=2;
            int LA384_0 = input.LA(1);

            if ( (LA384_0==OPEN_PARENS) ) {
                alt384=1;
            }
            switch (alt384) {
                case 1 :
                    // CSharp.g:3215:25: attArgs= attribute_arguments
                    {
                    pushFollow(FOLLOW_attribute_arguments_in_attribute24675);
                    attArgs=attribute_arguments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3216:2: -> attribute(attributeName=attNamattributeArgs=attArgs)
              {
                  retval.st = templateLib.getInstanceOf("attribute",new STAttrMap().put("attributeName", attNam).put("attributeArgs", attArgs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute"


    public static class attribute_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_name"
    // CSharp.g:3218:1: attribute_name : typName= type_name -> text(value=typName);
    public final CSharp.attribute_name_return attribute_name() throws RecognitionException {
        CSharp.attribute_name_return retval = new CSharp.attribute_name_return();
        retval.start = input.LT(1);


        CSharp.type_name_return typName =null;


        try {
            // CSharp.g:3219:2: (typName= type_name -> text(value=typName))
            // CSharp.g:3220:2: typName= type_name
            {
            pushFollow(FOLLOW_type_name_in_attribute_name24705);
            typName=type_name();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3220:27: -> text(value=typName)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", typName));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_name"


    public static class attribute_arguments_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_arguments"
    // CSharp.g:3230:1: attribute_arguments : OPEN_PARENS (posArgsList= positional_argument_list )? CLOSE_PARENS -> attributeArguments(positionalArgumentList=posArgsList);
    public final CSharp.attribute_arguments_return attribute_arguments() throws RecognitionException {
        CSharp.attribute_arguments_return retval = new CSharp.attribute_arguments_return();
        retval.start = input.LT(1);


        CSharp.positional_argument_list_return posArgsList =null;


        try {
            // CSharp.g:3231:3: ( OPEN_PARENS (posArgsList= positional_argument_list )? CLOSE_PARENS -> attributeArguments(positionalArgumentList=posArgsList))
            // CSharp.g:3232:3: OPEN_PARENS (posArgsList= positional_argument_list )? CLOSE_PARENS
            {
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_attribute_arguments24740); if (state.failed) return retval;

            // CSharp.g:3232:15: (posArgsList= positional_argument_list )?
            int alt385=2;
            int LA385_0 = input.LA(1);

            if ( (LA385_0==AMP||(LA385_0 >= BANG && LA385_0 <= BASE)||LA385_0==BOOL||LA385_0==BYTE||(LA385_0 >= CHAR && LA385_0 <= CHECKED)||LA385_0==DECIMAL||(LA385_0 >= DEFAULT && LA385_0 <= DELEGATE)||LA385_0==DOUBLE||LA385_0==FALSE||LA385_0==FLOAT||LA385_0==IDENTIFIER||(LA385_0 >= INT && LA385_0 <= INTEGER_LITERAL)||LA385_0==LONG||LA385_0==MINUS||LA385_0==NEW||LA385_0==NULL||LA385_0==OBJECT||LA385_0==OPEN_PARENS||LA385_0==OP_DEC||LA385_0==OP_INC||LA385_0==PLUS||LA385_0==REAL_LITERAL||LA385_0==SBYTE||LA385_0==SHORT||LA385_0==SIZEOF||LA385_0==STAR||(LA385_0 >= STRING && LA385_0 <= STRING_LITERAL)||LA385_0==THIS||(LA385_0 >= TILDE && LA385_0 <= TRUE)||LA385_0==TYPEOF||(LA385_0 >= UINT && LA385_0 <= UNCHECKED)||LA385_0==USHORT) ) {
                alt385=1;
            }
            switch (alt385) {
                case 1 :
                    // CSharp.g:3232:16: posArgsList= positional_argument_list
                    {
                    pushFollow(FOLLOW_positional_argument_list_in_attribute_arguments24745);
                    posArgsList=positional_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_attribute_arguments24749); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3233:3: -> attributeArguments(positionalArgumentList=posArgsList)
              {
                  retval.st = templateLib.getInstanceOf("attributeArguments",new STAttrMap().put("positionalArgumentList", posArgsList));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_arguments"


    public static class positional_argument_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "positional_argument_list"
    // CSharp.g:3235:1: positional_argument_list : arg= positional_argument (posLst+= positional_argument_list_Chld )* -> positionalArgumentList(firstArg=argrestArgsLst=$posLst);
    public final CSharp.positional_argument_list_return positional_argument_list() throws RecognitionException {
        CSharp.positional_argument_list_return retval = new CSharp.positional_argument_list_return();
        retval.start = input.LT(1);


        List list_posLst=null;
        CSharp.positional_argument_return arg =null;

        RuleReturnScope posLst = null;
        try {
            // CSharp.g:3236:2: (arg= positional_argument (posLst+= positional_argument_list_Chld )* -> positionalArgumentList(firstArg=argrestArgsLst=$posLst))
            // CSharp.g:3237:2: arg= positional_argument (posLst+= positional_argument_list_Chld )*
            {
            pushFollow(FOLLOW_positional_argument_in_positional_argument_list24775);
            arg=positional_argument();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:3237:26: (posLst+= positional_argument_list_Chld )*
            loop386:
            do {
                int alt386=2;
                int LA386_0 = input.LA(1);

                if ( (LA386_0==COMMA) ) {
                    alt386=1;
                }


                switch (alt386) {
            	case 1 :
            	    // CSharp.g:3237:27: posLst+= positional_argument_list_Chld
            	    {
            	    pushFollow(FOLLOW_positional_argument_list_Chld_in_positional_argument_list24780);
            	    posLst=positional_argument_list_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_posLst==null) list_posLst=new ArrayList();
            	    list_posLst.add(posLst.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop386;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3238:2: -> positionalArgumentList(firstArg=argrestArgsLst=$posLst)
              {
                  retval.st = templateLib.getInstanceOf("positionalArgumentList",new STAttrMap().put("firstArg", arg).put("restArgsLst", list_posLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "positional_argument_list"


    public static class positional_argument_list_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "positional_argument_list_Chld"
    // CSharp.g:3241:1: positional_argument_list_Chld : COMMA arg= positional_argument -> text(value=\",\"+arg);
    public final CSharp.positional_argument_list_Chld_return positional_argument_list_Chld() throws RecognitionException {
        CSharp.positional_argument_list_Chld_return retval = new CSharp.positional_argument_list_Chld_return();
        retval.start = input.LT(1);


        CSharp.positional_argument_return arg =null;


        try {
            // CSharp.g:3242:2: ( COMMA arg= positional_argument -> text(value=\",\"+arg))
            // CSharp.g:3243:2: COMMA arg= positional_argument
            {
            match(input,COMMA,FOLLOW_COMMA_in_positional_argument_list_Chld24808); if (state.failed) return retval;

            pushFollow(FOLLOW_positional_argument_in_positional_argument_list_Chld24813);
            arg=positional_argument();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3244:2: -> text(value=\",\"+arg)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ","+arg));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "positional_argument_list_Chld"


    public static class positional_argument_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "positional_argument"
    // CSharp.g:3247:1: positional_argument : attArgExpr= attribute_argument_expression -> positionalArgument(attributeArgExpr=attArgExpr);
    public final CSharp.positional_argument_return positional_argument() throws RecognitionException {
        CSharp.positional_argument_return retval = new CSharp.positional_argument_return();
        retval.start = input.LT(1);


        CSharp.attribute_argument_expression_return attArgExpr =null;


        try {
            // CSharp.g:3248:2: (attArgExpr= attribute_argument_expression -> positionalArgument(attributeArgExpr=attArgExpr))
            // CSharp.g:3249:2: attArgExpr= attribute_argument_expression
            {
            pushFollow(FOLLOW_attribute_argument_expression_in_positional_argument24839);
            attArgExpr=attribute_argument_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3250:2: -> positionalArgument(attributeArgExpr=attArgExpr)
              {
                  retval.st = templateLib.getInstanceOf("positionalArgument",new STAttrMap().put("attributeArgExpr", attArgExpr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "positional_argument"


    public static class named_argument_list_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "named_argument_list"
    // CSharp.g:3253:1: named_argument_list : named_argument ( COMMA named_argument )* ;
    public final CSharp.named_argument_list_return named_argument_list() throws RecognitionException {
        CSharp.named_argument_list_return retval = new CSharp.named_argument_list_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3254:2: ( named_argument ( COMMA named_argument )* )
            // CSharp.g:3254:4: named_argument ( COMMA named_argument )*
            {
            pushFollow(FOLLOW_named_argument_in_named_argument_list24861);
            named_argument();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:3254:19: ( COMMA named_argument )*
            loop387:
            do {
                int alt387=2;
                int LA387_0 = input.LA(1);

                if ( (LA387_0==COMMA) ) {
                    alt387=1;
                }


                switch (alt387) {
            	case 1 :
            	    // CSharp.g:3254:21: COMMA named_argument
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_named_argument_list24865); if (state.failed) return retval;

            	    pushFollow(FOLLOW_named_argument_in_named_argument_list24868);
            	    named_argument();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop387;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "named_argument_list"


    public static class named_argument_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "named_argument"
    // CSharp.g:3257:1: named_argument : IDENTIFIER ASSIGNMENT attribute_argument_expression ;
    public final CSharp.named_argument_return named_argument() throws RecognitionException {
        CSharp.named_argument_return retval = new CSharp.named_argument_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3258:2: ( IDENTIFIER ASSIGNMENT attribute_argument_expression )
            // CSharp.g:3258:4: IDENTIFIER ASSIGNMENT attribute_argument_expression
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_named_argument24884); if (state.failed) return retval;

            match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_named_argument24886); if (state.failed) return retval;

            pushFollow(FOLLOW_attribute_argument_expression_in_named_argument24888);
            attribute_argument_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "named_argument"


    public static class attribute_argument_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_argument_expression"
    // CSharp.g:3260:1: attribute_argument_expression : expr= expression -> attributeArgumentExpression(expr=expr);
    public final CSharp.attribute_argument_expression_return attribute_argument_expression() throws RecognitionException {
        CSharp.attribute_argument_expression_return retval = new CSharp.attribute_argument_expression_return();
        retval.start = input.LT(1);


        CSharp.expression_return expr =null;


        try {
            // CSharp.g:3261:2: (expr= expression -> attributeArgumentExpression(expr=expr))
            // CSharp.g:3262:2: expr= expression
            {
            pushFollow(FOLLOW_expression_in_attribute_argument_expression24903);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3263:2: -> attributeArgumentExpression(expr=expr)
              {
                  retval.st = templateLib.getInstanceOf("attributeArgumentExpression",new STAttrMap().put("expr", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_argument_expression"


    public static class class_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_modifier_unsafe"
    // CSharp.g:3268:1: class_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharp.class_modifier_unsafe_return class_modifier_unsafe() throws RecognitionException {
        CSharp.class_modifier_unsafe_return retval = new CSharp.class_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE312=null;

        try {
            // CSharp.g:3269:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharp.g:3270:2: UNSAFE
            {
            UNSAFE312=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_class_modifier_unsafe24928); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3270:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE312!=null?UNSAFE312.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_modifier_unsafe"


    public static class struct_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_modifier_unsafe"
    // CSharp.g:3272:1: struct_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharp.struct_modifier_unsafe_return struct_modifier_unsafe() throws RecognitionException {
        CSharp.struct_modifier_unsafe_return retval = new CSharp.struct_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE313=null;

        try {
            // CSharp.g:3273:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharp.g:3273:4: UNSAFE
            {
            UNSAFE313=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_struct_modifier_unsafe24953); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3273:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE313!=null?UNSAFE313.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_modifier_unsafe"


    public static class interface_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_modifier_unsafe"
    // CSharp.g:3275:1: interface_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharp.interface_modifier_unsafe_return interface_modifier_unsafe() throws RecognitionException {
        CSharp.interface_modifier_unsafe_return retval = new CSharp.interface_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE314=null;

        try {
            // CSharp.g:3276:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharp.g:3276:4: UNSAFE
            {
            UNSAFE314=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_interface_modifier_unsafe24976); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3276:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE314!=null?UNSAFE314.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_modifier_unsafe"


    public static class delegate_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_modifier_unsafe"
    // CSharp.g:3278:1: delegate_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharp.delegate_modifier_unsafe_return delegate_modifier_unsafe() throws RecognitionException {
        CSharp.delegate_modifier_unsafe_return retval = new CSharp.delegate_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE315=null;

        try {
            // CSharp.g:3279:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharp.g:3279:4: UNSAFE
            {
            UNSAFE315=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_delegate_modifier_unsafe24999); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3279:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE315!=null?UNSAFE315.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delegate_modifier_unsafe"


    public static class field_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "field_modifier_unsafe"
    // CSharp.g:3281:1: field_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharp.field_modifier_unsafe_return field_modifier_unsafe() throws RecognitionException {
        CSharp.field_modifier_unsafe_return retval = new CSharp.field_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE316=null;

        try {
            // CSharp.g:3282:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharp.g:3282:4: UNSAFE
            {
            UNSAFE316=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_field_modifier_unsafe25022); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3282:16: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE316!=null?UNSAFE316.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier_unsafe"


    public static class method_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_modifier_unsafe"
    // CSharp.g:3284:1: method_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharp.method_modifier_unsafe_return method_modifier_unsafe() throws RecognitionException {
        CSharp.method_modifier_unsafe_return retval = new CSharp.method_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE317=null;

        try {
            // CSharp.g:3285:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharp.g:3285:4: UNSAFE
            {
            UNSAFE317=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_method_modifier_unsafe25046); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3285:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE317!=null?UNSAFE317.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_unsafe"


    public static class property_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "property_modifier_unsafe"
    // CSharp.g:3287:1: property_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharp.property_modifier_unsafe_return property_modifier_unsafe() throws RecognitionException {
        CSharp.property_modifier_unsafe_return retval = new CSharp.property_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE318=null;

        try {
            // CSharp.g:3288:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharp.g:3289:2: UNSAFE
            {
            UNSAFE318=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_property_modifier_unsafe25071); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3289:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE318!=null?UNSAFE318.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_modifier_unsafe"


    public static class event_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "event_modifier_unsafe"
    // CSharp.g:3291:1: event_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharp.event_modifier_unsafe_return event_modifier_unsafe() throws RecognitionException {
        CSharp.event_modifier_unsafe_return retval = new CSharp.event_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE319=null;

        try {
            // CSharp.g:3292:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharp.g:3292:4: UNSAFE
            {
            UNSAFE319=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_event_modifier_unsafe25096); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3292:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE319!=null?UNSAFE319.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "event_modifier_unsafe"


    public static class indexer_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "indexer_modifier_unsafe"
    // CSharp.g:3294:1: indexer_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharp.indexer_modifier_unsafe_return indexer_modifier_unsafe() throws RecognitionException {
        CSharp.indexer_modifier_unsafe_return retval = new CSharp.indexer_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE320=null;

        try {
            // CSharp.g:3295:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharp.g:3295:4: UNSAFE
            {
            UNSAFE320=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_indexer_modifier_unsafe25119); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3295:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE320!=null?UNSAFE320.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexer_modifier_unsafe"


    public static class operator_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_modifier_unsafe"
    // CSharp.g:3297:1: operator_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharp.operator_modifier_unsafe_return operator_modifier_unsafe() throws RecognitionException {
        CSharp.operator_modifier_unsafe_return retval = new CSharp.operator_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE321=null;

        try {
            // CSharp.g:3298:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharp.g:3298:4: UNSAFE
            {
            UNSAFE321=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_operator_modifier_unsafe25142); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3298:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE321!=null?UNSAFE321.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_modifier_unsafe"


    public static class constructor_modifier_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_modifier_unsafe"
    // CSharp.g:3300:1: constructor_modifier_unsafe : UNSAFE -> text(value=$UNSAFE.text);
    public final CSharp.constructor_modifier_unsafe_return constructor_modifier_unsafe() throws RecognitionException {
        CSharp.constructor_modifier_unsafe_return retval = new CSharp.constructor_modifier_unsafe_return();
        retval.start = input.LT(1);


        Token UNSAFE322=null;

        try {
            // CSharp.g:3301:2: ( UNSAFE -> text(value=$UNSAFE.text))
            // CSharp.g:3301:4: UNSAFE
            {
            UNSAFE322=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_constructor_modifier_unsafe25165); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3301:15: -> text(value=$UNSAFE.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE322!=null?UNSAFE322.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_modifier_unsafe"


    public static class destructor_declaration_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "destructor_declaration_unsafe"
    // CSharp.g:3309:1: destructor_declaration_unsafe : ( attributes )? ( ( EXTERN )? ( UNSAFE )? | UNSAFE EXTERN ) TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body ;
    public final CSharp.destructor_declaration_unsafe_return destructor_declaration_unsafe() throws RecognitionException {
        CSharp.destructor_declaration_unsafe_return retval = new CSharp.destructor_declaration_unsafe_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3310:3: ( ( attributes )? ( ( EXTERN )? ( UNSAFE )? | UNSAFE EXTERN ) TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body )
            // CSharp.g:3310:5: ( attributes )? ( ( EXTERN )? ( UNSAFE )? | UNSAFE EXTERN ) TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body
            {
            // CSharp.g:3310:5: ( attributes )?
            int alt388=2;
            int LA388_0 = input.LA(1);

            if ( (LA388_0==OPEN_BRACKET) ) {
                alt388=1;
            }
            switch (alt388) {
                case 1 :
                    // CSharp.g:3310:5: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_destructor_declaration_unsafe25191);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3311:5: ( ( EXTERN )? ( UNSAFE )? | UNSAFE EXTERN )
            int alt391=2;
            int LA391_0 = input.LA(1);

            if ( (LA391_0==EXTERN||LA391_0==TILDE) ) {
                alt391=1;
            }
            else if ( (LA391_0==UNSAFE) ) {
                int LA391_2 = input.LA(2);

                if ( (LA391_2==EXTERN) ) {
                    alt391=2;
                }
                else if ( (LA391_2==TILDE) ) {
                    alt391=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 391, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 391, 0, input);

                throw nvae;

            }
            switch (alt391) {
                case 1 :
                    // CSharp.g:3311:7: ( EXTERN )? ( UNSAFE )?
                    {
                    // CSharp.g:3311:7: ( EXTERN )?
                    int alt389=2;
                    int LA389_0 = input.LA(1);

                    if ( (LA389_0==EXTERN) ) {
                        alt389=1;
                    }
                    switch (alt389) {
                        case 1 :
                            // CSharp.g:3311:7: EXTERN
                            {
                            match(input,EXTERN,FOLLOW_EXTERN_in_destructor_declaration_unsafe25200); if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp.g:3311:15: ( UNSAFE )?
                    int alt390=2;
                    int LA390_0 = input.LA(1);

                    if ( (LA390_0==UNSAFE) ) {
                        alt390=1;
                    }
                    switch (alt390) {
                        case 1 :
                            // CSharp.g:3311:15: UNSAFE
                            {
                            match(input,UNSAFE,FOLLOW_UNSAFE_in_destructor_declaration_unsafe25203); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CSharp.g:3312:7: UNSAFE EXTERN
                    {
                    match(input,UNSAFE,FOLLOW_UNSAFE_in_destructor_declaration_unsafe25212); if (state.failed) return retval;

                    match(input,EXTERN,FOLLOW_EXTERN_in_destructor_declaration_unsafe25214); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,TILDE,FOLLOW_TILDE_in_destructor_declaration_unsafe25228); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_destructor_declaration_unsafe25230); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_destructor_declaration_unsafe25232); if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_destructor_declaration_unsafe25234); if (state.failed) return retval;

            pushFollow(FOLLOW_destructor_body_in_destructor_declaration_unsafe25236);
            destructor_body();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "destructor_declaration_unsafe"


    public static class static_constructor_modifiers_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "static_constructor_modifiers_unsafe"
    // CSharp.g:3326:1: static_constructor_modifiers_unsafe : ( ( EXTERN )? STATIC -> staticConstructorModifiersUnsafe(fstKwd=$EXTERN.textsecndKwd=$STATIC.text)| ( UNSAFE )? STATIC -> staticConstructorModifiersUnsafe(fstKwd=$UNSAFE.textsecndKwd=$STATIC.text)| EXTERN UNSAFE STATIC -> text(value=$EXTERN.text+\" \"+$UNSAFE.text+\" \"+$STATIC.text)| UNSAFE EXTERN STATIC -> text(value=$UNSAFE.text+\" \"+$EXTERN.text+\" \"+$STATIC.text)| EXTERN STATIC UNSAFE -> text(value=$EXTERN.text+\" \"+$STATIC.text+\" \"+$UNSAFE.text)| UNSAFE STATIC EXTERN -> text(value=$UNSAFE.text+\" \"+$STATIC.text+\" \"+$EXTERN.text)| STATIC EXTERN -> text(value=$STATIC.text+\" \"+$EXTERN.text)| STATIC UNSAFE -> text(value=$STATIC.text+\" \"+$UNSAFE.text)| STATIC EXTERN UNSAFE -> text(value=$STATIC.text+\" \"+$EXTERN.text+\" \"+$UNSAFE.text)| STATIC UNSAFE EXTERN -> text(value=$STATIC.text+\" \"+$UNSAFE.text+\" \"+$EXTERN.text));
    public final CSharp.static_constructor_modifiers_unsafe_return static_constructor_modifiers_unsafe() throws RecognitionException {
        CSharp.static_constructor_modifiers_unsafe_return retval = new CSharp.static_constructor_modifiers_unsafe_return();
        retval.start = input.LT(1);


        Token EXTERN323=null;
        Token STATIC324=null;
        Token UNSAFE325=null;
        Token STATIC326=null;
        Token EXTERN327=null;
        Token UNSAFE328=null;
        Token STATIC329=null;
        Token UNSAFE330=null;
        Token EXTERN331=null;
        Token STATIC332=null;
        Token EXTERN333=null;
        Token STATIC334=null;
        Token UNSAFE335=null;
        Token UNSAFE336=null;
        Token STATIC337=null;
        Token EXTERN338=null;
        Token STATIC339=null;
        Token EXTERN340=null;
        Token STATIC341=null;
        Token UNSAFE342=null;
        Token STATIC343=null;
        Token EXTERN344=null;
        Token UNSAFE345=null;
        Token STATIC346=null;
        Token UNSAFE347=null;
        Token EXTERN348=null;

        try {
            // CSharp.g:3327:3: ( ( EXTERN )? STATIC -> staticConstructorModifiersUnsafe(fstKwd=$EXTERN.textsecndKwd=$STATIC.text)| ( UNSAFE )? STATIC -> staticConstructorModifiersUnsafe(fstKwd=$UNSAFE.textsecndKwd=$STATIC.text)| EXTERN UNSAFE STATIC -> text(value=$EXTERN.text+\" \"+$UNSAFE.text+\" \"+$STATIC.text)| UNSAFE EXTERN STATIC -> text(value=$UNSAFE.text+\" \"+$EXTERN.text+\" \"+$STATIC.text)| EXTERN STATIC UNSAFE -> text(value=$EXTERN.text+\" \"+$STATIC.text+\" \"+$UNSAFE.text)| UNSAFE STATIC EXTERN -> text(value=$UNSAFE.text+\" \"+$STATIC.text+\" \"+$EXTERN.text)| STATIC EXTERN -> text(value=$STATIC.text+\" \"+$EXTERN.text)| STATIC UNSAFE -> text(value=$STATIC.text+\" \"+$UNSAFE.text)| STATIC EXTERN UNSAFE -> text(value=$STATIC.text+\" \"+$EXTERN.text+\" \"+$UNSAFE.text)| STATIC UNSAFE EXTERN -> text(value=$STATIC.text+\" \"+$UNSAFE.text+\" \"+$EXTERN.text))
            int alt394=10;
            switch ( input.LA(1) ) {
            case EXTERN:
                {
                int LA394_1 = input.LA(2);

                if ( (LA394_1==UNSAFE) ) {
                    alt394=3;
                }
                else if ( (LA394_1==STATIC) ) {
                    int LA394_5 = input.LA(3);

                    if ( (LA394_5==UNSAFE) ) {
                        alt394=5;
                    }
                    else if ( (LA394_5==IDENTIFIER) ) {
                        alt394=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 394, 5, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 394, 1, input);

                    throw nvae;

                }
                }
                break;
            case STATIC:
                {
                switch ( input.LA(2) ) {
                case EXTERN:
                    {
                    int LA394_6 = input.LA(3);

                    if ( (LA394_6==UNSAFE) ) {
                        alt394=9;
                    }
                    else if ( (LA394_6==IDENTIFIER) ) {
                        alt394=7;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 394, 6, input);

                        throw nvae;

                    }
                    }
                    break;
                case UNSAFE:
                    {
                    int LA394_7 = input.LA(3);

                    if ( (LA394_7==EXTERN) ) {
                        alt394=10;
                    }
                    else if ( (LA394_7==IDENTIFIER) ) {
                        alt394=8;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 394, 7, input);

                        throw nvae;

                    }
                    }
                    break;
                case IDENTIFIER:
                    {
                    alt394=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 394, 2, input);

                    throw nvae;

                }

                }
                break;
            case UNSAFE:
                {
                int LA394_3 = input.LA(2);

                if ( (LA394_3==EXTERN) ) {
                    alt394=4;
                }
                else if ( (LA394_3==STATIC) ) {
                    int LA394_10 = input.LA(3);

                    if ( (LA394_10==EXTERN) ) {
                        alt394=6;
                    }
                    else if ( (LA394_10==IDENTIFIER) ) {
                        alt394=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 394, 10, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 394, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 394, 0, input);

                throw nvae;

            }

            switch (alt394) {
                case 1 :
                    // CSharp.g:3328:3: ( EXTERN )? STATIC
                    {
                    // CSharp.g:3328:3: ( EXTERN )?
                    int alt392=2;
                    int LA392_0 = input.LA(1);

                    if ( (LA392_0==EXTERN) ) {
                        alt392=1;
                    }
                    switch (alt392) {
                        case 1 :
                            // CSharp.g:3328:3: EXTERN
                            {
                            EXTERN323=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe25254); if (state.failed) return retval;

                            }
                            break;

                    }


                    STATIC324=(Token)match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25258); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3329:3: -> staticConstructorModifiersUnsafe(fstKwd=$EXTERN.textsecndKwd=$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("staticConstructorModifiersUnsafe",new STAttrMap().put("fstKwd", (EXTERN323!=null?EXTERN323.getText():null)).put("secndKwd", (STATIC324!=null?STATIC324.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:3330:5: ( UNSAFE )? STATIC
                    {
                    // CSharp.g:3330:5: ( UNSAFE )?
                    int alt393=2;
                    int LA393_0 = input.LA(1);

                    if ( (LA393_0==UNSAFE) ) {
                        alt393=1;
                    }
                    switch (alt393) {
                        case 1 :
                            // CSharp.g:3330:5: UNSAFE
                            {
                            UNSAFE325=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe25278); if (state.failed) return retval;

                            }
                            break;

                    }


                    STATIC326=(Token)match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25281); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3331:3: -> staticConstructorModifiersUnsafe(fstKwd=$UNSAFE.textsecndKwd=$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("staticConstructorModifiersUnsafe",new STAttrMap().put("fstKwd", (UNSAFE325!=null?UNSAFE325.getText():null)).put("secndKwd", (STATIC326!=null?STATIC326.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:3332:5: EXTERN UNSAFE STATIC
                    {
                    EXTERN327=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe25301); if (state.failed) return retval;

                    UNSAFE328=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe25303); if (state.failed) return retval;

                    STATIC329=(Token)match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25305); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3333:3: -> text(value=$EXTERN.text+\" \"+$UNSAFE.text+\" \"+$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXTERN327!=null?EXTERN327.getText():null)+" "+(UNSAFE328!=null?UNSAFE328.getText():null)+" "+(STATIC329!=null?STATIC329.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:3334:5: UNSAFE EXTERN STATIC
                    {
                    UNSAFE330=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe25321); if (state.failed) return retval;

                    EXTERN331=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe25323); if (state.failed) return retval;

                    STATIC332=(Token)match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25325); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3335:3: -> text(value=$UNSAFE.text+\" \"+$EXTERN.text+\" \"+$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE330!=null?UNSAFE330.getText():null)+" "+(EXTERN331!=null?EXTERN331.getText():null)+" "+(STATIC332!=null?STATIC332.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:3336:5: EXTERN STATIC UNSAFE
                    {
                    EXTERN333=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe25341); if (state.failed) return retval;

                    STATIC334=(Token)match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25343); if (state.failed) return retval;

                    UNSAFE335=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe25345); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3337:3: -> text(value=$EXTERN.text+\" \"+$STATIC.text+\" \"+$UNSAFE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXTERN333!=null?EXTERN333.getText():null)+" "+(STATIC334!=null?STATIC334.getText():null)+" "+(UNSAFE335!=null?UNSAFE335.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:3338:5: UNSAFE STATIC EXTERN
                    {
                    UNSAFE336=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe25361); if (state.failed) return retval;

                    STATIC337=(Token)match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25363); if (state.failed) return retval;

                    EXTERN338=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe25365); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3339:3: -> text(value=$UNSAFE.text+\" \"+$STATIC.text+\" \"+$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE336!=null?UNSAFE336.getText():null)+" "+(STATIC337!=null?STATIC337.getText():null)+" "+(EXTERN338!=null?EXTERN338.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:3340:5: STATIC EXTERN
                    {
                    STATIC339=(Token)match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25381); if (state.failed) return retval;

                    EXTERN340=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe25383); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3341:3: -> text(value=$STATIC.text+\" \"+$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STATIC339!=null?STATIC339.getText():null)+" "+(EXTERN340!=null?EXTERN340.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:3342:5: STATIC UNSAFE
                    {
                    STATIC341=(Token)match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25400); if (state.failed) return retval;

                    UNSAFE342=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe25402); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3343:3: -> text(value=$STATIC.text+\" \"+$UNSAFE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STATIC341!=null?STATIC341.getText():null)+" "+(UNSAFE342!=null?UNSAFE342.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:3344:5: STATIC EXTERN UNSAFE
                    {
                    STATIC343=(Token)match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25418); if (state.failed) return retval;

                    EXTERN344=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe25420); if (state.failed) return retval;

                    UNSAFE345=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe25422); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3345:3: -> text(value=$STATIC.text+\" \"+$EXTERN.text+\" \"+$UNSAFE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STATIC343!=null?STATIC343.getText():null)+" "+(EXTERN344!=null?EXTERN344.getText():null)+" "+(UNSAFE345!=null?UNSAFE345.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharp.g:3346:5: STATIC UNSAFE EXTERN
                    {
                    STATIC346=(Token)match(input,STATIC,FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25438); if (state.failed) return retval;

                    UNSAFE347=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe25440); if (state.failed) return retval;

                    EXTERN348=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe25442); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3347:3: -> text(value=$STATIC.text+\" \"+$UNSAFE.text+\" \"+$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STATIC346!=null?STATIC346.getText():null)+" "+(UNSAFE347!=null?UNSAFE347.getText():null)+" "+(EXTERN348!=null?EXTERN348.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_constructor_modifiers_unsafe"


    public static class embedded_statement_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "embedded_statement_unsafe"
    // CSharp.g:3350:1: embedded_statement_unsafe : (unsfStmt= unsafe_statement -> embeddedStatementUnsafe(stmt=unsfStmt)|fxdStmt= fixed_statement -> embeddedStatementUnsafe(stmt=fxdStmt));
    public final CSharp.embedded_statement_unsafe_return embedded_statement_unsafe() throws RecognitionException {
        CSharp.embedded_statement_unsafe_return retval = new CSharp.embedded_statement_unsafe_return();
        retval.start = input.LT(1);


        CSharp.unsafe_statement_return unsfStmt =null;

        CSharp.fixed_statement_return fxdStmt =null;


        try {
            // CSharp.g:3351:2: (unsfStmt= unsafe_statement -> embeddedStatementUnsafe(stmt=unsfStmt)|fxdStmt= fixed_statement -> embeddedStatementUnsafe(stmt=fxdStmt))
            int alt395=2;
            int LA395_0 = input.LA(1);

            if ( (LA395_0==UNSAFE) ) {
                alt395=1;
            }
            else if ( (LA395_0==FIXED) ) {
                alt395=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 395, 0, input);

                throw nvae;

            }
            switch (alt395) {
                case 1 :
                    // CSharp.g:3352:2: unsfStmt= unsafe_statement
                    {
                    pushFollow(FOLLOW_unsafe_statement_in_embedded_statement_unsafe25470);
                    unsfStmt=unsafe_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3353:2: -> embeddedStatementUnsafe(stmt=unsfStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatementUnsafe",new STAttrMap().put("stmt", unsfStmt));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:3354:4: fxdStmt= fixed_statement
                    {
                    pushFollow(FOLLOW_fixed_statement_in_embedded_statement_unsafe25486);
                    fxdStmt=fixed_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3355:2: -> embeddedStatementUnsafe(stmt=fxdStmt)
                      {
                          retval.st = templateLib.getInstanceOf("embeddedStatementUnsafe",new STAttrMap().put("stmt", fxdStmt));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "embedded_statement_unsafe"


    public static class unsafe_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unsafe_statement"
    // CSharp.g:3357:1: unsafe_statement : UNSAFE blk= block -> unsafeStatement(block=blk);
    public final CSharp.unsafe_statement_return unsafe_statement() throws RecognitionException {
        CSharp.unsafe_statement_return retval = new CSharp.unsafe_statement_return();
        retval.start = input.LT(1);


        CSharp.block_return blk =null;


        try {
            // CSharp.g:3358:2: ( UNSAFE blk= block -> unsafeStatement(block=blk))
            // CSharp.g:3359:2: UNSAFE blk= block
            {
            match(input,UNSAFE,FOLLOW_UNSAFE_in_unsafe_statement25508); if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_unsafe_statement25512);
            blk=block();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3360:2: -> unsafeStatement(block=blk)
              {
                  retval.st = templateLib.getInstanceOf("unsafeStatement",new STAttrMap().put("block", blk));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unsafe_statement"


    public static class type_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_unsafe"
    // CSharp.g:3362:1: type_unsafe : pointer_type -> text(value=\"\");
    public final CSharp.type_unsafe_return type_unsafe() throws RecognitionException {
        CSharp.type_unsafe_return retval = new CSharp.type_unsafe_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3363:2: ( pointer_type -> text(value=\"\"))
            // CSharp.g:3364:2: pointer_type
            {
            pushFollow(FOLLOW_pointer_type_in_type_unsafe25534);
            pointer_type();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3365:2: -> text(value=\"\")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_unsafe"


    public static class pointer_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "pointer_type"
    // CSharp.g:3374:1: pointer_type : ( simple_type | class_type | VOID ) ({...}? => rank_specifier |{...}? => INTERR | STAR )* STAR -> text(value=\"\");
    public final CSharp.pointer_type_return pointer_type() throws RecognitionException {
        CSharp.pointer_type_return retval = new CSharp.pointer_type_return();
        retval.start = input.LT(1);



            boolean allowAll = true;

        try {
            // CSharp.g:3378:3: ( ( simple_type | class_type | VOID ) ({...}? => rank_specifier |{...}? => INTERR | STAR )* STAR -> text(value=\"\"))
            // CSharp.g:3379:3: ( simple_type | class_type | VOID ) ({...}? => rank_specifier |{...}? => INTERR | STAR )* STAR
            {
            // CSharp.g:3379:3: ( simple_type | class_type | VOID )
            int alt396=3;
            switch ( input.LA(1) ) {
            case BOOL:
            case BYTE:
            case CHAR:
            case DECIMAL:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SBYTE:
            case SHORT:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt396=1;
                }
                break;
            case IDENTIFIER:
            case OBJECT:
            case STRING:
                {
                alt396=2;
                }
                break;
            case VOID:
                {
                alt396=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 396, 0, input);

                throw nvae;

            }

            switch (alt396) {
                case 1 :
                    // CSharp.g:3379:5: simple_type
                    {
                    pushFollow(FOLLOW_simple_type_in_pointer_type25570);
                    simple_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp.g:3379:19: class_type
                    {
                    pushFollow(FOLLOW_class_type_in_pointer_type25574);
                    class_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp.g:3379:32: VOID
                    {
                    match(input,VOID,FOLLOW_VOID_in_pointer_type25578); if (state.failed) return retval;

                    if ( state.backtracking==0 ) {allowAll = false;}

                    }
                    break;

            }


            // CSharp.g:3379:58: ({...}? => rank_specifier |{...}? => INTERR | STAR )*
            loop397:
            do {
                int alt397=4;
                int LA397_0 = input.LA(1);

                if ( (LA397_0==STAR) ) {
                    int LA397_1 = input.LA(2);

                    if ( (LA397_1==INTERR||LA397_1==OPEN_BRACKET||LA397_1==STAR) ) {
                        alt397=3;
                    }


                }
                else if ( (LA397_0==OPEN_BRACKET) && ((allowAll))) {
                    alt397=1;
                }
                else if ( (LA397_0==INTERR) && ((allowAll))) {
                    alt397=2;
                }


                switch (alt397) {
            	case 1 :
            	    // CSharp.g:3379:60: {...}? => rank_specifier
            	    {
            	    if ( !((allowAll)) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "pointer_type", "allowAll");
            	    }

            	    pushFollow(FOLLOW_rank_specifier_in_pointer_type25589);
            	    rank_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;
            	case 2 :
            	    // CSharp.g:3379:92: {...}? => INTERR
            	    {
            	    if ( !((allowAll)) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "pointer_type", "allowAll");
            	    }

            	    match(input,INTERR,FOLLOW_INTERR_in_pointer_type25597); if (state.failed) return retval;

            	    }
            	    break;
            	case 3 :
            	    // CSharp.g:3379:116: STAR
            	    {
            	    match(input,STAR,FOLLOW_STAR_in_pointer_type25601); if (state.failed) return retval;

            	    if ( state.backtracking==0 ) {allowAll = true;}

            	    }
            	    break;

            	default :
            	    break loop397;
                }
            } while (true);


            match(input,STAR,FOLLOW_STAR_in_pointer_type25607); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3380:3: -> text(value=\"\")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ""));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pointer_type"


    public static class unmanaged_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unmanaged_type"
    // CSharp.g:3393:1: unmanaged_type : t= type -> unmanagedType(type=t);
    public final CSharp.unmanaged_type_return unmanaged_type() throws RecognitionException {
        CSharp.unmanaged_type_return retval = new CSharp.unmanaged_type_return();
        retval.start = input.LT(1);


        CSharp.type_return t =null;


        try {
            // CSharp.g:3394:2: (t= type -> unmanagedType(type=t))
            // CSharp.g:3395:2: t= type
            {
            pushFollow(FOLLOW_type_in_unmanaged_type25646);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3396:2: -> unmanagedType(type=t)
              {
                  retval.st = templateLib.getInstanceOf("unmanagedType",new STAttrMap().put("type", t));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unmanaged_type"


    public static class primary_no_array_creation_expression_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_no_array_creation_expression_unsafe"
    // CSharp.g:3405:1: primary_no_array_creation_expression_unsafe : expr= primary_expression -> primaryNoArrayCreationExpressionUnsafe(expression=expr);
    public final CSharp.primary_no_array_creation_expression_unsafe_return primary_no_array_creation_expression_unsafe() throws RecognitionException {
        CSharp.primary_no_array_creation_expression_unsafe_return retval = new CSharp.primary_no_array_creation_expression_unsafe_return();
        retval.start = input.LT(1);


        CSharp.primary_expression_return expr =null;


        try {
            // CSharp.g:3406:2: (expr= primary_expression -> primaryNoArrayCreationExpressionUnsafe(expression=expr))
            // CSharp.g:3407:2: expr= primary_expression
            {
            pushFollow(FOLLOW_primary_expression_in_primary_no_array_creation_expression_unsafe25672);
            expr=primary_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3408:2: -> primaryNoArrayCreationExpressionUnsafe(expression=expr)
              {
                  retval.st = templateLib.getInstanceOf("primaryNoArrayCreationExpressionUnsafe",new STAttrMap().put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primary_no_array_creation_expression_unsafe"


    public static class unary_expression_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unary_expression_unsafe"
    // CSharp.g:3411:1: unary_expression_unsafe : (piExpr= pointer_indirection_expression -> unaryExpressionUnsafe(expression=piExpr)|aoExpr= addressof_expression -> unaryExpressionUnsafe(expression=aoExpr));
    public final CSharp.unary_expression_unsafe_return unary_expression_unsafe() throws RecognitionException {
        CSharp.unary_expression_unsafe_return retval = new CSharp.unary_expression_unsafe_return();
        retval.start = input.LT(1);


        CSharp.pointer_indirection_expression_return piExpr =null;

        CSharp.addressof_expression_return aoExpr =null;


        try {
            // CSharp.g:3412:2: (piExpr= pointer_indirection_expression -> unaryExpressionUnsafe(expression=piExpr)|aoExpr= addressof_expression -> unaryExpressionUnsafe(expression=aoExpr))
            int alt398=2;
            int LA398_0 = input.LA(1);

            if ( (LA398_0==STAR) ) {
                alt398=1;
            }
            else if ( (LA398_0==AMP) ) {
                alt398=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 398, 0, input);

                throw nvae;

            }
            switch (alt398) {
                case 1 :
                    // CSharp.g:3413:2: piExpr= pointer_indirection_expression
                    {
                    pushFollow(FOLLOW_pointer_indirection_expression_in_unary_expression_unsafe25698);
                    piExpr=pointer_indirection_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3414:2: -> unaryExpressionUnsafe(expression=piExpr)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpressionUnsafe",new STAttrMap().put("expression", piExpr));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:3415:4: aoExpr= addressof_expression
                    {
                    pushFollow(FOLLOW_addressof_expression_in_unary_expression_unsafe25714);
                    aoExpr=addressof_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3416:2: -> unaryExpressionUnsafe(expression=aoExpr)
                      {
                          retval.st = templateLib.getInstanceOf("unaryExpressionUnsafe",new STAttrMap().put("expression", aoExpr));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unary_expression_unsafe"


    public static class pointer_indirection_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "pointer_indirection_expression"
    // CSharp.g:3418:1: pointer_indirection_expression : STAR expr= unary_expression -> pointerIndirectionExpression(expression=expr);
    public final CSharp.pointer_indirection_expression_return pointer_indirection_expression() throws RecognitionException {
        CSharp.pointer_indirection_expression_return retval = new CSharp.pointer_indirection_expression_return();
        retval.start = input.LT(1);


        CSharp.unary_expression_return expr =null;


        try {
            // CSharp.g:3419:2: ( STAR expr= unary_expression -> pointerIndirectionExpression(expression=expr))
            // CSharp.g:3420:2: STAR expr= unary_expression
            {
            match(input,STAR,FOLLOW_STAR_in_pointer_indirection_expression25736); if (state.failed) return retval;

            pushFollow(FOLLOW_unary_expression_in_pointer_indirection_expression25740);
            expr=unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3421:2: -> pointerIndirectionExpression(expression=expr)
              {
                  retval.st = templateLib.getInstanceOf("pointerIndirectionExpression",new STAttrMap().put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pointer_indirection_expression"


    public static class addressof_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "addressof_expression"
    // CSharp.g:3434:1: addressof_expression : AMP expr= unary_expression -> addressofExpression(expression=expr);
    public final CSharp.addressof_expression_return addressof_expression() throws RecognitionException {
        CSharp.addressof_expression_return retval = new CSharp.addressof_expression_return();
        retval.start = input.LT(1);


        CSharp.unary_expression_return expr =null;


        try {
            // CSharp.g:3435:2: ( AMP expr= unary_expression -> addressofExpression(expression=expr))
            // CSharp.g:3436:2: AMP expr= unary_expression
            {
            match(input,AMP,FOLLOW_AMP_in_addressof_expression25768); if (state.failed) return retval;

            pushFollow(FOLLOW_unary_expression_in_addressof_expression25772);
            expr=unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3437:2: -> addressofExpression(expression=expr)
              {
                  retval.st = templateLib.getInstanceOf("addressofExpression",new STAttrMap().put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "addressof_expression"


    public static class sizeof_expression_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "sizeof_expression"
    // CSharp.g:3439:1: sizeof_expression : SIZEOF OPEN_PARENS ut= unmanaged_type CLOSE_PARENS -> sizeofExpression(type=ut);
    public final CSharp.sizeof_expression_return sizeof_expression() throws RecognitionException {
        CSharp.sizeof_expression_return retval = new CSharp.sizeof_expression_return();
        retval.start = input.LT(1);


        CSharp.unmanaged_type_return ut =null;


        try {
            // CSharp.g:3440:2: ( SIZEOF OPEN_PARENS ut= unmanaged_type CLOSE_PARENS -> sizeofExpression(type=ut))
            // CSharp.g:3441:2: SIZEOF OPEN_PARENS ut= unmanaged_type CLOSE_PARENS
            {
            match(input,SIZEOF,FOLLOW_SIZEOF_in_sizeof_expression25794); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_sizeof_expression25796); if (state.failed) return retval;

            pushFollow(FOLLOW_unmanaged_type_in_sizeof_expression25800);
            ut=unmanaged_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_sizeof_expression25802); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3442:2: -> sizeofExpression(type=ut)
              {
                  retval.st = templateLib.getInstanceOf("sizeofExpression",new STAttrMap().put("type", ut));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sizeof_expression"


    public static class fixed_statement_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_statement"
    // CSharp.g:3444:1: fixed_statement : FIXED OPEN_PARENS pt= pointer_type fpd= fixed_pointer_declarators CLOSE_PARENS es= embedded_statement -> fixedStatement(type=ptptrDecl=fpdstmts=es);
    public final CSharp.fixed_statement_return fixed_statement() throws RecognitionException {
        CSharp.fixed_statement_return retval = new CSharp.fixed_statement_return();
        retval.start = input.LT(1);


        CSharp.pointer_type_return pt =null;

        CSharp.fixed_pointer_declarators_return fpd =null;

        CSharp.embedded_statement_return es =null;


        try {
            // CSharp.g:3445:2: ( FIXED OPEN_PARENS pt= pointer_type fpd= fixed_pointer_declarators CLOSE_PARENS es= embedded_statement -> fixedStatement(type=ptptrDecl=fpdstmts=es))
            // CSharp.g:3446:2: FIXED OPEN_PARENS pt= pointer_type fpd= fixed_pointer_declarators CLOSE_PARENS es= embedded_statement
            {
            match(input,FIXED,FOLLOW_FIXED_in_fixed_statement25824); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_fixed_statement25826); if (state.failed) return retval;

            pushFollow(FOLLOW_pointer_type_in_fixed_statement25830);
            pt=pointer_type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_fixed_pointer_declarators_in_fixed_statement25834);
            fpd=fixed_pointer_declarators();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_fixed_statement25836); if (state.failed) return retval;

            pushFollow(FOLLOW_embedded_statement_in_fixed_statement25840);
            es=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3447:2: -> fixedStatement(type=ptptrDecl=fpdstmts=es)
              {
                  retval.st = templateLib.getInstanceOf("fixedStatement",new STAttrMap().put("type", pt).put("ptrDecl", fpd).put("stmts", es));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_statement"


    public static class fixed_pointer_declarators_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_pointer_declarators"
    // CSharp.g:3449:1: fixed_pointer_declarators : fstDecl= fixed_pointer_declarator (chld+= fixed_pointer_declarators_Chld )* -> fixedPointerDeclarators(firstDecl=fstDecllist=$chld);
    public final CSharp.fixed_pointer_declarators_return fixed_pointer_declarators() throws RecognitionException {
        CSharp.fixed_pointer_declarators_return retval = new CSharp.fixed_pointer_declarators_return();
        retval.start = input.LT(1);


        List list_chld=null;
        CSharp.fixed_pointer_declarator_return fstDecl =null;

        RuleReturnScope chld = null;
        try {
            // CSharp.g:3450:2: (fstDecl= fixed_pointer_declarator (chld+= fixed_pointer_declarators_Chld )* -> fixedPointerDeclarators(firstDecl=fstDecllist=$chld))
            // CSharp.g:3451:2: fstDecl= fixed_pointer_declarator (chld+= fixed_pointer_declarators_Chld )*
            {
            pushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators25872);
            fstDecl=fixed_pointer_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:3451:35: (chld+= fixed_pointer_declarators_Chld )*
            loop399:
            do {
                int alt399=2;
                int LA399_0 = input.LA(1);

                if ( (LA399_0==COMMA) ) {
                    alt399=1;
                }


                switch (alt399) {
            	case 1 :
            	    // CSharp.g:3451:36: chld+= fixed_pointer_declarators_Chld
            	    {
            	    pushFollow(FOLLOW_fixed_pointer_declarators_Chld_in_fixed_pointer_declarators25877);
            	    chld=fixed_pointer_declarators_Chld();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_chld==null) list_chld=new ArrayList();
            	    list_chld.add(chld.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop399;
                }
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3452:2: -> fixedPointerDeclarators(firstDecl=fstDecllist=$chld)
              {
                  retval.st = templateLib.getInstanceOf("fixedPointerDeclarators",new STAttrMap().put("firstDecl", fstDecl).put("list", list_chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_declarators"


    public static class fixed_pointer_declarators_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_pointer_declarators_Chld"
    // CSharp.g:3455:1: fixed_pointer_declarators_Chld : COMMA fpd= fixed_pointer_declarator -> fixedPointerDeclaratorsChld(decl=fpd);
    public final CSharp.fixed_pointer_declarators_Chld_return fixed_pointer_declarators_Chld() throws RecognitionException {
        CSharp.fixed_pointer_declarators_Chld_return retval = new CSharp.fixed_pointer_declarators_Chld_return();
        retval.start = input.LT(1);


        CSharp.fixed_pointer_declarator_return fpd =null;


        try {
            // CSharp.g:3456:2: ( COMMA fpd= fixed_pointer_declarator -> fixedPointerDeclaratorsChld(decl=fpd))
            // CSharp.g:3457:2: COMMA fpd= fixed_pointer_declarator
            {
            match(input,COMMA,FOLLOW_COMMA_in_fixed_pointer_declarators_Chld25905); if (state.failed) return retval;

            pushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators_Chld25910);
            fpd=fixed_pointer_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3458:2: -> fixedPointerDeclaratorsChld(decl=fpd)
              {
                  retval.st = templateLib.getInstanceOf("fixedPointerDeclaratorsChld",new STAttrMap().put("decl", fpd));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_declarators_Chld"


    public static class fixed_pointer_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_pointer_declarator"
    // CSharp.g:3461:1: fixed_pointer_declarator : IDENTIFIER ASSIGNMENT fpi= fixed_pointer_initializer -> fixedPointerDeclarator(lhs=$IDENTIFIER.textrhs=fpi);
    public final CSharp.fixed_pointer_declarator_return fixed_pointer_declarator() throws RecognitionException {
        CSharp.fixed_pointer_declarator_return retval = new CSharp.fixed_pointer_declarator_return();
        retval.start = input.LT(1);


        Token IDENTIFIER349=null;
        CSharp.fixed_pointer_initializer_return fpi =null;


        try {
            // CSharp.g:3462:2: ( IDENTIFIER ASSIGNMENT fpi= fixed_pointer_initializer -> fixedPointerDeclarator(lhs=$IDENTIFIER.textrhs=fpi))
            // CSharp.g:3463:2: IDENTIFIER ASSIGNMENT fpi= fixed_pointer_initializer
            {
            IDENTIFIER349=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_fixed_pointer_declarator25934); if (state.failed) return retval;

            match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_fixed_pointer_declarator25936); if (state.failed) return retval;

            pushFollow(FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator25940);
            fpi=fixed_pointer_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3464:2: -> fixedPointerDeclarator(lhs=$IDENTIFIER.textrhs=fpi)
              {
                  retval.st = templateLib.getInstanceOf("fixedPointerDeclarator",new STAttrMap().put("lhs", (IDENTIFIER349!=null?IDENTIFIER349.getText():null)).put("rhs", fpi));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_declarator"


    public static class fixed_pointer_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_pointer_initializer"
    // CSharp.g:3472:1: fixed_pointer_initializer : ( ( AMP )=> AMP varInit= variable_reference -> fixedPointerInitializer(init=\"&\"+varInit)|expr= expression -> fixedPointerInitializer(init=expr));
    public final CSharp.fixed_pointer_initializer_return fixed_pointer_initializer() throws RecognitionException {
        CSharp.fixed_pointer_initializer_return retval = new CSharp.fixed_pointer_initializer_return();
        retval.start = input.LT(1);


        CSharp.variable_reference_return varInit =null;

        CSharp.expression_return expr =null;


        try {
            // CSharp.g:3473:3: ( ( AMP )=> AMP varInit= variable_reference -> fixedPointerInitializer(init=\"&\"+varInit)|expr= expression -> fixedPointerInitializer(init=expr))
            int alt400=2;
            int LA400_0 = input.LA(1);

            if ( (LA400_0==AMP) ) {
                int LA400_1 = input.LA(2);

                if ( (synpred27_CSharp()) ) {
                    alt400=1;
                }
                else if ( (true) ) {
                    alt400=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 400, 1, input);

                    throw nvae;

                }
            }
            else if ( ((LA400_0 >= BANG && LA400_0 <= BASE)||LA400_0==BOOL||LA400_0==BYTE||(LA400_0 >= CHAR && LA400_0 <= CHECKED)||LA400_0==DECIMAL||(LA400_0 >= DEFAULT && LA400_0 <= DELEGATE)||LA400_0==DOUBLE||LA400_0==FALSE||LA400_0==FLOAT||LA400_0==IDENTIFIER||(LA400_0 >= INT && LA400_0 <= INTEGER_LITERAL)||LA400_0==LONG||LA400_0==MINUS||LA400_0==NEW||LA400_0==NULL||LA400_0==OBJECT||LA400_0==OPEN_PARENS||LA400_0==OP_DEC||LA400_0==OP_INC||LA400_0==PLUS||LA400_0==REAL_LITERAL||LA400_0==SBYTE||LA400_0==SHORT||LA400_0==SIZEOF||LA400_0==STAR||(LA400_0 >= STRING && LA400_0 <= STRING_LITERAL)||LA400_0==THIS||(LA400_0 >= TILDE && LA400_0 <= TRUE)||LA400_0==TYPEOF||(LA400_0 >= UINT && LA400_0 <= UNCHECKED)||LA400_0==USHORT) ) {
                alt400=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 400, 0, input);

                throw nvae;

            }
            switch (alt400) {
                case 1 :
                    // CSharp.g:3474:3: ( AMP )=> AMP varInit= variable_reference
                    {
                    match(input,AMP,FOLLOW_AMP_in_fixed_pointer_initializer25976); if (state.failed) return retval;

                    pushFollow(FOLLOW_variable_reference_in_fixed_pointer_initializer25980);
                    varInit=variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3475:3: -> fixedPointerInitializer(init=\"&\"+varInit)
                      {
                          retval.st = templateLib.getInstanceOf("fixedPointerInitializer",new STAttrMap().put("init", "&"+varInit));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:3476:5: expr= expression
                    {
                    pushFollow(FOLLOW_expression_in_fixed_pointer_initializer25998);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3477:3: -> fixedPointerInitializer(init=expr)
                      {
                          retval.st = templateLib.getInstanceOf("fixedPointerInitializer",new STAttrMap().put("init", expr));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_initializer"


    public static class struct_member_declaration_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_member_declaration_unsafe"
    // CSharp.g:3479:1: struct_member_declaration_unsafe : fsbd= fixed_size_buffer_declaration -> structMemberDeclarationUnsafe(decl=fsbd);
    public final CSharp.struct_member_declaration_unsafe_return struct_member_declaration_unsafe() throws RecognitionException {
        CSharp.struct_member_declaration_unsafe_return retval = new CSharp.struct_member_declaration_unsafe_return();
        retval.start = input.LT(1);


        CSharp.fixed_size_buffer_declaration_return fsbd =null;


        try {
            // CSharp.g:3480:2: (fsbd= fixed_size_buffer_declaration -> structMemberDeclarationUnsafe(decl=fsbd))
            // CSharp.g:3481:2: fsbd= fixed_size_buffer_declaration
            {
            pushFollow(FOLLOW_fixed_size_buffer_declaration_in_struct_member_declaration_unsafe26024);
            fsbd=fixed_size_buffer_declaration();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3482:2: -> structMemberDeclarationUnsafe(decl=fsbd)
              {
                  retval.st = templateLib.getInstanceOf("structMemberDeclarationUnsafe",new STAttrMap().put("decl", fsbd));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_member_declaration_unsafe"


    public static class fixed_size_buffer_declaration_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_size_buffer_declaration"
    // CSharp.g:3484:1: fixed_size_buffer_declaration : (ats= attributes )? (fsbm= fixed_size_buffer_modifiers )? FIXED bet= buffer_element_type fsbd= fixed_size_buffer_declarators SEMICOLON -> fixedSizeBufferDeclaration(attributes=atsfxdSzBufModf=fsbmbufElmntTyp=betfxdSzBufDcls=fsbd);
    public final CSharp.fixed_size_buffer_declaration_return fixed_size_buffer_declaration() throws RecognitionException {
        CSharp.fixed_size_buffer_declaration_return retval = new CSharp.fixed_size_buffer_declaration_return();
        retval.start = input.LT(1);


        CSharp.attributes_return ats =null;

        CSharp.fixed_size_buffer_modifiers_return fsbm =null;

        CSharp.buffer_element_type_return bet =null;

        CSharp.fixed_size_buffer_declarators_return fsbd =null;


        try {
            // CSharp.g:3485:2: ( (ats= attributes )? (fsbm= fixed_size_buffer_modifiers )? FIXED bet= buffer_element_type fsbd= fixed_size_buffer_declarators SEMICOLON -> fixedSizeBufferDeclaration(attributes=atsfxdSzBufModf=fsbmbufElmntTyp=betfxdSzBufDcls=fsbd))
            // CSharp.g:3486:2: (ats= attributes )? (fsbm= fixed_size_buffer_modifiers )? FIXED bet= buffer_element_type fsbd= fixed_size_buffer_declarators SEMICOLON
            {
            // CSharp.g:3486:2: (ats= attributes )?
            int alt401=2;
            int LA401_0 = input.LA(1);

            if ( (LA401_0==OPEN_BRACKET) ) {
                alt401=1;
            }
            switch (alt401) {
                case 1 :
                    // CSharp.g:3486:3: ats= attributes
                    {
                    pushFollow(FOLLOW_attributes_in_fixed_size_buffer_declaration26049);
                    ats=attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3486:20: (fsbm= fixed_size_buffer_modifiers )?
            int alt402=2;
            int LA402_0 = input.LA(1);

            if ( (LA402_0==INTERNAL||LA402_0==NEW||(LA402_0 >= PRIVATE && LA402_0 <= PUBLIC)||LA402_0==UNSAFE) ) {
                alt402=1;
            }
            switch (alt402) {
                case 1 :
                    // CSharp.g:3486:21: fsbm= fixed_size_buffer_modifiers
                    {
                    pushFollow(FOLLOW_fixed_size_buffer_modifiers_in_fixed_size_buffer_declaration26056);
                    fsbm=fixed_size_buffer_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,FIXED,FOLLOW_FIXED_in_fixed_size_buffer_declaration26060); if (state.failed) return retval;

            pushFollow(FOLLOW_buffer_element_type_in_fixed_size_buffer_declaration26064);
            bet=buffer_element_type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_fixed_size_buffer_declarators_in_fixed_size_buffer_declaration26068);
            fsbd=fixed_size_buffer_declarators();

            state._fsp--;
            if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_fixed_size_buffer_declaration26070); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3487:2: -> fixedSizeBufferDeclaration(attributes=atsfxdSzBufModf=fsbmbufElmntTyp=betfxdSzBufDcls=fsbd)
              {
                  retval.st = templateLib.getInstanceOf("fixedSizeBufferDeclaration",new STAttrMap().put("attributes", ats).put("fxdSzBufModf", fsbm).put("bufElmntTyp", bet).put("fxdSzBufDcls", fsbd));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_size_buffer_declaration"


    public static class fixed_size_buffer_modifiers_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_size_buffer_modifiers"
    // CSharp.g:3489:1: fixed_size_buffer_modifiers : (modf+= fixed_size_buffer_modifier )+ -> fixedSizeBufferModifiers(modfs=$modf);
    public final CSharp.fixed_size_buffer_modifiers_return fixed_size_buffer_modifiers() throws RecognitionException {
        CSharp.fixed_size_buffer_modifiers_return retval = new CSharp.fixed_size_buffer_modifiers_return();
        retval.start = input.LT(1);


        List list_modf=null;
        RuleReturnScope modf = null;
        try {
            // CSharp.g:3490:2: ( (modf+= fixed_size_buffer_modifier )+ -> fixedSizeBufferModifiers(modfs=$modf))
            // CSharp.g:3491:2: (modf+= fixed_size_buffer_modifier )+
            {
            // CSharp.g:3491:2: (modf+= fixed_size_buffer_modifier )+
            int cnt403=0;
            loop403:
            do {
                int alt403=2;
                int LA403_0 = input.LA(1);

                if ( (LA403_0==INTERNAL||LA403_0==NEW||(LA403_0 >= PRIVATE && LA403_0 <= PUBLIC)||LA403_0==UNSAFE) ) {
                    alt403=1;
                }


                switch (alt403) {
            	case 1 :
            	    // CSharp.g:3491:3: modf+= fixed_size_buffer_modifier
            	    {
            	    pushFollow(FOLLOW_fixed_size_buffer_modifier_in_fixed_size_buffer_modifiers26107);
            	    modf=fixed_size_buffer_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_modf==null) list_modf=new ArrayList();
            	    list_modf.add(modf.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt403 >= 1 ) break loop403;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(403, input);
                        throw eee;
                }
                cnt403++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3492:2: -> fixedSizeBufferModifiers(modfs=$modf)
              {
                  retval.st = templateLib.getInstanceOf("fixedSizeBufferModifiers",new STAttrMap().put("modfs", list_modf));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_size_buffer_modifiers"


    public static class fixed_size_buffer_modifier_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_size_buffer_modifier"
    // CSharp.g:3494:1: fixed_size_buffer_modifier : ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)| UNSAFE -> text(value=$UNSAFE.text));
    public final CSharp.fixed_size_buffer_modifier_return fixed_size_buffer_modifier() throws RecognitionException {
        CSharp.fixed_size_buffer_modifier_return retval = new CSharp.fixed_size_buffer_modifier_return();
        retval.start = input.LT(1);


        Token NEW350=null;
        Token PUBLIC351=null;
        Token PROTECTED352=null;
        Token PRIVATE353=null;
        Token UNSAFE354=null;

        try {
            // CSharp.g:3495:3: ( NEW -> text(value=$NEW.text)| PUBLIC -> text(value=$PUBLIC.text)| PROTECTED -> text(value=$PROTECTED.text)| INTERNAL -> text(value=\"private\")| PRIVATE -> text(value=$PRIVATE.text)| UNSAFE -> text(value=$UNSAFE.text))
            int alt404=6;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt404=1;
                }
                break;
            case PUBLIC:
                {
                alt404=2;
                }
                break;
            case PROTECTED:
                {
                alt404=3;
                }
                break;
            case INTERNAL:
                {
                alt404=4;
                }
                break;
            case PRIVATE:
                {
                alt404=5;
                }
                break;
            case UNSAFE:
                {
                alt404=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 404, 0, input);

                throw nvae;

            }

            switch (alt404) {
                case 1 :
                    // CSharp.g:3496:3: NEW
                    {
                    NEW350=(Token)match(input,NEW,FOLLOW_NEW_in_fixed_size_buffer_modifier26133); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3496:21: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW350!=null?NEW350.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:3497:5: PUBLIC
                    {
                    PUBLIC351=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_fixed_size_buffer_modifier26161); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3497:21: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC351!=null?PUBLIC351.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:3498:5: PROTECTED
                    {
                    PROTECTED352=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_fixed_size_buffer_modifier26184); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3498:21: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED352!=null?PROTECTED352.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:3499:5: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_fixed_size_buffer_modifier26204); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3499:21: -> text(value=\"private\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "private"));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:3500:5: PRIVATE
                    {
                    PRIVATE353=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_fixed_size_buffer_modifier26225); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3500:21: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE353!=null?PRIVATE353.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:3501:5: UNSAFE
                    {
                    UNSAFE354=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_fixed_size_buffer_modifier26247); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3501:21: -> text(value=$UNSAFE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE354!=null?UNSAFE354.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_size_buffer_modifier"


    public static class buffer_element_type_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "buffer_element_type"
    // CSharp.g:3504:1: buffer_element_type : t= type -> bufferElementType(type=t);
    public final CSharp.buffer_element_type_return buffer_element_type() throws RecognitionException {
        CSharp.buffer_element_type_return retval = new CSharp.buffer_element_type_return();
        retval.start = input.LT(1);


        CSharp.type_return t =null;


        try {
            // CSharp.g:3505:2: (t= type -> bufferElementType(type=t))
            // CSharp.g:3506:2: t= type
            {
            pushFollow(FOLLOW_type_in_buffer_element_type26281);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3507:2: -> bufferElementType(type=t)
              {
                  retval.st = templateLib.getInstanceOf("bufferElementType",new STAttrMap().put("type", t));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "buffer_element_type"


    public static class fixed_size_buffer_declarators_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_size_buffer_declarators"
    // CSharp.g:3509:1: fixed_size_buffer_declarators : (decls+= fixed_size_buffer_declarator )+ -> fixedSizeBufferDeclarators(declarators=$decls);
    public final CSharp.fixed_size_buffer_declarators_return fixed_size_buffer_declarators() throws RecognitionException {
        CSharp.fixed_size_buffer_declarators_return retval = new CSharp.fixed_size_buffer_declarators_return();
        retval.start = input.LT(1);


        List list_decls=null;
        RuleReturnScope decls = null;
        try {
            // CSharp.g:3510:2: ( (decls+= fixed_size_buffer_declarator )+ -> fixedSizeBufferDeclarators(declarators=$decls))
            // CSharp.g:3511:2: (decls+= fixed_size_buffer_declarator )+
            {
            // CSharp.g:3511:2: (decls+= fixed_size_buffer_declarator )+
            int cnt405=0;
            loop405:
            do {
                int alt405=2;
                int LA405_0 = input.LA(1);

                if ( (LA405_0==IDENTIFIER) ) {
                    alt405=1;
                }


                switch (alt405) {
            	case 1 :
            	    // CSharp.g:3511:3: decls+= fixed_size_buffer_declarator
            	    {
            	    pushFollow(FOLLOW_fixed_size_buffer_declarator_in_fixed_size_buffer_declarators26306);
            	    decls=fixed_size_buffer_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_decls==null) list_decls=new ArrayList();
            	    list_decls.add(decls.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt405 >= 1 ) break loop405;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(405, input);
                        throw eee;
                }
                cnt405++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3512:2: -> fixedSizeBufferDeclarators(declarators=$decls)
              {
                  retval.st = templateLib.getInstanceOf("fixedSizeBufferDeclarators",new STAttrMap().put("declarators", list_decls));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_size_buffer_declarators"


    public static class fixed_size_buffer_declarator_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_size_buffer_declarator"
    // CSharp.g:3514:1: fixed_size_buffer_declarator : IDENTIFIER OPEN_BRACKET expr= constant_expression CLOSE_BRACKET -> fixedSizeBufferDeclarator(name=$IDENTIFIER.textexpression=expr);
    public final CSharp.fixed_size_buffer_declarator_return fixed_size_buffer_declarator() throws RecognitionException {
        CSharp.fixed_size_buffer_declarator_return retval = new CSharp.fixed_size_buffer_declarator_return();
        retval.start = input.LT(1);


        Token IDENTIFIER355=null;
        CSharp.constant_expression_return expr =null;


        try {
            // CSharp.g:3515:2: ( IDENTIFIER OPEN_BRACKET expr= constant_expression CLOSE_BRACKET -> fixedSizeBufferDeclarator(name=$IDENTIFIER.textexpression=expr))
            // CSharp.g:3516:2: IDENTIFIER OPEN_BRACKET expr= constant_expression CLOSE_BRACKET
            {
            IDENTIFIER355=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_fixed_size_buffer_declarator26330); if (state.failed) return retval;

            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_fixed_size_buffer_declarator26332); if (state.failed) return retval;

            pushFollow(FOLLOW_constant_expression_in_fixed_size_buffer_declarator26336);
            expr=constant_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_fixed_size_buffer_declarator26338); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3517:2: -> fixedSizeBufferDeclarator(name=$IDENTIFIER.textexpression=expr)
              {
                  retval.st = templateLib.getInstanceOf("fixedSizeBufferDeclarator",new STAttrMap().put("name", (IDENTIFIER355!=null?IDENTIFIER355.getText():null)).put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fixed_size_buffer_declarator"


    public static class local_variable_initializer_unsafe_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_initializer_unsafe"
    // CSharp.g:3520:1: local_variable_initializer_unsafe : stkInit= stackalloc_initializer -> localVariableInitializerUnsafe(init=stkInit);
    public final CSharp.local_variable_initializer_unsafe_return local_variable_initializer_unsafe() throws RecognitionException {
        CSharp.local_variable_initializer_unsafe_return retval = new CSharp.local_variable_initializer_unsafe_return();
        retval.start = input.LT(1);


        CSharp.stackalloc_initializer_return stkInit =null;


        try {
            // CSharp.g:3521:2: (stkInit= stackalloc_initializer -> localVariableInitializerUnsafe(init=stkInit))
            // CSharp.g:3522:2: stkInit= stackalloc_initializer
            {
            pushFollow(FOLLOW_stackalloc_initializer_in_local_variable_initializer_unsafe26368);
            stkInit=stackalloc_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3523:2: -> localVariableInitializerUnsafe(init=stkInit)
              {
                  retval.st = templateLib.getInstanceOf("localVariableInitializerUnsafe",new STAttrMap().put("init", stkInit));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "local_variable_initializer_unsafe"


    public static class stackalloc_initializer_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "stackalloc_initializer"
    // CSharp.g:3525:1: stackalloc_initializer : STACKALLOC t= unmanaged_type OPEN_BRACKET expr= expression CLOSE_BRACKET -> stackallocInitializer(umManTyp=texpression=expr);
    public final CSharp.stackalloc_initializer_return stackalloc_initializer() throws RecognitionException {
        CSharp.stackalloc_initializer_return retval = new CSharp.stackalloc_initializer_return();
        retval.start = input.LT(1);


        CSharp.unmanaged_type_return t =null;

        CSharp.expression_return expr =null;


        try {
            // CSharp.g:3526:2: ( STACKALLOC t= unmanaged_type OPEN_BRACKET expr= expression CLOSE_BRACKET -> stackallocInitializer(umManTyp=texpression=expr))
            // CSharp.g:3527:2: STACKALLOC t= unmanaged_type OPEN_BRACKET expr= expression CLOSE_BRACKET
            {
            match(input,STACKALLOC,FOLLOW_STACKALLOC_in_stackalloc_initializer26390); if (state.failed) return retval;

            pushFollow(FOLLOW_unmanaged_type_in_stackalloc_initializer26394);
            t=unmanaged_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_stackalloc_initializer26396); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_stackalloc_initializer26400);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_stackalloc_initializer26402); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3528:2: -> stackallocInitializer(umManTyp=texpression=expr)
              {
                  retval.st = templateLib.getInstanceOf("stackallocInitializer",new STAttrMap().put("umManTyp", t).put("expression", expr));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stackalloc_initializer"


    public static class from_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "from_contextual_keyword"
    // CSharp.g:3538:1: from_contextual_keyword :{...}? IDENTIFIER -> text(value=\"from \");
    public final CSharp.from_contextual_keyword_return from_contextual_keyword() throws RecognitionException {
        CSharp.from_contextual_keyword_return retval = new CSharp.from_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3539:3: ({...}? IDENTIFIER -> text(value=\"from \"))
            // CSharp.g:3540:3: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("from"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "from_contextual_keyword", "input.LT(1).getText().equals(\"from\")");
            }

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_from_contextual_keyword26440); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3541:3: -> text(value=\"from \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "from "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "from_contextual_keyword"


    public static class let_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "let_contextual_keyword"
    // CSharp.g:3543:1: let_contextual_keyword :{...}? IDENTIFIER -> text(value=\"let \");
    public final CSharp.let_contextual_keyword_return let_contextual_keyword() throws RecognitionException {
        CSharp.let_contextual_keyword_return retval = new CSharp.let_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3544:3: ({...}? IDENTIFIER -> text(value=\"let \"))
            // CSharp.g:3544:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("let"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "let_contextual_keyword", "input.LT(1).getText().equals(\"let\")");
            }

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_let_contextual_keyword26464); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3545:4: -> text(value=\"let \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "let "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "let_contextual_keyword"


    public static class where_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "where_contextual_keyword"
    // CSharp.g:3547:1: where_contextual_keyword :{...}? IDENTIFIER -> text(value=\"where \");
    public final CSharp.where_contextual_keyword_return where_contextual_keyword() throws RecognitionException {
        CSharp.where_contextual_keyword_return retval = new CSharp.where_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3548:3: ({...}? IDENTIFIER -> text(value=\"where \"))
            // CSharp.g:3548:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("where"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "where_contextual_keyword", "input.LT(1).getText().equals(\"where\")");
            }

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_where_contextual_keyword26489); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3549:3: -> text(value=\"where \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "where "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "where_contextual_keyword"


    public static class join_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "join_contextual_keyword"
    // CSharp.g:3551:1: join_contextual_keyword :{...}? IDENTIFIER -> text(value=\"join \");
    public final CSharp.join_contextual_keyword_return join_contextual_keyword() throws RecognitionException {
        CSharp.join_contextual_keyword_return retval = new CSharp.join_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3552:3: ({...}? IDENTIFIER -> text(value=\"join \"))
            // CSharp.g:3552:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("join"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "join_contextual_keyword", "input.LT(1).getText().equals(\"join\")");
            }

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_join_contextual_keyword26513); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3553:4: -> text(value=\"join \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "join "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_contextual_keyword"


    public static class on_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "on_contextual_keyword"
    // CSharp.g:3555:1: on_contextual_keyword :{...}? IDENTIFIER -> text(value=\"on \");
    public final CSharp.on_contextual_keyword_return on_contextual_keyword() throws RecognitionException {
        CSharp.on_contextual_keyword_return retval = new CSharp.on_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3556:3: ({...}? IDENTIFIER -> text(value=\"on \"))
            // CSharp.g:3556:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("on"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "on_contextual_keyword", "input.LT(1).getText().equals(\"on\")");
            }

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_on_contextual_keyword26538); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3557:4: -> text(value=\"on \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "on "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "on_contextual_keyword"


    public static class equals_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "equals_contextual_keyword"
    // CSharp.g:3559:1: equals_contextual_keyword :{...}? IDENTIFIER -> text(value=\"equals \");
    public final CSharp.equals_contextual_keyword_return equals_contextual_keyword() throws RecognitionException {
        CSharp.equals_contextual_keyword_return retval = new CSharp.equals_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3560:3: ({...}? IDENTIFIER -> text(value=\"equals \"))
            // CSharp.g:3561:3: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("equals"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "equals_contextual_keyword", "input.LT(1).getText().equals(\"equals\")");
            }

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_equals_contextual_keyword26566); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3562:4: -> text(value=\"equals \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "equals "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "equals_contextual_keyword"


    public static class into_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "into_contextual_keyword"
    // CSharp.g:3564:1: into_contextual_keyword :{...}? IDENTIFIER -> text(value=\"into \");
    public final CSharp.into_contextual_keyword_return into_contextual_keyword() throws RecognitionException {
        CSharp.into_contextual_keyword_return retval = new CSharp.into_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3565:3: ({...}? IDENTIFIER -> text(value=\"into \"))
            // CSharp.g:3565:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("into"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "into_contextual_keyword", "input.LT(1).getText().equals(\"into\")");
            }

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_into_contextual_keyword26591); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3566:4: -> text(value=\"into \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "into "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "into_contextual_keyword"


    public static class orderby_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "orderby_contextual_keyword"
    // CSharp.g:3568:1: orderby_contextual_keyword :{...}? IDENTIFIER -> text(value=\"orderby \");
    public final CSharp.orderby_contextual_keyword_return orderby_contextual_keyword() throws RecognitionException {
        CSharp.orderby_contextual_keyword_return retval = new CSharp.orderby_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3569:3: ({...}? IDENTIFIER -> text(value=\"orderby \"))
            // CSharp.g:3569:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("orderby"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "orderby_contextual_keyword", "input.LT(1).getText().equals(\"orderby\")");
            }

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_orderby_contextual_keyword26616); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3570:5: -> text(value=\"orderby \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "orderby "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orderby_contextual_keyword"


    public static class ascending_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "ascending_contextual_keyword"
    // CSharp.g:3572:1: ascending_contextual_keyword :{...}? IDENTIFIER -> text(value=\"ascending \");
    public final CSharp.ascending_contextual_keyword_return ascending_contextual_keyword() throws RecognitionException {
        CSharp.ascending_contextual_keyword_return retval = new CSharp.ascending_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3573:3: ({...}? IDENTIFIER -> text(value=\"ascending \"))
            // CSharp.g:3573:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("ascending"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ascending_contextual_keyword", "input.LT(1).getText().equals(\"ascending\")");
            }

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_ascending_contextual_keyword26642); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3574:5: -> text(value=\"ascending \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "ascending "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ascending_contextual_keyword"


    public static class descending_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "descending_contextual_keyword"
    // CSharp.g:3576:1: descending_contextual_keyword :{...}? IDENTIFIER -> text(value=\"descending \");
    public final CSharp.descending_contextual_keyword_return descending_contextual_keyword() throws RecognitionException {
        CSharp.descending_contextual_keyword_return retval = new CSharp.descending_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3577:3: ({...}? IDENTIFIER -> text(value=\"descending \"))
            // CSharp.g:3577:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("descending"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "descending_contextual_keyword", "input.LT(1).getText().equals(\"descending\")");
            }

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_descending_contextual_keyword26668); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3578:5: -> text(value=\"descending \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "descending "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "descending_contextual_keyword"


    public static class select_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "select_contextual_keyword"
    // CSharp.g:3580:1: select_contextual_keyword :{...}? IDENTIFIER -> text(value=\"select \");
    public final CSharp.select_contextual_keyword_return select_contextual_keyword() throws RecognitionException {
        CSharp.select_contextual_keyword_return retval = new CSharp.select_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3581:3: ({...}? IDENTIFIER -> text(value=\"select \"))
            // CSharp.g:3581:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("select"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "select_contextual_keyword", "input.LT(1).getText().equals(\"select\")");
            }

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_select_contextual_keyword26694); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3582:5: -> text(value=\"select \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "select "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "select_contextual_keyword"


    public static class group_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "group_contextual_keyword"
    // CSharp.g:3584:1: group_contextual_keyword :{...}?id= IDENTIFIER -> text(value=\"group \");
    public final CSharp.group_contextual_keyword_return group_contextual_keyword() throws RecognitionException {
        CSharp.group_contextual_keyword_return retval = new CSharp.group_contextual_keyword_return();
        retval.start = input.LT(1);


        Token id=null;

        try {
            // CSharp.g:3585:3: ({...}?id= IDENTIFIER -> text(value=\"group \"))
            // CSharp.g:3586:3: {...}?id= IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("group"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "group_contextual_keyword", "input.LT(1).getText().equals(\"group\")");
            }

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_group_contextual_keyword26725); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3587:3: -> text(value=\"group \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "group  "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_contextual_keyword"


    public static class by_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "by_contextual_keyword"
    // CSharp.g:3589:1: by_contextual_keyword :{...}?id= IDENTIFIER -> text(value=\"by \");
    public final CSharp.by_contextual_keyword_return by_contextual_keyword() throws RecognitionException {
        CSharp.by_contextual_keyword_return retval = new CSharp.by_contextual_keyword_return();
        retval.start = input.LT(1);


        Token id=null;

        try {
            // CSharp.g:3590:3: ({...}?id= IDENTIFIER -> text(value=\"by \"))
            // CSharp.g:3591:3: {...}?id= IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("by"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "by_contextual_keyword", "input.LT(1).getText().equals(\"by\")");
            }

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_by_contextual_keyword26754); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3592:3: -> text(value=\"by \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "by "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "by_contextual_keyword"


    public static class partial_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "partial_contextual_keyword"
    // CSharp.g:3594:1: partial_contextual_keyword :{...}?id= IDENTIFIER -> text(value=\"partial \");
    public final CSharp.partial_contextual_keyword_return partial_contextual_keyword() throws RecognitionException {
        CSharp.partial_contextual_keyword_return retval = new CSharp.partial_contextual_keyword_return();
        retval.start = input.LT(1);


        Token id=null;

        try {
            // CSharp.g:3595:3: ({...}?id= IDENTIFIER -> text(value=\"partial \"))
            // CSharp.g:3596:3: {...}?id= IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("partial"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "partial_contextual_keyword", "input.LT(1).getText().equals(\"partial\")");
            }

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_partial_contextual_keyword26783); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3597:3: -> text(value=\"partial \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "partial "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partial_contextual_keyword"


    public static class alias_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "alias_contextual_keyword"
    // CSharp.g:3599:1: alias_contextual_keyword :{...}? IDENTIFIER -> text(value=\"alias \");
    public final CSharp.alias_contextual_keyword_return alias_contextual_keyword() throws RecognitionException {
        CSharp.alias_contextual_keyword_return retval = new CSharp.alias_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3600:3: ({...}? IDENTIFIER -> text(value=\"alias \"))
            // CSharp.g:3600:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("alias"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "alias_contextual_keyword", "input.LT(1).getText().equals(\"alias\")");
            }

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_alias_contextual_keyword26807); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3601:6: -> text(value=\"alias \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "alias "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alias_contextual_keyword"


    public static class yield_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "yield_contextual_keyword"
    // CSharp.g:3603:1: yield_contextual_keyword :{...}? IDENTIFIER -> text(value=\"yield \"+$IDENTIFIER.text);
    public final CSharp.yield_contextual_keyword_return yield_contextual_keyword() throws RecognitionException {
        CSharp.yield_contextual_keyword_return retval = new CSharp.yield_contextual_keyword_return();
        retval.start = input.LT(1);


        Token IDENTIFIER356=null;

        try {
            // CSharp.g:3604:3: ({...}? IDENTIFIER -> text(value=\"yield \"+$IDENTIFIER.text))
            // CSharp.g:3604:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("yield"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "yield_contextual_keyword", "input.LT(1).getText().equals(\"yield\")");
            }

            IDENTIFIER356=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_yield_contextual_keyword26834); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3605:6: -> text(value=\"yield \"+$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "yield "+(IDENTIFIER356!=null?IDENTIFIER356.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "yield_contextual_keyword"


    public static class get_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "get_contextual_keyword"
    // CSharp.g:3607:1: get_contextual_keyword :{...}? IDENTIFIER -> getContextualKeyword(value=\"get \");
    public final CSharp.get_contextual_keyword_return get_contextual_keyword() throws RecognitionException {
        CSharp.get_contextual_keyword_return retval = new CSharp.get_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3608:3: ({...}? IDENTIFIER -> getContextualKeyword(value=\"get \"))
            // CSharp.g:3609:3: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("get"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "get_contextual_keyword", "input.LT(1).getText().equals(\"get\")");
            }

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_get_contextual_keyword26864); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3610:3: -> getContextualKeyword(value=\"get \")
              {
                  retval.st = templateLib.getInstanceOf("getContextualKeyword",new STAttrMap().put("value", "get "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "get_contextual_keyword"


    public static class set_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "set_contextual_keyword"
    // CSharp.g:3612:1: set_contextual_keyword :{...}? IDENTIFIER -> setContextualKeyword(value=\"set \");
    public final CSharp.set_contextual_keyword_return set_contextual_keyword() throws RecognitionException {
        CSharp.set_contextual_keyword_return retval = new CSharp.set_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3613:3: ({...}? IDENTIFIER -> setContextualKeyword(value=\"set \"))
            // CSharp.g:3614:3: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("set"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "set_contextual_keyword", "input.LT(1).getText().equals(\"set\")");
            }

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_set_contextual_keyword26891); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3615:3: -> setContextualKeyword(value=\"set \")
              {
                  retval.st = templateLib.getInstanceOf("setContextualKeyword",new STAttrMap().put("value", "set "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "set_contextual_keyword"


    public static class add_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "add_contextual_keyword"
    // CSharp.g:3617:1: add_contextual_keyword :{...}? IDENTIFIER -> text(value=\"add \");
    public final CSharp.add_contextual_keyword_return add_contextual_keyword() throws RecognitionException {
        CSharp.add_contextual_keyword_return retval = new CSharp.add_contextual_keyword_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3618:3: ({...}? IDENTIFIER -> text(value=\"add \"))
            // CSharp.g:3618:5: {...}? IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("add"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "add_contextual_keyword", "input.LT(1).getText().equals(\"add\")");
            }

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_add_contextual_keyword26915); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3619:5: -> text(value=\"add \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "add "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "add_contextual_keyword"


    public static class remove_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "remove_contextual_keyword"
    // CSharp.g:3621:1: remove_contextual_keyword :{...}?id= IDENTIFIER -> text(value=\"remove \");
    public final CSharp.remove_contextual_keyword_return remove_contextual_keyword() throws RecognitionException {
        CSharp.remove_contextual_keyword_return retval = new CSharp.remove_contextual_keyword_return();
        retval.start = input.LT(1);


        Token id=null;

        try {
            // CSharp.g:3622:3: ({...}?id= IDENTIFIER -> text(value=\"remove \"))
            // CSharp.g:3623:3: {...}?id= IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("remove"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "remove_contextual_keyword", "input.LT(1).getText().equals(\"remove\")");
            }

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_remove_contextual_keyword26946); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3624:3: -> text(value=\"remove \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "remove "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "remove_contextual_keyword"


    public static class dynamic_contextual_keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "dynamic_contextual_keyword"
    // CSharp.g:3626:1: dynamic_contextual_keyword :{...}?id= IDENTIFIER -> text(value=\"dynamic \");
    public final CSharp.dynamic_contextual_keyword_return dynamic_contextual_keyword() throws RecognitionException {
        CSharp.dynamic_contextual_keyword_return retval = new CSharp.dynamic_contextual_keyword_return();
        retval.start = input.LT(1);


        Token id=null;

        try {
            // CSharp.g:3627:3: ({...}?id= IDENTIFIER -> text(value=\"dynamic \"))
            // CSharp.g:3628:3: {...}?id= IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("dynamic"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dynamic_contextual_keyword", "input.LT(1).getText().equals(\"dynamic\")");
            }

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_dynamic_contextual_keyword26975); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3629:3: -> text(value=\"dynamic \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "dynamic "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dynamic_contextual_keyword"


    public static class arglist_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "arglist"
    // CSharp.g:3631:1: arglist :{...}?id= IDENTIFIER -> text(value=\"__arglist \");
    public final CSharp.arglist_return arglist() throws RecognitionException {
        CSharp.arglist_return retval = new CSharp.arglist_return();
        retval.start = input.LT(1);


        Token id=null;

        try {
            // CSharp.g:3632:3: ({...}?id= IDENTIFIER -> text(value=\"__arglist \"))
            // CSharp.g:3633:3: {...}?id= IDENTIFIER
            {
            if ( !((input.LT(1).getText().equals("__arglist"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "arglist", "input.LT(1).getText().equals(\"__arglist\")");
            }

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_arglist27004); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3634:3: -> text(value=\"__arglist \")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "__arglist "));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "arglist"


    public static class right_arrow_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "right_arrow"
    // CSharp.g:3636:1: right_arrow : first= ASSIGNMENT second= GT {...}?;
    public final CSharp.right_arrow_return right_arrow() throws RecognitionException {
        CSharp.right_arrow_return retval = new CSharp.right_arrow_return();
        retval.start = input.LT(1);


        Token first=null;
        Token second=null;

        try {
            // CSharp.g:3637:3: (first= ASSIGNMENT second= GT {...}?)
            // CSharp.g:3637:5: first= ASSIGNMENT second= GT {...}?
            {
            first=(Token)match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_right_arrow27028); if (state.failed) return retval;

            second=(Token)match(input,GT,FOLLOW_GT_in_right_arrow27032); if (state.failed) return retval;

            if ( !(((first!=null?first.getTokenIndex():0) + 1 == (second!=null?second.getTokenIndex():0))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "right_arrow", "$first.index + 1 == $second.index");
            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "right_arrow"


    public static class right_shift_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "right_shift"
    // CSharp.g:3639:1: right_shift : first= GT second= GT {...}? -> text(value=\">>\");
    public final CSharp.right_shift_return right_shift() throws RecognitionException {
        CSharp.right_shift_return retval = new CSharp.right_shift_return();
        retval.start = input.LT(1);


        Token first=null;
        Token second=null;

        try {
            // CSharp.g:3640:3: (first= GT second= GT {...}? -> text(value=\">>\"))
            // CSharp.g:3641:3: first= GT second= GT {...}?
            {
            first=(Token)match(input,GT,FOLLOW_GT_in_right_shift27052); if (state.failed) return retval;

            second=(Token)match(input,GT,FOLLOW_GT_in_right_shift27056); if (state.failed) return retval;

            if ( !(((first!=null?first.getTokenIndex():0) + 1 == (second!=null?second.getTokenIndex():0))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "right_shift", "$first.index + 1 == $second.index");
            }

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3642:3: -> text(value=\">>\")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ">>"));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "right_shift"


    public static class right_shift_assignment_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "right_shift_assignment"
    // CSharp.g:3644:1: right_shift_assignment : first= GT second= OP_GE {...}? -> text(value=\">>=\");
    public final CSharp.right_shift_assignment_return right_shift_assignment() throws RecognitionException {
        CSharp.right_shift_assignment_return retval = new CSharp.right_shift_assignment_return();
        retval.start = input.LT(1);


        Token first=null;
        Token second=null;

        try {
            // CSharp.g:3645:3: (first= GT second= OP_GE {...}? -> text(value=\">>=\"))
            // CSharp.g:3646:3: first= GT second= OP_GE {...}?
            {
            first=(Token)match(input,GT,FOLLOW_GT_in_right_shift_assignment27086); if (state.failed) return retval;

            second=(Token)match(input,OP_GE,FOLLOW_OP_GE_in_right_shift_assignment27090); if (state.failed) return retval;

            if ( !(((first!=null?first.getTokenIndex():0) + 1 == (second!=null?second.getTokenIndex():0))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "right_shift_assignment", "$first.index + 1 == $second.index");
            }

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3647:3: -> text(value=\">>=\")
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", ">>="));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "right_shift_assignment"


    public static class literal_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "literal"
    // CSharp.g:3649:1: literal : (bl= boolean_literal -> literal(ltrl=bl)| INTEGER_LITERAL -> literal(ltrl=$INTEGER_LITERAL.text)| REAL_LITERAL -> literal(ltrl=$REAL_LITERAL.text)| CHARACTER_LITERAL -> literal(ltrl=$CHARACTER_LITERAL.text)| STRING_LITERAL -> literal(ltrl=$STRING_LITERAL.text)| NULL -> literal(ltrl=$NULL.text));
    public final CSharp.literal_return literal() throws RecognitionException {
        CSharp.literal_return retval = new CSharp.literal_return();
        retval.start = input.LT(1);


        Token INTEGER_LITERAL357=null;
        Token REAL_LITERAL358=null;
        Token CHARACTER_LITERAL359=null;
        Token STRING_LITERAL360=null;
        Token NULL361=null;
        CSharp.boolean_literal_return bl =null;


        try {
            // CSharp.g:3650:3: (bl= boolean_literal -> literal(ltrl=bl)| INTEGER_LITERAL -> literal(ltrl=$INTEGER_LITERAL.text)| REAL_LITERAL -> literal(ltrl=$REAL_LITERAL.text)| CHARACTER_LITERAL -> literal(ltrl=$CHARACTER_LITERAL.text)| STRING_LITERAL -> literal(ltrl=$STRING_LITERAL.text)| NULL -> literal(ltrl=$NULL.text))
            int alt406=6;
            switch ( input.LA(1) ) {
            case FALSE:
            case TRUE:
                {
                alt406=1;
                }
                break;
            case INTEGER_LITERAL:
                {
                alt406=2;
                }
                break;
            case REAL_LITERAL:
                {
                alt406=3;
                }
                break;
            case CHARACTER_LITERAL:
                {
                alt406=4;
                }
                break;
            case STRING_LITERAL:
                {
                alt406=5;
                }
                break;
            case NULL:
                {
                alt406=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 406, 0, input);

                throw nvae;

            }

            switch (alt406) {
                case 1 :
                    // CSharp.g:3651:3: bl= boolean_literal
                    {
                    pushFollow(FOLLOW_boolean_literal_in_literal27121);
                    bl=boolean_literal();

                    state._fsp--;
                    if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3652:3: -> literal(ltrl=bl)
                      {
                          retval.st = templateLib.getInstanceOf("literal",new STAttrMap().put("ltrl", bl));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:3653:5: INTEGER_LITERAL
                    {
                    INTEGER_LITERAL357=(Token)match(input,INTEGER_LITERAL,FOLLOW_INTEGER_LITERAL_in_literal27137); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3654:3: -> literal(ltrl=$INTEGER_LITERAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("literal",new STAttrMap().put("ltrl", (INTEGER_LITERAL357!=null?INTEGER_LITERAL357.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:3655:5: REAL_LITERAL
                    {
                    REAL_LITERAL358=(Token)match(input,REAL_LITERAL,FOLLOW_REAL_LITERAL_in_literal27153); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3656:3: -> literal(ltrl=$REAL_LITERAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("literal",new STAttrMap().put("ltrl", (REAL_LITERAL358!=null?REAL_LITERAL358.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:3657:5: CHARACTER_LITERAL
                    {
                    CHARACTER_LITERAL359=(Token)match(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_literal27169); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3658:3: -> literal(ltrl=$CHARACTER_LITERAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("literal",new STAttrMap().put("ltrl", (CHARACTER_LITERAL359!=null?CHARACTER_LITERAL359.getText():null)));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:3659:5: STRING_LITERAL
                    {
                    STRING_LITERAL360=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal27185); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3660:3: -> literal(ltrl=$STRING_LITERAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("literal",new STAttrMap().put("ltrl", (STRING_LITERAL360!=null?STRING_LITERAL360.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:3661:5: NULL
                    {
                    NULL361=(Token)match(input,NULL,FOLLOW_NULL_in_literal27201); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3662:3: -> literal(ltrl=$NULL.text)
                      {
                          retval.st = templateLib.getInstanceOf("literal",new STAttrMap().put("ltrl", (NULL361!=null?NULL361.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal"


    public static class boolean_literal_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "boolean_literal"
    // CSharp.g:3667:1: boolean_literal : ( TRUE -> text(value=$TRUE.text)| FALSE -> text(value=$FALSE.text));
    public final CSharp.boolean_literal_return boolean_literal() throws RecognitionException {
        CSharp.boolean_literal_return retval = new CSharp.boolean_literal_return();
        retval.start = input.LT(1);


        Token TRUE362=null;
        Token FALSE363=null;

        try {
            // CSharp.g:3668:3: ( TRUE -> text(value=$TRUE.text)| FALSE -> text(value=$FALSE.text))
            int alt407=2;
            int LA407_0 = input.LA(1);

            if ( (LA407_0==TRUE) ) {
                alt407=1;
            }
            else if ( (LA407_0==FALSE) ) {
                alt407=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 407, 0, input);

                throw nvae;

            }
            switch (alt407) {
                case 1 :
                    // CSharp.g:3669:3: TRUE
                    {
                    TRUE362=(Token)match(input,TRUE,FOLLOW_TRUE_in_boolean_literal27233); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3670:3: -> text(value=$TRUE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TRUE362!=null?TRUE362.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:3671:5: FALSE
                    {
                    FALSE363=(Token)match(input,FALSE,FOLLOW_FALSE_in_boolean_literal27249); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3672:3: -> text(value=$FALSE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FALSE363!=null?FALSE363.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "boolean_literal"


    public static class keyword_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "keyword"
    // CSharp.g:3675:1: keyword : ( ABSTRACT -> text(value=$ABSTRACT.text)| AS -> text(value=$AS.text)| BASE -> text(value=$BASE.text)| BOOL -> text(value=\"boolean\")| BREAK -> text(value=$BREAK.text)| BYTE -> text(value=$BYTE.text)| CASE -> text(value=$CASE.text)| CATCH -> text(value=$CATCH.text)| CHAR -> text(value=$CHAR.text)| CHECKED -> text(value=$CHECKED.text)| CLASS -> text(value=$CLASS.text)| CONST -> text(value=$CONST.text)| CONTINUE -> text(value=$CONTINUE.text)| DECIMAL -> text(value=$DECIMAL.text)| DEFAULT -> text(value=$DEFAULT.text)| DELEGATE -> text(value=$DELEGATE.text)| DO -> text(value=$DO.text)| DOUBLE -> text(value=$DOUBLE.text)| ELSE -> text(value=$ELSE.text)| ENUM -> text(value=$ENUM.text)| EVENT -> text(value=$EVENT.text)| EXPLICIT -> text(value=$EXPLICIT.text)| EXTERN -> text(value=$EXTERN.text)| FALSE -> text(value=$FALSE.text)| FINALLY -> text(value=$FINALLY.text)| FIXED -> text(value=$FIXED.text)| FLOAT -> text(value=$FLOAT.text)| FOR -> text(value=$FOR.text)| FOREACH -> text(value=$FOREACH.text)| GOTO -> text(value=$GOTO.text)| IF -> text(value=$IF.text)| IMPLICIT -> text(value=$IMPLICIT.text)| IN -> text(value=$IN.text)| INT -> text(value=$INT.text)| INTERFACE -> text(value=$INTERFACE.text)| INTERNAL -> text(value=\"private\")| IS -> text(value=$IS.text)| LOCK -> text(value=$LOCK.text)| LONG -> text(value=$LONG.text)| NAMESPACE -> text(value=$NAMESPACE.text)| NEW -> text(value=$NEW.text)| NULL -> text(value=$NULL.text)| OBJECT -> text(value=\"Object\")| OPERATOR -> text(value=$OPERATOR.text)| OUT -> text(value=$OUT.text)| OVERRIDE -> text(value=\"@Override\\n\")| PARAMS -> text(value=$PARAMS.text)| PRIVATE -> text(value=$PRIVATE.text)| PROTECTED -> text(value=$PROTECTED.text)| PUBLIC -> text(value=$PUBLIC.text)| READONLY -> text(value=$READONLY.text)| REF -> text(value=$REF.text)| RETURN -> text(value=$RETURN.text)| SBYTE -> text(value=$SBYTE.text)| SEALED -> text(value=$SEALED.text)| SHORT -> text(value=$SHORT.text)| SIZEOF -> text(value=$SIZEOF.text)| STACKALLOC -> text(value=$STACKALLOC.text)| STATIC -> text(value=$STATIC.text)| STRING -> text(value=\"String\")| STRUCT -> text(value=$STRUCT.text)| SWITCH -> text(value=$SWITCH.text)| THIS -> text(value=$THIS.text)| THROW -> text(value=$THROW.text)| TRUE -> text(value=$TRUE.text)| TRY -> text(value=$TRY.text)| TYPEOF -> text(value=$TYPEOF.text)| UINT -> text(value=$UINT.text)| ULONG -> text(value=$ULONG.text)| UNCHECKED -> text(value=$UNCHECKED.text)| UNSAFE -> text(value=$UNSAFE.text)| USHORT -> text(value=$USHORT.text)| USING -> text(value=$USING.text)| VIRTUAL -> text(value=$VIRTUAL.text)| VOID -> text(value=$VOID.text)| VOLATILE -> text(value=$VOLATILE.text)| WHILE -> text(value=$WHILE.text));
    public final CSharp.keyword_return keyword() throws RecognitionException {
        CSharp.keyword_return retval = new CSharp.keyword_return();
        retval.start = input.LT(1);


        Token ABSTRACT364=null;
        Token AS365=null;
        Token BASE366=null;
        Token BREAK367=null;
        Token BYTE368=null;
        Token CASE369=null;
        Token CATCH370=null;
        Token CHAR371=null;
        Token CHECKED372=null;
        Token CLASS373=null;
        Token CONST374=null;
        Token CONTINUE375=null;
        Token DECIMAL376=null;
        Token DEFAULT377=null;
        Token DELEGATE378=null;
        Token DO379=null;
        Token DOUBLE380=null;
        Token ELSE381=null;
        Token ENUM382=null;
        Token EVENT383=null;
        Token EXPLICIT384=null;
        Token EXTERN385=null;
        Token FALSE386=null;
        Token FINALLY387=null;
        Token FIXED388=null;
        Token FLOAT389=null;
        Token FOR390=null;
        Token FOREACH391=null;
        Token GOTO392=null;
        Token IF393=null;
        Token IMPLICIT394=null;
        Token IN395=null;
        Token INT396=null;
        Token INTERFACE397=null;
        Token IS398=null;
        Token LOCK399=null;
        Token LONG400=null;
        Token NAMESPACE401=null;
        Token NEW402=null;
        Token NULL403=null;
        Token OPERATOR404=null;
        Token OUT405=null;
        Token PARAMS406=null;
        Token PRIVATE407=null;
        Token PROTECTED408=null;
        Token PUBLIC409=null;
        Token READONLY410=null;
        Token REF411=null;
        Token RETURN412=null;
        Token SBYTE413=null;
        Token SEALED414=null;
        Token SHORT415=null;
        Token SIZEOF416=null;
        Token STACKALLOC417=null;
        Token STATIC418=null;
        Token STRUCT419=null;
        Token SWITCH420=null;
        Token THIS421=null;
        Token THROW422=null;
        Token TRUE423=null;
        Token TRY424=null;
        Token TYPEOF425=null;
        Token UINT426=null;
        Token ULONG427=null;
        Token UNCHECKED428=null;
        Token UNSAFE429=null;
        Token USHORT430=null;
        Token USING431=null;
        Token VIRTUAL432=null;
        Token VOID433=null;
        Token VOLATILE434=null;
        Token WHILE435=null;

        try {
            // CSharp.g:3676:3: ( ABSTRACT -> text(value=$ABSTRACT.text)| AS -> text(value=$AS.text)| BASE -> text(value=$BASE.text)| BOOL -> text(value=\"boolean\")| BREAK -> text(value=$BREAK.text)| BYTE -> text(value=$BYTE.text)| CASE -> text(value=$CASE.text)| CATCH -> text(value=$CATCH.text)| CHAR -> text(value=$CHAR.text)| CHECKED -> text(value=$CHECKED.text)| CLASS -> text(value=$CLASS.text)| CONST -> text(value=$CONST.text)| CONTINUE -> text(value=$CONTINUE.text)| DECIMAL -> text(value=$DECIMAL.text)| DEFAULT -> text(value=$DEFAULT.text)| DELEGATE -> text(value=$DELEGATE.text)| DO -> text(value=$DO.text)| DOUBLE -> text(value=$DOUBLE.text)| ELSE -> text(value=$ELSE.text)| ENUM -> text(value=$ENUM.text)| EVENT -> text(value=$EVENT.text)| EXPLICIT -> text(value=$EXPLICIT.text)| EXTERN -> text(value=$EXTERN.text)| FALSE -> text(value=$FALSE.text)| FINALLY -> text(value=$FINALLY.text)| FIXED -> text(value=$FIXED.text)| FLOAT -> text(value=$FLOAT.text)| FOR -> text(value=$FOR.text)| FOREACH -> text(value=$FOREACH.text)| GOTO -> text(value=$GOTO.text)| IF -> text(value=$IF.text)| IMPLICIT -> text(value=$IMPLICIT.text)| IN -> text(value=$IN.text)| INT -> text(value=$INT.text)| INTERFACE -> text(value=$INTERFACE.text)| INTERNAL -> text(value=\"private\")| IS -> text(value=$IS.text)| LOCK -> text(value=$LOCK.text)| LONG -> text(value=$LONG.text)| NAMESPACE -> text(value=$NAMESPACE.text)| NEW -> text(value=$NEW.text)| NULL -> text(value=$NULL.text)| OBJECT -> text(value=\"Object\")| OPERATOR -> text(value=$OPERATOR.text)| OUT -> text(value=$OUT.text)| OVERRIDE -> text(value=\"@Override\\n\")| PARAMS -> text(value=$PARAMS.text)| PRIVATE -> text(value=$PRIVATE.text)| PROTECTED -> text(value=$PROTECTED.text)| PUBLIC -> text(value=$PUBLIC.text)| READONLY -> text(value=$READONLY.text)| REF -> text(value=$REF.text)| RETURN -> text(value=$RETURN.text)| SBYTE -> text(value=$SBYTE.text)| SEALED -> text(value=$SEALED.text)| SHORT -> text(value=$SHORT.text)| SIZEOF -> text(value=$SIZEOF.text)| STACKALLOC -> text(value=$STACKALLOC.text)| STATIC -> text(value=$STATIC.text)| STRING -> text(value=\"String\")| STRUCT -> text(value=$STRUCT.text)| SWITCH -> text(value=$SWITCH.text)| THIS -> text(value=$THIS.text)| THROW -> text(value=$THROW.text)| TRUE -> text(value=$TRUE.text)| TRY -> text(value=$TRY.text)| TYPEOF -> text(value=$TYPEOF.text)| UINT -> text(value=$UINT.text)| ULONG -> text(value=$ULONG.text)| UNCHECKED -> text(value=$UNCHECKED.text)| UNSAFE -> text(value=$UNSAFE.text)| USHORT -> text(value=$USHORT.text)| USING -> text(value=$USING.text)| VIRTUAL -> text(value=$VIRTUAL.text)| VOID -> text(value=$VOID.text)| VOLATILE -> text(value=$VOLATILE.text)| WHILE -> text(value=$WHILE.text))
            int alt408=77;
            switch ( input.LA(1) ) {
            case ABSTRACT:
                {
                alt408=1;
                }
                break;
            case AS:
                {
                alt408=2;
                }
                break;
            case BASE:
                {
                alt408=3;
                }
                break;
            case BOOL:
                {
                alt408=4;
                }
                break;
            case BREAK:
                {
                alt408=5;
                }
                break;
            case BYTE:
                {
                alt408=6;
                }
                break;
            case CASE:
                {
                alt408=7;
                }
                break;
            case CATCH:
                {
                alt408=8;
                }
                break;
            case CHAR:
                {
                alt408=9;
                }
                break;
            case CHECKED:
                {
                alt408=10;
                }
                break;
            case CLASS:
                {
                alt408=11;
                }
                break;
            case CONST:
                {
                alt408=12;
                }
                break;
            case CONTINUE:
                {
                alt408=13;
                }
                break;
            case DECIMAL:
                {
                alt408=14;
                }
                break;
            case DEFAULT:
                {
                alt408=15;
                }
                break;
            case DELEGATE:
                {
                alt408=16;
                }
                break;
            case DO:
                {
                alt408=17;
                }
                break;
            case DOUBLE:
                {
                alt408=18;
                }
                break;
            case ELSE:
                {
                alt408=19;
                }
                break;
            case ENUM:
                {
                alt408=20;
                }
                break;
            case EVENT:
                {
                alt408=21;
                }
                break;
            case EXPLICIT:
                {
                alt408=22;
                }
                break;
            case EXTERN:
                {
                alt408=23;
                }
                break;
            case FALSE:
                {
                alt408=24;
                }
                break;
            case FINALLY:
                {
                alt408=25;
                }
                break;
            case FIXED:
                {
                alt408=26;
                }
                break;
            case FLOAT:
                {
                alt408=27;
                }
                break;
            case FOR:
                {
                alt408=28;
                }
                break;
            case FOREACH:
                {
                alt408=29;
                }
                break;
            case GOTO:
                {
                alt408=30;
                }
                break;
            case IF:
                {
                alt408=31;
                }
                break;
            case IMPLICIT:
                {
                alt408=32;
                }
                break;
            case IN:
                {
                alt408=33;
                }
                break;
            case INT:
                {
                alt408=34;
                }
                break;
            case INTERFACE:
                {
                alt408=35;
                }
                break;
            case INTERNAL:
                {
                alt408=36;
                }
                break;
            case IS:
                {
                alt408=37;
                }
                break;
            case LOCK:
                {
                alt408=38;
                }
                break;
            case LONG:
                {
                alt408=39;
                }
                break;
            case NAMESPACE:
                {
                alt408=40;
                }
                break;
            case NEW:
                {
                alt408=41;
                }
                break;
            case NULL:
                {
                alt408=42;
                }
                break;
            case OBJECT:
                {
                alt408=43;
                }
                break;
            case OPERATOR:
                {
                alt408=44;
                }
                break;
            case OUT:
                {
                alt408=45;
                }
                break;
            case OVERRIDE:
                {
                alt408=46;
                }
                break;
            case PARAMS:
                {
                alt408=47;
                }
                break;
            case PRIVATE:
                {
                alt408=48;
                }
                break;
            case PROTECTED:
                {
                alt408=49;
                }
                break;
            case PUBLIC:
                {
                alt408=50;
                }
                break;
            case READONLY:
                {
                alt408=51;
                }
                break;
            case REF:
                {
                alt408=52;
                }
                break;
            case RETURN:
                {
                alt408=53;
                }
                break;
            case SBYTE:
                {
                alt408=54;
                }
                break;
            case SEALED:
                {
                alt408=55;
                }
                break;
            case SHORT:
                {
                alt408=56;
                }
                break;
            case SIZEOF:
                {
                alt408=57;
                }
                break;
            case STACKALLOC:
                {
                alt408=58;
                }
                break;
            case STATIC:
                {
                alt408=59;
                }
                break;
            case STRING:
                {
                alt408=60;
                }
                break;
            case STRUCT:
                {
                alt408=61;
                }
                break;
            case SWITCH:
                {
                alt408=62;
                }
                break;
            case THIS:
                {
                alt408=63;
                }
                break;
            case THROW:
                {
                alt408=64;
                }
                break;
            case TRUE:
                {
                alt408=65;
                }
                break;
            case TRY:
                {
                alt408=66;
                }
                break;
            case TYPEOF:
                {
                alt408=67;
                }
                break;
            case UINT:
                {
                alt408=68;
                }
                break;
            case ULONG:
                {
                alt408=69;
                }
                break;
            case UNCHECKED:
                {
                alt408=70;
                }
                break;
            case UNSAFE:
                {
                alt408=71;
                }
                break;
            case USHORT:
                {
                alt408=72;
                }
                break;
            case USING:
                {
                alt408=73;
                }
                break;
            case VIRTUAL:
                {
                alt408=74;
                }
                break;
            case VOID:
                {
                alt408=75;
                }
                break;
            case VOLATILE:
                {
                alt408=76;
                }
                break;
            case WHILE:
                {
                alt408=77;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 408, 0, input);

                throw nvae;

            }

            switch (alt408) {
                case 1 :
                    // CSharp.g:3677:3: ABSTRACT
                    {
                    ABSTRACT364=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_keyword27275); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3677:19: -> text(value=$ABSTRACT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ABSTRACT364!=null?ABSTRACT364.getText():null)));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:3678:6: AS
                    {
                    AS365=(Token)match(input,AS,FOLLOW_AS_in_keyword27297); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3678:19: -> text(value=$AS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (AS365!=null?AS365.getText():null)));
                      }


                    }

                    }
                    break;
                case 3 :
                    // CSharp.g:3679:6: BASE
                    {
                    BASE366=(Token)match(input,BASE,FOLLOW_BASE_in_keyword27322); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3679:19: -> text(value=$BASE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BASE366!=null?BASE366.getText():null)));
                      }


                    }

                    }
                    break;
                case 4 :
                    // CSharp.g:3680:6: BOOL
                    {
                    match(input,BOOL,FOLLOW_BOOL_in_keyword27345); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3680:19: -> text(value=\"boolean\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "boolean"));
                      }


                    }

                    }
                    break;
                case 5 :
                    // CSharp.g:3681:6: BREAK
                    {
                    BREAK367=(Token)match(input,BREAK,FOLLOW_BREAK_in_keyword27368); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3681:19: -> text(value=$BREAK.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BREAK367!=null?BREAK367.getText():null)));
                      }


                    }

                    }
                    break;
                case 6 :
                    // CSharp.g:3682:6: BYTE
                    {
                    BYTE368=(Token)match(input,BYTE,FOLLOW_BYTE_in_keyword27390); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3682:19: -> text(value=$BYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (BYTE368!=null?BYTE368.getText():null)));
                      }


                    }

                    }
                    break;
                case 7 :
                    // CSharp.g:3683:6: CASE
                    {
                    CASE369=(Token)match(input,CASE,FOLLOW_CASE_in_keyword27413); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3683:19: -> text(value=$CASE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CASE369!=null?CASE369.getText():null)));
                      }


                    }

                    }
                    break;
                case 8 :
                    // CSharp.g:3684:6: CATCH
                    {
                    CATCH370=(Token)match(input,CATCH,FOLLOW_CATCH_in_keyword27436); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3684:19: -> text(value=$CATCH.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CATCH370!=null?CATCH370.getText():null)));
                      }


                    }

                    }
                    break;
                case 9 :
                    // CSharp.g:3685:6: CHAR
                    {
                    CHAR371=(Token)match(input,CHAR,FOLLOW_CHAR_in_keyword27458); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3685:19: -> text(value=$CHAR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CHAR371!=null?CHAR371.getText():null)));
                      }


                    }

                    }
                    break;
                case 10 :
                    // CSharp.g:3686:6: CHECKED
                    {
                    CHECKED372=(Token)match(input,CHECKED,FOLLOW_CHECKED_in_keyword27481); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3686:19: -> text(value=$CHECKED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CHECKED372!=null?CHECKED372.getText():null)));
                      }


                    }

                    }
                    break;
                case 11 :
                    // CSharp.g:3687:6: CLASS
                    {
                    CLASS373=(Token)match(input,CLASS,FOLLOW_CLASS_in_keyword27501); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3687:19: -> text(value=$CLASS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CLASS373!=null?CLASS373.getText():null)));
                      }


                    }

                    }
                    break;
                case 12 :
                    // CSharp.g:3688:6: CONST
                    {
                    CONST374=(Token)match(input,CONST,FOLLOW_CONST_in_keyword27523); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3688:19: -> text(value=$CONST.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CONST374!=null?CONST374.getText():null)));
                      }


                    }

                    }
                    break;
                case 13 :
                    // CSharp.g:3689:6: CONTINUE
                    {
                    CONTINUE375=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_keyword27545); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3689:19: -> text(value=$CONTINUE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (CONTINUE375!=null?CONTINUE375.getText():null)));
                      }


                    }

                    }
                    break;
                case 14 :
                    // CSharp.g:3690:6: DECIMAL
                    {
                    DECIMAL376=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_keyword27564); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3690:19: -> text(value=$DECIMAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DECIMAL376!=null?DECIMAL376.getText():null)));
                      }


                    }

                    }
                    break;
                case 15 :
                    // CSharp.g:3691:6: DEFAULT
                    {
                    DEFAULT377=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_keyword27584); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3691:19: -> text(value=$DEFAULT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DEFAULT377!=null?DEFAULT377.getText():null)));
                      }


                    }

                    }
                    break;
                case 16 :
                    // CSharp.g:3692:6: DELEGATE
                    {
                    DELEGATE378=(Token)match(input,DELEGATE,FOLLOW_DELEGATE_in_keyword27604); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3692:19: -> text(value=$DELEGATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DELEGATE378!=null?DELEGATE378.getText():null)));
                      }


                    }

                    }
                    break;
                case 17 :
                    // CSharp.g:3693:6: DO
                    {
                    DO379=(Token)match(input,DO,FOLLOW_DO_in_keyword27623); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3693:19: -> text(value=$DO.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DO379!=null?DO379.getText():null)));
                      }


                    }

                    }
                    break;
                case 18 :
                    // CSharp.g:3694:6: DOUBLE
                    {
                    DOUBLE380=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_keyword27648); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3694:19: -> text(value=$DOUBLE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (DOUBLE380!=null?DOUBLE380.getText():null)));
                      }


                    }

                    }
                    break;
                case 19 :
                    // CSharp.g:3695:6: ELSE
                    {
                    ELSE381=(Token)match(input,ELSE,FOLLOW_ELSE_in_keyword27669); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3695:19: -> text(value=$ELSE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ELSE381!=null?ELSE381.getText():null)));
                      }


                    }

                    }
                    break;
                case 20 :
                    // CSharp.g:3696:6: ENUM
                    {
                    ENUM382=(Token)match(input,ENUM,FOLLOW_ENUM_in_keyword27692); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3696:19: -> text(value=$ENUM.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ENUM382!=null?ENUM382.getText():null)));
                      }


                    }

                    }
                    break;
                case 21 :
                    // CSharp.g:3697:6: EVENT
                    {
                    EVENT383=(Token)match(input,EVENT,FOLLOW_EVENT_in_keyword27715); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3697:19: -> text(value=$EVENT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EVENT383!=null?EVENT383.getText():null)));
                      }


                    }

                    }
                    break;
                case 22 :
                    // CSharp.g:3698:6: EXPLICIT
                    {
                    EXPLICIT384=(Token)match(input,EXPLICIT,FOLLOW_EXPLICIT_in_keyword27737); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3698:19: -> text(value=$EXPLICIT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXPLICIT384!=null?EXPLICIT384.getText():null)));
                      }


                    }

                    }
                    break;
                case 23 :
                    // CSharp.g:3699:6: EXTERN
                    {
                    EXTERN385=(Token)match(input,EXTERN,FOLLOW_EXTERN_in_keyword27756); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3699:19: -> text(value=$EXTERN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (EXTERN385!=null?EXTERN385.getText():null)));
                      }


                    }

                    }
                    break;
                case 24 :
                    // CSharp.g:3700:6: FALSE
                    {
                    FALSE386=(Token)match(input,FALSE,FOLLOW_FALSE_in_keyword27777); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3700:19: -> text(value=$FALSE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FALSE386!=null?FALSE386.getText():null)));
                      }


                    }

                    }
                    break;
                case 25 :
                    // CSharp.g:3701:6: FINALLY
                    {
                    FINALLY387=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_keyword27799); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3701:19: -> text(value=$FINALLY.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FINALLY387!=null?FINALLY387.getText():null)));
                      }


                    }

                    }
                    break;
                case 26 :
                    // CSharp.g:3702:6: FIXED
                    {
                    FIXED388=(Token)match(input,FIXED,FOLLOW_FIXED_in_keyword27819); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3702:19: -> text(value=$FIXED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FIXED388!=null?FIXED388.getText():null)));
                      }


                    }

                    }
                    break;
                case 27 :
                    // CSharp.g:3703:6: FLOAT
                    {
                    FLOAT389=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_keyword27841); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3703:19: -> text(value=$FLOAT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FLOAT389!=null?FLOAT389.getText():null)));
                      }


                    }

                    }
                    break;
                case 28 :
                    // CSharp.g:3704:6: FOR
                    {
                    FOR390=(Token)match(input,FOR,FOLLOW_FOR_in_keyword27863); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3704:19: -> text(value=$FOR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FOR390!=null?FOR390.getText():null)));
                      }


                    }

                    }
                    break;
                case 29 :
                    // CSharp.g:3705:6: FOREACH
                    {
                    FOREACH391=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_keyword27887); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3705:19: -> text(value=$FOREACH.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (FOREACH391!=null?FOREACH391.getText():null)));
                      }


                    }

                    }
                    break;
                case 30 :
                    // CSharp.g:3706:6: GOTO
                    {
                    GOTO392=(Token)match(input,GOTO,FOLLOW_GOTO_in_keyword27907); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3706:19: -> text(value=$GOTO.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (GOTO392!=null?GOTO392.getText():null)));
                      }


                    }

                    }
                    break;
                case 31 :
                    // CSharp.g:3707:6: IF
                    {
                    IF393=(Token)match(input,IF,FOLLOW_IF_in_keyword27930); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3707:19: -> text(value=$IF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IF393!=null?IF393.getText():null)));
                      }


                    }

                    }
                    break;
                case 32 :
                    // CSharp.g:3708:6: IMPLICIT
                    {
                    IMPLICIT394=(Token)match(input,IMPLICIT,FOLLOW_IMPLICIT_in_keyword27955); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3708:19: -> text(value=$IMPLICIT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IMPLICIT394!=null?IMPLICIT394.getText():null)));
                      }


                    }

                    }
                    break;
                case 33 :
                    // CSharp.g:3709:6: IN
                    {
                    IN395=(Token)match(input,IN,FOLLOW_IN_in_keyword27974); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3709:19: -> text(value=$IN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IN395!=null?IN395.getText():null)));
                      }


                    }

                    }
                    break;
                case 34 :
                    // CSharp.g:3710:6: INT
                    {
                    INT396=(Token)match(input,INT,FOLLOW_INT_in_keyword27999); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3710:19: -> text(value=$INT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INT396!=null?INT396.getText():null)));
                      }


                    }

                    }
                    break;
                case 35 :
                    // CSharp.g:3711:6: INTERFACE
                    {
                    INTERFACE397=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_keyword28023); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3711:19: -> text(value=$INTERFACE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (INTERFACE397!=null?INTERFACE397.getText():null)));
                      }


                    }

                    }
                    break;
                case 36 :
                    // CSharp.g:3712:6: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_keyword28041); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3712:19: -> text(value=\"private\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "private"));
                      }


                    }

                    }
                    break;
                case 37 :
                    // CSharp.g:3713:6: IS
                    {
                    IS398=(Token)match(input,IS,FOLLOW_IS_in_keyword28060); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3713:19: -> text(value=$IS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (IS398!=null?IS398.getText():null)));
                      }


                    }

                    }
                    break;
                case 38 :
                    // CSharp.g:3714:6: LOCK
                    {
                    LOCK399=(Token)match(input,LOCK,FOLLOW_LOCK_in_keyword28085); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3714:19: -> text(value=$LOCK.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (LOCK399!=null?LOCK399.getText():null)));
                      }


                    }

                    }
                    break;
                case 39 :
                    // CSharp.g:3715:6: LONG
                    {
                    LONG400=(Token)match(input,LONG,FOLLOW_LONG_in_keyword28108); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3715:19: -> text(value=$LONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (LONG400!=null?LONG400.getText():null)));
                      }


                    }

                    }
                    break;
                case 40 :
                    // CSharp.g:3716:6: NAMESPACE
                    {
                    NAMESPACE401=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_keyword28131); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3716:19: -> text(value=$NAMESPACE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NAMESPACE401!=null?NAMESPACE401.getText():null)));
                      }


                    }

                    }
                    break;
                case 41 :
                    // CSharp.g:3717:6: NEW
                    {
                    NEW402=(Token)match(input,NEW,FOLLOW_NEW_in_keyword28149); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3717:19: -> text(value=$NEW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NEW402!=null?NEW402.getText():null)));
                      }


                    }

                    }
                    break;
                case 42 :
                    // CSharp.g:3718:6: NULL
                    {
                    NULL403=(Token)match(input,NULL,FOLLOW_NULL_in_keyword28173); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3718:19: -> text(value=$NULL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (NULL403!=null?NULL403.getText():null)));
                      }


                    }

                    }
                    break;
                case 43 :
                    // CSharp.g:3719:6: OBJECT
                    {
                    match(input,OBJECT,FOLLOW_OBJECT_in_keyword28196); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3719:19: -> text(value=\"Object\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "Object"));
                      }


                    }

                    }
                    break;
                case 44 :
                    // CSharp.g:3720:6: OPERATOR
                    {
                    OPERATOR404=(Token)match(input,OPERATOR,FOLLOW_OPERATOR_in_keyword28217); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3720:19: -> text(value=$OPERATOR.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OPERATOR404!=null?OPERATOR404.getText():null)));
                      }


                    }

                    }
                    break;
                case 45 :
                    // CSharp.g:3721:6: OUT
                    {
                    OUT405=(Token)match(input,OUT,FOLLOW_OUT_in_keyword28236); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3721:19: -> text(value=$OUT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (OUT405!=null?OUT405.getText():null)));
                      }


                    }

                    }
                    break;
                case 46 :
                    // CSharp.g:3722:6: OVERRIDE
                    {
                    match(input,OVERRIDE,FOLLOW_OVERRIDE_in_keyword28260); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3722:19: -> text(value=\"@Override\\n\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "@Override\n"));
                      }


                    }

                    }
                    break;
                case 47 :
                    // CSharp.g:3723:6: PARAMS
                    {
                    PARAMS406=(Token)match(input,PARAMS,FOLLOW_PARAMS_in_keyword28279); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3723:19: -> text(value=$PARAMS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PARAMS406!=null?PARAMS406.getText():null)));
                      }


                    }

                    }
                    break;
                case 48 :
                    // CSharp.g:3724:6: PRIVATE
                    {
                    PRIVATE407=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_keyword28300); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3724:19: -> text(value=$PRIVATE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PRIVATE407!=null?PRIVATE407.getText():null)));
                      }


                    }

                    }
                    break;
                case 49 :
                    // CSharp.g:3725:6: PROTECTED
                    {
                    PROTECTED408=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_keyword28320); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3725:19: -> text(value=$PROTECTED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PROTECTED408!=null?PROTECTED408.getText():null)));
                      }


                    }

                    }
                    break;
                case 50 :
                    // CSharp.g:3726:6: PUBLIC
                    {
                    PUBLIC409=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_keyword28338); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3726:19: -> text(value=$PUBLIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (PUBLIC409!=null?PUBLIC409.getText():null)));
                      }


                    }

                    }
                    break;
                case 51 :
                    // CSharp.g:3727:6: READONLY
                    {
                    READONLY410=(Token)match(input,READONLY,FOLLOW_READONLY_in_keyword28359); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3727:19: -> text(value=$READONLY.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (READONLY410!=null?READONLY410.getText():null)));
                      }


                    }

                    }
                    break;
                case 52 :
                    // CSharp.g:3728:6: REF
                    {
                    REF411=(Token)match(input,REF,FOLLOW_REF_in_keyword28378); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3728:19: -> text(value=$REF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (REF411!=null?REF411.getText():null)));
                      }


                    }

                    }
                    break;
                case 53 :
                    // CSharp.g:3729:6: RETURN
                    {
                    RETURN412=(Token)match(input,RETURN,FOLLOW_RETURN_in_keyword28402); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3729:19: -> text(value=$RETURN.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (RETURN412!=null?RETURN412.getText():null)));
                      }


                    }

                    }
                    break;
                case 54 :
                    // CSharp.g:3730:6: SBYTE
                    {
                    SBYTE413=(Token)match(input,SBYTE,FOLLOW_SBYTE_in_keyword28423); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3730:19: -> text(value=$SBYTE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SBYTE413!=null?SBYTE413.getText():null)));
                      }


                    }

                    }
                    break;
                case 55 :
                    // CSharp.g:3731:6: SEALED
                    {
                    SEALED414=(Token)match(input,SEALED,FOLLOW_SEALED_in_keyword28445); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3731:19: -> text(value=$SEALED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SEALED414!=null?SEALED414.getText():null)));
                      }


                    }

                    }
                    break;
                case 56 :
                    // CSharp.g:3732:6: SHORT
                    {
                    SHORT415=(Token)match(input,SHORT,FOLLOW_SHORT_in_keyword28466); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3732:19: -> text(value=$SHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SHORT415!=null?SHORT415.getText():null)));
                      }


                    }

                    }
                    break;
                case 57 :
                    // CSharp.g:3733:6: SIZEOF
                    {
                    SIZEOF416=(Token)match(input,SIZEOF,FOLLOW_SIZEOF_in_keyword28488); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3733:19: -> text(value=$SIZEOF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SIZEOF416!=null?SIZEOF416.getText():null)));
                      }


                    }

                    }
                    break;
                case 58 :
                    // CSharp.g:3734:6: STACKALLOC
                    {
                    STACKALLOC417=(Token)match(input,STACKALLOC,FOLLOW_STACKALLOC_in_keyword28509); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3734:19: -> text(value=$STACKALLOC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STACKALLOC417!=null?STACKALLOC417.getText():null)));
                      }


                    }

                    }
                    break;
                case 59 :
                    // CSharp.g:3735:6: STATIC
                    {
                    STATIC418=(Token)match(input,STATIC,FOLLOW_STATIC_in_keyword28526); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3735:19: -> text(value=$STATIC.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STATIC418!=null?STATIC418.getText():null)));
                      }


                    }

                    }
                    break;
                case 60 :
                    // CSharp.g:3736:6: STRING
                    {
                    match(input,STRING,FOLLOW_STRING_in_keyword28547); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3736:19: -> text(value=\"String\")
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", "String"));
                      }


                    }

                    }
                    break;
                case 61 :
                    // CSharp.g:3737:6: STRUCT
                    {
                    STRUCT419=(Token)match(input,STRUCT,FOLLOW_STRUCT_in_keyword28568); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3737:19: -> text(value=$STRUCT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (STRUCT419!=null?STRUCT419.getText():null)));
                      }


                    }

                    }
                    break;
                case 62 :
                    // CSharp.g:3738:6: SWITCH
                    {
                    SWITCH420=(Token)match(input,SWITCH,FOLLOW_SWITCH_in_keyword28589); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3738:19: -> text(value=$SWITCH.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (SWITCH420!=null?SWITCH420.getText():null)));
                      }


                    }

                    }
                    break;
                case 63 :
                    // CSharp.g:3739:6: THIS
                    {
                    THIS421=(Token)match(input,THIS,FOLLOW_THIS_in_keyword28610); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3739:19: -> text(value=$THIS.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (THIS421!=null?THIS421.getText():null)));
                      }


                    }

                    }
                    break;
                case 64 :
                    // CSharp.g:3740:6: THROW
                    {
                    THROW422=(Token)match(input,THROW,FOLLOW_THROW_in_keyword28633); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3740:19: -> text(value=$THROW.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (THROW422!=null?THROW422.getText():null)));
                      }


                    }

                    }
                    break;
                case 65 :
                    // CSharp.g:3741:6: TRUE
                    {
                    TRUE423=(Token)match(input,TRUE,FOLLOW_TRUE_in_keyword28655); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3741:19: -> text(value=$TRUE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TRUE423!=null?TRUE423.getText():null)));
                      }


                    }

                    }
                    break;
                case 66 :
                    // CSharp.g:3742:6: TRY
                    {
                    TRY424=(Token)match(input,TRY,FOLLOW_TRY_in_keyword28678); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3742:19: -> text(value=$TRY.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TRY424!=null?TRY424.getText():null)));
                      }


                    }

                    }
                    break;
                case 67 :
                    // CSharp.g:3743:6: TYPEOF
                    {
                    TYPEOF425=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_keyword28702); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3743:19: -> text(value=$TYPEOF.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (TYPEOF425!=null?TYPEOF425.getText():null)));
                      }


                    }

                    }
                    break;
                case 68 :
                    // CSharp.g:3744:6: UINT
                    {
                    UINT426=(Token)match(input,UINT,FOLLOW_UINT_in_keyword28723); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3744:19: -> text(value=$UINT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UINT426!=null?UINT426.getText():null)));
                      }


                    }

                    }
                    break;
                case 69 :
                    // CSharp.g:3745:6: ULONG
                    {
                    ULONG427=(Token)match(input,ULONG,FOLLOW_ULONG_in_keyword28746); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3745:19: -> text(value=$ULONG.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (ULONG427!=null?ULONG427.getText():null)));
                      }


                    }

                    }
                    break;
                case 70 :
                    // CSharp.g:3746:6: UNCHECKED
                    {
                    UNCHECKED428=(Token)match(input,UNCHECKED,FOLLOW_UNCHECKED_in_keyword28768); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3746:19: -> text(value=$UNCHECKED.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNCHECKED428!=null?UNCHECKED428.getText():null)));
                      }


                    }

                    }
                    break;
                case 71 :
                    // CSharp.g:3747:6: UNSAFE
                    {
                    UNSAFE429=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_keyword28786); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3747:19: -> text(value=$UNSAFE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (UNSAFE429!=null?UNSAFE429.getText():null)));
                      }


                    }

                    }
                    break;
                case 72 :
                    // CSharp.g:3748:6: USHORT
                    {
                    USHORT430=(Token)match(input,USHORT,FOLLOW_USHORT_in_keyword28807); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3748:19: -> text(value=$USHORT.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (USHORT430!=null?USHORT430.getText():null)));
                      }


                    }

                    }
                    break;
                case 73 :
                    // CSharp.g:3749:6: USING
                    {
                    USING431=(Token)match(input,USING,FOLLOW_USING_in_keyword28828); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3749:19: -> text(value=$USING.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (USING431!=null?USING431.getText():null)));
                      }


                    }

                    }
                    break;
                case 74 :
                    // CSharp.g:3750:6: VIRTUAL
                    {
                    VIRTUAL432=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_keyword28850); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3750:19: -> text(value=$VIRTUAL.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VIRTUAL432!=null?VIRTUAL432.getText():null)));
                      }


                    }

                    }
                    break;
                case 75 :
                    // CSharp.g:3751:6: VOID
                    {
                    VOID433=(Token)match(input,VOID,FOLLOW_VOID_in_keyword28870); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3751:19: -> text(value=$VOID.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VOID433!=null?VOID433.getText():null)));
                      }


                    }

                    }
                    break;
                case 76 :
                    // CSharp.g:3752:6: VOLATILE
                    {
                    VOLATILE434=(Token)match(input,VOLATILE,FOLLOW_VOLATILE_in_keyword28893); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3752:19: -> text(value=$VOLATILE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (VOLATILE434!=null?VOLATILE434.getText():null)));
                      }


                    }

                    }
                    break;
                case 77 :
                    // CSharp.g:3753:6: WHILE
                    {
                    WHILE435=(Token)match(input,WHILE,FOLLOW_WHILE_in_keyword28912); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3753:19: -> text(value=$WHILE.text)
                      {
                          retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (WHILE435!=null?WHILE435.getText():null)));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keyword"


    public static class class_name_definition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_name_definition"
    // CSharp.g:3758:1: class_name_definition : CLASS clsNam= IDENTIFIER -> text(value=$clsNam.text+\"\"+assignClassName($clsNam.text));
    public final CSharp.class_name_definition_return class_name_definition() throws RecognitionException {
        CSharp.class_name_definition_return retval = new CSharp.class_name_definition_return();
        retval.start = input.LT(1);


        Token clsNam=null;

        try {
            // CSharp.g:3759:2: ( CLASS clsNam= IDENTIFIER -> text(value=$clsNam.text+\"\"+assignClassName($clsNam.text)))
            // CSharp.g:3760:2: CLASS clsNam= IDENTIFIER
            {
            match(input,CLASS,FOLLOW_CLASS_in_class_name_definition28941); if (state.failed) return retval;

            clsNam=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_class_name_definition28945); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3760:26: -> text(value=$clsNam.text+\"\"+assignClassName($clsNam.text))
              {
                  retval.st = templateLib.getInstanceOf("text",new STAttrMap().put("value", (clsNam!=null?clsNam.getText():null)+""+assignClassName((clsNam!=null?clsNam.getText():null))));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_name_definition"


    public static class class_definition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_definition"
    // CSharp.g:3763:1: class_definition : clsNam= class_name_definition ( type_parameter_list )? (basCls= class_base )? ( type_parameter_constraints_clauses )? clsBdy= class_body (dl= SEMICOLON )? (comts= comments )? -> classDefinition(className=$clsNam.textbaseClass=basClsclassBody=clsBdydelimiter=$dl.textcomments=comts);
    public final CSharp.class_definition_return class_definition() throws RecognitionException {
        CSharp.class_definition_return retval = new CSharp.class_definition_return();
        retval.start = input.LT(1);


        Token dl=null;
        CSharp.class_name_definition_return clsNam =null;

        CSharp.class_base_return basCls =null;

        CSharp.class_body_return clsBdy =null;

        CSharp.comments_return comts =null;


        try {
            // CSharp.g:3764:3: (clsNam= class_name_definition ( type_parameter_list )? (basCls= class_base )? ( type_parameter_constraints_clauses )? clsBdy= class_body (dl= SEMICOLON )? (comts= comments )? -> classDefinition(className=$clsNam.textbaseClass=basClsclassBody=clsBdydelimiter=$dl.textcomments=comts))
            // CSharp.g:3765:3: clsNam= class_name_definition ( type_parameter_list )? (basCls= class_base )? ( type_parameter_constraints_clauses )? clsBdy= class_body (dl= SEMICOLON )? (comts= comments )?
            {
            pushFollow(FOLLOW_class_name_definition_in_class_definition28970);
            clsNam=class_name_definition();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:3765:32: ( type_parameter_list )?
            int alt409=2;
            int LA409_0 = input.LA(1);

            if ( (LA409_0==LT) ) {
                alt409=1;
            }
            switch (alt409) {
                case 1 :
                    // CSharp.g:3765:32: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_class_definition28972);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3765:53: (basCls= class_base )?
            int alt410=2;
            int LA410_0 = input.LA(1);

            if ( (LA410_0==COLON) ) {
                alt410=1;
            }
            switch (alt410) {
                case 1 :
                    // CSharp.g:3765:54: basCls= class_base
                    {
                    pushFollow(FOLLOW_class_base_in_class_definition28978);
                    basCls=class_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3765:74: ( type_parameter_constraints_clauses )?
            int alt411=2;
            int LA411_0 = input.LA(1);

            if ( (LA411_0==IDENTIFIER) ) {
                alt411=1;
            }
            switch (alt411) {
                case 1 :
                    // CSharp.g:3765:74: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_class_definition28982);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_class_body_in_class_definition28993);
            clsBdy=class_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:3766:25: (dl= SEMICOLON )?
            int alt412=2;
            int LA412_0 = input.LA(1);

            if ( (LA412_0==SEMICOLON) ) {
                alt412=1;
            }
            switch (alt412) {
                case 1 :
                    // CSharp.g:3766:26: dl= SEMICOLON
                    {
                    dl=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_class_definition28998); if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3766:41: (comts= comments )?
            int alt413=2;
            int LA413_0 = input.LA(1);

            if ( (LA413_0==SINGLE_LINE_COMMENT) ) {
                alt413=1;
            }
            else if ( (LA413_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt413=1;
            }
            switch (alt413) {
                case 1 :
                    // CSharp.g:3766:42: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_class_definition29005);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3767:3: -> classDefinition(className=$clsNam.textbaseClass=basClsclassBody=clsBdydelimiter=$dl.textcomments=comts)
              {
                  retval.st = templateLib.getInstanceOf("classDefinition",new STAttrMap().put("className", (clsNam!=null?input.toString(clsNam.start,clsNam.stop):null)).put("baseClass", basCls).put("classBody", clsBdy).put("delimiter", (dl!=null?dl.getText():null)).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_definition"


    public static class struct_definition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_definition"
    // CSharp.g:3769:1: struct_definition : STRUCT nam= IDENTIFIER (tpl= type_parameter_list )? (si= struct_interfaces )? (tpcc= type_parameter_constraints_clauses )? (sb= struct_body ) (dlMtr= SEMICOLON )? -> structDefinition(structName=namtypParLst=tplstrctIntfc=sitypParConstCls=tpccbody=sbdelimiter=$dlMtr.text);
    public final CSharp.struct_definition_return struct_definition() throws RecognitionException {
        CSharp.struct_definition_return retval = new CSharp.struct_definition_return();
        retval.start = input.LT(1);


        Token nam=null;
        Token dlMtr=null;
        CSharp.type_parameter_list_return tpl =null;

        CSharp.struct_interfaces_return si =null;

        CSharp.type_parameter_constraints_clauses_return tpcc =null;

        CSharp.struct_body_return sb =null;


        try {
            // CSharp.g:3770:3: ( STRUCT nam= IDENTIFIER (tpl= type_parameter_list )? (si= struct_interfaces )? (tpcc= type_parameter_constraints_clauses )? (sb= struct_body ) (dlMtr= SEMICOLON )? -> structDefinition(structName=namtypParLst=tplstrctIntfc=sitypParConstCls=tpccbody=sbdelimiter=$dlMtr.text))
            // CSharp.g:3771:3: STRUCT nam= IDENTIFIER (tpl= type_parameter_list )? (si= struct_interfaces )? (tpcc= type_parameter_constraints_clauses )? (sb= struct_body ) (dlMtr= SEMICOLON )?
            {
            match(input,STRUCT,FOLLOW_STRUCT_in_struct_definition29048); if (state.failed) return retval;

            nam=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_struct_definition29052); if (state.failed) return retval;

            // CSharp.g:3771:25: (tpl= type_parameter_list )?
            int alt414=2;
            int LA414_0 = input.LA(1);

            if ( (LA414_0==LT) ) {
                alt414=1;
            }
            switch (alt414) {
                case 1 :
                    // CSharp.g:3771:26: tpl= type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_struct_definition29057);
                    tpl=type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3771:52: (si= struct_interfaces )?
            int alt415=2;
            int LA415_0 = input.LA(1);

            if ( (LA415_0==COLON) ) {
                alt415=1;
            }
            switch (alt415) {
                case 1 :
                    // CSharp.g:3771:53: si= struct_interfaces
                    {
                    pushFollow(FOLLOW_struct_interfaces_in_struct_definition29064);
                    si=struct_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3771:76: (tpcc= type_parameter_constraints_clauses )?
            int alt416=2;
            int LA416_0 = input.LA(1);

            if ( (LA416_0==IDENTIFIER) ) {
                alt416=1;
            }
            switch (alt416) {
                case 1 :
                    // CSharp.g:3771:77: tpcc= type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_struct_definition29071);
                    tpcc=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3771:119: (sb= struct_body )
            // CSharp.g:3771:120: sb= struct_body
            {
            pushFollow(FOLLOW_struct_body_in_struct_definition29078);
            sb=struct_body();

            state._fsp--;
            if (state.failed) return retval;

            }


            // CSharp.g:3771:136: (dlMtr= SEMICOLON )?
            int alt417=2;
            int LA417_0 = input.LA(1);

            if ( (LA417_0==SEMICOLON) ) {
                alt417=1;
            }
            switch (alt417) {
                case 1 :
                    // CSharp.g:3771:137: dlMtr= SEMICOLON
                    {
                    dlMtr=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_struct_definition29084); if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3772:3: -> structDefinition(structName=namtypParLst=tplstrctIntfc=sitypParConstCls=tpccbody=sbdelimiter=$dlMtr.text)
              {
                  retval.st = templateLib.getInstanceOf("structDefinition",new STAttrMap().put("structName", nam).put("typParLst", tpl).put("strctIntfc", si).put("typParConstCls", tpcc).put("body", sb).put("delimiter", (dlMtr!=null?dlMtr.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_definition"


    public static class interface_definition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_definition"
    // CSharp.g:3774:1: interface_definition : INTERFACE nam= IDENTIFIER (vtpl= variant_type_parameter_list )? (ib= interface_base )? (tpcc= type_parameter_constraints_clauses )? bdy= interface_body (dlMtr= SEMICOLON )? -> interfaceDefinition(kwd=$INTERFACE.text+\" \"interfaceName=$nam.textvarTypLst=vtplintfcBdy=ibconstrntCls=tpccbody=bdydelimiter=$dlMtr.text);
    public final CSharp.interface_definition_return interface_definition() throws RecognitionException {
        CSharp.interface_definition_return retval = new CSharp.interface_definition_return();
        retval.start = input.LT(1);


        Token nam=null;
        Token dlMtr=null;
        Token INTERFACE436=null;
        CSharp.variant_type_parameter_list_return vtpl =null;

        CSharp.interface_base_return ib =null;

        CSharp.type_parameter_constraints_clauses_return tpcc =null;

        CSharp.interface_body_return bdy =null;


        try {
            // CSharp.g:3775:3: ( INTERFACE nam= IDENTIFIER (vtpl= variant_type_parameter_list )? (ib= interface_base )? (tpcc= type_parameter_constraints_clauses )? bdy= interface_body (dlMtr= SEMICOLON )? -> interfaceDefinition(kwd=$INTERFACE.text+\" \"interfaceName=$nam.textvarTypLst=vtplintfcBdy=ibconstrntCls=tpccbody=bdydelimiter=$dlMtr.text))
            // CSharp.g:3776:3: INTERFACE nam= IDENTIFIER (vtpl= variant_type_parameter_list )? (ib= interface_base )? (tpcc= type_parameter_constraints_clauses )? bdy= interface_body (dlMtr= SEMICOLON )?
            {
            INTERFACE436=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_interface_definition29131); if (state.failed) return retval;

            nam=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_definition29135); if (state.failed) return retval;

            // CSharp.g:3776:28: (vtpl= variant_type_parameter_list )?
            int alt418=2;
            int LA418_0 = input.LA(1);

            if ( (LA418_0==LT) ) {
                alt418=1;
            }
            switch (alt418) {
                case 1 :
                    // CSharp.g:3776:29: vtpl= variant_type_parameter_list
                    {
                    pushFollow(FOLLOW_variant_type_parameter_list_in_interface_definition29140);
                    vtpl=variant_type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3776:64: (ib= interface_base )?
            int alt419=2;
            int LA419_0 = input.LA(1);

            if ( (LA419_0==COLON) ) {
                alt419=1;
            }
            switch (alt419) {
                case 1 :
                    // CSharp.g:3776:65: ib= interface_base
                    {
                    pushFollow(FOLLOW_interface_base_in_interface_definition29147);
                    ib=interface_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3776:85: (tpcc= type_parameter_constraints_clauses )?
            int alt420=2;
            int LA420_0 = input.LA(1);

            if ( (LA420_0==IDENTIFIER) ) {
                alt420=1;
            }
            switch (alt420) {
                case 1 :
                    // CSharp.g:3776:86: tpcc= type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_definition29154);
                    tpcc=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_interface_body_in_interface_definition29160);
            bdy=interface_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:3776:147: (dlMtr= SEMICOLON )?
            int alt421=2;
            int LA421_0 = input.LA(1);

            if ( (LA421_0==SEMICOLON) ) {
                alt421=1;
            }
            switch (alt421) {
                case 1 :
                    // CSharp.g:3776:148: dlMtr= SEMICOLON
                    {
                    dlMtr=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_definition29165); if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3777:3: -> interfaceDefinition(kwd=$INTERFACE.text+\" \"interfaceName=$nam.textvarTypLst=vtplintfcBdy=ibconstrntCls=tpccbody=bdydelimiter=$dlMtr.text)
              {
                  retval.st = templateLib.getInstanceOf("interfaceDefinition",new STAttrMap().put("kwd", (INTERFACE436!=null?INTERFACE436.getText():null)+" ").put("interfaceName", (nam!=null?nam.getText():null)).put("varTypLst", vtpl).put("intfcBdy", ib).put("constrntCls", tpcc).put("body", bdy).put("delimiter", (dlMtr!=null?dlMtr.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_definition"


    public static class enum_definition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_definition"
    // CSharp.g:3779:1: enum_definition : ENUM IDENTIFIER (eb= enum_base )? bdy= enum_body (dlMtr= SEMICOLON )? -> enumDefinition(name=$IDENTIFIER.textbase=ebbody=bdydelimiter=$dlMtr.text);
    public final CSharp.enum_definition_return enum_definition() throws RecognitionException {
        CSharp.enum_definition_return retval = new CSharp.enum_definition_return();
        retval.start = input.LT(1);


        Token dlMtr=null;
        Token IDENTIFIER437=null;
        CSharp.enum_base_return eb =null;

        CSharp.enum_body_return bdy =null;


        try {
            // CSharp.g:3780:3: ( ENUM IDENTIFIER (eb= enum_base )? bdy= enum_body (dlMtr= SEMICOLON )? -> enumDefinition(name=$IDENTIFIER.textbase=ebbody=bdydelimiter=$dlMtr.text))
            // CSharp.g:3781:3: ENUM IDENTIFIER (eb= enum_base )? bdy= enum_body (dlMtr= SEMICOLON )?
            {
            match(input,ENUM,FOLLOW_ENUM_in_enum_definition29216); if (state.failed) return retval;

            IDENTIFIER437=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enum_definition29218); if (state.failed) return retval;

            // CSharp.g:3781:19: (eb= enum_base )?
            int alt422=2;
            int LA422_0 = input.LA(1);

            if ( (LA422_0==COLON) ) {
                alt422=1;
            }
            switch (alt422) {
                case 1 :
                    // CSharp.g:3781:20: eb= enum_base
                    {
                    pushFollow(FOLLOW_enum_base_in_enum_definition29223);
                    eb=enum_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_enum_body_in_enum_definition29229);
            bdy=enum_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:3781:54: (dlMtr= SEMICOLON )?
            int alt423=2;
            int LA423_0 = input.LA(1);

            if ( (LA423_0==SEMICOLON) ) {
                alt423=1;
            }
            switch (alt423) {
                case 1 :
                    // CSharp.g:3781:54: dlMtr= SEMICOLON
                    {
                    dlMtr=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_enum_definition29233); if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3782:3: -> enumDefinition(name=$IDENTIFIER.textbase=ebbody=bdydelimiter=$dlMtr.text)
              {
                  retval.st = templateLib.getInstanceOf("enumDefinition",new STAttrMap().put("name", (IDENTIFIER437!=null?IDENTIFIER437.getText():null)).put("base", eb).put("body", bdy).put("delimiter", (dlMtr!=null?dlMtr.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_definition"


    public static class delegate_definition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_definition"
    // CSharp.g:3784:1: delegate_definition : DELEGATE rt= return_type IDENTIFIER (vtpl= variant_type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON -> delegateDefinition(retType=rtretVal=$IDENTIFIER.textvarTypeParLst=vtplformlParLst=fplconstrntCls=tpcc);
    public final CSharp.delegate_definition_return delegate_definition() throws RecognitionException {
        CSharp.delegate_definition_return retval = new CSharp.delegate_definition_return();
        retval.start = input.LT(1);


        Token IDENTIFIER438=null;
        CSharp.return_type_return rt =null;

        CSharp.variant_type_parameter_list_return vtpl =null;

        CSharp.formal_parameter_list_return fpl =null;

        CSharp.type_parameter_constraints_clauses_return tpcc =null;


        try {
            // CSharp.g:3785:3: ( DELEGATE rt= return_type IDENTIFIER (vtpl= variant_type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON -> delegateDefinition(retType=rtretVal=$IDENTIFIER.textvarTypeParLst=vtplformlParLst=fplconstrntCls=tpcc))
            // CSharp.g:3786:3: DELEGATE rt= return_type IDENTIFIER (vtpl= variant_type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (tpcc= type_parameter_constraints_clauses )? SEMICOLON
            {
            match(input,DELEGATE,FOLLOW_DELEGATE_in_delegate_definition29271); if (state.failed) return retval;

            pushFollow(FOLLOW_return_type_in_delegate_definition29275);
            rt=return_type();

            state._fsp--;
            if (state.failed) return retval;

            IDENTIFIER438=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_delegate_definition29277); if (state.failed) return retval;

            // CSharp.g:3786:38: (vtpl= variant_type_parameter_list )?
            int alt424=2;
            int LA424_0 = input.LA(1);

            if ( (LA424_0==LT) ) {
                alt424=1;
            }
            switch (alt424) {
                case 1 :
                    // CSharp.g:3786:39: vtpl= variant_type_parameter_list
                    {
                    pushFollow(FOLLOW_variant_type_parameter_list_in_delegate_definition29282);
                    vtpl=variant_type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_delegate_definition29286); if (state.failed) return retval;

            // CSharp.g:3786:86: (fpl= formal_parameter_list )?
            int alt425=2;
            int LA425_0 = input.LA(1);

            if ( (LA425_0==BOOL||LA425_0==BYTE||LA425_0==CHAR||LA425_0==DECIMAL||LA425_0==DOUBLE||LA425_0==FLOAT||LA425_0==IDENTIFIER||LA425_0==INT||LA425_0==LONG||LA425_0==OBJECT||LA425_0==OPEN_BRACKET||LA425_0==OUT||LA425_0==PARAMS||LA425_0==REF||LA425_0==SBYTE||LA425_0==SHORT||LA425_0==STRING||LA425_0==THIS||(LA425_0 >= UINT && LA425_0 <= ULONG)||LA425_0==USHORT||LA425_0==VOID) ) {
                alt425=1;
            }
            switch (alt425) {
                case 1 :
                    // CSharp.g:3786:87: fpl= formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_delegate_definition29291);
                    fpl=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_delegate_definition29295); if (state.failed) return retval;

            // CSharp.g:3786:128: (tpcc= type_parameter_constraints_clauses )?
            int alt426=2;
            int LA426_0 = input.LA(1);

            if ( (LA426_0==IDENTIFIER) ) {
                alt426=1;
            }
            switch (alt426) {
                case 1 :
                    // CSharp.g:3786:129: tpcc= type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_delegate_definition29300);
                    tpcc=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_delegate_definition29304); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3787:3: -> delegateDefinition(retType=rtretVal=$IDENTIFIER.textvarTypeParLst=vtplformlParLst=fplconstrntCls=tpcc)
              {
                  retval.st = templateLib.getInstanceOf("delegateDefinition",new STAttrMap().put("retType", rt).put("retVal", (IDENTIFIER438!=null?IDENTIFIER438.getText():null)).put("varTypeParLst", vtpl).put("formlParLst", fpl).put("constrntCls", tpcc));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delegate_definition"


    public static class event_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "event_declaration2"
    // CSharp.g:3789:1: event_declaration2 : EVENT t= type chld= event_declaration2_Chld -> eventDeclaration2(type=tevntDeclChld=chld);
    public final CSharp.event_declaration2_return event_declaration2() throws RecognitionException {
        CSharp.event_declaration2_return retval = new CSharp.event_declaration2_return();
        retval.start = input.LT(1);


        CSharp.type_return t =null;

        CSharp.event_declaration2_Chld_return chld =null;


        try {
            // CSharp.g:3790:3: ( EVENT t= type chld= event_declaration2_Chld -> eventDeclaration2(type=tevntDeclChld=chld))
            // CSharp.g:3791:3: EVENT t= type chld= event_declaration2_Chld
            {
            match(input,EVENT,FOLLOW_EVENT_in_event_declaration229345); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_event_declaration229349);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) {((common_member_declaration_scope)common_member_declaration_stack.peek()).type = (t!=null?((Object)t.tree):null);}

            pushFollow(FOLLOW_event_declaration2_Chld_in_event_declaration229355);
            chld=event_declaration2_Chld();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3792:3: -> eventDeclaration2(type=tevntDeclChld=chld)
              {
                  retval.st = templateLib.getInstanceOf("eventDeclaration2",new STAttrMap().put("type", t).put("evntDeclChld", chld));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "event_declaration2"


    public static class event_declaration2_Chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "event_declaration2_Chld"
    // CSharp.g:3795:1: event_declaration2_Chld : (decl= variable_declarators SEMICOLON -> eventDeclaration2Chld(declaration=decl)|mName= member_name OPEN_BRACE ad= event_accessor_declarations CLOSE_BRACE -> eventDeclaration2Chld2(memberName=mNameaccsDecl=ad));
    public final CSharp.event_declaration2_Chld_return event_declaration2_Chld() throws RecognitionException {
        CSharp.event_declaration2_Chld_return retval = new CSharp.event_declaration2_Chld_return();
        retval.start = input.LT(1);


        CSharp.variable_declarators_return decl =null;

        CSharp.member_name_return mName =null;

        CSharp.event_accessor_declarations_return ad =null;


        try {
            // CSharp.g:3796:3: (decl= variable_declarators SEMICOLON -> eventDeclaration2Chld(declaration=decl)|mName= member_name OPEN_BRACE ad= event_accessor_declarations CLOSE_BRACE -> eventDeclaration2Chld2(memberName=mNameaccsDecl=ad))
            int alt427=2;
            int LA427_0 = input.LA(1);

            if ( (LA427_0==IDENTIFIER) ) {
                int LA427_1 = input.LA(2);

                if ( (LA427_1==ASSIGNMENT||LA427_1==COMMA||LA427_1==SEMICOLON) ) {
                    alt427=1;
                }
                else if ( (LA427_1==DOT||LA427_1==DOUBLE_COLON||LA427_1==LT||LA427_1==OPEN_BRACE) ) {
                    alt427=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 427, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 427, 0, input);

                throw nvae;

            }
            switch (alt427) {
                case 1 :
                    // CSharp.g:3797:3: decl= variable_declarators SEMICOLON
                    {
                    pushFollow(FOLLOW_variable_declarators_in_event_declaration2_Chld29389);
                    decl=variable_declarators();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_event_declaration2_Chld29391); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3798:3: -> eventDeclaration2Chld(declaration=decl)
                      {
                          retval.st = templateLib.getInstanceOf("eventDeclaration2Chld",new STAttrMap().put("declaration", decl));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:3799:4: mName= member_name OPEN_BRACE ad= event_accessor_declarations CLOSE_BRACE
                    {
                    pushFollow(FOLLOW_member_name_in_event_declaration2_Chld29408);
                    mName=member_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_event_declaration2_Chld29410); if (state.failed) return retval;

                    pushFollow(FOLLOW_event_accessor_declarations_in_event_declaration2_Chld29414);
                    ad=event_accessor_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_event_declaration2_Chld29416); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3800:3: -> eventDeclaration2Chld2(memberName=mNameaccsDecl=ad)
                      {
                          retval.st = templateLib.getInstanceOf("eventDeclaration2Chld2",new STAttrMap().put("memberName", mName).put("accsDecl", ad));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "event_declaration2_Chld"


    public static class field_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "field_declaration2"
    // CSharp.g:3803:1: field_declaration2 : varDec= variable_declarators SEMICOLON (comts= comments )? -> fieldDeclaration2(declaration=$varDec.st.toString().trim()comments=comts);
    public final CSharp.field_declaration2_return field_declaration2() throws RecognitionException {
        CSharp.field_declaration2_return retval = new CSharp.field_declaration2_return();
        retval.start = input.LT(1);


        CSharp.variable_declarators_return varDec =null;

        CSharp.comments_return comts =null;


        try {
            // CSharp.g:3804:3: (varDec= variable_declarators SEMICOLON (comts= comments )? -> fieldDeclaration2(declaration=$varDec.st.toString().trim()comments=comts))
            // CSharp.g:3805:3: varDec= variable_declarators SEMICOLON (comts= comments )?
            {
            pushFollow(FOLLOW_variable_declarators_in_field_declaration229450);
            varDec=variable_declarators();

            state._fsp--;
            if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration229452); if (state.failed) return retval;

            // CSharp.g:3805:41: (comts= comments )?
            int alt428=2;
            int LA428_0 = input.LA(1);

            if ( (LA428_0==SINGLE_LINE_COMMENT) ) {
                alt428=1;
            }
            else if ( (LA428_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt428=1;
            }
            switch (alt428) {
                case 1 :
                    // CSharp.g:3805:42: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_field_declaration229457);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3806:3: -> fieldDeclaration2(declaration=$varDec.st.toString().trim()comments=comts)
              {
                  retval.st = templateLib.getInstanceOf("fieldDeclaration2",new STAttrMap().put("declaration", (varDec!=null?varDec.st:null).toString().trim()).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration2"


    public static class property_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "property_declaration2"
    // CSharp.g:3808:1: property_declaration2 : mNam= member_name OPEN_BRACE ad= accessor_declarations CLOSE_BRACE -> propertyDeclaration2(mNm=mNamad1=ad);
    public final CSharp.property_declaration2_return property_declaration2() throws RecognitionException {
        CSharp.property_declaration2_return retval = new CSharp.property_declaration2_return();
        retval.start = input.LT(1);


        CSharp.member_name_return mNam =null;

        CSharp.accessor_declarations_return ad =null;


        try {
            // CSharp.g:3809:3: (mNam= member_name OPEN_BRACE ad= accessor_declarations CLOSE_BRACE -> propertyDeclaration2(mNm=mNamad1=ad))
            // CSharp.g:3810:3: mNam= member_name OPEN_BRACE ad= accessor_declarations CLOSE_BRACE
            {
            pushFollow(FOLLOW_member_name_in_property_declaration229490);
            mNam=member_name();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_property_declaration229492); if (state.failed) return retval;

            pushFollow(FOLLOW_accessor_declarations_in_property_declaration229496);
            ad=accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_property_declaration229498); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3811:3: -> propertyDeclaration2(mNm=mNamad1=ad)
              {
                  retval.st = templateLib.getInstanceOf("propertyDeclaration2",new STAttrMap().put("mNm", mNam).put("ad1", ad));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_declaration2"


    public static class constant_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constant_declaration2"
    // CSharp.g:3813:1: constant_declaration2 : CONST t= type decl= constant_declarators SEMICOLON (comts= comments )? -> constantDeclaration2(type=tdeclarators=declcomments=comts);
    public final CSharp.constant_declaration2_return constant_declaration2() throws RecognitionException {
        CSharp.constant_declaration2_return retval = new CSharp.constant_declaration2_return();
        retval.start = input.LT(1);


        CSharp.type_return t =null;

        CSharp.constant_declarators_return decl =null;

        CSharp.comments_return comts =null;


        try {
            // CSharp.g:3814:3: ( CONST t= type decl= constant_declarators SEMICOLON (comts= comments )? -> constantDeclaration2(type=tdeclarators=declcomments=comts))
            // CSharp.g:3815:3: CONST t= type decl= constant_declarators SEMICOLON (comts= comments )?
            {
            match(input,CONST,FOLLOW_CONST_in_constant_declaration229527); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_constant_declaration229531);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_constant_declarators_in_constant_declaration229535);
            decl=constant_declarators();

            state._fsp--;
            if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_constant_declaration229537); if (state.failed) return retval;

            // CSharp.g:3815:52: (comts= comments )?
            int alt429=2;
            int LA429_0 = input.LA(1);

            if ( (LA429_0==SINGLE_LINE_COMMENT) ) {
                alt429=1;
            }
            else if ( (LA429_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt429=1;
            }
            switch (alt429) {
                case 1 :
                    // CSharp.g:3815:53: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_constant_declaration229542);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3816:3: -> constantDeclaration2(type=tdeclarators=declcomments=comts)
              {
                  retval.st = templateLib.getInstanceOf("constantDeclaration2",new STAttrMap().put("type", t).put("declarators", decl).put("comments", comts));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constant_declaration2"


    public static class indexer_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "indexer_declaration2"
    // CSharp.g:3818:1: indexer_declaration2 : THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE ad= accessor_declarations CLOSE_BRACE -> indexerDeclaration2(formlParLst=fplaccsDecls=ad);
    public final CSharp.indexer_declaration2_return indexer_declaration2() throws RecognitionException {
        CSharp.indexer_declaration2_return retval = new CSharp.indexer_declaration2_return();
        retval.start = input.LT(1);


        CSharp.formal_parameter_list_return fpl =null;

        CSharp.accessor_declarations_return ad =null;


        try {
            // CSharp.g:3819:3: ( THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE ad= accessor_declarations CLOSE_BRACE -> indexerDeclaration2(formlParLst=fplaccsDecls=ad))
            // CSharp.g:3820:3: THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE ad= accessor_declarations CLOSE_BRACE
            {
            match(input,THIS,FOLLOW_THIS_in_indexer_declaration229577); if (state.failed) return retval;

            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_indexer_declaration229579); if (state.failed) return retval;

            pushFollow(FOLLOW_formal_parameter_list_in_indexer_declaration229583);
            fpl=formal_parameter_list();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_indexer_declaration229585); if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_indexer_declaration229587); if (state.failed) return retval;

            pushFollow(FOLLOW_accessor_declarations_in_indexer_declaration229591);
            ad=accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_indexer_declaration229593); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3821:3: -> indexerDeclaration2(formlParLst=fplaccsDecls=ad)
              {
                  retval.st = templateLib.getInstanceOf("indexerDeclaration2",new STAttrMap().put("formlParLst", fpl).put("accsDecls", ad));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexer_declaration2"


    public static class destructor_definition_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "destructor_definition"
    // CSharp.g:3823:1: destructor_definition : TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body ;
    public final CSharp.destructor_definition_return destructor_definition() throws RecognitionException {
        CSharp.destructor_definition_return retval = new CSharp.destructor_definition_return();
        retval.start = input.LT(1);


        try {
            // CSharp.g:3824:3: ( TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body )
            // CSharp.g:3824:5: TILDE IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body
            {
            match(input,TILDE,FOLLOW_TILDE_in_destructor_definition29619); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_destructor_definition29621); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_destructor_definition29623); if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_destructor_definition29625); if (state.failed) return retval;

            pushFollow(FOLLOW_destructor_body_in_destructor_definition29627);
            destructor_body();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "destructor_definition"


    public static class constructor_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_declaration2"
    // CSharp.g:3826:1: constructor_declaration2 : id= IDENTIFIER OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (cotrInit= constructor_initializer )? bdy= body -> constructorDeclaration2(constrName=$id.textformalParamLst=fplconstrInit=cotrInitconstrBdy=bdy);
    public final CSharp.constructor_declaration2_return constructor_declaration2() throws RecognitionException {
        CSharp.constructor_declaration2_return retval = new CSharp.constructor_declaration2_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharp.formal_parameter_list_return fpl =null;

        CSharp.constructor_initializer_return cotrInit =null;

        CSharp.body_return bdy =null;


        try {
            // CSharp.g:3827:3: (id= IDENTIFIER OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (cotrInit= constructor_initializer )? bdy= body -> constructorDeclaration2(constrName=$id.textformalParamLst=fplconstrInit=cotrInitconstrBdy=bdy))
            // CSharp.g:3828:3: id= IDENTIFIER OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (cotrInit= constructor_initializer )? bdy= body
            {
            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_constructor_declaration229644); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_constructor_declaration229646); if (state.failed) return retval;

            // CSharp.g:3828:29: (fpl= formal_parameter_list )?
            int alt430=2;
            int LA430_0 = input.LA(1);

            if ( (LA430_0==BOOL||LA430_0==BYTE||LA430_0==CHAR||LA430_0==DECIMAL||LA430_0==DOUBLE||LA430_0==FLOAT||LA430_0==IDENTIFIER||LA430_0==INT||LA430_0==LONG||LA430_0==OBJECT||LA430_0==OPEN_BRACKET||LA430_0==OUT||LA430_0==PARAMS||LA430_0==REF||LA430_0==SBYTE||LA430_0==SHORT||LA430_0==STRING||LA430_0==THIS||(LA430_0 >= UINT && LA430_0 <= ULONG)||LA430_0==USHORT||LA430_0==VOID) ) {
                alt430=1;
            }
            switch (alt430) {
                case 1 :
                    // CSharp.g:3828:30: fpl= formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_constructor_declaration229651);
                    fpl=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_constructor_declaration229655); if (state.failed) return retval;

            // CSharp.g:3828:71: (cotrInit= constructor_initializer )?
            int alt431=2;
            int LA431_0 = input.LA(1);

            if ( (LA431_0==COLON) ) {
                alt431=1;
            }
            switch (alt431) {
                case 1 :
                    // CSharp.g:3828:72: cotrInit= constructor_initializer
                    {
                    pushFollow(FOLLOW_constructor_initializer_in_constructor_declaration229660);
                    cotrInit=constructor_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_body_in_constructor_declaration229666);
            bdy=body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3829:3: -> constructorDeclaration2(constrName=$id.textformalParamLst=fplconstrInit=cotrInitconstrBdy=bdy)
              {
                  retval.st = templateLib.getInstanceOf("constructorDeclaration2",new STAttrMap().put("constrName", (id!=null?id.getText():null)).put("formalParamLst", fpl).put("constrInit", cotrInit).put("constrBdy", bdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_declaration2"


    public static class comments_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "comments"
    // CSharp.g:3832:1: comments : (comLst+= comment )+ -> comments(list=$comLst);
    public final CSharp.comments_return comments() throws RecognitionException {
        CSharp.comments_return retval = new CSharp.comments_return();
        retval.start = input.LT(1);


        List list_comLst=null;
        RuleReturnScope comLst = null;
        try {
            // CSharp.g:3833:3: ( (comLst+= comment )+ -> comments(list=$comLst))
            // CSharp.g:3834:3: (comLst+= comment )+
            {
            // CSharp.g:3834:3: (comLst+= comment )+
            int cnt432=0;
            loop432:
            do {
                int alt432=2;
                int LA432_0 = input.LA(1);

                if ( (LA432_0==SINGLE_LINE_COMMENT) ) {
                    alt432=1;
                }
                else if ( (LA432_0==SINGLE_LINE_DOC_COMMENT) ) {
                    alt432=1;
                }


                switch (alt432) {
            	case 1 :
            	    // CSharp.g:3834:4: comLst+= comment
            	    {
            	    pushFollow(FOLLOW_comment_in_comments29708);
            	    comLst=comment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_comLst==null) list_comLst=new ArrayList();
            	    list_comLst.add(comLst.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt432 >= 1 ) break loop432;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(432, input);
                        throw eee;
                }
                cnt432++;
            } while (true);


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3835:3: -> comments(list=$comLst)
              {
                  retval.st = templateLib.getInstanceOf("comments",new STAttrMap().put("list", list_comLst));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "comments"


    public static class comment_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "comment"
    // CSharp.g:3838:1: comment : ( SINGLE_LINE_COMMENT -> comment(content=CSharpHelper.preProcessSingleLineComment($SINGLE_LINE_COMMENT.text))| SINGLE_LINE_DOC_COMMENT -> comment(content=CSharpHelper.preProcessSingleLineComment($SINGLE_LINE_DOC_COMMENT.text)));
    public final CSharp.comment_return comment() throws RecognitionException {
        CSharp.comment_return retval = new CSharp.comment_return();
        retval.start = input.LT(1);


        Token SINGLE_LINE_COMMENT439=null;
        Token SINGLE_LINE_DOC_COMMENT440=null;

        try {
            // CSharp.g:3839:3: ( SINGLE_LINE_COMMENT -> comment(content=CSharpHelper.preProcessSingleLineComment($SINGLE_LINE_COMMENT.text))| SINGLE_LINE_DOC_COMMENT -> comment(content=CSharpHelper.preProcessSingleLineComment($SINGLE_LINE_DOC_COMMENT.text)))
            int alt433=2;
            int LA433_0 = input.LA(1);

            if ( (LA433_0==SINGLE_LINE_COMMENT) ) {
                alt433=1;
            }
            else if ( (LA433_0==SINGLE_LINE_DOC_COMMENT) ) {
                alt433=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 433, 0, input);

                throw nvae;

            }
            switch (alt433) {
                case 1 :
                    // CSharp.g:3840:3: SINGLE_LINE_COMMENT
                    {
                    SINGLE_LINE_COMMENT439=(Token)match(input,SINGLE_LINE_COMMENT,FOLLOW_SINGLE_LINE_COMMENT_in_comment29735); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3841:3: -> comment(content=CSharpHelper.preProcessSingleLineComment($SINGLE_LINE_COMMENT.text))
                      {
                          retval.st = templateLib.getInstanceOf("comment",new STAttrMap().put("content", CSharpHelper.preProcessSingleLineComment((SINGLE_LINE_COMMENT439!=null?SINGLE_LINE_COMMENT439.getText():null))));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:3842:4: SINGLE_LINE_DOC_COMMENT
                    {
                    SINGLE_LINE_DOC_COMMENT440=(Token)match(input,SINGLE_LINE_DOC_COMMENT,FOLLOW_SINGLE_LINE_DOC_COMMENT_in_comment29752); if (state.failed) return retval;

                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3843:3: -> comment(content=CSharpHelper.preProcessSingleLineComment($SINGLE_LINE_DOC_COMMENT.text))
                      {
                          retval.st = templateLib.getInstanceOf("comment",new STAttrMap().put("content", CSharpHelper.preProcessSingleLineComment((SINGLE_LINE_DOC_COMMENT440!=null?SINGLE_LINE_DOC_COMMENT440.getText():null))));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "comment"


    public static class method_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_declaration2"
    // CSharp.g:3846:1: method_declaration2 : mthdNam= method_member_name (parLst= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (cluses= type_parameter_constraints_clauses )? (comts= comments )? mBdy= method_body -> methodDeclaration2(methodName=NamingUtil.toCamelCase($mthdNam.text)typeParamLst=parLstformalParamLst=fplparamClauses=clusescommnents=comtsmethodBody=mBdylogMethod=CSharpHelper.updateLoggerRequest($fpl.text));
    public final CSharp.method_declaration2_return method_declaration2() throws RecognitionException {
        CSharp.method_declaration2_return retval = new CSharp.method_declaration2_return();
        retval.start = input.LT(1);


        CSharp.method_member_name_return mthdNam =null;

        CSharp.type_parameter_list_return parLst =null;

        CSharp.formal_parameter_list_return fpl =null;

        CSharp.type_parameter_constraints_clauses_return cluses =null;

        CSharp.comments_return comts =null;

        CSharp.method_body_return mBdy =null;


        try {
            // CSharp.g:3847:3: (mthdNam= method_member_name (parLst= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (cluses= type_parameter_constraints_clauses )? (comts= comments )? mBdy= method_body -> methodDeclaration2(methodName=NamingUtil.toCamelCase($mthdNam.text)typeParamLst=parLstformalParamLst=fplparamClauses=clusescommnents=comtsmethodBody=mBdylogMethod=CSharpHelper.updateLoggerRequest($fpl.text)))
            // CSharp.g:3848:3: mthdNam= method_member_name (parLst= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (cluses= type_parameter_constraints_clauses )? (comts= comments )? mBdy= method_body
            {
            pushFollow(FOLLOW_method_member_name_in_method_declaration229782);
            mthdNam=method_member_name();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp.g:3848:30: (parLst= type_parameter_list )?
            int alt434=2;
            int LA434_0 = input.LA(1);

            if ( (LA434_0==LT) ) {
                alt434=1;
            }
            switch (alt434) {
                case 1 :
                    // CSharp.g:3848:31: parLst= type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_method_declaration229787);
                    parLst=type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_method_declaration229792); if (state.failed) return retval;

            // CSharp.g:3848:73: (fpl= formal_parameter_list )?
            int alt435=2;
            int LA435_0 = input.LA(1);

            if ( (LA435_0==BOOL||LA435_0==BYTE||LA435_0==CHAR||LA435_0==DECIMAL||LA435_0==DOUBLE||LA435_0==FLOAT||LA435_0==IDENTIFIER||LA435_0==INT||LA435_0==LONG||LA435_0==OBJECT||LA435_0==OPEN_BRACKET||LA435_0==OUT||LA435_0==PARAMS||LA435_0==REF||LA435_0==SBYTE||LA435_0==SHORT||LA435_0==STRING||LA435_0==THIS||(LA435_0 >= UINT && LA435_0 <= ULONG)||LA435_0==USHORT||LA435_0==VOID) ) {
                alt435=1;
            }
            switch (alt435) {
                case 1 :
                    // CSharp.g:3848:74: fpl= formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_method_declaration229797);
                    fpl=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_method_declaration229801); if (state.failed) return retval;

            // CSharp.g:3849:7: (cluses= type_parameter_constraints_clauses )?
            int alt436=2;
            int LA436_0 = input.LA(1);

            if ( (LA436_0==IDENTIFIER) ) {
                alt436=1;
            }
            switch (alt436) {
                case 1 :
                    // CSharp.g:3849:8: cluses= type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_method_declaration229812);
                    cluses=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp.g:3849:52: (comts= comments )?
            int alt437=2;
            int LA437_0 = input.LA(1);

            if ( ((LA437_0 >= SINGLE_LINE_COMMENT && LA437_0 <= SINGLE_LINE_DOC_COMMENT)) ) {
                alt437=1;
            }
            switch (alt437) {
                case 1 :
                    // CSharp.g:3849:53: comts= comments
                    {
                    pushFollow(FOLLOW_comments_in_method_declaration229819);
                    comts=comments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_method_body_in_method_declaration229825);
            mBdy=method_body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3850:3: -> methodDeclaration2(methodName=NamingUtil.toCamelCase($mthdNam.text)typeParamLst=parLstformalParamLst=fplparamClauses=clusescommnents=comtsmethodBody=mBdylogMethod=CSharpHelper.updateLoggerRequest($fpl.text))
              {
                  retval.st = templateLib.getInstanceOf("methodDeclaration2",new STAttrMap().put("methodName", NamingUtil.toCamelCase((mthdNam!=null?input.toString(mthdNam.start,mthdNam.stop):null))).put("typeParamLst", parLst).put("formalParamLst", fpl).put("paramClauses", cluses).put("commnents", comts).put("methodBody", mBdy).put("logMethod", CSharpHelper.updateLoggerRequest((fpl!=null?input.toString(fpl.start,fpl.stop):null))));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration2"


    public static class method_member_name_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_member_name"
    // CSharp.g:3853:1: method_member_name : mName= method_member_name2 -> methodMemberName(methodName=$mName.st.toString().trim()+\" \"+assignmethodName($mName.st.toString().trim()));
    public final CSharp.method_member_name_return method_member_name() throws RecognitionException {
        CSharp.method_member_name_return retval = new CSharp.method_member_name_return();
        retval.start = input.LT(1);


        CSharp.method_member_name2_return mName =null;


        try {
            // CSharp.g:3854:3: (mName= method_member_name2 -> methodMemberName(methodName=$mName.st.toString().trim()+\" \"+assignmethodName($mName.st.toString().trim())))
            // CSharp.g:3855:3: mName= method_member_name2
            {
            pushFollow(FOLLOW_method_member_name2_in_method_member_name29877);
            mName=method_member_name2();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3856:3: -> methodMemberName(methodName=$mName.st.toString().trim()+\" \"+assignmethodName($mName.st.toString().trim()))
              {
                  retval.st = templateLib.getInstanceOf("methodMemberName",new STAttrMap().put("methodName", (mName!=null?mName.st:null).toString().trim()+" "+assignmethodName((mName!=null?mName.st:null).toString().trim())));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_member_name"


    public static class method_member_name2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_member_name2"
    // CSharp.g:3858:1: method_member_name2 : (strtId= IDENTIFIER (lst+= method_member_name2_chld )* -> methodMemberName2(startId=CSharpHelper.replaceJavaMethod(NamingUtil.toCamelCase($strtId.text))list=$lst)|id1= IDENTIFIER DOUBLE_COLON id2= IDENTIFIER (lst+= method_member_name2_chld )* -> methodMemberName2(startId=$id1.text+\" \"+$id2.textlist=$lst));
    public final CSharp.method_member_name2_return method_member_name2() throws RecognitionException {
        CSharp.method_member_name2_return retval = new CSharp.method_member_name2_return();
        retval.start = input.LT(1);


        Token strtId=null;
        Token id1=null;
        Token id2=null;
        List list_lst=null;
        RuleReturnScope lst = null;
        try {
            // CSharp.g:3859:3: (strtId= IDENTIFIER (lst+= method_member_name2_chld )* -> methodMemberName2(startId=CSharpHelper.replaceJavaMethod(NamingUtil.toCamelCase($strtId.text))list=$lst)|id1= IDENTIFIER DOUBLE_COLON id2= IDENTIFIER (lst+= method_member_name2_chld )* -> methodMemberName2(startId=$id1.text+\" \"+$id2.textlist=$lst))
            int alt440=2;
            int LA440_0 = input.LA(1);

            if ( (LA440_0==IDENTIFIER) ) {
                int LA440_1 = input.LA(2);

                if ( (LA440_1==DOUBLE_COLON) ) {
                    alt440=2;
                }
                else if ( (LA440_1==DOT||LA440_1==LT||LA440_1==OPEN_PARENS) ) {
                    alt440=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 440, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 440, 0, input);

                throw nvae;

            }
            switch (alt440) {
                case 1 :
                    // CSharp.g:3860:3: strtId= IDENTIFIER (lst+= method_member_name2_chld )*
                    {
                    strtId=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_method_member_name229904); if (state.failed) return retval;

                    // CSharp.g:3860:21: (lst+= method_member_name2_chld )*
                    loop438:
                    do {
                        int alt438=2;
                        alt438 = dfa438.predict(input);
                        switch (alt438) {
                    	case 1 :
                    	    // CSharp.g:3860:22: lst+= method_member_name2_chld
                    	    {
                    	    pushFollow(FOLLOW_method_member_name2_chld_in_method_member_name229909);
                    	    lst=method_member_name2_chld();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_lst==null) list_lst=new ArrayList();
                    	    list_lst.add(lst.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    break loop438;
                        }
                    } while (true);


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3861:3: -> methodMemberName2(startId=CSharpHelper.replaceJavaMethod(NamingUtil.toCamelCase($strtId.text))list=$lst)
                      {
                          retval.st = templateLib.getInstanceOf("methodMemberName2",new STAttrMap().put("startId", CSharpHelper.replaceJavaMethod(NamingUtil.toCamelCase((strtId!=null?strtId.getText():null)))).put("list", list_lst));
                      }


                    }

                    }
                    break;
                case 2 :
                    // CSharp.g:3862:5: id1= IDENTIFIER DOUBLE_COLON id2= IDENTIFIER (lst+= method_member_name2_chld )*
                    {
                    id1=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_method_member_name229933); if (state.failed) return retval;

                    match(input,DOUBLE_COLON,FOLLOW_DOUBLE_COLON_in_method_member_name229935); if (state.failed) return retval;

                    id2=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_method_member_name229939); if (state.failed) return retval;

                    // CSharp.g:3862:48: (lst+= method_member_name2_chld )*
                    loop439:
                    do {
                        int alt439=2;
                        alt439 = dfa439.predict(input);
                        switch (alt439) {
                    	case 1 :
                    	    // CSharp.g:3862:49: lst+= method_member_name2_chld
                    	    {
                    	    pushFollow(FOLLOW_method_member_name2_chld_in_method_member_name229944);
                    	    lst=method_member_name2_chld();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_lst==null) list_lst=new ArrayList();
                    	    list_lst.add(lst.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    break loop439;
                        }
                    } while (true);


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 3863:3: -> methodMemberName2(startId=$id1.text+\" \"+$id2.textlist=$lst)
                      {
                          retval.st = templateLib.getInstanceOf("methodMemberName2",new STAttrMap().put("startId", (id1!=null?id1.getText():null)+" "+(id2!=null?id2.getText():null)).put("list", list_lst));
                      }


                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_member_name2"


    public static class method_member_name2_chld_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_member_name2_chld"
    // CSharp.g:3866:1: method_member_name2_chld : tal= type_argument_list_opt DOT eId= IDENTIFIER -> methodMemberName2Chld(typArglst=talendId=CSharpHelper.replaceJavaMethod(NamingUtil.toCamelCase($eId.text)));
    public final CSharp.method_member_name2_chld_return method_member_name2_chld() throws RecognitionException {
        CSharp.method_member_name2_chld_return retval = new CSharp.method_member_name2_chld_return();
        retval.start = input.LT(1);


        Token eId=null;
        CSharp.type_argument_list_opt_return tal =null;


        try {
            // CSharp.g:3867:3: (tal= type_argument_list_opt DOT eId= IDENTIFIER -> methodMemberName2Chld(typArglst=talendId=CSharpHelper.replaceJavaMethod(NamingUtil.toCamelCase($eId.text))))
            // CSharp.g:3868:3: tal= type_argument_list_opt DOT eId= IDENTIFIER
            {
            pushFollow(FOLLOW_type_argument_list_opt_in_method_member_name2_chld29979);
            tal=type_argument_list_opt();

            state._fsp--;
            if (state.failed) return retval;

            match(input,DOT,FOLLOW_DOT_in_method_member_name2_chld29981); if (state.failed) return retval;

            eId=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_method_member_name2_chld29985); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3869:3: -> methodMemberName2Chld(typArglst=talendId=CSharpHelper.replaceJavaMethod(NamingUtil.toCamelCase($eId.text)))
              {
                  retval.st = templateLib.getInstanceOf("methodMemberName2Chld",new STAttrMap().put("typArglst", tal).put("endId", CSharpHelper.replaceJavaMethod(NamingUtil.toCamelCase((eId!=null?eId.getText():null)))));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_member_name2_chld"


    public static class operator_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_declaration2"
    // CSharp.g:3871:1: operator_declaration2 : OPERATOR ovlOptr= overloadable_operator OPEN_PARENS t= type id1= IDENTIFIER ( COMMA t2= type id2= IDENTIFIER )? CLOSE_PARENS bdy= operator_body -> operatorDeclaration2(firstOptr=$OPERATOR.textoverloadableOptr=ovlOptrtype=ttypeNam=$id1.texttype2=t2typeNam2=$id2.textOptrBody=bdy);
    public final CSharp.operator_declaration2_return operator_declaration2() throws RecognitionException {
        CSharp.operator_declaration2_return retval = new CSharp.operator_declaration2_return();
        retval.start = input.LT(1);


        Token id1=null;
        Token id2=null;
        Token OPERATOR441=null;
        CSharp.overloadable_operator_return ovlOptr =null;

        CSharp.type_return t =null;

        CSharp.type_return t2 =null;

        CSharp.operator_body_return bdy =null;


        try {
            // CSharp.g:3872:3: ( OPERATOR ovlOptr= overloadable_operator OPEN_PARENS t= type id1= IDENTIFIER ( COMMA t2= type id2= IDENTIFIER )? CLOSE_PARENS bdy= operator_body -> operatorDeclaration2(firstOptr=$OPERATOR.textoverloadableOptr=ovlOptrtype=ttypeNam=$id1.texttype2=t2typeNam2=$id2.textOptrBody=bdy))
            // CSharp.g:3873:3: OPERATOR ovlOptr= overloadable_operator OPEN_PARENS t= type id1= IDENTIFIER ( COMMA t2= type id2= IDENTIFIER )? CLOSE_PARENS bdy= operator_body
            {
            OPERATOR441=(Token)match(input,OPERATOR,FOLLOW_OPERATOR_in_operator_declaration230014); if (state.failed) return retval;

            pushFollow(FOLLOW_overloadable_operator_in_operator_declaration230018);
            ovlOptr=overloadable_operator();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_operator_declaration230020); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_operator_declaration230024);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            id1=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_operator_declaration230028); if (state.failed) return retval;

            // CSharp.g:3873:76: ( COMMA t2= type id2= IDENTIFIER )?
            int alt441=2;
            int LA441_0 = input.LA(1);

            if ( (LA441_0==COMMA) ) {
                alt441=1;
            }
            switch (alt441) {
                case 1 :
                    // CSharp.g:3873:77: COMMA t2= type id2= IDENTIFIER
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_operator_declaration230031); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_operator_declaration230035);
                    t2=type();

                    state._fsp--;
                    if (state.failed) return retval;

                    id2=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_operator_declaration230039); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_operator_declaration230043); if (state.failed) return retval;

            pushFollow(FOLLOW_operator_body_in_operator_declaration230047);
            bdy=operator_body();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3874:3: -> operatorDeclaration2(firstOptr=$OPERATOR.textoverloadableOptr=ovlOptrtype=ttypeNam=$id1.texttype2=t2typeNam2=$id2.textOptrBody=bdy)
              {
                  retval.st = templateLib.getInstanceOf("operatorDeclaration2",new STAttrMap().put("firstOptr", (OPERATOR441!=null?OPERATOR441.getText():null)).put("overloadableOptr", ovlOptr).put("type", t).put("typeNam", (id1!=null?id1.getText():null)).put("type2", t2).put("typeNam2", (id2!=null?id2.getText():null)).put("OptrBody", bdy));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_declaration2"


    public static class interface_method_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_method_declaration2"
    // CSharp.g:3876:1: interface_method_declaration2 : IDENTIFIER (parLst= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (clus= type_parameter_constraints_clauses )? SEMICOLON -> interfaceMethodDeclaration2(methodName=$IDENTIFIER.textparamList=parLstformlParLst=fplconstraintCls=clus);
    public final CSharp.interface_method_declaration2_return interface_method_declaration2() throws RecognitionException {
        CSharp.interface_method_declaration2_return retval = new CSharp.interface_method_declaration2_return();
        retval.start = input.LT(1);


        Token IDENTIFIER442=null;
        CSharp.type_parameter_list_return parLst =null;

        CSharp.formal_parameter_list_return fpl =null;

        CSharp.type_parameter_constraints_clauses_return clus =null;


        try {
            // CSharp.g:3877:3: ( IDENTIFIER (parLst= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (clus= type_parameter_constraints_clauses )? SEMICOLON -> interfaceMethodDeclaration2(methodName=$IDENTIFIER.textparamList=parLstformlParLst=fplconstraintCls=clus))
            // CSharp.g:3878:3: IDENTIFIER (parLst= type_parameter_list )? OPEN_PARENS (fpl= formal_parameter_list )? CLOSE_PARENS (clus= type_parameter_constraints_clauses )? SEMICOLON
            {
            IDENTIFIER442=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_method_declaration230096); if (state.failed) return retval;

            // CSharp.g:3878:14: (parLst= type_parameter_list )?
            int alt442=2;
            int LA442_0 = input.LA(1);

            if ( (LA442_0==LT) ) {
                alt442=1;
            }
            switch (alt442) {
                case 1 :
                    // CSharp.g:3878:15: parLst= type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_interface_method_declaration230101);
                    parLst=type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_interface_method_declaration230105); if (state.failed) return retval;

            // CSharp.g:3878:59: (fpl= formal_parameter_list )?
            int alt443=2;
            int LA443_0 = input.LA(1);

            if ( (LA443_0==BOOL||LA443_0==BYTE||LA443_0==CHAR||LA443_0==DECIMAL||LA443_0==DOUBLE||LA443_0==FLOAT||LA443_0==IDENTIFIER||LA443_0==INT||LA443_0==LONG||LA443_0==OBJECT||LA443_0==OPEN_BRACKET||LA443_0==OUT||LA443_0==PARAMS||LA443_0==REF||LA443_0==SBYTE||LA443_0==SHORT||LA443_0==STRING||LA443_0==THIS||(LA443_0 >= UINT && LA443_0 <= ULONG)||LA443_0==USHORT||LA443_0==VOID) ) {
                alt443=1;
            }
            switch (alt443) {
                case 1 :
                    // CSharp.g:3878:59: fpl= formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_interface_method_declaration230109);
                    fpl=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_interface_method_declaration230112); if (state.failed) return retval;

            // CSharp.g:3878:96: (clus= type_parameter_constraints_clauses )?
            int alt444=2;
            int LA444_0 = input.LA(1);

            if ( (LA444_0==IDENTIFIER) ) {
                alt444=1;
            }
            switch (alt444) {
                case 1 :
                    // CSharp.g:3878:97: clus= type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration230117);
                    clus=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_method_declaration230121); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3879:3: -> interfaceMethodDeclaration2(methodName=$IDENTIFIER.textparamList=parLstformlParLst=fplconstraintCls=clus)
              {
                  retval.st = templateLib.getInstanceOf("interfaceMethodDeclaration2",new STAttrMap().put("methodName", (IDENTIFIER442!=null?IDENTIFIER442.getText():null)).put("paramList", parLst).put("formlParLst", fpl).put("constraintCls", clus));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_method_declaration2"


    public static class interface_property_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_property_declaration2"
    // CSharp.g:3881:1: interface_property_declaration2 : IDENTIFIER OPEN_BRACE accrs= interface_accessors CLOSE_BRACE -> interfacePropertyDeclaration2(name=$IDENTIFIER.textaccessors=accrs);
    public final CSharp.interface_property_declaration2_return interface_property_declaration2() throws RecognitionException {
        CSharp.interface_property_declaration2_return retval = new CSharp.interface_property_declaration2_return();
        retval.start = input.LT(1);


        Token IDENTIFIER443=null;
        CSharp.interface_accessors_return accrs =null;


        try {
            // CSharp.g:3882:3: ( IDENTIFIER OPEN_BRACE accrs= interface_accessors CLOSE_BRACE -> interfacePropertyDeclaration2(name=$IDENTIFIER.textaccessors=accrs))
            // CSharp.g:3883:3: IDENTIFIER OPEN_BRACE accrs= interface_accessors CLOSE_BRACE
            {
            IDENTIFIER443=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_property_declaration230158); if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_property_declaration230160); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_accessors_in_interface_property_declaration230164);
            accrs=interface_accessors();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_property_declaration230166); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3884:3: -> interfacePropertyDeclaration2(name=$IDENTIFIER.textaccessors=accrs)
              {
                  retval.st = templateLib.getInstanceOf("interfacePropertyDeclaration2",new STAttrMap().put("name", (IDENTIFIER443!=null?IDENTIFIER443.getText():null)).put("accessors", accrs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_property_declaration2"


    public static class interface_event_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_event_declaration2"
    // CSharp.g:3886:1: interface_event_declaration2 : EVENT t= type IDENTIFIER SEMICOLON -> interfaceEventDeclaration2(type=teventName=$IDENTIFIER.text);
    public final CSharp.interface_event_declaration2_return interface_event_declaration2() throws RecognitionException {
        CSharp.interface_event_declaration2_return retval = new CSharp.interface_event_declaration2_return();
        retval.start = input.LT(1);


        Token IDENTIFIER444=null;
        CSharp.type_return t =null;


        try {
            // CSharp.g:3887:3: ( EVENT t= type IDENTIFIER SEMICOLON -> interfaceEventDeclaration2(type=teventName=$IDENTIFIER.text))
            // CSharp.g:3887:5: EVENT t= type IDENTIFIER SEMICOLON
            {
            match(input,EVENT,FOLLOW_EVENT_in_interface_event_declaration230192); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_interface_event_declaration230196);
            t=type();

            state._fsp--;
            if (state.failed) return retval;

            IDENTIFIER444=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_event_declaration230198); if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_event_declaration230200); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3888:3: -> interfaceEventDeclaration2(type=teventName=$IDENTIFIER.text)
              {
                  retval.st = templateLib.getInstanceOf("interfaceEventDeclaration2",new STAttrMap().put("type", t).put("eventName", (IDENTIFIER444!=null?IDENTIFIER444.getText():null)));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_event_declaration2"


    public static class interface_indexer_declaration2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_indexer_declaration2"
    // CSharp.g:3890:1: interface_indexer_declaration2 : THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE intAccs= interface_accessors CLOSE_BRACE -> interfaceIndexerDeclaration2(frmlParLst=fplaccessors=intAccs);
    public final CSharp.interface_indexer_declaration2_return interface_indexer_declaration2() throws RecognitionException {
        CSharp.interface_indexer_declaration2_return retval = new CSharp.interface_indexer_declaration2_return();
        retval.start = input.LT(1);


        CSharp.formal_parameter_list_return fpl =null;

        CSharp.interface_accessors_return intAccs =null;


        try {
            // CSharp.g:3891:3: ( THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE intAccs= interface_accessors CLOSE_BRACE -> interfaceIndexerDeclaration2(frmlParLst=fplaccessors=intAccs))
            // CSharp.g:3892:3: THIS OPEN_BRACKET fpl= formal_parameter_list CLOSE_BRACKET OPEN_BRACE intAccs= interface_accessors CLOSE_BRACE
            {
            match(input,THIS,FOLLOW_THIS_in_interface_indexer_declaration230229); if (state.failed) return retval;

            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_interface_indexer_declaration230231); if (state.failed) return retval;

            pushFollow(FOLLOW_formal_parameter_list_in_interface_indexer_declaration230235);
            fpl=formal_parameter_list();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_interface_indexer_declaration230237); if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_indexer_declaration230239); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_accessors_in_interface_indexer_declaration230243);
            intAccs=interface_accessors();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_indexer_declaration230245); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3893:3: -> interfaceIndexerDeclaration2(frmlParLst=fplaccessors=intAccs)
              {
                  retval.st = templateLib.getInstanceOf("interfaceIndexerDeclaration2",new STAttrMap().put("frmlParLst", fpl).put("accessors", intAccs));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_indexer_declaration2"


    public static class member_access2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_access2"
    // CSharp.g:3896:1: member_access2 : DOT id= IDENTIFIER tal= type_argument_list_opt -> memberAccess2(memName=CSharpHelper.replaceJavaMethod(NamingUtil.toCamelCase($id.text))argLst=tal);
    public final CSharp.member_access2_return member_access2() throws RecognitionException {
        CSharp.member_access2_return retval = new CSharp.member_access2_return();
        retval.start = input.LT(1);


        Token id=null;
        CSharp.type_argument_list_opt_return tal =null;


        try {
            // CSharp.g:3897:3: ( DOT id= IDENTIFIER tal= type_argument_list_opt -> memberAccess2(memName=CSharpHelper.replaceJavaMethod(NamingUtil.toCamelCase($id.text))argLst=tal))
            // CSharp.g:3898:3: DOT id= IDENTIFIER tal= type_argument_list_opt
            {
            match(input,DOT,FOLLOW_DOT_in_member_access230276); if (state.failed) return retval;

            id=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access230280); if (state.failed) return retval;

            pushFollow(FOLLOW_type_argument_list_opt_in_member_access230284);
            tal=type_argument_list_opt();

            state._fsp--;
            if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3899:3: -> memberAccess2(memName=CSharpHelper.replaceJavaMethod(NamingUtil.toCamelCase($id.text))argLst=tal)
              {
                  retval.st = templateLib.getInstanceOf("memberAccess2",new STAttrMap().put("memName", CSharpHelper.replaceJavaMethod(NamingUtil.toCamelCase((id!=null?id.getText():null)))).put("argLst", tal));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_access2"


    public static class method_invocation2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_invocation2"
    // CSharp.g:3901:1: method_invocation2 : OPEN_PARENS (al= argument_list )? CLOSE_PARENS -> methodInvocation2(argLst=al);
    public final CSharp.method_invocation2_return method_invocation2() throws RecognitionException {
        CSharp.method_invocation2_return retval = new CSharp.method_invocation2_return();
        retval.start = input.LT(1);


        CSharp.argument_list_return al =null;


        try {
            // CSharp.g:3902:3: ( OPEN_PARENS (al= argument_list )? CLOSE_PARENS -> methodInvocation2(argLst=al))
            // CSharp.g:3903:3: OPEN_PARENS (al= argument_list )? CLOSE_PARENS
            {
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_method_invocation230313); if (state.failed) return retval;

            // CSharp.g:3903:15: (al= argument_list )?
            int alt445=2;
            int LA445_0 = input.LA(1);

            if ( (LA445_0==AMP||(LA445_0 >= BANG && LA445_0 <= BASE)||LA445_0==BOOL||LA445_0==BYTE||(LA445_0 >= CHAR && LA445_0 <= CHECKED)||LA445_0==DECIMAL||(LA445_0 >= DEFAULT && LA445_0 <= DELEGATE)||LA445_0==DOUBLE||LA445_0==FALSE||LA445_0==FLOAT||LA445_0==IDENTIFIER||(LA445_0 >= INT && LA445_0 <= INTEGER_LITERAL)||LA445_0==LONG||LA445_0==MINUS||LA445_0==NEW||LA445_0==NULL||LA445_0==OBJECT||LA445_0==OPEN_PARENS||LA445_0==OP_DEC||LA445_0==OP_INC||LA445_0==OUT||LA445_0==PLUS||(LA445_0 >= REAL_LITERAL && LA445_0 <= REF)||LA445_0==SBYTE||LA445_0==SHORT||LA445_0==SIZEOF||LA445_0==STAR||(LA445_0 >= STRING && LA445_0 <= STRING_LITERAL)||LA445_0==THIS||(LA445_0 >= TILDE && LA445_0 <= TRUE)||LA445_0==TYPEOF||(LA445_0 >= UINT && LA445_0 <= UNCHECKED)||LA445_0==USHORT) ) {
                alt445=1;
            }
            switch (alt445) {
                case 1 :
                    // CSharp.g:3903:16: al= argument_list
                    {
                    pushFollow(FOLLOW_argument_list_in_method_invocation230318);
                    al=argument_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_method_invocation230322); if (state.failed) return retval;

            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3904:3: -> methodInvocation2(argLst=al)
              {
                  retval.st = templateLib.getInstanceOf("methodInvocation2",new STAttrMap().put("argLst", al));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_invocation2"


    public static class object_creation_expression2_return extends ParserRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "object_creation_expression2"
    // CSharp.g:3906:1: object_creation_expression2 : OPEN_PARENS (argLst= argument_list )? CLOSE_PARENS (ObjColcInit= object_or_collection_initializer )? -> objectCreationExpression2(argumentList=argLstinit=ObjColcInit);
    public final CSharp.object_creation_expression2_return object_creation_expression2() throws RecognitionException {
        CSharp.object_creation_expression2_return retval = new CSharp.object_creation_expression2_return();
        retval.start = input.LT(1);


        CSharp.argument_list_return argLst =null;

        CSharp.object_or_collection_initializer_return ObjColcInit =null;


        try {
            // CSharp.g:3907:3: ( OPEN_PARENS (argLst= argument_list )? CLOSE_PARENS (ObjColcInit= object_or_collection_initializer )? -> objectCreationExpression2(argumentList=argLstinit=ObjColcInit))
            // CSharp.g:3908:3: OPEN_PARENS (argLst= argument_list )? CLOSE_PARENS (ObjColcInit= object_or_collection_initializer )?
            {
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_object_creation_expression230347); if (state.failed) return retval;

            // CSharp.g:3908:15: (argLst= argument_list )?
            int alt446=2;
            int LA446_0 = input.LA(1);

            if ( (LA446_0==AMP||(LA446_0 >= BANG && LA446_0 <= BASE)||LA446_0==BOOL||LA446_0==BYTE||(LA446_0 >= CHAR && LA446_0 <= CHECKED)||LA446_0==DECIMAL||(LA446_0 >= DEFAULT && LA446_0 <= DELEGATE)||LA446_0==DOUBLE||LA446_0==FALSE||LA446_0==FLOAT||LA446_0==IDENTIFIER||(LA446_0 >= INT && LA446_0 <= INTEGER_LITERAL)||LA446_0==LONG||LA446_0==MINUS||LA446_0==NEW||LA446_0==NULL||LA446_0==OBJECT||LA446_0==OPEN_PARENS||LA446_0==OP_DEC||LA446_0==OP_INC||LA446_0==OUT||LA446_0==PLUS||(LA446_0 >= REAL_LITERAL && LA446_0 <= REF)||LA446_0==SBYTE||LA446_0==SHORT||LA446_0==SIZEOF||LA446_0==STAR||(LA446_0 >= STRING && LA446_0 <= STRING_LITERAL)||LA446_0==THIS||(LA446_0 >= TILDE && LA446_0 <= TRUE)||LA446_0==TYPEOF||(LA446_0 >= UINT && LA446_0 <= UNCHECKED)||LA446_0==USHORT) ) {
                alt446=1;
            }
            switch (alt446) {
                case 1 :
                    // CSharp.g:3908:16: argLst= argument_list
                    {
                    pushFollow(FOLLOW_argument_list_in_object_creation_expression230352);
                    argLst=argument_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_object_creation_expression230356); if (state.failed) return retval;

            // CSharp.g:3908:52: (ObjColcInit= object_or_collection_initializer )?
            int alt447=2;
            int LA447_0 = input.LA(1);

            if ( (LA447_0==OPEN_BRACE) ) {
                alt447=1;
            }
            switch (alt447) {
                case 1 :
                    // CSharp.g:3908:53: ObjColcInit= object_or_collection_initializer
                    {
                    pushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression230361);
                    ObjColcInit=object_or_collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 3909:3: -> objectCreationExpression2(argumentList=argLstinit=ObjColcInit)
              {
                  retval.st = templateLib.getInstanceOf("objectCreationExpression2",new STAttrMap().put("argumentList", argLst).put("init", ObjColcInit));
              }


            }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_creation_expression2"

    // $ANTLR start synpred1_CSharp
    public final void synpred1_CSharp_fragment() throws RecognitionException {
        // CSharp.g:123:4: ( type_argument_list )
        // CSharp.g:123:5: type_argument_list
        {
        pushFollow(FOLLOW_type_argument_list_in_synpred1_CSharp335);
        type_argument_list();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_CSharp

    // $ANTLR start synpred2_CSharp
    public final void synpred2_CSharp_fragment() throws RecognitionException {
        // CSharp.g:145:4: ( INTERR )
        // CSharp.g:145:5: INTERR
        {
        match(input,INTERR,FOLLOW_INTERR_in_synpred2_CSharp430); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_CSharp

    // $ANTLR start synpred3_CSharp
    public final void synpred3_CSharp_fragment() throws RecognitionException {
        // CSharp.g:146:6: ( rank_specifier )
        // CSharp.g:146:7: rank_specifier
        {
        pushFollow(FOLLOW_rank_specifier_in_synpred3_CSharp473);
        rank_specifier();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_CSharp

    // $ANTLR start synpred4_CSharp
    public final void synpred4_CSharp_fragment() throws RecognitionException {
        // CSharp.g:227:7: ( rank_specifier )
        // CSharp.g:227:8: rank_specifier
        {
        pushFollow(FOLLOW_rank_specifier_in_synpred4_CSharp1029);
        rank_specifier();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_CSharp

    // $ANTLR start synpred5_CSharp
    public final void synpred5_CSharp_fragment() throws RecognitionException {
        // CSharp.g:725:4: ( array_type OPEN_BRACKET )
        // CSharp.g:725:5: array_type OPEN_BRACKET
        {
        pushFollow(FOLLOW_array_type_in_synpred5_CSharp3445);
        array_type();

        state._fsp--;
        if (state.failed) return ;

        match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_synpred5_CSharp3447); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_CSharp

    // $ANTLR start synpred6_CSharp
    public final void synpred6_CSharp_fragment() throws RecognitionException {
        // CSharp.g:796:6: ( unbound_type_name )
        // CSharp.g:796:7: unbound_type_name
        {
        pushFollow(FOLLOW_unbound_type_name_in_synpred6_CSharp3816);
        unbound_type_name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_CSharp

    // $ANTLR start synpred7_CSharp
    public final void synpred7_CSharp_fragment() throws RecognitionException {
        // CSharp.g:855:3: ( scan_for_cast_generic_precedence | OPEN_PARENS predefined_type )
        int alt448=2;
        int LA448_0 = input.LA(1);

        if ( (LA448_0==OPEN_PARENS) ) {
            switch ( input.LA(2) ) {
            case SBYTE:
                {
                int LA448_2 = input.LA(3);

                if ( (LA448_2==CLOSE_PARENS||LA448_2==INTERR||LA448_2==OPEN_BRACKET||LA448_2==STAR) ) {
                    alt448=1;
                }
                else if ( (LA448_2==EOF) ) {
                    alt448=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 448, 2, input);

                    throw nvae;

                }
                }
                break;
            case BYTE:
                {
                int LA448_3 = input.LA(3);

                if ( (LA448_3==CLOSE_PARENS||LA448_3==INTERR||LA448_3==OPEN_BRACKET||LA448_3==STAR) ) {
                    alt448=1;
                }
                else if ( (LA448_3==EOF) ) {
                    alt448=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 448, 3, input);

                    throw nvae;

                }
                }
                break;
            case SHORT:
                {
                int LA448_4 = input.LA(3);

                if ( (LA448_4==CLOSE_PARENS||LA448_4==INTERR||LA448_4==OPEN_BRACKET||LA448_4==STAR) ) {
                    alt448=1;
                }
                else if ( (LA448_4==EOF) ) {
                    alt448=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 448, 4, input);

                    throw nvae;

                }
                }
                break;
            case USHORT:
                {
                int LA448_5 = input.LA(3);

                if ( (LA448_5==CLOSE_PARENS||LA448_5==INTERR||LA448_5==OPEN_BRACKET||LA448_5==STAR) ) {
                    alt448=1;
                }
                else if ( (LA448_5==EOF) ) {
                    alt448=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 448, 5, input);

                    throw nvae;

                }
                }
                break;
            case INT:
                {
                int LA448_6 = input.LA(3);

                if ( (LA448_6==CLOSE_PARENS||LA448_6==INTERR||LA448_6==OPEN_BRACKET||LA448_6==STAR) ) {
                    alt448=1;
                }
                else if ( (LA448_6==EOF) ) {
                    alt448=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 448, 6, input);

                    throw nvae;

                }
                }
                break;
            case UINT:
                {
                int LA448_7 = input.LA(3);

                if ( (LA448_7==CLOSE_PARENS||LA448_7==INTERR||LA448_7==OPEN_BRACKET||LA448_7==STAR) ) {
                    alt448=1;
                }
                else if ( (LA448_7==EOF) ) {
                    alt448=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 448, 7, input);

                    throw nvae;

                }
                }
                break;
            case LONG:
                {
                int LA448_8 = input.LA(3);

                if ( (LA448_8==CLOSE_PARENS||LA448_8==INTERR||LA448_8==OPEN_BRACKET||LA448_8==STAR) ) {
                    alt448=1;
                }
                else if ( (LA448_8==EOF) ) {
                    alt448=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 448, 8, input);

                    throw nvae;

                }
                }
                break;
            case ULONG:
                {
                int LA448_9 = input.LA(3);

                if ( (LA448_9==CLOSE_PARENS||LA448_9==INTERR||LA448_9==OPEN_BRACKET||LA448_9==STAR) ) {
                    alt448=1;
                }
                else if ( (LA448_9==EOF) ) {
                    alt448=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 448, 9, input);

                    throw nvae;

                }
                }
                break;
            case CHAR:
                {
                int LA448_10 = input.LA(3);

                if ( (LA448_10==CLOSE_PARENS||LA448_10==INTERR||LA448_10==OPEN_BRACKET||LA448_10==STAR) ) {
                    alt448=1;
                }
                else if ( (LA448_10==EOF) ) {
                    alt448=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 448, 10, input);

                    throw nvae;

                }
                }
                break;
            case FLOAT:
                {
                int LA448_11 = input.LA(3);

                if ( (LA448_11==CLOSE_PARENS||LA448_11==INTERR||LA448_11==OPEN_BRACKET||LA448_11==STAR) ) {
                    alt448=1;
                }
                else if ( (LA448_11==EOF) ) {
                    alt448=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 448, 11, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE:
                {
                int LA448_12 = input.LA(3);

                if ( (LA448_12==CLOSE_PARENS||LA448_12==INTERR||LA448_12==OPEN_BRACKET||LA448_12==STAR) ) {
                    alt448=1;
                }
                else if ( (LA448_12==EOF) ) {
                    alt448=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 448, 12, input);

                    throw nvae;

                }
                }
                break;
            case DECIMAL:
                {
                int LA448_13 = input.LA(3);

                if ( (LA448_13==CLOSE_PARENS||LA448_13==INTERR||LA448_13==OPEN_BRACKET||LA448_13==STAR) ) {
                    alt448=1;
                }
                else if ( (LA448_13==EOF) ) {
                    alt448=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 448, 13, input);

                    throw nvae;

                }
                }
                break;
            case BOOL:
                {
                int LA448_14 = input.LA(3);

                if ( (LA448_14==CLOSE_PARENS||LA448_14==INTERR||LA448_14==OPEN_BRACKET||LA448_14==STAR) ) {
                    alt448=1;
                }
                else if ( (LA448_14==EOF) ) {
                    alt448=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 448, 14, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
            case VOID:
                {
                alt448=1;
                }
                break;
            case OBJECT:
                {
                int LA448_16 = input.LA(3);

                if ( (LA448_16==CLOSE_PARENS||LA448_16==INTERR||LA448_16==OPEN_BRACKET||LA448_16==STAR) ) {
                    alt448=1;
                }
                else if ( (LA448_16==EOF) ) {
                    alt448=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 448, 16, input);

                    throw nvae;

                }
                }
                break;
            case STRING:
                {
                int LA448_17 = input.LA(3);

                if ( (LA448_17==CLOSE_PARENS||LA448_17==INTERR||LA448_17==OPEN_BRACKET||LA448_17==STAR) ) {
                    alt448=1;
                }
                else if ( (LA448_17==EOF) ) {
                    alt448=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 448, 17, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 448, 1, input);

                throw nvae;

            }

        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 448, 0, input);

            throw nvae;

        }
        switch (alt448) {
            case 1 :
                // CSharp.g:855:4: scan_for_cast_generic_precedence
                {
                pushFollow(FOLLOW_scan_for_cast_generic_precedence_in_synpred7_CSharp4104);
                scan_for_cast_generic_precedence();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // CSharp.g:855:39: OPEN_PARENS predefined_type
                {
                match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_synpred7_CSharp4108); if (state.failed) return ;

                pushFollow(FOLLOW_predefined_type_in_synpred7_CSharp4110);
                predefined_type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
    }
    // $ANTLR end synpred7_CSharp

    // $ANTLR start synpred8_CSharp
    public final void synpred8_CSharp_fragment() throws RecognitionException {
        // CSharp.g:1071:33: ( INTERR is_disambiguation_token )
        // CSharp.g:1071:34: INTERR is_disambiguation_token
        {
        match(input,INTERR,FOLLOW_INTERR_in_synpred8_CSharp7373); if (state.failed) return ;

        pushFollow(FOLLOW_is_disambiguation_token_in_synpred8_CSharp7375);
        is_disambiguation_token();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_CSharp

    // $ANTLR start synpred9_CSharp
    public final void synpred9_CSharp_fragment() throws RecognitionException {
        // CSharp.g:1272:34: ( type IDENTIFIER IN )
        // CSharp.g:1272:35: type IDENTIFIER IN
        {
        pushFollow(FOLLOW_type_in_synpred9_CSharp8677);
        type();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred9_CSharp8679); if (state.failed) return ;

        match(input,IN,FOLLOW_IN_in_synpred9_CSharp8681); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_CSharp

    // $ANTLR start synpred10_CSharp
    public final void synpred10_CSharp_fragment() throws RecognitionException {
        // CSharp.g:1282:72: ( into_contextual_keyword )
        // CSharp.g:1282:73: into_contextual_keyword
        {
        pushFollow(FOLLOW_into_contextual_keyword_in_synpred10_CSharp8751);
        into_contextual_keyword();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_CSharp

    // $ANTLR start synpred11_CSharp
    public final void synpred11_CSharp_fragment() throws RecognitionException {
        // CSharp.g:1429:2: ( assignment )
        // CSharp.g:1429:3: assignment
        {
        pushFollow(FOLLOW_assignment_in_synpred11_CSharp9776);
        assignment();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_CSharp

    // $ANTLR start synpred12_CSharp
    public final void synpred12_CSharp_fragment() throws RecognitionException {
        // CSharp.g:1436:3: ( lambda_expression )
        // CSharp.g:1436:4: lambda_expression
        {
        pushFollow(FOLLOW_lambda_expression_in_synpred12_CSharp9821);
        lambda_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_CSharp

    // $ANTLR start synpred13_CSharp
    public final void synpred13_CSharp_fragment() throws RecognitionException {
        // CSharp.g:1438:5: ( query_expression )
        // CSharp.g:1438:6: query_expression
        {
        pushFollow(FOLLOW_query_expression_in_synpred13_CSharp9845);
        query_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_CSharp

    // $ANTLR start synpred14_CSharp
    public final void synpred14_CSharp_fragment() throws RecognitionException {
        // CSharp.g:1458:3: ( labeled_statement )
        // CSharp.g:1458:4: labeled_statement
        {
        pushFollow(FOLLOW_labeled_statement_in_synpred14_CSharp9945);
        labeled_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_CSharp

    // $ANTLR start synpred15_CSharp
    public final void synpred15_CSharp_fragment() throws RecognitionException {
        // CSharp.g:1460:5: ( declaration_statement )
        // CSharp.g:1460:6: declaration_statement
        {
        pushFollow(FOLLOW_declaration_statement_in_synpred15_CSharp9969);
        declaration_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_CSharp

    // $ANTLR start synpred16_CSharp
    public final void synpred16_CSharp_fragment() throws RecognitionException {
        // CSharp.g:1622:87: ( ELSE )
        // CSharp.g:1622:88: ELSE
        {
        match(input,ELSE,FOLLOW_ELSE_in_synpred16_CSharp10832); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_CSharp

    // $ANTLR start synpred17_CSharp
    public final void synpred17_CSharp_fragment() throws RecognitionException {
        // CSharp.g:1678:2: ( local_variable_declaration )
        // CSharp.g:1678:3: local_variable_declaration
        {
        pushFollow(FOLLOW_local_variable_declaration_in_synpred17_CSharp11303);
        local_variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_CSharp

    // $ANTLR start synpred18_CSharp
    public final void synpred18_CSharp_fragment() throws RecognitionException {
        // CSharp.g:1823:2: ( local_variable_declaration )
        // CSharp.g:1823:3: local_variable_declaration
        {
        pushFollow(FOLLOW_local_variable_declaration_in_synpred18_CSharp12214);
        local_variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_CSharp

    // $ANTLR start synpred19_CSharp
    public final void synpred19_CSharp_fragment() throws RecognitionException {
        // CSharp.g:1845:8: ( global_attribute_section )
        // CSharp.g:1845:9: global_attribute_section
        {
        pushFollow(FOLLOW_global_attribute_section_in_synpred19_CSharp12316);
        global_attribute_section();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred19_CSharp

    // $ANTLR start synpred20_CSharp
    public final void synpred20_CSharp_fragment() throws RecognitionException {
        // CSharp.g:2198:5: ( interface_type DOT THIS )
        // CSharp.g:2198:6: interface_type DOT THIS
        {
        pushFollow(FOLLOW_interface_type_in_synpred20_CSharp14876);
        interface_type();

        state._fsp--;
        if (state.failed) return ;

        match(input,DOT,FOLLOW_DOT_in_synpred20_CSharp14878); if (state.failed) return ;

        match(input,THIS,FOLLOW_THIS_in_synpred20_CSharp14880); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_CSharp

    // $ANTLR start synpred21_CSharp
    public final void synpred21_CSharp_fragment() throws RecognitionException {
        // CSharp.g:2200:7: ( member_name ( type_parameter_list )? OPEN_PARENS )
        // CSharp.g:2200:8: member_name ( type_parameter_list )? OPEN_PARENS
        {
        pushFollow(FOLLOW_member_name_in_synpred21_CSharp14912);
        member_name();

        state._fsp--;
        if (state.failed) return ;

        // CSharp.g:2200:20: ( type_parameter_list )?
        int alt449=2;
        int LA449_0 = input.LA(1);

        if ( (LA449_0==LT) ) {
            alt449=1;
        }
        switch (alt449) {
            case 1 :
                // CSharp.g:2200:20: type_parameter_list
                {
                pushFollow(FOLLOW_type_parameter_list_in_synpred21_CSharp14914);
                type_parameter_list();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_synpred21_CSharp14917); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_CSharp

    // $ANTLR start synpred22_CSharp
    public final void synpred22_CSharp_fragment() throws RecognitionException {
        // CSharp.g:2202:7: ( member_name OPEN_BRACE )
        // CSharp.g:2202:8: member_name OPEN_BRACE
        {
        pushFollow(FOLLOW_member_name_in_synpred22_CSharp14945);
        member_name();

        state._fsp--;
        if (state.failed) return ;

        match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_synpred22_CSharp14947); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_CSharp

    // $ANTLR start synpred23_CSharp
    public final void synpred23_CSharp_fragment() throws RecognitionException {
        // CSharp.g:2370:3: ( ( attributes )? PARAMS )
        // CSharp.g:2370:4: ( attributes )? PARAMS
        {
        // CSharp.g:2370:4: ( attributes )?
        int alt450=2;
        int LA450_0 = input.LA(1);

        if ( (LA450_0==OPEN_BRACKET) ) {
            alt450=1;
        }
        switch (alt450) {
            case 1 :
                // CSharp.g:2370:4: attributes
                {
                pushFollow(FOLLOW_attributes_in_synpred23_CSharp15975);
                attributes();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,PARAMS,FOLLOW_PARAMS_in_synpred23_CSharp15978); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_CSharp

    // $ANTLR start synpred26_CSharp
    public final void synpred26_CSharp_fragment() throws RecognitionException {
        // CSharp.g:2610:3: ( unary_operator_declarator )
        // CSharp.g:2610:4: unary_operator_declarator
        {
        pushFollow(FOLLOW_unary_operator_declarator_in_synpred26_CSharp18939);
        unary_operator_declarator();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred26_CSharp

    // $ANTLR start synpred27_CSharp
    public final void synpred27_CSharp_fragment() throws RecognitionException {
        // CSharp.g:3474:3: ( AMP )
        // CSharp.g:3474:4: AMP
        {
        match(input,AMP,FOLLOW_AMP_in_synpred27_CSharp25971); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_CSharp

    // Delegated rules

    public final boolean synpred12_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_CSharp() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_CSharp_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA4 dfa4 = new DFA4(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA303 dfa303 = new DFA303(this);
    protected DFA438 dfa438 = new DFA438(this);
    protected DFA439 dfa439 = new DFA439(this);
    static final String DFA4_eotS =
        "\104\uffff";
    static final String DFA4_eofS =
        "\1\2\103\uffff";
    static final String DFA4_minS =
        "\1\5\1\0\102\uffff";
    static final String DFA4_maxS =
        "\1\u00db\1\0\102\uffff";
    static final String DFA4_acceptS =
        "\2\uffff\1\2\100\uffff\1\1";
    static final String DFA4_specialS =
        "\1\uffff\1\0\102\uffff}>";
    static final String[] DFA4_transitionS = {
            "\3\2\5\uffff\2\2\1\uffff\2\2\2\uffff\1\2\3\uffff\5\2\6\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\2\2\22\uffff\1\2\7\uffff\1\2\4\uffff"+
            "\1\2\3\uffff\1\2\3\uffff\2\2\7\uffff\1\2\1\1\3\uffff\1\2\7\uffff"+
            "\31\2\3\uffff\2\2\42\uffff\1\2\1\uffff\1\2\1\uffff\3\2\2\uffff"+
            "\1\2\1\uffff\1\2\12\uffff\1\2\6\uffff\2\2\16\uffff\1\2\3\uffff"+
            "\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "121:1: type_argument_list_opt : ( ( ( type_argument_list )=>tal= type_argument_list ) -> typeArgumentListOpt(argList=tal)| -> typeArgumentListOpt(argList=null));";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CSharp()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index4_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA15_eotS =
        "\10\uffff";
    static final String DFA15_eofS =
        "\4\uffff\1\6\3\uffff";
    static final String DFA15_minS =
        "\2\124\2\31\1\124\1\31\2\uffff";
    static final String DFA15_maxS =
        "\2\u00b3\2\34\1\u00b3\1\34\2\uffff";
    static final String DFA15_acceptS =
        "\6\uffff\1\2\1\1";
    static final String DFA15_specialS =
        "\10\uffff}>";
    static final String[] DFA15_transitionS = {
            "\1\1\27\uffff\1\2\106\uffff\1\1",
            "\1\1\27\uffff\1\2\106\uffff\1\1",
            "\1\4\2\uffff\1\3",
            "\1\4\2\uffff\1\5",
            "\1\7\27\uffff\1\7\106\uffff\1\7",
            "\1\4\2\uffff\1\5",
            "",
            ""
    };

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "()* loopback of 249:5: ( ( STAR | INTERR )* rank_specifier )*";
        }
    }
    static final String DFA53_eotS =
        "\33\uffff";
    static final String DFA53_eofS =
        "\33\uffff";
    static final String DFA53_minS =
        "\1\16\1\32\1\uffff\1\32\1\114\1\16\1\114\1\0\1\uffff\1\32\2\uffff"+
        "\1\32\1\16\1\114\1\0\1\16\1\0\2\uffff\1\32\2\uffff\1\16\1\0\2\uffff";
    static final String DFA53_maxS =
        "\1\u00db\1\u00b3\1\uffff\1\u00b3\1\114\1\u00db\1\114\1\0\1\uffff"+
        "\1\u00b3\2\uffff\1\u00b3\1\u00db\1\114\1\0\1\u00db\1\0\2\uffff\1"+
        "\u00b3\2\uffff\1\u00db\1\0\2\uffff";
    static final String DFA53_acceptS =
        "\2\uffff\1\2\5\uffff\1\3\1\uffff\2\1\6\uffff\2\1\1\uffff\2\1\2\uffff"+
        "\2\1";
    static final String DFA53_specialS =
        "\5\uffff\1\1\1\uffff\1\0\5\uffff\1\2\1\uffff\1\5\1\3\1\6\5\uffff"+
        "\1\4\1\7\2\uffff}>";
    static final String[] DFA53_transitionS = {
            "\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\10\uffff\1\2\22\uffff"+
            "\1\2\14\uffff\1\1\3\uffff\1\2\14\uffff\1\2\14\uffff\1\2\77\uffff"+
            "\1\2\3\uffff\1\2\6\uffff\1\2\21\uffff\2\2\16\uffff\1\2\3\uffff"+
            "\1\3",
            "\1\7\20\uffff\1\6\3\uffff\1\4\44\uffff\1\2\11\uffff\1\5\15"+
            "\uffff\1\2\106\uffff\1\2",
            "",
            "\1\10\u0098\uffff\1\2",
            "\1\11",
            "\1\2\1\uffff\1\2\3\uffff\1\2\7\uffff\1\12\6\uffff\1\2\10\uffff"+
            "\1\2\22\uffff\1\2\7\uffff\1\13\4\uffff\1\2\3\uffff\1\2\14\uffff"+
            "\1\2\14\uffff\1\2\77\uffff\1\2\3\uffff\1\2\6\uffff\1\2\21\uffff"+
            "\2\2\16\uffff\1\2\3\uffff\1\2",
            "\1\14",
            "\1\uffff",
            "",
            "\1\17\20\uffff\1\16\50\uffff\1\2\11\uffff\1\15\15\uffff\1\2"+
            "\106\uffff\1\2",
            "",
            "",
            "\1\21\20\uffff\1\6\50\uffff\1\2\11\uffff\1\20\15\uffff\1\2"+
            "\106\uffff\1\2",
            "\1\2\1\uffff\1\2\3\uffff\1\2\7\uffff\1\22\6\uffff\1\2\10\uffff"+
            "\1\2\22\uffff\1\2\7\uffff\1\23\4\uffff\1\2\3\uffff\1\2\14\uffff"+
            "\1\2\14\uffff\1\2\77\uffff\1\2\3\uffff\1\2\6\uffff\1\2\21\uffff"+
            "\2\2\16\uffff\1\2\3\uffff\1\2",
            "\1\24",
            "\1\uffff",
            "\1\2\1\uffff\1\2\3\uffff\1\2\7\uffff\1\25\6\uffff\1\2\10\uffff"+
            "\1\2\22\uffff\1\2\7\uffff\1\26\4\uffff\1\2\3\uffff\1\2\14\uffff"+
            "\1\2\14\uffff\1\2\77\uffff\1\2\3\uffff\1\2\6\uffff\1\2\21\uffff"+
            "\2\2\16\uffff\1\2\3\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "\1\30\20\uffff\1\16\50\uffff\1\2\11\uffff\1\27\15\uffff\1\2"+
            "\106\uffff\1\2",
            "",
            "",
            "\1\2\1\uffff\1\2\3\uffff\1\2\7\uffff\1\31\6\uffff\1\2\10\uffff"+
            "\1\2\22\uffff\1\2\7\uffff\1\32\4\uffff\1\2\3\uffff\1\2\14\uffff"+
            "\1\2\14\uffff\1\2\77\uffff\1\2\3\uffff\1\2\6\uffff\1\2\21\uffff"+
            "\2\2\16\uffff\1\2\3\uffff\1\2",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA53_eot = DFA.unpackEncodedString(DFA53_eotS);
    static final short[] DFA53_eof = DFA.unpackEncodedString(DFA53_eofS);
    static final char[] DFA53_min = DFA.unpackEncodedStringToUnsignedChars(DFA53_minS);
    static final char[] DFA53_max = DFA.unpackEncodedStringToUnsignedChars(DFA53_maxS);
    static final short[] DFA53_accept = DFA.unpackEncodedString(DFA53_acceptS);
    static final short[] DFA53_special = DFA.unpackEncodedString(DFA53_specialS);
    static final short[][] DFA53_transition;

    static {
        int numStates = DFA53_transitionS.length;
        DFA53_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA53_transition[i] = DFA.unpackEncodedString(DFA53_transitionS[i]);
        }
    }

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;
        }
        public String getDescription() {
            return "796:4: ( ( unbound_type_name )=> (unboundtyp= unbound_type_name ) CLOSE_PARENS -> typeofexpression(unboundtype=unboundtyp)| type CLOSE_PARENS | VOID CLOSE_PARENS )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA53_7 = input.LA(1);

                         
                        int index53_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_CSharp()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index53_7);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA53_5 = input.LA(1);

                         
                        int index53_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA53_5==COMMA) && (synpred6_CSharp())) {s = 10;}

                        else if ( (LA53_5==GT) && (synpred6_CSharp())) {s = 11;}

                        else if ( (LA53_5==BOOL||LA53_5==BYTE||LA53_5==CHAR||LA53_5==DECIMAL||LA53_5==DOUBLE||LA53_5==FLOAT||LA53_5==IDENTIFIER||LA53_5==INT||LA53_5==LONG||LA53_5==OBJECT||LA53_5==SBYTE||LA53_5==SHORT||LA53_5==STRING||(LA53_5 >= UINT && LA53_5 <= ULONG)||LA53_5==USHORT||LA53_5==VOID) ) {s = 2;}

                         
                        input.seek(index53_5);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA53_13 = input.LA(1);

                         
                        int index53_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA53_13==COMMA) && (synpred6_CSharp())) {s = 18;}

                        else if ( (LA53_13==GT) && (synpred6_CSharp())) {s = 19;}

                        else if ( (LA53_13==BOOL||LA53_13==BYTE||LA53_13==CHAR||LA53_13==DECIMAL||LA53_13==DOUBLE||LA53_13==FLOAT||LA53_13==IDENTIFIER||LA53_13==INT||LA53_13==LONG||LA53_13==OBJECT||LA53_13==SBYTE||LA53_13==SHORT||LA53_13==STRING||(LA53_13 >= UINT && LA53_13 <= ULONG)||LA53_13==USHORT||LA53_13==VOID) ) {s = 2;}

                         
                        input.seek(index53_13);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA53_16 = input.LA(1);

                         
                        int index53_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA53_16==COMMA) && (synpred6_CSharp())) {s = 21;}

                        else if ( (LA53_16==GT) && (synpred6_CSharp())) {s = 22;}

                        else if ( (LA53_16==BOOL||LA53_16==BYTE||LA53_16==CHAR||LA53_16==DECIMAL||LA53_16==DOUBLE||LA53_16==FLOAT||LA53_16==IDENTIFIER||LA53_16==INT||LA53_16==LONG||LA53_16==OBJECT||LA53_16==SBYTE||LA53_16==SHORT||LA53_16==STRING||(LA53_16 >= UINT && LA53_16 <= ULONG)||LA53_16==USHORT||LA53_16==VOID) ) {s = 2;}

                         
                        input.seek(index53_16);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA53_23 = input.LA(1);

                         
                        int index53_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA53_23==COMMA) && (synpred6_CSharp())) {s = 25;}

                        else if ( (LA53_23==GT) && (synpred6_CSharp())) {s = 26;}

                        else if ( (LA53_23==BOOL||LA53_23==BYTE||LA53_23==CHAR||LA53_23==DECIMAL||LA53_23==DOUBLE||LA53_23==FLOAT||LA53_23==IDENTIFIER||LA53_23==INT||LA53_23==LONG||LA53_23==OBJECT||LA53_23==SBYTE||LA53_23==SHORT||LA53_23==STRING||(LA53_23 >= UINT && LA53_23 <= ULONG)||LA53_23==USHORT||LA53_23==VOID) ) {s = 2;}

                         
                        input.seek(index53_23);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA53_15 = input.LA(1);

                         
                        int index53_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_CSharp()) ) {s = 19;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index53_15);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA53_17 = input.LA(1);

                         
                        int index53_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_CSharp()) ) {s = 22;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index53_17);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA53_24 = input.LA(1);

                         
                        int index53_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_CSharp()) ) {s = 26;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index53_24);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 53, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA112_eotS =
        "\77\uffff";
    static final String DFA112_eofS =
        "\77\uffff";
    static final String DFA112_minS =
        "\1\5\20\0\56\uffff";
    static final String DFA112_maxS =
        "\1\u00df\20\0\56\uffff";
    static final String DFA112_acceptS =
        "\21\uffff\2\2\1\3\52\uffff\1\1";
    static final String DFA112_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1"+
        "\16\1\17\1\20\56\uffff}>";
    static final String[] DFA112_transitionS = {
            "\1\23\5\uffff\2\23\1\uffff\1\16\1\23\1\3\3\uffff\1\12\2\23\6"+
            "\uffff\1\22\1\23\4\uffff\1\15\1\uffff\2\23\3\uffff\1\23\1\uffff"+
            "\1\14\17\uffff\1\23\1\uffff\1\23\1\13\2\23\4\uffff\1\23\5\uffff"+
            "\1\1\1\23\2\uffff\1\6\1\23\12\uffff\1\23\1\10\4\uffff\1\23\1"+
            "\uffff\1\23\2\uffff\1\23\2\uffff\1\17\1\23\1\uffff\1\23\5\uffff"+
            "\1\23\3\uffff\1\23\17\uffff\1\23\34\uffff\1\23\1\uffff\1\23"+
            "\3\uffff\1\2\1\uffff\1\23\1\uffff\1\4\2\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\1\20\1\23\1\uffff\1\23\7\uffff\6\23\1\uffff\1\7"+
            "\1\11\1\23\14\uffff\1\23\1\5\1\23\2\uffff\1\21\3\uffff\1\23",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "1456:1: statement : ( ( ( labeled_statement )=>lblStmt= labeled_statement ) -> statement(stmt=lblStmt)| ( ( declaration_statement )=>decStmt= declaration_statement ) -> statement(stmt=decStmt)|embdStmt= embedded_statement -> statement(stmt=embdStmt));";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA112_0 = input.LA(1);

                         
                        int index112_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA112_0==IDENTIFIER) ) {s = 1;}

                        else if ( (LA112_0==SBYTE) ) {s = 2;}

                        else if ( (LA112_0==BYTE) ) {s = 3;}

                        else if ( (LA112_0==SHORT) ) {s = 4;}

                        else if ( (LA112_0==USHORT) ) {s = 5;}

                        else if ( (LA112_0==INT) ) {s = 6;}

                        else if ( (LA112_0==UINT) ) {s = 7;}

                        else if ( (LA112_0==LONG) ) {s = 8;}

                        else if ( (LA112_0==ULONG) ) {s = 9;}

                        else if ( (LA112_0==CHAR) ) {s = 10;}

                        else if ( (LA112_0==FLOAT) ) {s = 11;}

                        else if ( (LA112_0==DOUBLE) ) {s = 12;}

                        else if ( (LA112_0==DECIMAL) ) {s = 13;}

                        else if ( (LA112_0==BOOL) ) {s = 14;}

                        else if ( (LA112_0==OBJECT) ) {s = 15;}

                        else if ( (LA112_0==STRING) ) {s = 16;}

                        else if ( (LA112_0==VOID) && (synpred15_CSharp())) {s = 17;}

                        else if ( (LA112_0==CONST) && (synpred15_CSharp())) {s = 18;}

                        else if ( (LA112_0==AMP||(LA112_0 >= BANG && LA112_0 <= BASE)||LA112_0==BREAK||(LA112_0 >= CHARACTER_LITERAL && LA112_0 <= CHECKED)||LA112_0==CONTINUE||(LA112_0 >= DEFAULT && LA112_0 <= DELEGATE)||LA112_0==DO||LA112_0==FALSE||LA112_0==FIXED||(LA112_0 >= FOR && LA112_0 <= FOREACH)||LA112_0==GOTO||LA112_0==IF||LA112_0==INTEGER_LITERAL||LA112_0==LOCK||LA112_0==MINUS||LA112_0==NEW||LA112_0==NULL||LA112_0==OPEN_BRACE||LA112_0==OPEN_PARENS||LA112_0==OP_DEC||LA112_0==OP_INC||LA112_0==PLUS||LA112_0==REAL_LITERAL||LA112_0==RETURN||LA112_0==SEMICOLON||LA112_0==SIZEOF||LA112_0==STAR||LA112_0==STRING_LITERAL||LA112_0==SWITCH||(LA112_0 >= THIS && LA112_0 <= TYPEOF)||LA112_0==UNCHECKED||LA112_0==UNSAFE||LA112_0==USING||LA112_0==WHILE) ) {s = 19;}

                         
                        input.seek(index112_0);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA112_1 = input.LA(1);

                         
                        int index112_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_CSharp()) ) {s = 62;}

                        else if ( (synpred15_CSharp()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index112_1);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA112_2 = input.LA(1);

                         
                        int index112_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_CSharp()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index112_2);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA112_3 = input.LA(1);

                         
                        int index112_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_CSharp()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index112_3);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA112_4 = input.LA(1);

                         
                        int index112_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_CSharp()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index112_4);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA112_5 = input.LA(1);

                         
                        int index112_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_CSharp()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index112_5);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA112_6 = input.LA(1);

                         
                        int index112_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_CSharp()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index112_6);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA112_7 = input.LA(1);

                         
                        int index112_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_CSharp()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index112_7);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA112_8 = input.LA(1);

                         
                        int index112_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_CSharp()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index112_8);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA112_9 = input.LA(1);

                         
                        int index112_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_CSharp()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index112_9);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA112_10 = input.LA(1);

                         
                        int index112_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_CSharp()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index112_10);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA112_11 = input.LA(1);

                         
                        int index112_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_CSharp()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index112_11);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA112_12 = input.LA(1);

                         
                        int index112_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_CSharp()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index112_12);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA112_13 = input.LA(1);

                         
                        int index112_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_CSharp()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index112_13);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA112_14 = input.LA(1);

                         
                        int index112_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_CSharp()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index112_14);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA112_15 = input.LA(1);

                         
                        int index112_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_CSharp()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index112_15);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA112_16 = input.LA(1);

                         
                        int index112_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_CSharp()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index112_16);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA303_eotS =
        "\7\uffff";
    static final String DFA303_eofS =
        "\7\uffff";
    static final String DFA303_minS =
        "\1\124\1\uffff\1\31\1\uffff\1\31\1\uffff\1\31";
    static final String DFA303_maxS =
        "\1\u00b3\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34";
    static final String DFA303_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\uffff\1\1\1\uffff";
    static final String DFA303_specialS =
        "\7\uffff}>";
    static final String[] DFA303_transitionS = {
            "\1\3\27\uffff\1\2\106\uffff\1\1",
            "",
            "\1\5\2\uffff\1\4",
            "",
            "\1\5\2\uffff\1\6",
            "",
            "\1\5\2\uffff\1\6"
    };

    static final short[] DFA303_eot = DFA.unpackEncodedString(DFA303_eotS);
    static final short[] DFA303_eof = DFA.unpackEncodedString(DFA303_eofS);
    static final char[] DFA303_min = DFA.unpackEncodedStringToUnsignedChars(DFA303_minS);
    static final char[] DFA303_max = DFA.unpackEncodedStringToUnsignedChars(DFA303_maxS);
    static final short[] DFA303_accept = DFA.unpackEncodedString(DFA303_acceptS);
    static final short[] DFA303_special = DFA.unpackEncodedString(DFA303_specialS);
    static final short[][] DFA303_transition;

    static {
        int numStates = DFA303_transitionS.length;
        DFA303_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA303_transition[i] = DFA.unpackEncodedString(DFA303_transitionS[i]);
        }
    }

    class DFA303 extends DFA {

        public DFA303(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 303;
            this.eot = DFA303_eot;
            this.eof = DFA303_eof;
            this.min = DFA303_min;
            this.max = DFA303_max;
            this.accept = DFA303_accept;
            this.special = DFA303_special;
            this.transition = DFA303_transition;
        }
        public String getDescription() {
            return "2852:1: array_type_Chld : ( (st+= STAR )* rs= rank_specifier -> arrayTypeChld(symbolLst=$strnkSpcr=rs)| (intr+= INTERR )* rns= rank_specifier -> arrayTypeChld(symbolLst=\"?\"rnkSpcr=rns));";
        }
    }
    static final String DFA438_eotS =
        "\10\uffff";
    static final String DFA438_eofS =
        "\10\uffff";
    static final String DFA438_minS =
        "\1\53\1\16\2\uffff\1\34\1\16\1\53\1\34";
    static final String DFA438_maxS =
        "\1\155\1\u00db\2\uffff\1\u00b3\1\u00db\1\155\1\u00b3";
    static final String DFA438_acceptS =
        "\2\uffff\1\2\1\1\4\uffff";
    static final String DFA438_specialS =
        "\10\uffff}>";
    static final String[] DFA438_transitionS = {
            "\1\3\62\uffff\1\1\16\uffff\1\2",
            "\1\3\1\uffff\1\3\3\uffff\1\3\16\uffff\1\3\10\uffff\1\3\22\uffff"+
            "\1\3\14\uffff\1\4\3\uffff\1\3\14\uffff\1\3\14\uffff\1\3\1\uffff"+
            "\1\2\75\uffff\1\3\3\uffff\1\3\6\uffff\1\3\21\uffff\2\3\16\uffff"+
            "\1\3\3\uffff\1\3",
            "",
            "",
            "\1\5\16\uffff\1\3\3\uffff\1\3\27\uffff\1\6\14\uffff\1\3\11"+
            "\uffff\1\3\15\uffff\1\3\106\uffff\1\3",
            "\1\3\1\uffff\1\3\3\uffff\1\3\16\uffff\1\3\10\uffff\1\3\22\uffff"+
            "\1\3\14\uffff\1\7\3\uffff\1\3\14\uffff\1\3\14\uffff\1\3\1\uffff"+
            "\1\2\75\uffff\1\3\3\uffff\1\3\6\uffff\1\3\21\uffff\2\3\16\uffff"+
            "\1\3\3\uffff\1\3",
            "\1\3\101\uffff\1\2",
            "\1\5\16\uffff\1\3\3\uffff\1\3\27\uffff\1\6\14\uffff\1\3\11"+
            "\uffff\1\3\15\uffff\1\3\106\uffff\1\3"
    };

    static final short[] DFA438_eot = DFA.unpackEncodedString(DFA438_eotS);
    static final short[] DFA438_eof = DFA.unpackEncodedString(DFA438_eofS);
    static final char[] DFA438_min = DFA.unpackEncodedStringToUnsignedChars(DFA438_minS);
    static final char[] DFA438_max = DFA.unpackEncodedStringToUnsignedChars(DFA438_maxS);
    static final short[] DFA438_accept = DFA.unpackEncodedString(DFA438_acceptS);
    static final short[] DFA438_special = DFA.unpackEncodedString(DFA438_specialS);
    static final short[][] DFA438_transition;

    static {
        int numStates = DFA438_transitionS.length;
        DFA438_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA438_transition[i] = DFA.unpackEncodedString(DFA438_transitionS[i]);
        }
    }

    class DFA438 extends DFA {

        public DFA438(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 438;
            this.eot = DFA438_eot;
            this.eof = DFA438_eof;
            this.min = DFA438_min;
            this.max = DFA438_max;
            this.accept = DFA438_accept;
            this.special = DFA438_special;
            this.transition = DFA438_transition;
        }
        public String getDescription() {
            return "()* loopback of 3860:21: (lst+= method_member_name2_chld )*";
        }
    }
    static final String DFA439_eotS =
        "\10\uffff";
    static final String DFA439_eofS =
        "\10\uffff";
    static final String DFA439_minS =
        "\1\53\1\16\2\uffff\1\34\1\16\1\53\1\34";
    static final String DFA439_maxS =
        "\1\155\1\u00db\2\uffff\1\u00b3\1\u00db\1\155\1\u00b3";
    static final String DFA439_acceptS =
        "\2\uffff\1\2\1\1\4\uffff";
    static final String DFA439_specialS =
        "\10\uffff}>";
    static final String[] DFA439_transitionS = {
            "\1\3\62\uffff\1\1\16\uffff\1\2",
            "\1\3\1\uffff\1\3\3\uffff\1\3\16\uffff\1\3\10\uffff\1\3\22\uffff"+
            "\1\3\14\uffff\1\4\3\uffff\1\3\14\uffff\1\3\14\uffff\1\3\1\uffff"+
            "\1\2\75\uffff\1\3\3\uffff\1\3\6\uffff\1\3\21\uffff\2\3\16\uffff"+
            "\1\3\3\uffff\1\3",
            "",
            "",
            "\1\5\16\uffff\1\3\3\uffff\1\3\27\uffff\1\6\14\uffff\1\3\11"+
            "\uffff\1\3\15\uffff\1\3\106\uffff\1\3",
            "\1\3\1\uffff\1\3\3\uffff\1\3\16\uffff\1\3\10\uffff\1\3\22\uffff"+
            "\1\3\14\uffff\1\7\3\uffff\1\3\14\uffff\1\3\14\uffff\1\3\1\uffff"+
            "\1\2\75\uffff\1\3\3\uffff\1\3\6\uffff\1\3\21\uffff\2\3\16\uffff"+
            "\1\3\3\uffff\1\3",
            "\1\3\101\uffff\1\2",
            "\1\5\16\uffff\1\3\3\uffff\1\3\27\uffff\1\6\14\uffff\1\3\11"+
            "\uffff\1\3\15\uffff\1\3\106\uffff\1\3"
    };

    static final short[] DFA439_eot = DFA.unpackEncodedString(DFA439_eotS);
    static final short[] DFA439_eof = DFA.unpackEncodedString(DFA439_eofS);
    static final char[] DFA439_min = DFA.unpackEncodedStringToUnsignedChars(DFA439_minS);
    static final char[] DFA439_max = DFA.unpackEncodedStringToUnsignedChars(DFA439_maxS);
    static final short[] DFA439_accept = DFA.unpackEncodedString(DFA439_acceptS);
    static final short[] DFA439_special = DFA.unpackEncodedString(DFA439_specialS);
    static final short[][] DFA439_transition;

    static {
        int numStates = DFA439_transitionS.length;
        DFA439_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA439_transition[i] = DFA.unpackEncodedString(DFA439_transitionS[i]);
        }
    }

    class DFA439 extends DFA {

        public DFA439(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 439;
            this.eot = DFA439_eot;
            this.eof = DFA439_eof;
            this.min = DFA439_min;
            this.max = DFA439_max;
            this.accept = DFA439_accept;
            this.special = DFA439_special;
            this.transition = DFA439_transition;
        }
        public String getDescription() {
            return "()* loopback of 3862:48: (lst+= method_member_name2_chld )*";
        }
    }
 

    public static final BitSet FOLLOW_module_in_cSharp92 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_cSharp94 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilation_unit_in_module116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_or_type_name_in_namespace_name145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_or_type_name_in_type_name179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_namespace_or_type_name214 = new BitSet(new long[]{0x0000080000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_namespace_or_type_name218 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_namespace_or_type_name_Chld_in_namespace_or_type_name224 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_qualified_alias_member_in_namespace_or_type_name252 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_namespace_or_type_name_Chld_in_namespace_or_type_name257 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_DOT_in_namespace_or_type_name_Chld291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_namespace_or_type_name_Chld295 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_namespace_or_type_name_Chld299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_argument_list_in_type_argument_list_opt342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_base_type_in_type390 = new BitSet(new long[]{0x0000000000000002L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_typeChld_in_type395 = new BitSet(new long[]{0x0000000000000002L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_INTERR_in_typeChld437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_specifier_in_typeChld480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_typeChld498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_type_in_base_type561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_type_in_base_type589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_base_type622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_STAR_in_base_type624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numeric_type_in_simple_type673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_simple_type698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integral_type_in_numeric_type736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_floating_point_type_in_numeric_type760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_numeric_type777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SBYTE_in_integral_type816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTE_in_integral_type830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHORT_in_integral_type844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USHORT_in_integral_type858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_integral_type872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UINT_in_integral_type886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_integral_type900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ULONG_in_integral_type914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_in_integral_type928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_floating_point_type953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_floating_point_type967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_nullable_value_type_in_nullable_type991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_INTERR_in_nullable_type993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_base_type_in_non_nullable_value_type1020 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_non_nullable_value_type1034 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_STAR_in_non_nullable_value_type1042 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_simple_type_in_reference_type1072 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_class_type_in_reference_type1082 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_VOID_in_reference_type1090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_STAR_in_reference_type1092 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_reference_type1110 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_reference_type1130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_class_type1150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_in_class_type1182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dynamic_contextual_keyword_in_class_type1225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_class_type1242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_interface_type1290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_delegate_type1323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_type_argument_list1351 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_arguments_in_type_argument_list1355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_type_argument_list1357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_argument_in_type_arguments1381 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_type_arguments_Chld_in_type_arguments1386 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_type_arguments_Chld1414 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_argument_in_type_arguments_Chld1418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_type_argument1444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_type_void1480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variable_reference1510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_in_argument_list1536 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_argument_list_Chld_in_argument_list1541 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_argument_list_Chld1570 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_in_argument_list_Chld1574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_name_in_argument1600 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_value_in_argument1606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_argument_name1632 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_argument_name1634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_argument_value1658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_in_argument_value1672 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_variable_reference_in_argument_value1676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_in_argument_value1694 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_variable_reference_in_argument_value1696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_start_in_primary_expression1729 = new BitSet(new long[]{0x0000080000000002L,0x0088300000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_bracket_expression_in_primary_expression1735 = new BitSet(new long[]{0x0000080000000002L,0x0088300000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_primary_expression_Chld_in_primary_expression1742 = new BitSet(new long[]{0x0000080000000002L,0x0088200000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_primary_expression_sub_Chld_in_primary_expression_Chld1779 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_bracket_expression_in_primary_expression_Chld1784 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_member_access2_in_primary_expression_sub_Chld1818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_invocation2_in_primary_expression_sub_Chld1836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_INC_in_primary_expression_sub_Chld1852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_DEC_in_primary_expression_sub_Chld1868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_PTR_in_primary_expression_sub_Chld1884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_primary_expression_sub_Chld1886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary_expression_start1943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_name_in_primary_expression_start1961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesized_expression_in_primary_expression_start1979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predefined_type_in_primary_expression_start1997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualified_alias_member_in_primary_expression_start2016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_this_access_in_primary_expression_start2036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_base_access_in_primary_expression_start2054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_start_Chld_in_primary_expression_start2072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_expression_in_primary_expression_start2095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_checked_expression_in_primary_expression_start2113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unchecked_expression_in_primary_expression_start2131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_value_expression_in_primary_expression_start2149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_method_expression_in_primary_expression_start2167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sizeof_expression_in_primary_expression_start2185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_primary_expression_start_Chld2214 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_primary_expression_start_Chld2219 = new BitSet(new long[]{0x0000000000000000L,0x0000380000000000L});
    public static final BitSet FOLLOW_primary_expression_start_sub_Chld_in_primary_expression_start_Chld2223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_primary_expression_start_Chld2242 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_anonymous_object_initializer_in_primary_expression_start_Chld2246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_primary_expression_start_Chld2261 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_primary_expression_start_Chld2265 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_array_initializer_in_primary_expression_start_Chld2269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_creation_expression2_in_primary_expression_start_sub_Chld2302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_primary_expression_start_sub_Chld2320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_primary_expression_start_sub_Chld2340 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_list_in_primary_expression_start_sub_Chld2344 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_primary_expression_start_sub_Chld2346 = new BitSet(new long[]{0x0000000000000002L,0x0000180000000000L});
    public static final BitSet FOLLOW_rank_specifiers_in_primary_expression_start_sub_Chld2351 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_array_initializer_in_primary_expression_start_sub_Chld2358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_specifiers_in_primary_expression_start_sub_Chld2387 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_array_initializer_in_primary_expression_start_sub_Chld2391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_bracket_expression2422 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_list_in_bracket_expression2426 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_bracket_expression2428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name2458 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_simple_name2462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_parenthesized_expression2490 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_parenthesized_expression2494 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_parenthesized_expression2496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_in_member_access2526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_predefined_type2550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTE_in_predefined_type2564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_in_predefined_type2578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_predefined_type2592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_predefined_type2606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_predefined_type2620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_predefined_type2634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_predefined_type2648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_in_predefined_type2662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SBYTE_in_predefined_type2676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHORT_in_predefined_type2690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_predefined_type2704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UINT_in_predefined_type2718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ULONG_in_predefined_type2732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USHORT_in_predefined_type2746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expression_list2776 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_expression_list_Chld_in_expression_list2781 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_expression_list_Chld2809 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_expression_list_Chld2813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_this_access2839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BASE_in_base_access2862 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_base_access2864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_base_access2866 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_base_access2868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BASE_in_base_access2873 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_base_access2875 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_list_in_base_access2877 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_base_access2879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_object_creation_expression2900 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_object_creation_expression2904 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L});
    public static final BitSet FOLLOW_object_creation_expression_Chld_in_object_creation_expression2908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_object_creation_expression_Chld2941 = new BitSet(new long[]{0x9000106804715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_list_in_object_creation_expression_Chld2946 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_object_creation_expression_Chld2950 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression_Chld2955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression_Chld2982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_initializer_in_object_or_collection_initializer3016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_initializer_in_object_or_collection_initializer3032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_object_initializer3060 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_object_initializer3062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_object_initializer3078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_member_initializer_list_in_object_initializer3082 = new BitSet(new long[]{0x0000000011000000L});
    public static final BitSet FOLLOW_COMMA_in_object_initializer3084 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_object_initializer3087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_initializer_in_member_initializer_list3113 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_member_initializer_list_Chld_in_member_initializer_list3118 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_member_initializer_list_Chld3146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_member_initializer_in_member_initializer_list_Chld3150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_initializer3176 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_member_initializer3178 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_initializer_value_in_member_initializer3182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_initializer_value3212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_initializer_value3228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_collection_initializer3256 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_element_initializer_list_in_collection_initializer3260 = new BitSet(new long[]{0x0000000011000000L});
    public static final BitSet FOLLOW_COMMA_in_collection_initializer3262 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_collection_initializer3265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_initializer_in_element_initializer_list3291 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_element_initializer_list_Chld_in_element_initializer_list3296 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_element_initializer_list_Chld3324 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_element_initializer_in_element_initializer_list_Chld3328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_assignment_expression_in_element_initializer3352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_element_initializer3366 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_list_in_element_initializer3370 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_element_initializer3372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_array_creation_expression3406 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_array_creation_expression_Chld_in_array_creation_expression3410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_creation_expression_sub_Chld_in_array_creation_expression_Chld3454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_array_type_in_array_creation_expression_Chld3475 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_array_creation_expression_Chld3479 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_list_in_array_creation_expression_Chld3483 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_array_creation_expression_Chld3485 = new BitSet(new long[]{0x0000000000000002L,0x0000180000000000L});
    public static final BitSet FOLLOW_rank_specifiers_in_array_creation_expression_Chld3490 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_array_initializer_in_array_creation_expression_Chld3497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_type_in_array_creation_expression_sub_Chld3549 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_array_initializer_in_array_creation_expression_sub_Chld3553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_delegate_creation_expression3584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_delegate_type_in_delegate_creation_expression3586 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_delegate_creation_expression3588 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_delegate_creation_expression3590 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_delegate_creation_expression3592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_anonymous_object_creation_expression3607 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression3611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_anonymous_object_initializer3639 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer3641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_anonymous_object_initializer3657 = new BitSet(new long[]{0x9000106800715000L,0x0000249020031000L,0x0062441000000000L,0x00000000008003A9L});
    public static final BitSet FOLLOW_member_declarator_list_in_anonymous_object_initializer3661 = new BitSet(new long[]{0x0000000011000000L});
    public static final BitSet FOLLOW_COMMA_in_anonymous_object_initializer3664 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer3668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_declarator_in_member_declarator_list3694 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_member_declarator_list_Chld_in_member_declarator_list3700 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_member_declarator_list_Chld3728 = new BitSet(new long[]{0x9000106800715000L,0x0000249020031000L,0x0062441000000000L,0x00000000008003A9L});
    public static final BitSet FOLLOW_member_declarator_in_member_declarator_list_Chld3732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_in_member_declarator3760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_declarator3778 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_member_declarator3780 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_member_declarator3784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_typeof_expression3806 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_typeof_expression3808 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_unbound_type_name_in_typeof_expression3824 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_typeof_expression3827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeof_expression3845 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_typeof_expression3847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_typeof_expression3854 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_typeof_expression3856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_unbound_type_name3879 = new BitSet(new long[]{0x0000080000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name3883 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_DOT_in_unbound_type_name3887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_unbound_type_name3889 = new BitSet(new long[]{0x0000080000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name3893 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_unbound_type_name3917 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_DOUBLE_COLON_in_unbound_type_name3919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_unbound_type_name3921 = new BitSet(new long[]{0x0000080000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name3925 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_DOT_in_unbound_type_name3929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_unbound_type_name3931 = new BitSet(new long[]{0x0000080000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name3935 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_LT_in_generic_dimension_specifier3966 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_commas_in_generic_dimension_specifier3971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_generic_dimension_specifier3975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_commas3997 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_commas_Chld_in_commas4002 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_commas_Chld4026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHECKED_in_checked_expression4047 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_checked_expression4049 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_checked_expression4051 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_checked_expression4053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNCHECKED_in_unchecked_expression4064 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_unchecked_expression4066 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_unchecked_expression4068 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_unchecked_expression4070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_default_value_expression4081 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_default_value_expression4083 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_default_value_expression4085 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_default_value_expression4087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_unary_expression4117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_in_unary_expression4134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_unary_expression4148 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression4152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unary_expression4166 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression4170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_unary_expression4184 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression4188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_unary_expression4202 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression4206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pre_increment_expression_in_unary_expression4222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pre_decrement_expression_in_unary_expression4238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_unsafe_in_unary_expression4254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_scan_for_cast_generic_precedence4280 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_scan_for_cast_generic_precedence4284 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_scan_for_cast_generic_precedence4286 = new BitSet(new long[]{0xF7A0146860FDD810L,0x00006498300FF043L,0x01F64C7800000738L,0x000000009DC003BFL});
    public static final BitSet FOLLOW_cast_disambiguation_token_in_scan_for_cast_generic_precedence4290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_cast_disambiguation_token4322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_cast_disambiguation_token4352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_cast_disambiguation_token4381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_cast_disambiguation_token4403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_cast_disambiguation_token4428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_cast_disambiguation_token4450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BASE_in_cast_disambiguation_token4475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_cast_disambiguation_token4504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_cast_disambiguation_token4533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTE_in_cast_disambiguation_token4561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_cast_disambiguation_token4590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_in_cast_disambiguation_token4619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_in_cast_disambiguation_token4647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHECKED_in_cast_disambiguation_token4676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_cast_disambiguation_token4702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_in_cast_disambiguation_token4730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_cast_disambiguation_token4758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_cast_disambiguation_token4783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_cast_disambiguation_token4809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELEGATE_in_cast_disambiguation_token4835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_cast_disambiguation_token4860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_cast_disambiguation_token4891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_cast_disambiguation_token4918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_in_cast_disambiguation_token4947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENT_in_cast_disambiguation_token4976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPLICIT_in_cast_disambiguation_token5004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_cast_disambiguation_token5029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_cast_disambiguation_token5056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIXED_in_cast_disambiguation_token5082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_cast_disambiguation_token5110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_cast_disambiguation_token5138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_cast_disambiguation_token5168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GOTO_in_cast_disambiguation_token5194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_cast_disambiguation_token5223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLICIT_in_cast_disambiguation_token5254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_in_cast_disambiguation_token5279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_cast_disambiguation_token5310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_in_cast_disambiguation_token5340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_cast_disambiguation_token5364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOCK_in_cast_disambiguation_token5389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_cast_disambiguation_token5418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_cast_disambiguation_token5447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_cast_disambiguation_token5471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_in_cast_disambiguation_token5501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPERATOR_in_cast_disambiguation_token5528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_in_cast_disambiguation_token5553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_cast_disambiguation_token5583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARAMS_in_cast_disambiguation_token5608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_cast_disambiguation_token5635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_cast_disambiguation_token5661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_cast_disambiguation_token5685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_READONLY_in_cast_disambiguation_token5712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_in_cast_disambiguation_token5737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_cast_disambiguation_token5767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SBYTE_in_cast_disambiguation_token5794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_cast_disambiguation_token5822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHORT_in_cast_disambiguation_token5849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZEOF_in_cast_disambiguation_token5877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STACKALLOC_in_cast_disambiguation_token5904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_cast_disambiguation_token5927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_cast_disambiguation_token5954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_in_cast_disambiguation_token5981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_cast_disambiguation_token6008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_cast_disambiguation_token6035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_cast_disambiguation_token6064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_cast_disambiguation_token6092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_cast_disambiguation_token6122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UINT_in_cast_disambiguation_token6149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ULONG_in_cast_disambiguation_token6178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNCHECKED_in_cast_disambiguation_token6206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_cast_disambiguation_token6230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USHORT_in_cast_disambiguation_token6257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_cast_disambiguation_token6284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIRTUAL_in_cast_disambiguation_token6312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_cast_disambiguation_token6338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOLATILE_in_cast_disambiguation_token6367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_cast_disambiguation_token6392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_INC_in_pre_increment_expression6429 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_pre_increment_expression6433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_DEC_in_pre_decrement_expression6459 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_pre_decrement_expression6463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_cast_expression6489 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_cast_expression6493 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_cast_expression6495 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_cast_expression6499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression6527 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0008000000000040L});
    public static final BitSet FOLLOW_multiplicative_expression_Chld_in_multiplicative_expression6532 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0008000000000040L});
    public static final BitSet FOLLOW_STAR_in_multiplicative_expression_Chld6560 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression_Chld6565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_in_multiplicative_expression_Chld6583 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression_Chld6588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_multiplicative_expression_Chld6606 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression_Chld6611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression6639 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_additive_expression_Chld_in_additive_expression6644 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_PLUS_in_additive_expression_Chld6672 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression_Chld6677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_additive_expression_Chld6694 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression_Chld6699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression6729 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000080L});
    public static final BitSet FOLLOW_shift_expression_Chld_in_shift_expression6734 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000080L});
    public static final BitSet FOLLOW_OP_LEFT_SHIFT_in_shift_expression_Chld6762 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression_Chld6767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_right_shift_in_shift_expression_Chld6786 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression_Chld6791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression6821 = new BitSet(new long[]{0x0000000000000042L,0x0140000040200080L});
    public static final BitSet FOLLOW_relational_expression_Chld_in_relational_expression6827 = new BitSet(new long[]{0x0000000000000042L,0x0140000040200080L});
    public static final BitSet FOLLOW_LT_in_relational_expression_Chld6874 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression_Chld6878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_relational_expression_Chld6897 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression_Chld6901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_LE_in_relational_expression_Chld6921 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression_Chld6925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_GE_in_relational_expression_Chld6945 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression_Chld6949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_relational_expression_Chld6969 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_isType_in_relational_expression_Chld6973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_relational_expression_Chld6993 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_relational_expression_Chld6997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_scan_for_shift_generic_precedence7044 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LT_in_scan_for_shift_generic_precedence7046 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_scan_for_shift_generic_precedence7048 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COMMA_in_scan_for_shift_generic_precedence7051 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_scan_for_shift_generic_precedence7053 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_scan_for_shift_generic_precedence7057 = new BitSet(new long[]{0x000008001E000000L,0x2020200000100080L,0x0000100000000000L});
    public static final BitSet FOLLOW_shift_disambiguation_token_in_scan_for_shift_generic_precedence7059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_shift_disambiguation_token7077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_shift_disambiguation_token7100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_shift_disambiguation_token7120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_shift_disambiguation_token7139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_shift_disambiguation_token7166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_shift_disambiguation_token7189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_shift_disambiguation_token7216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERR_in_shift_disambiguation_token7245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_EQ_in_shift_disambiguation_token7271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_NE_in_shift_disambiguation_token7298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_shift_disambiguation_token7325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_nullable_value_type_in_isType7368 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_INTERR_in_isType7380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_is_disambiguation_token7411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_AND_in_is_disambiguation_token7432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_OR_in_is_disambiguation_token7457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERR_in_is_disambiguation_token7483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression7519 = new BitSet(new long[]{0x0000000000000002L,0x2020000000000000L});
    public static final BitSet FOLLOW_equality_expression_Chld_in_equality_expression7524 = new BitSet(new long[]{0x0000000000000002L,0x2020000000000000L});
    public static final BitSet FOLLOW_OP_EQ_in_equality_expression_Chld7552 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression_Chld7557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_NE_in_equality_expression_Chld7574 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression_Chld7579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_equality_expression_in_and_expression7609 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_and_expression_Chld_in_and_expression7615 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_AMP_in_and_expression_Chld7648 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_equality_expression_in_and_expression_Chld7652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression7687 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_exclusive_or_expression_Chld_in_exclusive_or_expression7692 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_CARET_in_exclusive_or_expression_Chld7725 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression_Chld7729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression7763 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_inclusive_or_expression_Chld_in_inclusive_or_expression7768 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_BITWISE_OR_in_inclusive_or_expression_Chld7801 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression_Chld7805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression7841 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_conditional_and_expression_Chld_in_conditional_and_expression7846 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_OP_AND_in_conditional_and_expression_Chld7879 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression_Chld7883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression7914 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_conditional_or_expression_Chld_in_conditional_or_expression7919 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_OP_OR_in_conditional_or_expression_Chld7952 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression_Chld7956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditional_or_expression_in_null_coalescing_expression7994 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_OP_COALESCING_in_null_coalescing_expression7997 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_null_coalescing_expression_in_null_coalescing_expression8001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_coalescing_expression_in_conditional_expression8047 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_INTERR_in_conditional_expression8050 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_conditional_expression8054 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_conditional_expression8056 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_conditional_expression8060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_function_signature_in_lambda_expression8106 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_right_arrow_in_lambda_expression8108 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_anonymous_function_body_in_lambda_expression8112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELEGATE_in_anonymous_method_expression8140 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L});
    public static final BitSet FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression8145 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_anonymous_method_expression8151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_anonymous_function_signature8183 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_anonymous_function_signature8185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_anonymous_function_signature8211 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020442000000008L,0x0000000008800180L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature8215 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_anonymous_function_signature8217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_anonymous_function_signature8233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature8237 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_anonymous_function_signature8239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_anonymous_function_signature8257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_explicit_anonymous_function_signature8281 = new BitSet(new long[]{0x8000100804114000L,0x0000040020011000L,0x0020442000000008L,0x0000000008800180L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature8286 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_explicit_anonymous_function_signature8290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list8314 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_list_Chld_in_explicit_anonymous_function_parameter_list8319 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_explicit_anonymous_function_parameter_list_Chld8347 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020442000000008L,0x0000000008800180L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list_Chld8351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter8378 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_explicit_anonymous_function_parameter8384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_explicit_anonymous_function_parameter8386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_in_anonymous_function_parameter_modifier8416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_in_anonymous_function_parameter_modifier8436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_implicit_anonymous_function_signature8462 = new BitSet(new long[]{0x0000000004000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_implicit_anonymous_function_signature8467 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_implicit_anonymous_function_signature8471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_signature8487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list8511 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_list_Chld_in_implicit_anonymous_function_parameter_list8516 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_implicit_anonymous_function_parameter_list_Chld8544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list_Chld8548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_implicit_anonymous_function_parameter8572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_anonymous_function_body8599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_anonymous_function_body8615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_from_clause_in_query_expression8641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_query_body_in_query_expression8645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_from_contextual_keyword_in_from_clause8673 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_from_clause8688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_from_clause8694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_from_clause8696 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_from_clause8700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_body_clauses_in_query_body8741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_select_or_group_clause_in_query_body8747 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_query_continuation_in_query_body8758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_body_clause_in_query_body_clauses8795 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_from_clause_in_query_body_clause8828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_let_clause_in_query_body_clause8846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_where_clause_in_query_body_clause8864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_combined_join_clause_in_query_body_clause8882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderby_clause_in_query_body_clause8900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_let_contextual_keyword_in_let_clause8926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_let_clause8930 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_let_clause8932 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_let_clause8936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_where_contextual_keyword_in_where_clause8968 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_boolean_expression_in_where_clause8972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_contextual_keyword_in_join_clause8999 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_join_clause9004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_join_clause9010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_join_clause9012 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_join_clause9016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_on_contextual_keyword_in_join_clause9018 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_join_clause9022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_equals_contextual_keyword_in_join_clause9024 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_join_clause9028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_contextual_keyword_in_join_into_clause9069 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_join_into_clause9073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_join_into_clause9079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_join_into_clause9081 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_join_into_clause9085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_on_contextual_keyword_in_join_into_clause9089 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_join_into_clause9093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_equals_contextual_keyword_in_join_into_clause9097 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_join_into_clause9101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_into_contextual_keyword_in_join_into_clause9103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_join_into_clause9107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_contextual_keyword_in_combined_join_clause9163 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_combined_join_clause9168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_combined_join_clause9174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_combined_join_clause9176 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_combined_join_clause9180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_on_contextual_keyword_in_combined_join_clause9182 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_combined_join_clause9186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_equals_contextual_keyword_in_combined_join_clause9188 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_combined_join_clause9192 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_into_contextual_keyword_in_combined_join_clause9195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_combined_join_clause9199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderby_contextual_keyword_in_orderby_clause9248 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_orderings_in_orderby_clause9252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ordering_in_orderings9276 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_orderings_Chld_in_orderings9281 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_orderings_Chld9311 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_ordering_in_orderings_Chld9316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_ordering9344 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_ordering_direction_in_ordering9349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ascending_contextual_keyword_in_ordering_direction9377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_descending_contextual_keyword_in_ordering_direction9388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_clause_in_select_or_group_clause9409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_clause_in_select_or_group_clause9425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_contextual_keyword_in_select_clause9451 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_select_clause9455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_contextual_keyword_in_group_clause9483 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_group_clause9487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_by_contextual_keyword_in_group_clause9491 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_group_clause9495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_into_contextual_keyword_in_query_continuation9533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_query_continuation9535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_query_body_in_query_continuation9539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_in_assignment9573 = new BitSet(new long[]{0x0000000000000080L,0x9C12800000000080L,0x0000000000000006L});
    public static final BitSet FOLLOW_assignment_operator_in_assignment9577 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_assignment9581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_assignment_operator9611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_ADD_ASSIGNMENT_in_assignment_operator9625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_SUB_ASSIGNMENT_in_assignment_operator9639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_MULT_ASSIGNMENT_in_assignment_operator9653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_DIV_ASSIGNMENT_in_assignment_operator9667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_MOD_ASSIGNMENT_in_assignment_operator9681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_AND_ASSIGNMENT_in_assignment_operator9695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_OR_ASSIGNMENT_in_assignment_operator9709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_XOR_ASSIGNMENT_in_assignment_operator9723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_LEFT_SHIFT_ASSIGNMENT_in_assignment_operator9737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_right_shift_assignment_in_assignment_operator9753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_in_expression9782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_assignment_expression_in_expression9798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expression_in_non_assignment_expression9828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_expression_in_non_assignment_expression9852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditional_expression_in_non_assignment_expression9869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constant_expression9895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_boolean_expression9919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_labeled_statement_in_statement9952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_statement_in_statement9976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_embedded_statement_in_statement9993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_embedded_statement10017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_empty_statement_in_embedded_statement10033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_statement_in_embedded_statement10049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selection_statement_in_embedded_statement10065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iteration_statement_in_embedded_statement10081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jump_statement_in_embedded_statement10097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_statement_in_embedded_statement10113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_checked_statement_in_embedded_statement10129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unchecked_statement_in_embedded_statement10145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_statement_in_embedded_statement10161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_statement_in_embedded_statement10177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yield_statement_in_embedded_statement10193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_embedded_statement_unsafe_in_embedded_statement10209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_block10233 = new BitSet(new long[]{0xD00014686171D820L,0x00882C9430033043L,0x016BD45000000080L,0x0000000089C003BFL});
    public static final BitSet FOLLOW_comments_in_block10238 = new BitSet(new long[]{0xD00014686171D820L,0x00882C9430033043L,0x016A545000000080L,0x0000000089C003BFL});
    public static final BitSet FOLLOW_statement_list_in_block10245 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_block10249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_statement_list10280 = new BitSet(new long[]{0xD00014686071D822L,0x00882C9430033043L,0x016A545000000080L,0x0000000089C003BFL});
    public static final BitSet FOLLOW_SEMICOLON_in_empty_statement10306 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_empty_statement10311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_labeled_statement10343 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_labeled_statement10345 = new BitSet(new long[]{0xD00014686071D820L,0x00882C9430033043L,0x016A545000000080L,0x0000000089C003BFL});
    public static final BitSet FOLLOW_statement_in_labeled_statement10349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_declaration_statement10379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_declaration_statement10381 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_declaration_statement10386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_constant_declaration_in_declaration_statement10408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_declaration_statement10410 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_declaration_statement10415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_type_in_local_variable_declaration10445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_local_variable_declarators_in_local_variable_declaration10450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_local_variable_type10476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators10503 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_local_variable_declarators_Chld_in_local_variable_declarators10509 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_local_variable_declarators_Chld10538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators_Chld10543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_local_variable_declarator10572 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_local_variable_declarator10576 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006E441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_local_variable_initializer_in_local_variable_declarator10580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_local_variable_initializer10611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_initializer_in_local_variable_initializer10627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_initializer_unsafe_in_local_variable_initializer10643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_in_local_constant_declaration10665 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_local_constant_declaration10669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_constant_declarators_in_local_constant_declaration10673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_expression_in_expression_statement10700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_expression_statement10702 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_expression_statement10707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statement_expression10743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_selection_statement10774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_statement_in_selection_statement10789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_if_statement10815 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_if_statement10817 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_boolean_expression_in_if_statement10821 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_if_statement10823 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016A545000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_if_statement10827 = new BitSet(new long[]{0x0020000000000002L});
    public static final BitSet FOLLOW_ELSE_in_if_statement10837 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016A545000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_if_statement10841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_switch_statement10874 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_switch_statement10876 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_switch_statement10880 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_switch_statement10882 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_switch_block_in_switch_statement10886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_switch_block10910 = new BitSet(new long[]{0x0000002001040000L});
    public static final BitSet FOLLOW_switch_sections_in_switch_block10914 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_switch_block10917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_section_in_switch_sections10939 = new BitSet(new long[]{0x0000002000040002L});
    public static final BitSet FOLLOW_switch_section_in_switch_sections10945 = new BitSet(new long[]{0x0000002000040002L});
    public static final BitSet FOLLOW_switch_labels_in_switch_section10974 = new BitSet(new long[]{0xD00014686071D820L,0x00882C9430033043L,0x016A545000000080L,0x0000000089C003BFL});
    public static final BitSet FOLLOW_statement_list_in_switch_section10978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_label_in_switch_labels11004 = new BitSet(new long[]{0x0000002000040002L});
    public static final BitSet FOLLOW_switch_label_in_switch_labels11010 = new BitSet(new long[]{0x0000002000040002L});
    public static final BitSet FOLLOW_CASE_in_switch_label11037 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_constant_expression_in_switch_label11041 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_switch_label11043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_switch_label11057 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_switch_label11059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_statement_in_iteration_statement11074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_statement_in_iteration_statement11090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_statement_in_iteration_statement11106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_statement_in_iteration_statement11122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_while_statement11144 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_while_statement11146 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_boolean_expression_in_while_statement11150 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_while_statement11152 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016A545000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_while_statement11156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_do_statement11182 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016A545000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_do_statement11186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_WHILE_in_do_statement11188 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_do_statement11190 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_boolean_expression_in_do_statement11194 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_do_statement11196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_do_statement11198 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_do_statement11203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_for_statement11235 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_for_statement11237 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A541000000080L,0x00000000088003ADL});
    public static final BitSet FOLLOW_for_initializer_in_for_statement11242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_statement11246 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A541000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_for_condition_in_for_statement11251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_statement11255 = new BitSet(new long[]{0x9000106804715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_for_iterator_in_for_statement11260 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_for_statement11264 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016A545000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_for_statement11268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_for_initializer11310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_expression_list_in_for_initializer11326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_expression_in_for_condition11350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_expression_list_in_for_iterator11374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_expression_in_statement_expression_list11398 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_statement_expression_list_Chld_in_statement_expression_list11403 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_statement_expression_list_Chld11431 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_statement_expression_in_statement_expression_list_Chld11436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_statement11460 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_foreach_statement11462 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_local_variable_type_in_foreach_statement11466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_foreach_statement11470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_foreach_statement11472 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_foreach_statement11476 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_foreach_statement11478 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016A545000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_foreach_statement11482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_statement_in_jump_statement11518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_statement_in_jump_statement11534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_statement_in_jump_statement11550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_statement_in_jump_statement11566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_statement_in_jump_statement11582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_break_statement11606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_break_statement11608 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_break_statement11613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_continue_statement11643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_continue_statement11645 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_continue_statement11650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GOTO_in_goto_statement11678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_goto_statement11682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_goto_statement11684 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_goto_statement11689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GOTO_in_goto_statement11709 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_CASE_in_goto_statement11711 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_constant_expression_in_goto_statement11715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_goto_statement11717 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_goto_statement11722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GOTO_in_goto_statement11742 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_DEFAULT_in_goto_statement11744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_goto_statement11746 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_goto_statement11751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_return_statement11775 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A541000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_return_statement11780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_return_statement11784 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_return_statement11789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_throw_statement11817 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A541000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_throw_statement11822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_throw_statement11826 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_throw_statement11831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_try_statement11863 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_try_statement11867 = new BitSet(new long[]{0x2000000000080002L});
    public static final BitSet FOLLOW_catch_clauses_in_try_statement11872 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_finally_clause_in_try_statement11879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specific_catch_clauses_in_catch_clauses11919 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_general_catch_clause_in_catch_clauses11924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_catch_clause_in_catch_clauses11948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specific_catch_clause_in_specific_catch_clauses11975 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_CATCH_in_specific_catch_clause11999 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_specific_catch_clause12001 = new BitSet(new long[]{0x0000000000000000L,0x0000040000001000L,0x0020000000000000L});
    public static final BitSet FOLLOW_class_type_in_specific_catch_clause12005 = new BitSet(new long[]{0x0000000004000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_specific_catch_clause12010 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_specific_catch_clause12014 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_specific_catch_clause12018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_in_general_catch_clause12048 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_general_catch_clause12052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_finally_clause12074 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_finally_clause12078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHECKED_in_checked_statement12100 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_checked_statement12104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNCHECKED_in_unchecked_statement12126 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_unchecked_statement12130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOCK_in_lock_statement12150 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_lock_statement12152 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_lock_statement12154 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_lock_statement12156 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016A545000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_lock_statement12158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_using_statement12173 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_using_statement12175 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000088003ADL});
    public static final BitSet FOLLOW_resource_acquisition_in_using_statement12179 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_using_statement12181 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016A545000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_using_statement12185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_resource_acquisition12221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_resource_acquisition12237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yield_contextual_keyword_in_yield_statement12257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RETURN_in_yield_statement12259 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_yield_statement12261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_yield_statement12263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yield_contextual_keyword_in_yield_statement12268 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_BREAK_in_yield_statement12270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_yield_statement12272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_alias_directives_in_compilation_unit12297 = new BitSet(new long[]{0x0480004000800010L,0x00001018000C1000L,0x0091880800000710L,0x0000000015400000L});
    public static final BitSet FOLLOW_using_directives_in_compilation_unit12304 = new BitSet(new long[]{0x0480004000800010L,0x00001018000C1000L,0x0091880800000710L,0x0000000014400000L});
    public static final BitSet FOLLOW_global_attribute_section_in_compilation_unit12323 = new BitSet(new long[]{0x0480004000800010L,0x00001018000C1000L,0x0091880800000710L,0x0000000014400000L});
    public static final BitSet FOLLOW_namespace_member_declarations_in_compilation_unit12336 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_compilation_unit12340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_namespace_declaration12376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_qualified_identifier_in_namespace_declaration12380 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_namespace_body_in_namespace_declaration12384 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001900000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_namespace_declaration12389 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_namespace_declaration12396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualified_identifier12438 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_qualified_identifier_Chld_in_qualified_identifier12443 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_DOT_in_qualified_identifier_Chld12471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualified_identifier_Chld12476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_namespace_body12503 = new BitSet(new long[]{0x0480004001800010L,0x00001018000C1000L,0x0091880800000710L,0x0000000015400000L});
    public static final BitSet FOLLOW_extern_alias_directives_in_namespace_body12508 = new BitSet(new long[]{0x0480004001800010L,0x00001018000C1000L,0x0091880800000710L,0x0000000015400000L});
    public static final BitSet FOLLOW_using_directives_in_namespace_body12515 = new BitSet(new long[]{0x0480004001800010L,0x00001018000C1000L,0x0091880800000710L,0x0000000014400000L});
    public static final BitSet FOLLOW_namespace_member_declarations_in_namespace_body12522 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_namespace_body12526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_alias_directive_in_extern_alias_directives12559 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_extern_alias_directive12583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_alias_contextual_keyword_in_extern_alias_directive12585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_extern_alias_directive12587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_extern_alias_directive12589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_directive_in_using_directives12614 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_using_alias_directive_in_using_directive12640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_namespace_directive_in_using_directive12663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_using_alias_directive12688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_using_alias_directive12690 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_using_alias_directive12692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_namespace_or_type_name_in_using_alias_directive12694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_using_alias_directive12696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_using_namespace_directive12718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_namespace_name_in_using_namespace_directive12722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_using_namespace_directive12724 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_using_namespace_directive12729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_member_declaration_in_namespace_member_declarations12760 = new BitSet(new long[]{0x0480004000800012L,0x00001018000C1000L,0x0091880800000710L,0x0000000014400000L});
    public static final BitSet FOLLOW_namespace_declaration_in_namespace_member_declaration12786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_namespace_member_declaration12809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_type_declaration12849 = new BitSet(new long[]{0x0480004000800010L,0x00000010000C1000L,0x0091880800000710L,0x0000000014400000L});
    public static final BitSet FOLLOW_comments_in_type_declaration12856 = new BitSet(new long[]{0x0480004000800010L,0x00000010000C1000L,0x0090080800000710L,0x0000000014400000L});
    public static final BitSet FOLLOW_all_member_modifiers_in_type_declaration12863 = new BitSet(new long[]{0x0080004000800000L,0x0000000000040000L,0x0080000000000000L});
    public static final BitSet FOLLOW_type_declaration_Chld_in_type_declaration12870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_definition_in_type_declaration_Chld12911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_definition_in_type_declaration_Chld12929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_definition_in_type_declaration_Chld12947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_definition_in_type_declaration_Chld12965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_definition_in_type_declaration_Chld12983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualified_alias_member13012 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_DOUBLE_COLON_in_qualified_alias_member13014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualified_alias_member13018 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_qualified_alias_member13022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_class_declaration13053 = new BitSet(new long[]{0x0000000000800010L,0x0000001000081000L,0x0010080000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_class_modifiers_in_class_declaration13056 = new BitSet(new long[]{0x0000000000800000L,0x0000000000001000L});
    public static final BitSet FOLLOW_partial_contextual_keyword_in_class_declaration13059 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CLASS_in_class_declaration13062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_class_declaration13064 = new BitSet(new long[]{0x0000000008000000L,0x0000080040001000L});
    public static final BitSet FOLLOW_type_parameter_list_in_class_declaration13066 = new BitSet(new long[]{0x0000000008000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_class_base_in_class_declaration13074 = new BitSet(new long[]{0x0000000000000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_class_declaration13077 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_class_body_in_class_declaration13080 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_class_declaration13082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_modifier_in_class_modifiers13094 = new BitSet(new long[]{0x0000000000000012L,0x0000001000080000L,0x0010080000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_class_modifier_in_class_modifiers13098 = new BitSet(new long[]{0x0000000000000012L,0x0000001000080000L,0x0010080000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_NEW_in_class_modifier13121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_class_modifier13170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_class_modifier13214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_class_modifier13255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_class_modifier13297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_class_modifier13340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_class_modifier13382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_class_modifier13426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_modifier_unsafe_in_class_modifier13472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_type_parameter_list13504 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_type_parameters_in_type_parameter_list13508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_type_parameter_list13510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_type_parameters13535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_parameter_in_type_parameters13541 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_type_parameters_Chld_in_type_parameters13547 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_type_parameters_Chld13580 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_attributes_in_type_parameters_Chld13586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_parameter_in_type_parameters_Chld13593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_type_parameter13624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_class_base13656 = new BitSet(new long[]{0x0000000000000000L,0x0000040000001000L,0x0020000000000000L});
    public static final BitSet FOLLOW_class_type_in_class_base13660 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_classbaseandInterfaceChld_in_class_base13665 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_interface_type_in_interface_type_list13700 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_classbaseandInterfaceChld_in_interface_type_list13705 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_classbaseandInterfaceChld13731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_interface_type_in_classbaseandInterfaceChld13736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses13766 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_where_contextual_keyword_in_type_parameter_constraints_clause13792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_parameter_in_type_parameter_constraints_clause13796 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_type_parameter_constraints_clause13798 = new BitSet(new long[]{0x0000000000800000L,0x0000041000001000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_in_type_parameter_constraints_clause13802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_constraint_in_type_parameter_constraints13838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_constraint_in_type_parameter_constraints13856 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_type_parameter_constraints13859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_secondary_constraints_in_type_parameter_constraints13863 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_type_parameter_constraints13868 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_constructor_constraint_in_type_parameter_constraints13872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_type_in_primary_constraint13915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_primary_constraint13933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_in_primary_constraint13961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_type_in_secondary_constraints14002 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_secondary_constraints_Chld_in_secondary_constraints14007 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_secondary_constraints_Chld14037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_interface_type_in_secondary_constraints_Chld14041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_constructor_constraint14070 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_constructor_constraint14072 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_constructor_constraint14074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_class_body14096 = new BitSet(new long[]{0x8780104821914010L,0x00001410200D5000L,0x00B1CC0800000710L,0x000000001CC00184L});
    public static final BitSet FOLLOW_class_member_declarations_in_class_body14102 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_class_body14107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_member_declaration_in_class_member_declarations14136 = new BitSet(new long[]{0x8780104820914012L,0x00001410200D5000L,0x00B1CC0800000710L,0x000000001CC00184L});
    public static final BitSet FOLLOW_attributes_in_class_member_declaration14167 = new BitSet(new long[]{0x8780104820914010L,0x00000410200D5000L,0x00B1CC0800000710L,0x000000001CC00180L});
    public static final BitSet FOLLOW_all_member_modifiers_in_class_member_declaration14174 = new BitSet(new long[]{0x8380104820914000L,0x0000040020055000L,0x00A1C40000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_common_member_declaration_in_class_member_declaration14180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_class_member_declaration14204 = new BitSet(new long[]{0x0400000000000010L,0x0000001000081000L,0x0010080800000710L,0x0000000014400004L});
    public static final BitSet FOLLOW_all_member_modifiers_in_class_member_declaration14211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_TILDE_in_class_member_declaration14215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_class_member_declaration14217 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_class_member_declaration14219 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_class_member_declaration14221 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_destructor_body_in_class_member_declaration14223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_all_member_modifier_in_all_member_modifiers14257 = new BitSet(new long[]{0x0400000000000012L,0x0000001000081000L,0x0010080800000710L,0x0000000014400000L});
    public static final BitSet FOLLOW_NEW_in_all_member_modifier14284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_all_member_modifier14300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_all_member_modifier14316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_all_member_modifier14332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_all_member_modifier14347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_READONLY_in_all_member_modifier14365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOLATILE_in_all_member_modifier14381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIRTUAL_in_all_member_modifier14397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_all_member_modifier14413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_all_member_modifier14428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_all_member_modifier14444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_all_member_modifier14459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_all_member_modifier14475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_all_member_modifier14491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_partial_contextual_keyword_in_all_member_modifier14509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_common_member_declaration14545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_declaration2_in_common_member_declaration14566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typed_member_declaration_in_common_member_declaration14588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_event_declaration2_in_common_member_declaration14610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conversion_operator_declarator_in_common_member_declaration14632 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_operator_body_in_common_member_declaration14636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declaration2_in_common_member_declaration14658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_void_in_common_member_declaration14680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_method_declaration2_in_common_member_declaration14686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_definition_in_common_member_declaration14710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_definition_in_common_member_declaration14732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_definition_in_common_member_declaration14754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_definition_in_common_member_declaration14776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_definition_in_common_member_declaration14798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typed_member_declaration14831 = new BitSet(new long[]{0x0000000000000000L,0x0000400000001000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_typed_member_declaration_Chld_in_typed_member_declaration14837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_type_in_typed_member_declaration_Chld14885 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_typed_member_declaration_Chld14887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_indexer_declaration2_in_typed_member_declaration_Chld14891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration2_in_typed_member_declaration_Chld14924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_declaration2_in_typed_member_declaration_Chld14954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexer_declaration2_in_typed_member_declaration_Chld14976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_declaration2_in_typed_member_declaration_Chld14998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration2_in_typed_member_declaration_Chld15020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_declarator_in_constant_declarators15062 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_constant_declarators_Chld_in_constant_declarators15068 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_constant_declarators_Chld15096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_constant_declarator_in_constant_declarators_Chld15101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_constant_declarator15130 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_constant_declarator15132 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_constant_expression_in_constant_declarator15136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declarator_in_variable_declarators15167 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_variable_declarators_Chld_in_variable_declarators15174 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_variable_declarators_Chld15203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_variable_declarator_in_variable_declarators_Chld15208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_variable_declarator15234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_variable_declarator15248 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_variable_declarator15250 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_variable_initializer_in_variable_declarator15254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variable_initializer15282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_initializer_in_variable_initializer15298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_in_method_declaration15322 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_method_body_in_method_declaration15326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_method_header15355 = new BitSet(new long[]{0x8400100800114010L,0x0000041020091000L,0x00304C0000000710L,0x000000000CC00180L});
    public static final BitSet FOLLOW_method_modifiers_in_method_header15362 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_partial_contextual_keyword_in_method_header15369 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_return_type_in_method_header15375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_member_name_in_method_header15379 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_method_header15384 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_method_header15388 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_method_header15393 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_method_header15397 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_method_header15402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifiers15457 = new BitSet(new long[]{0x0400000000000012L,0x0000001000080000L,0x0010080000000710L,0x0000000004400000L});
    public static final BitSet FOLLOW_NEW_in_method_modifier15481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_method_modifier15511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_method_modifier15536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_method_modifier15558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_method_modifier15581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_method_modifier15605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIRTUAL_in_method_modifier15630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_method_modifier15654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_method_modifier15679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_method_modifier15702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_method_modifier15725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_unsafe_in_method_modifier15752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_return_type15781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_return_type15800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_type_in_member_name15835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_block_in_method_body15861 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_method_body15866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_method_body15888 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_method_body15893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_method_block15926 = new BitSet(new long[]{0xD00014686171D820L,0x00882C9430033043L,0x016BD45000000080L,0x0000000089C003BFL});
    public static final BitSet FOLLOW_comments_in_method_block15931 = new BitSet(new long[]{0xD00014686171D820L,0x00882C9430033043L,0x016A545000000080L,0x0000000089C003BFL});
    public static final BitSet FOLLOW_statement_list_in_method_block15938 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_method_block15942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_array_in_formal_parameter_list15985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_parameters_in_formal_parameter_list16007 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_formal_parameter_list_Chld_in_formal_parameter_list16013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_formal_parameter_list_Chld16054 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_parameter_array_in_formal_parameter_list_Chld16058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_parameter_in_fixed_parameters16084 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_fixed_parameters_Chld_in_fixed_parameters16090 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_fixed_parameters_Chld16127 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020442000000008L,0x0000000008800181L});
    public static final BitSet FOLLOW_fixed_parameter_in_fixed_parameters_Chld16131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_fixed_parameter16160 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020442000000008L,0x0000000008800181L});
    public static final BitSet FOLLOW_parameter_modifier_in_fixed_parameter16167 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_fixed_parameter16173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_fixed_parameter16177 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_default_argument_in_fixed_parameter16182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arglist_in_fixed_parameter16218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_default_argument16242 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_default_argument16246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_in_parameter_modifier16268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_in_parameter_modifier16290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_parameter_modifier16310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_parameter_array16340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_PARAMS_in_parameter_array16346 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_array_type_in_parameter_array16348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_parameter_array16352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_property_declaration16385 = new BitSet(new long[]{0x8400100800114010L,0x0000041020091000L,0x00304C0000000710L,0x000000000CC00180L});
    public static final BitSet FOLLOW_property_modifiers_in_property_declaration16392 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_property_declaration16398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_member_name_in_property_declaration16402 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_property_declaration16404 = new BitSet(new long[]{0x0000000000000000L,0x0000100000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_accessor_declarations_in_property_declaration16408 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_property_declaration16410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_modifier_in_property_modifiers16451 = new BitSet(new long[]{0x0400000000000012L,0x0000001000080000L,0x0010080000000710L,0x0000000004400000L});
    public static final BitSet FOLLOW_NEW_in_property_modifier16476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_property_modifier16524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_property_modifier16567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_property_modifier16607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_property_modifier16648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_property_modifier16690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIRTUAL_in_property_modifier16733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_property_modifier16775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_property_modifier16818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_property_modifier16859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_property_modifier16900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_modifier_unsafe_in_property_modifier16945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_accessor_declarations16979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_accessor_modifier_in_accessor_declarations16986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_get_contextual_keyword_in_accessor_declarations16993 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_accessor_body_in_accessor_declarations16997 = new BitSet(new long[]{0x0000000000000002L,0x0000100000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_set_accessor_declaration_in_accessor_declarations17002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_accessor_declarations17039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_accessor_modifier_in_accessor_declarations17046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_set_contextual_keyword_in_accessor_declarations17052 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_accessor_body_in_accessor_declarations17056 = new BitSet(new long[]{0x0000000000000002L,0x0000100000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_get_accessor_declaration_in_accessor_declarations17061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_get_accessor_declaration17108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_accessor_modifier_in_get_accessor_declaration17115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_get_contextual_keyword_in_get_accessor_declaration17121 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_accessor_body_in_get_accessor_declaration17125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_set_accessor_declaration17162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_accessor_modifier_in_set_accessor_declaration17169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_set_contextual_keyword_in_set_accessor_declaration17175 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_accessor_body_in_set_accessor_declaration17179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_accessor_modifier17213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_accessor_modifier17240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_accessor_modifier17267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_accessor_modifier17295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_INTERNAL_in_accessor_modifier17297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_accessor_modifier17314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_PROTECTED_in_accessor_modifier17316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_accessor_body17343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_accessor_body17357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_event_modifier_in_event_modifiers17399 = new BitSet(new long[]{0x0400000000000012L,0x0000001000080000L,0x0010080000000710L,0x0000000004400000L});
    public static final BitSet FOLLOW_NEW_in_event_modifier17421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_event_modifier17467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_event_modifier17508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_event_modifier17546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_event_modifier17585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_event_modifier17625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIRTUAL_in_event_modifier17666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_event_modifier17706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_event_modifier17747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_event_modifier17786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_event_modifier17825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_event_modifier_unsafe_in_event_modifier17868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_event_accessor_declarations17895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_event_accessor_declarations_Chld_in_event_accessor_declarations17901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_add_contextual_keyword_in_event_accessor_declarations_Chld17930 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_event_accessor_declarations_Chld17934 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_remove_accessor_declaration_in_event_accessor_declarations_Chld17938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_remove_contextual_keyword_in_event_accessor_declarations_Chld17963 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_event_accessor_declarations_Chld17967 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_add_accessor_declaration_in_event_accessor_declarations_Chld17971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_add_accessor_declaration18009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_add_contextual_keyword_in_add_accessor_declaration18015 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_add_accessor_declaration18019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_remove_accessor_declaration18052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_remove_contextual_keyword_in_remove_accessor_declaration18058 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_remove_accessor_declaration18062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_indexer_declaration18095 = new BitSet(new long[]{0x8400100800114010L,0x0000041020091000L,0x00204C0000000710L,0x000000000CC00180L});
    public static final BitSet FOLLOW_indexer_modifiers_in_indexer_declaration18102 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_indexer_declarator_in_indexer_declaration18108 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_indexer_declaration18110 = new BitSet(new long[]{0x0000000000000000L,0x0000100000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_accessor_declarations_in_indexer_declaration18114 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_indexer_declaration18116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexer_modifier_in_indexer_modifiers18153 = new BitSet(new long[]{0x0400000000000012L,0x0000001000080000L,0x0000080000000710L,0x0000000004400000L});
    public static final BitSet FOLLOW_NEW_in_indexer_modifier18184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_indexer_modifier18232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_indexer_modifier18275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_indexer_modifier18315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_indexer_modifier18356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIRTUAL_in_indexer_modifier18398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_indexer_modifier18440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_indexer_modifier18483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_indexer_modifier18524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_indexer_modifier18565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexer_modifier_unsafe_in_indexer_modifier18610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_indexer_declarator18643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_interface_type_in_indexer_declarator18648 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_indexer_declarator18650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_THIS_in_indexer_declarator18654 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_indexer_declarator18656 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_indexer_declarator18660 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_indexer_declarator18662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_operator_declaration18697 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000000L,0x0010000000000400L,0x0000000000400000L});
    public static final BitSet FOLLOW_operator_modifiers_in_operator_declaration18703 = new BitSet(new long[]{0x8200100800114000L,0x0000040020015000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_operator_declarator_in_operator_declaration18707 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_operator_body_in_operator_declaration18711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_modifier_in_operator_modifiers18748 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000000L,0x0010000000000400L,0x0000000000400000L});
    public static final BitSet FOLLOW_PUBLIC_in_operator_modifier18774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_operator_modifier18819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_operator_modifier18862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_modifier_unsafe_in_operator_modifier18907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_operator_declarator_in_operator_declarator18946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_binary_operator_declarator_in_operator_declarator18964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conversion_operator_declarator_in_operator_declarator18982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_unary_operator_declarator19008 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_OPERATOR_in_unary_operator_declarator19010 = new BitSet(new long[]{0x1000000000000800L,0x0088000400000000L,0x0000000000000080L,0x000000000000000CL});
    public static final BitSet FOLLOW_overloadable_unary_operator_in_unary_operator_declarator19014 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_unary_operator_declarator19016 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_unary_operator_declarator19020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_unary_operator_declarator19022 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_unary_operator_declarator19024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_overloadable_unary_operator19060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_overloadable_unary_operator19085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_overloadable_unary_operator19107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_overloadable_unary_operator19130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_INC_in_overloadable_unary_operator19152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_DEC_in_overloadable_unary_operator19173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_overloadable_unary_operator19194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_overloadable_unary_operator19217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_binary_operator_declarator19250 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_OPERATOR_in_binary_operator_declarator19252 = new BitSet(new long[]{0x0000020000022020L,0x2360000440000080L,0x00080000000000C0L});
    public static final BitSet FOLLOW_overloadable_binary_operator_in_binary_operator_declarator19256 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_binary_operator_declarator19258 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_binary_operator_declarator19262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_binary_operator_declarator19266 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_binary_operator_declarator19268 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_binary_operator_declarator19272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_binary_operator_declarator19276 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_binary_operator_declarator19278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_overloadable_binary_operator19324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_overloadable_binary_operator19358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_overloadable_binary_operator19389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_in_overloadable_binary_operator19421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_overloadable_binary_operator19454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMP_in_overloadable_binary_operator19483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISE_OR_in_overloadable_binary_operator19516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CARET_in_overloadable_binary_operator19542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_LEFT_SHIFT_in_overloadable_binary_operator19573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_right_shift_in_overloadable_binary_operator19598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_EQ_in_overloadable_binary_operator19619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_NE_in_overloadable_binary_operator19650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_overloadable_binary_operator19681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_overloadable_binary_operator19715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_GE_in_overloadable_binary_operator19749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_LE_in_overloadable_binary_operator19780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_overloadable_operator19821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_overloadable_operator19854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_overloadable_operator19886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_overloadable_operator19919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_INC_in_overloadable_operator19951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_DEC_in_overloadable_operator19982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_overloadable_operator20013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_overloadable_operator20046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_overloadable_operator20078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_in_overloadable_operator20111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_overloadable_operator20145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMP_in_overloadable_operator20175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISE_OR_in_overloadable_operator20209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CARET_in_overloadable_operator20236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_LEFT_SHIFT_in_overloadable_operator20268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_right_shift_in_overloadable_operator20294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_EQ_in_overloadable_operator20316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_NE_in_overloadable_operator20348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_overloadable_operator20380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_overloadable_operator20415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_GE_in_overloadable_operator20450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_LE_in_overloadable_operator20482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLICIT_in_conversion_operator_declarator20526 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_OPERATOR_in_conversion_operator_declarator20528 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_conversion_operator_declarator20532 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_conversion_operator_declarator20534 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_conversion_operator_declarator20538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_conversion_operator_declarator20542 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_conversion_operator_declarator20544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPLICIT_in_conversion_operator_declarator20572 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_OPERATOR_in_conversion_operator_declarator20574 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_conversion_operator_declarator20578 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_conversion_operator_declarator20580 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_conversion_operator_declarator20584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_conversion_operator_declarator20588 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_conversion_operator_declarator20590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_operator_body20630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_operator_body20651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_constructor_declaration20682 = new BitSet(new long[]{0x0400000000000000L,0x0000000000081000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_constructor_modifiers_in_constructor_declaration20689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_constructor_declarator_in_constructor_declaration20695 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_constructor_body_in_constructor_declaration20699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_modifier_in_constructor_modifiers20736 = new BitSet(new long[]{0x0400000000000002L,0x0000000000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_PUBLIC_in_constructor_modifier20762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_constructor_modifier20811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_constructor_modifier20855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_constructor_modifier20900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_constructor_modifier20946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_modifier_unsafe_in_constructor_modifier20995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_constructor_declarator21022 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_constructor_declarator21024 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_constructor_declarator21029 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_constructor_declarator21033 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_constructor_initializer_in_constructor_declarator21038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_constructor_initializer21070 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_BASE_in_constructor_initializer21072 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_constructor_initializer21074 = new BitSet(new long[]{0x9000106804715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_list_in_constructor_initializer21079 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_constructor_initializer21083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_constructor_initializer21101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_THIS_in_constructor_initializer21103 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_constructor_initializer21105 = new BitSet(new long[]{0x9000106804715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_list_in_constructor_initializer21107 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_constructor_initializer21110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_constructor_body21140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_constructor_body21163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_static_constructor_declaration21196 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_static_constructor_modifiers_in_static_constructor_declaration21202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_static_constructor_declaration21204 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_static_constructor_declaration21206 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_static_constructor_declaration21208 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_static_constructor_body_in_static_constructor_declaration21212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_constructor_modifiers_unsafe_in_static_constructor_modifiers21252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_static_constructor_body21282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_static_constructor_body21306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_destructor_declaration_unsafe_in_destructor_declaration21341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_destructor_body21367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_destructor_body21390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_body21424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_body21442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_struct_declaration21468 = new BitSet(new long[]{0x0000000000000000L,0x0000001000081000L,0x0080000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_struct_modifiers_in_struct_declaration21471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0080000000000000L});
    public static final BitSet FOLLOW_partial_contextual_keyword_in_struct_declaration21474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STRUCT_in_struct_declaration21477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_struct_declaration21479 = new BitSet(new long[]{0x0000000008000000L,0x0000080040001000L});
    public static final BitSet FOLLOW_type_parameter_list_in_struct_declaration21481 = new BitSet(new long[]{0x0000000008000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_struct_interfaces_in_struct_declaration21484 = new BitSet(new long[]{0x0000000000000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_struct_declaration21487 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_struct_body_in_struct_declaration21490 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_struct_declaration21492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_modifier_in_struct_modifiers21509 = new BitSet(new long[]{0x0000000000000002L,0x0000001000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_NEW_in_struct_modifier21535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_struct_modifier21582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_struct_modifier21624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_struct_modifier21663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_struct_modifier21703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_modifier_unsafe_in_struct_modifier21746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_struct_interfaces21774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_interface_type_list_in_struct_interfaces21776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_struct_body21789 = new BitSet(new long[]{0xC780104821914010L,0x00001410200D5000L,0x00B1CC0800000710L,0x000000001CC00180L});
    public static final BitSet FOLLOW_struct_member_declarations_in_struct_body21791 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_struct_body21794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_member_declaration_in_struct_member_declarations21807 = new BitSet(new long[]{0xC780104820914012L,0x00001410200D5000L,0x00B1CC0800000710L,0x000000001CC00180L});
    public static final BitSet FOLLOW_struct_member_declaration_in_struct_member_declarations21811 = new BitSet(new long[]{0xC780104820914012L,0x00001410200D5000L,0x00B1CC0800000710L,0x000000001CC00180L});
    public static final BitSet FOLLOW_attributes_in_struct_member_declaration21827 = new BitSet(new long[]{0xC780104820914010L,0x00000410200D5000L,0x00B1CC0800000710L,0x000000001CC00180L});
    public static final BitSet FOLLOW_all_member_modifiers_in_struct_member_declaration21830 = new BitSet(new long[]{0xC380104820914000L,0x0000040020055000L,0x00A1C40000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_common_member_declaration_in_struct_member_declaration21837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIXED_in_struct_member_declaration21843 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_buffer_element_type_in_struct_member_declaration21845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_fixed_size_buffer_declarators_in_struct_member_declaration21847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_struct_member_declaration21849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_base_type_in_array_type21873 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_array_type_Chld_in_array_type21878 = new BitSet(new long[]{0x0000000000000002L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_STAR_in_array_type_Chld21908 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_array_type_Chld21914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERR_in_array_type_Chld21935 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L});
    public static final BitSet FOLLOW_rank_specifier_in_array_type_Chld21941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_base_type_in_non_array_type21973 = new BitSet(new long[]{0x0000000000000002L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_non_array_type_Chld_in_non_array_type21978 = new BitSet(new long[]{0x0000000000000002L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_non_array_type_Chld22009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERR_in_non_array_type_Chld22022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_non_array_type_Chld22035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_specifier_in_rank_specifiers22066 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_rank_specifier22095 = new BitSet(new long[]{0x0000000012000000L});
    public static final BitSet FOLLOW_dim_separators_in_rank_specifier22100 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_rank_specifier22104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_dim_separators22126 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_dim_separators_Chld_in_dim_separators22131 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_dim_separators_Chld22156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_array_initializer22188 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_array_initializer22190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_array_initializer22206 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_variable_initializer_list_in_array_initializer22210 = new BitSet(new long[]{0x0000000011000000L});
    public static final BitSet FOLLOW_COMMA_in_array_initializer22212 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_array_initializer22215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_initializer_in_variable_initializer_list22241 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_variable_initializer_list_Chld_in_variable_initializer_list22246 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_variable_initializer_list_Chld22274 = new BitSet(new long[]{0x9000106800715820L,0x00882C9420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_variable_initializer_in_variable_initializer_list_Chld22279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_declaration22305 = new BitSet(new long[]{0x0000000000000000L,0x00000010000C1000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_interface_modifiers_in_interface_declaration22312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000041000L});
    public static final BitSet FOLLOW_partial_contextual_keyword_in_interface_declaration22319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_INTERFACE_in_interface_declaration22323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_declaration22327 = new BitSet(new long[]{0x0000000008000000L,0x0000080040001000L});
    public static final BitSet FOLLOW_variant_type_parameter_list_in_interface_declaration22332 = new BitSet(new long[]{0x0000000008000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_interface_base_in_interface_declaration22339 = new BitSet(new long[]{0x0000000000000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_declaration22346 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_interface_body_in_interface_declaration22352 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_declaration22357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_modifier_in_interface_modifiers22416 = new BitSet(new long[]{0x0000000000000002L,0x0000001000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_NEW_in_interface_modifier22442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_interface_modifier22492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_interface_modifier22537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_interface_modifier22579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_interface_modifier22622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_modifier_unsafe_in_interface_modifier22668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_variant_type_parameter_list22695 = new BitSet(new long[]{0x0000000000000000L,0x0000100000009000L,0x0000000000000008L});
    public static final BitSet FOLLOW_variant_type_parameters_in_variant_type_parameter_list22699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_variant_type_parameter_list22701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_variant_type_parameters22723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000009000L,0x0000000000000008L});
    public static final BitSet FOLLOW_variance_annotation_in_variant_type_parameters22726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_parameter_in_variant_type_parameters22729 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_variant_type_parameters22733 = new BitSet(new long[]{0x0000000000000000L,0x0000100000009000L,0x0000000000000008L});
    public static final BitSet FOLLOW_attributes_in_variant_type_parameters22736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000009000L,0x0000000000000008L});
    public static final BitSet FOLLOW_variance_annotation_in_variant_type_parameters22740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_parameter_in_variant_type_parameters22744 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_IN_in_variance_annotation22762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_in_variance_annotation22785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_interface_base22814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_interface_type_list_in_interface_base22818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_interface_body22840 = new BitSet(new long[]{0x8100100801114000L,0x0000141020011000L,0x0021C40000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_interface_member_declarations_in_interface_body22845 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_interface_body22849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_member_declaration_in_interface_member_declarations22874 = new BitSet(new long[]{0x8100100800114002L,0x0000141020011000L,0x0021C40000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_comments_in_interface_member_declaration22906 = new BitSet(new long[]{0x8100100800114000L,0x0000141020011000L,0x0021C40000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_attributes_in_interface_member_declaration22913 = new BitSet(new long[]{0x8100100800114000L,0x0000041020011000L,0x0021C40000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_comments_in_interface_member_declaration22920 = new BitSet(new long[]{0x8100100800114000L,0x0000041020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_NEW_in_interface_member_declaration22927 = new BitSet(new long[]{0x8100100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_interface_member_declaration_Chld_in_interface_member_declaration22933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interface_member_declaration_Chld22976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_interface_member_declaration_sub_Chld_in_interface_member_declaration_Chld22981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_interface_member_declaration_Chld23001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_member_declaration_Chld23003 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_interface_member_declaration_Chld23008 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_interface_member_declaration_Chld23012 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_member_declaration_Chld23017 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_interface_member_declaration_Chld23021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000100000000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_member_declaration_Chld23026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_member_declaration_Chld23030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENT_in_interface_member_declaration_Chld23058 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_interface_member_declaration_Chld23062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_member_declaration_Chld23064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_member_declaration_Chld23066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_member_declaration_sub_Chld23098 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_interface_member_declaration_sub_Chld23103 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_interface_member_declaration_sub_Chld23107 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_member_declaration_sub_Chld23112 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_interface_member_declaration_sub_Chld23116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000100000000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_member_declaration_sub_Chld23121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_member_declaration_sub_Chld23125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_member_declaration_sub_Chld23153 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_interface_member_declaration_sub_Chld23155 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_interface_accessors_in_interface_member_declaration_sub_Chld23159 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_interface_member_declaration_sub_Chld23161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_interface_member_declaration_sub_Chld23181 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_interface_member_declaration_sub_Chld23183 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_member_declaration_sub_Chld23187 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_interface_member_declaration_sub_Chld23189 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_interface_member_declaration_sub_Chld23191 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_interface_accessors_in_interface_member_declaration_sub_Chld23195 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_interface_member_declaration_sub_Chld23197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_method_declaration23228 = new BitSet(new long[]{0x8000100800114000L,0x0000041020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_NEW_in_interface_method_declaration23235 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_return_type_in_interface_method_declaration23241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_method_declaration23243 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_interface_method_declaration23248 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_interface_method_declaration23252 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_method_declaration23257 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_interface_method_declaration23261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000100000000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration23266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_method_declaration23270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_property_declaration23319 = new BitSet(new long[]{0x8000100800114000L,0x0000041020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_NEW_in_interface_property_declaration23326 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_interface_property_declaration23332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_property_declaration23334 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_interface_property_declaration23336 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_interface_accessors_in_interface_property_declaration23340 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_interface_property_declaration23342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_accessors23387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_get_contextual_keyword_in_interface_accessors23397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_accessors23399 = new BitSet(new long[]{0x0000000000000002L,0x0000100000001000L});
    public static final BitSet FOLLOW_attributes_in_interface_accessors23402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_set_contextual_keyword_in_interface_accessors23405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_accessors23407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_contextual_keyword_in_interface_accessors23417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_accessors23419 = new BitSet(new long[]{0x0000000000000002L,0x0000100000001000L});
    public static final BitSet FOLLOW_attributes_in_interface_accessors23422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_get_contextual_keyword_in_interface_accessors23425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_accessors23427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_event_declaration23464 = new BitSet(new long[]{0x0100000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_NEW_in_interface_event_declaration23471 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_EVENT_in_interface_event_declaration23475 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_interface_event_declaration23479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_event_declaration23481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_event_declaration23483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_indexer_declaration23520 = new BitSet(new long[]{0x8000100800114000L,0x0000041020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_NEW_in_interface_indexer_declaration23527 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_interface_indexer_declaration23533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_THIS_in_interface_indexer_declaration23535 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_interface_indexer_declaration23537 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_indexer_declaration23541 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_interface_indexer_declaration23543 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_interface_indexer_declaration23545 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_interface_accessors_in_interface_indexer_declaration23549 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_interface_indexer_declaration23551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_enum_declaration23592 = new BitSet(new long[]{0x0080000000000000L,0x0000001000080000L,0x0000000000000700L});
    public static final BitSet FOLLOW_enum_modifiers_in_enum_declaration23597 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ENUM_in_enum_declaration23600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enum_declaration23602 = new BitSet(new long[]{0x0000000008000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_enum_base_in_enum_declaration23606 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_enum_body_in_enum_declaration23611 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_enum_declaration23613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_enum_base23646 = new BitSet(new long[]{0x0000000000110000L,0x0000000020010000L,0x0000440000000000L,0x0000000000800180L});
    public static final BitSet FOLLOW_integral_type_in_enum_base23650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_enum_body23673 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_enum_body23675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_enum_body23681 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_enum_member_declarations_in_enum_body23685 = new BitSet(new long[]{0x0000000011000000L});
    public static final BitSet FOLLOW_COMMA_in_enum_body23687 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_enum_body23690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_modifier_in_enum_modifiers23715 = new BitSet(new long[]{0x0000000000000002L,0x0000001000080000L,0x0000000000000700L});
    public static final BitSet FOLLOW_NEW_in_enum_modifier23741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_enum_modifier23769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_enum_modifier23792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_enum_modifier23812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_enum_modifier23833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations23864 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_enum_member_declarations23868 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations23873 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_attributes_in_enum_member_declaration23905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enum_member_declaration23908 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_enum_member_declaration23911 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_constant_expression_in_enum_member_declaration23915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_delegate_declaration23945 = new BitSet(new long[]{0x0000004000000000L,0x0000001000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_delegate_modifiers_in_delegate_declaration23948 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_DELEGATE_in_delegate_declaration23951 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_return_type_in_delegate_declaration23953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_delegate_declaration23955 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_variant_type_parameter_list_in_delegate_declaration23957 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_delegate_declaration23966 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_delegate_declaration23968 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_delegate_declaration23971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000100000000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration23973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_delegate_declaration23976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_modifier_in_delegate_modifiers23989 = new BitSet(new long[]{0x0000000000000002L,0x0000001000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_delegate_modifier_in_delegate_modifiers23993 = new BitSet(new long[]{0x0000000000000002L,0x0000001000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_NEW_in_delegate_modifier24011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_delegate_modifier24060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_delegate_modifier24104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_delegate_modifier24145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_delegate_modifier24187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_modifier_unsafe_in_delegate_modifier24232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_attribute_sections_in_global_attributes24267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_attribute_section_in_global_attribute_sections24292 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_global_attribute_section24320 = new BitSet(new long[]{0xF7A0146860DDD050L,0x00004498302DF043L,0x01B64C6800000738L,0x000000009DC003BBL});
    public static final BitSet FOLLOW_global_attribute_target_specifier_in_global_attribute_section24322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_attribute_list_in_global_attribute_section24324 = new BitSet(new long[]{0x0000000012000000L});
    public static final BitSet FOLLOW_COMMA_in_global_attribute_section24326 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_global_attribute_section24329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_attribute_target_in_global_attribute_target_specifier24341 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_global_attribute_target_specifier24343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyword_in_global_attribute_target24360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_global_attribute_target24382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_sections_in_attributes24416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_section_in_attribute_sections24447 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_attribute_section24475 = new BitSet(new long[]{0xF7A0146860DDD050L,0x00004498302DF043L,0x01B64C6800000738L,0x000000009DC003BBL});
    public static final BitSet FOLLOW_attribute_target_specifier_in_attribute_section24480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_attribute_list_in_attribute_section24486 = new BitSet(new long[]{0x0000000012000000L});
    public static final BitSet FOLLOW_COMMA_in_attribute_section24491 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_attribute_section24495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_target_in_attribute_target_specifier24529 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_attribute_target_specifier24531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyword_in_attribute_target24554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_attribute_target24575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_in_attribute_list24607 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_attribute_list_Chld_in_attribute_list24612 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_attribute_list_Chld24640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_attribute_in_attribute_list_Chld24644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_name_in_attribute24670 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_attribute_arguments_in_attribute24675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_attribute_name24705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_attribute_arguments24740 = new BitSet(new long[]{0x9000106804715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_positional_argument_list_in_attribute_arguments24745 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_attribute_arguments24749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_positional_argument_in_positional_argument_list24775 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_positional_argument_list_Chld_in_positional_argument_list24780 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_positional_argument_list_Chld24808 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_positional_argument_in_positional_argument_list_Chld24813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_argument_expression_in_positional_argument24839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_named_argument_in_named_argument_list24861 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_named_argument_list24865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_named_argument_in_named_argument_list24868 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_named_argument24884 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_named_argument24886 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_attribute_argument_expression_in_named_argument24888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_attribute_argument_expression24903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_class_modifier_unsafe24928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_struct_modifier_unsafe24953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_interface_modifier_unsafe24976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_delegate_modifier_unsafe24999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_field_modifier_unsafe25022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_method_modifier_unsafe25046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_property_modifier_unsafe25071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_event_modifier_unsafe25096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_indexer_modifier_unsafe25119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_operator_modifier_unsafe25142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_constructor_modifier_unsafe25165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_destructor_declaration_unsafe25191 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400004L});
    public static final BitSet FOLLOW_EXTERN_in_destructor_declaration_unsafe25200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400004L});
    public static final BitSet FOLLOW_UNSAFE_in_destructor_declaration_unsafe25203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_UNSAFE_in_destructor_declaration_unsafe25212 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_EXTERN_in_destructor_declaration_unsafe25214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_TILDE_in_destructor_declaration_unsafe25228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_destructor_declaration_unsafe25230 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_destructor_declaration_unsafe25232 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_destructor_declaration_unsafe25234 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_destructor_body_in_destructor_declaration_unsafe25236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe25254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe25278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe25301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe25303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe25321 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe25323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe25341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe25345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe25361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25363 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe25365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25381 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe25383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe25402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25418 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe25420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe25422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_static_constructor_modifiers_unsafe25438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_UNSAFE_in_static_constructor_modifiers_unsafe25440 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_EXTERN_in_static_constructor_modifiers_unsafe25442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unsafe_statement_in_embedded_statement_unsafe25470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_statement_in_embedded_statement_unsafe25486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_unsafe_statement25508 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_block_in_unsafe_statement25512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pointer_type_in_type_unsafe25534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_type_in_pointer_type25570 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_class_type_in_pointer_type25574 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_VOID_in_pointer_type25578 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_pointer_type25589 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_INTERR_in_pointer_type25597 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_STAR_in_pointer_type25601 = new BitSet(new long[]{0x0000000000000000L,0x0000100000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_STAR_in_pointer_type25607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_unmanaged_type25646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_in_primary_no_array_creation_expression_unsafe25672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pointer_indirection_expression_in_unary_expression_unsafe25698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_addressof_expression_in_unary_expression_unsafe25714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_pointer_indirection_expression25736 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_pointer_indirection_expression25740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMP_in_addressof_expression25768 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_unary_expression_in_addressof_expression25772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZEOF_in_sizeof_expression25794 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_sizeof_expression25796 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_unmanaged_type_in_sizeof_expression25800 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_sizeof_expression25802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIXED_in_fixed_statement25824 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_fixed_statement25826 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_pointer_type_in_fixed_statement25830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_fixed_pointer_declarators_in_fixed_statement25834 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_fixed_statement25836 = new BitSet(new long[]{0xD00014684071D820L,0x00882C9430033043L,0x016A545000000080L,0x0000000081C003BFL});
    public static final BitSet FOLLOW_embedded_statement_in_fixed_statement25840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators25872 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_fixed_pointer_declarators_Chld_in_fixed_pointer_declarators25877 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_fixed_pointer_declarators_Chld25905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators_Chld25910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_fixed_pointer_declarator25934 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_fixed_pointer_declarator25936 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator25940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMP_in_fixed_pointer_initializer25976 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_variable_reference_in_fixed_pointer_initializer25980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_fixed_pointer_initializer25998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_size_buffer_declaration_in_struct_member_declaration_unsafe26024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_fixed_size_buffer_declaration26049 = new BitSet(new long[]{0x4000000000000000L,0x0000001000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_fixed_size_buffer_modifiers_in_fixed_size_buffer_declaration26056 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_FIXED_in_fixed_size_buffer_declaration26060 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_buffer_element_type_in_fixed_size_buffer_declaration26064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_fixed_size_buffer_declarators_in_fixed_size_buffer_declaration26068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_fixed_size_buffer_declaration26070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_size_buffer_modifier_in_fixed_size_buffer_modifiers26107 = new BitSet(new long[]{0x0000000000000002L,0x0000001000080000L,0x0000000000000700L,0x0000000000400000L});
    public static final BitSet FOLLOW_NEW_in_fixed_size_buffer_modifier26133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_fixed_size_buffer_modifier26161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_fixed_size_buffer_modifier26184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_fixed_size_buffer_modifier26204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_fixed_size_buffer_modifier26225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_fixed_size_buffer_modifier26247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_buffer_element_type26281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_size_buffer_declarator_in_fixed_size_buffer_declarators26306 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_fixed_size_buffer_declarator26330 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_fixed_size_buffer_declarator26332 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_constant_expression_in_fixed_size_buffer_declarator26336 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_fixed_size_buffer_declarator26338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stackalloc_initializer_in_local_variable_initializer_unsafe26368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STACKALLOC_in_stackalloc_initializer26390 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_unmanaged_type_in_stackalloc_initializer26394 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_stackalloc_initializer26396 = new BitSet(new long[]{0x9000106800715820L,0x0088249420031000L,0x006A441000000080L,0x00000000008003ADL});
    public static final BitSet FOLLOW_expression_in_stackalloc_initializer26400 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_stackalloc_initializer26402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_from_contextual_keyword26440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_let_contextual_keyword26464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_where_contextual_keyword26489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_join_contextual_keyword26513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_on_contextual_keyword26538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_equals_contextual_keyword26566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_into_contextual_keyword26591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_orderby_contextual_keyword26616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_ascending_contextual_keyword26642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_descending_contextual_keyword26668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_select_contextual_keyword26694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_group_contextual_keyword26725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_by_contextual_keyword26754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_partial_contextual_keyword26783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_alias_contextual_keyword26807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_yield_contextual_keyword26834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_get_contextual_keyword26864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_set_contextual_keyword26891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_add_contextual_keyword26915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_remove_contextual_keyword26946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_dynamic_contextual_keyword26975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_arglist27004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_right_arrow27028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_right_arrow27032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_right_shift27052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_GT_in_right_shift27056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_right_shift_assignment27086 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_OP_GE_in_right_shift_assignment27090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_literal_in_literal27121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_LITERAL_in_literal27137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REAL_LITERAL_in_literal27153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARACTER_LITERAL_in_literal27169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_literal27185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_literal27201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_boolean_literal27233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_boolean_literal27249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_keyword27275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_keyword27297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BASE_in_keyword27322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_keyword27345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_keyword27368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTE_in_keyword27390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_keyword27413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_in_keyword27436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_in_keyword27458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHECKED_in_keyword27481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_keyword27501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_in_keyword27523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_keyword27545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_keyword27564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_keyword27584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELEGATE_in_keyword27604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_keyword27623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_keyword27648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_keyword27669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_in_keyword27692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENT_in_keyword27715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPLICIT_in_keyword27737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_keyword27756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_keyword27777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_keyword27799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIXED_in_keyword27819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_keyword27841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_keyword27863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_keyword27887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GOTO_in_keyword27907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_keyword27930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLICIT_in_keyword27955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_in_keyword27974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_keyword27999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_in_keyword28023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_keyword28041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_keyword28060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOCK_in_keyword28085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_keyword28108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_keyword28131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_keyword28149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_keyword28173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_in_keyword28196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPERATOR_in_keyword28217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_in_keyword28236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_keyword28260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARAMS_in_keyword28279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_keyword28300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_keyword28320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_keyword28338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_READONLY_in_keyword28359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_in_keyword28378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_keyword28402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SBYTE_in_keyword28423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_keyword28445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHORT_in_keyword28466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZEOF_in_keyword28488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STACKALLOC_in_keyword28509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_keyword28526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_keyword28547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_in_keyword28568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_keyword28589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_keyword28610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_keyword28633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_keyword28655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_keyword28678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_keyword28702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UINT_in_keyword28723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ULONG_in_keyword28746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNCHECKED_in_keyword28768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_keyword28786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USHORT_in_keyword28807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_keyword28828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIRTUAL_in_keyword28850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_keyword28870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOLATILE_in_keyword28893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keyword28912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_class_name_definition28941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_class_name_definition28945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_name_definition_in_class_definition28970 = new BitSet(new long[]{0x0000000008000000L,0x0000080040001000L});
    public static final BitSet FOLLOW_type_parameter_list_in_class_definition28972 = new BitSet(new long[]{0x0000000008000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_class_base_in_class_definition28978 = new BitSet(new long[]{0x0000000000000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_class_definition28982 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_class_body_in_class_definition28993 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001900000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_class_definition28998 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_class_definition29005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_in_struct_definition29048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_struct_definition29052 = new BitSet(new long[]{0x0000000008000000L,0x0000080040001000L});
    public static final BitSet FOLLOW_type_parameter_list_in_struct_definition29057 = new BitSet(new long[]{0x0000000008000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_struct_interfaces_in_struct_definition29064 = new BitSet(new long[]{0x0000000000000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_struct_definition29071 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_struct_body_in_struct_definition29078 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_struct_definition29084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_in_interface_definition29131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_definition29135 = new BitSet(new long[]{0x0000000008000000L,0x0000080040001000L});
    public static final BitSet FOLLOW_variant_type_parameter_list_in_interface_definition29140 = new BitSet(new long[]{0x0000000008000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_interface_base_in_interface_definition29147 = new BitSet(new long[]{0x0000000000000000L,0x0000080000001000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_definition29154 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_interface_body_in_interface_definition29160 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_definition29165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_in_enum_definition29216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enum_definition29218 = new BitSet(new long[]{0x0000000008000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_enum_base_in_enum_definition29223 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_enum_body_in_enum_definition29229 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_enum_definition29233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELEGATE_in_delegate_definition29271 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_return_type_in_delegate_definition29275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_delegate_definition29277 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_variant_type_parameter_list_in_delegate_definition29282 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_delegate_definition29286 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_delegate_definition29291 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_delegate_definition29295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000100000000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_delegate_definition29300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_delegate_definition29304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENT_in_event_declaration229345 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_event_declaration229349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_event_declaration2_Chld_in_event_declaration229355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declarators_in_event_declaration2_Chld29389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_event_declaration2_Chld29391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_event_declaration2_Chld29408 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_event_declaration2_Chld29410 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_event_accessor_declarations_in_event_declaration2_Chld29414 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_event_declaration2_Chld29416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declarators_in_field_declaration229450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration229452 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_field_declaration229457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_property_declaration229490 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_property_declaration229492 = new BitSet(new long[]{0x0000000000000000L,0x0000100000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_accessor_declarations_in_property_declaration229496 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_property_declaration229498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_in_constant_declaration229527 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_constant_declaration229531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_constant_declarators_in_constant_declaration229535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_constant_declaration229537 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_comments_in_constant_declaration229542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_indexer_declaration229577 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_indexer_declaration229579 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_indexer_declaration229583 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_indexer_declaration229585 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_indexer_declaration229587 = new BitSet(new long[]{0x0000000000000000L,0x0000100000081000L,0x0000000000000300L});
    public static final BitSet FOLLOW_accessor_declarations_in_indexer_declaration229591 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_indexer_declaration229593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_destructor_definition29619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_destructor_definition29621 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_destructor_definition29623 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_destructor_definition29625 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_destructor_body_in_destructor_definition29627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_constructor_declaration229644 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_constructor_declaration229646 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_constructor_declaration229651 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_constructor_declaration229655 = new BitSet(new long[]{0x0000000008000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_constructor_initializer_in_constructor_declaration229660 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_body_in_constructor_declaration229666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comment_in_comments29708 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_SINGLE_LINE_COMMENT_in_comment29735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SINGLE_LINE_DOC_COMMENT_in_comment29752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_member_name_in_method_declaration229782 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_method_declaration229787 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_method_declaration229792 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_method_declaration229797 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_method_declaration229801 = new BitSet(new long[]{0x0000000000000000L,0x0000080000001000L,0x0001900000000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_method_declaration229812 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0001900000000000L});
    public static final BitSet FOLLOW_comments_in_method_declaration229819 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_method_body_in_method_declaration229825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_member_name2_in_method_member_name29877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_method_member_name229904 = new BitSet(new long[]{0x0000080000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_method_member_name2_chld_in_method_member_name229909 = new BitSet(new long[]{0x0000080000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_method_member_name229933 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_DOUBLE_COLON_in_method_member_name229935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_method_member_name229939 = new BitSet(new long[]{0x0000080000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_method_member_name2_chld_in_method_member_name229944 = new BitSet(new long[]{0x0000080000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_method_member_name2_chld29979 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_method_member_name2_chld29981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_method_member_name2_chld29985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPERATOR_in_operator_declaration230014 = new BitSet(new long[]{0x1000020000022820L,0x23E8000440000080L,0x00080000000000C0L,0x000000000000000CL});
    public static final BitSet FOLLOW_overloadable_operator_in_operator_declaration230018 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_operator_declaration230020 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_operator_declaration230024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_operator_declaration230028 = new BitSet(new long[]{0x0000000014000000L});
    public static final BitSet FOLLOW_COMMA_in_operator_declaration230031 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_operator_declaration230035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_operator_declaration230039 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_operator_declaration230043 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_operator_body_in_operator_declaration230047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_method_declaration230096 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_interface_method_declaration230101 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_interface_method_declaration230105 = new BitSet(new long[]{0x8000100804114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_method_declaration230109 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_interface_method_declaration230112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000100000000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration230117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_method_declaration230121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_property_declaration230158 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_interface_property_declaration230160 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_interface_accessors_in_interface_property_declaration230164 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_interface_property_declaration230166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENT_in_interface_event_declaration230192 = new BitSet(new long[]{0x8000100800114000L,0x0000040020011000L,0x0020440000000000L,0x0000000008800180L});
    public static final BitSet FOLLOW_type_in_interface_event_declaration230196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_event_declaration230198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_event_declaration230200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_interface_indexer_declaration230229 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_interface_indexer_declaration230231 = new BitSet(new long[]{0x8000100800114000L,0x0000140020011000L,0x0020442000000028L,0x0000000008800181L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_indexer_declaration230235 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_interface_indexer_declaration230237 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_interface_indexer_declaration230239 = new BitSet(new long[]{0x0000000000000000L,0x0000100000001000L});
    public static final BitSet FOLLOW_interface_accessors_in_interface_indexer_declaration230243 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_interface_indexer_declaration230245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_access230276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access230280 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_member_access230284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_method_invocation230313 = new BitSet(new long[]{0x9000106804715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_list_in_method_invocation230318 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_method_invocation230322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_object_creation_expression230347 = new BitSet(new long[]{0x9000106804715820L,0x0088249420031000L,0x006A443000000088L,0x00000000008003ADL});
    public static final BitSet FOLLOW_argument_list_in_object_creation_expression230352 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_object_creation_expression230356 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression230361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_argument_list_in_synpred1_CSharp335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERR_in_synpred2_CSharp430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_specifier_in_synpred3_CSharp473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_specifier_in_synpred4_CSharp1029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_type_in_synpred5_CSharp3445 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_synpred5_CSharp3447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unbound_type_name_in_synpred6_CSharp3816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scan_for_cast_generic_precedence_in_synpred7_CSharp4104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_synpred7_CSharp4108 = new BitSet(new long[]{0x8000100800114000L,0x0000040020010000L,0x0020440000000000L,0x0000000000800180L});
    public static final BitSet FOLLOW_predefined_type_in_synpred7_CSharp4110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERR_in_synpred8_CSharp7373 = new BitSet(new long[]{0x0000000004000000L,0x4001000000100000L});
    public static final BitSet FOLLOW_is_disambiguation_token_in_synpred8_CSharp7375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred9_CSharp8677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred9_CSharp8679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IN_in_synpred9_CSharp8681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_into_contextual_keyword_in_synpred10_CSharp8751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_in_synpred11_CSharp9776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expression_in_synpred12_CSharp9821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_expression_in_synpred13_CSharp9845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_labeled_statement_in_synpred14_CSharp9945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_statement_in_synpred15_CSharp9969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_synpred16_CSharp10832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_synpred17_CSharp11303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_synpred18_CSharp12214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_attribute_section_in_synpred19_CSharp12316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_type_in_synpred20_CSharp14876 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred20_CSharp14878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_THIS_in_synpred20_CSharp14880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred21_CSharp14912 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_synpred21_CSharp14914 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_synpred21_CSharp14917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred22_CSharp14945 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_synpred22_CSharp14947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_synpred23_CSharp15975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_PARAMS_in_synpred23_CSharp15978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_operator_declarator_in_synpred26_CSharp18939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMP_in_synpred27_CSharp25971 = new BitSet(new long[]{0x0000000000000002L});

}